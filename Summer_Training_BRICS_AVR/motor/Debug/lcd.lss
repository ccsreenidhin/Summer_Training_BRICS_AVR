
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  000028c4  00002938  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000027cc  00000000  00000000  00002970  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001085  00000000  00000000  0000513c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000061c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001c9  00000000  00000000  00006361  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022af  00000000  00000000  0000652a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001267  00000000  00000000  000087d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013c7  00000000  00000000  00009a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000ae08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  0000afc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c9d  00000000  00000000  0000b3ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d4 e0       	ldi	r29, 0x04	; 4
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	e4 ec       	ldi	r30, 0xC4	; 196
      a8:	f8 e2       	ldi	r31, 0x28	; 40
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
      b0:	a6 39       	cpi	r26, 0x96	; 150
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>
      b6:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
      ba:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include<stdio.h>

int main(void)
{
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
      ca:	a9 97       	sbiw	r28, 0x29	; 41
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	0f be       	out	0x3f, r0	; 63
      d4:	cd bf       	out	0x3d, r28	; 61
	int i=0;
      d6:	18 8a       	std	Y+16, r1	; 0x10
      d8:	1f 86       	std	Y+15, r1	; 0x0f
	char A[20]="ssss";
      da:	ce 01       	movw	r24, r28
      dc:	41 96       	adiw	r24, 0x11	; 17
      de:	9e a3       	std	Y+38, r25	; 0x26
      e0:	8d a3       	std	Y+37, r24	; 0x25
      e2:	a9 e7       	ldi	r26, 0x79	; 121
      e4:	b0 e0       	ldi	r27, 0x00	; 0
      e6:	b8 a7       	std	Y+40, r27	; 0x28
      e8:	af a3       	std	Y+39, r26	; 0x27
      ea:	b5 e0       	ldi	r27, 0x05	; 5
      ec:	b9 a7       	std	Y+41, r27	; 0x29
      ee:	ef a1       	ldd	r30, Y+39	; 0x27
      f0:	f8 a5       	ldd	r31, Y+40	; 0x28
      f2:	00 80       	ld	r0, Z
      f4:	8f a1       	ldd	r24, Y+39	; 0x27
      f6:	98 a5       	ldd	r25, Y+40	; 0x28
      f8:	01 96       	adiw	r24, 0x01	; 1
      fa:	98 a7       	std	Y+40, r25	; 0x28
      fc:	8f a3       	std	Y+39, r24	; 0x27
      fe:	ad a1       	ldd	r26, Y+37	; 0x25
     100:	be a1       	ldd	r27, Y+38	; 0x26
     102:	0c 92       	st	X, r0
     104:	ed a1       	ldd	r30, Y+37	; 0x25
     106:	fe a1       	ldd	r31, Y+38	; 0x26
     108:	31 96       	adiw	r30, 0x01	; 1
     10a:	fe a3       	std	Y+38, r31	; 0x26
     10c:	ed a3       	std	Y+37, r30	; 0x25
     10e:	f9 a5       	ldd	r31, Y+41	; 0x29
     110:	f1 50       	subi	r31, 0x01	; 1
     112:	f9 a7       	std	Y+41, r31	; 0x29
     114:	89 a5       	ldd	r24, Y+41	; 0x29
     116:	88 23       	and	r24, r24
     118:	51 f7       	brne	.-44     	; 0xee <main+0x2c>
     11a:	8f e0       	ldi	r24, 0x0F	; 15
     11c:	fe 01       	movw	r30, r28
     11e:	76 96       	adiw	r30, 0x16	; 22
     120:	df 01       	movw	r26, r30
     122:	98 2f       	mov	r25, r24
     124:	1d 92       	st	X+, r1
     126:	9a 95       	dec	r25
     128:	e9 f7       	brne	.-6      	; 0x124 <main+0x62>
LCDinit();
     12a:	0e 94 6e 05 	call	0xadc	; 0xadc <LCDinit>
LCDclr();
     12e:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDclr>
while (1)
     {
	i++;
     132:	8f 85       	ldd	r24, Y+15	; 0x0f
     134:	98 89       	ldd	r25, Y+16	; 0x10
     136:	01 96       	adiw	r24, 0x01	; 1
     138:	98 8b       	std	Y+16, r25	; 0x10
     13a:	8f 87       	std	Y+15, r24	; 0x0f
	 sprintf(A,"Value of i= %d and j= %d",i,i);
     13c:	ad b7       	in	r26, 0x3d	; 61
     13e:	be b7       	in	r27, 0x3e	; 62
     140:	18 97       	sbiw	r26, 0x08	; 8
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	f8 94       	cli
     146:	be bf       	out	0x3e, r27	; 62
     148:	0f be       	out	0x3f, r0	; 63
     14a:	ad bf       	out	0x3d, r26	; 61
     14c:	ed b7       	in	r30, 0x3d	; 61
     14e:	fe b7       	in	r31, 0x3e	; 62
     150:	31 96       	adiw	r30, 0x01	; 1
     152:	ce 01       	movw	r24, r28
     154:	41 96       	adiw	r24, 0x11	; 17
     156:	91 83       	std	Z+1, r25	; 0x01
     158:	80 83       	st	Z, r24
     15a:	80 e6       	ldi	r24, 0x60	; 96
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	93 83       	std	Z+3, r25	; 0x03
     160:	82 83       	std	Z+2, r24	; 0x02
     162:	8f 85       	ldd	r24, Y+15	; 0x0f
     164:	98 89       	ldd	r25, Y+16	; 0x10
     166:	95 83       	std	Z+5, r25	; 0x05
     168:	84 83       	std	Z+4, r24	; 0x04
     16a:	8f 85       	ldd	r24, Y+15	; 0x0f
     16c:	98 89       	ldd	r25, Y+16	; 0x10
     16e:	97 83       	std	Z+7, r25	; 0x07
     170:	86 83       	std	Z+6, r24	; 0x06
     172:	0e 94 bf 11 	call	0x237e	; 0x237e <sprintf>
     176:	ed b7       	in	r30, 0x3d	; 61
     178:	fe b7       	in	r31, 0x3e	; 62
     17a:	38 96       	adiw	r30, 0x08	; 8
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	fe bf       	out	0x3e, r31	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	ed bf       	out	0x3d, r30	; 61
      LCDGotoXY(0,0);
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	60 e0       	ldi	r22, 0x00	; 0
     18c:	70 e0       	ldi	r23, 0x00	; 0
     18e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <LCDGotoXY>
      LCDdisplay(A);
     192:	ce 01       	movw	r24, r28
     194:	41 96       	adiw	r24, 0x11	; 17
     196:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <LCDdisplay>
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	aa e7       	ldi	r26, 0x7A	; 122
     1a0:	b4 e4       	ldi	r27, 0x44	; 68
     1a2:	8b 87       	std	Y+11, r24	; 0x0b
     1a4:	9c 87       	std	Y+12, r25	; 0x0c
     1a6:	ad 87       	std	Y+13, r26	; 0x0d
     1a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     1aa:	6b 85       	ldd	r22, Y+11	; 0x0b
     1ac:	7c 85       	ldd	r23, Y+12	; 0x0c
     1ae:	8d 85       	ldd	r24, Y+13	; 0x0d
     1b0:	9e 85       	ldd	r25, Y+14	; 0x0e
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	4a e7       	ldi	r20, 0x7A	; 122
     1b8:	54 e4       	ldi	r21, 0x44	; 68
     1ba:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     1be:	dc 01       	movw	r26, r24
     1c0:	cb 01       	movw	r24, r22
     1c2:	8f 83       	std	Y+7, r24	; 0x07
     1c4:	98 87       	std	Y+8, r25	; 0x08
     1c6:	a9 87       	std	Y+9, r26	; 0x09
     1c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     1ca:	6f 81       	ldd	r22, Y+7	; 0x07
     1cc:	78 85       	ldd	r23, Y+8	; 0x08
     1ce:	89 85       	ldd	r24, Y+9	; 0x09
     1d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e8       	ldi	r20, 0x80	; 128
     1d8:	5f e3       	ldi	r21, 0x3F	; 63
     1da:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     1de:	88 23       	and	r24, r24
     1e0:	2c f4       	brge	.+10     	; 0x1ec <main+0x12a>
		__ticks = 1;
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	9e 83       	std	Y+6, r25	; 0x06
     1e8:	8d 83       	std	Y+5, r24	; 0x05
     1ea:	3f c0       	rjmp	.+126    	; 0x26a <main+0x1a8>
	else if (__tmp > 65535)
     1ec:	6f 81       	ldd	r22, Y+7	; 0x07
     1ee:	78 85       	ldd	r23, Y+8	; 0x08
     1f0:	89 85       	ldd	r24, Y+9	; 0x09
     1f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	3f ef       	ldi	r19, 0xFF	; 255
     1f8:	4f e7       	ldi	r20, 0x7F	; 127
     1fa:	57 e4       	ldi	r21, 0x47	; 71
     1fc:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     200:	18 16       	cp	r1, r24
     202:	4c f5       	brge	.+82     	; 0x256 <main+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     204:	6b 85       	ldd	r22, Y+11	; 0x0b
     206:	7c 85       	ldd	r23, Y+12	; 0x0c
     208:	8d 85       	ldd	r24, Y+13	; 0x0d
     20a:	9e 85       	ldd	r25, Y+14	; 0x0e
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	40 e2       	ldi	r20, 0x20	; 32
     212:	51 e4       	ldi	r21, 0x41	; 65
     214:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     218:	dc 01       	movw	r26, r24
     21a:	cb 01       	movw	r24, r22
     21c:	bc 01       	movw	r22, r24
     21e:	cd 01       	movw	r24, r26
     220:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     224:	dc 01       	movw	r26, r24
     226:	cb 01       	movw	r24, r22
     228:	9e 83       	std	Y+6, r25	; 0x06
     22a:	8d 83       	std	Y+5, r24	; 0x05
     22c:	0f c0       	rjmp	.+30     	; 0x24c <main+0x18a>
     22e:	84 e6       	ldi	r24, 0x64	; 100
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	9c 83       	std	Y+4, r25	; 0x04
     234:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	9c 81       	ldd	r25, Y+4	; 0x04
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <main+0x178>
     23e:	9c 83       	std	Y+4, r25	; 0x04
     240:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     242:	8d 81       	ldd	r24, Y+5	; 0x05
     244:	9e 81       	ldd	r25, Y+6	; 0x06
     246:	01 97       	sbiw	r24, 0x01	; 1
     248:	9e 83       	std	Y+6, r25	; 0x06
     24a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	8d 81       	ldd	r24, Y+5	; 0x05
     24e:	9e 81       	ldd	r25, Y+6	; 0x06
     250:	00 97       	sbiw	r24, 0x00	; 0
     252:	69 f7       	brne	.-38     	; 0x22e <main+0x16c>
     254:	6e cf       	rjmp	.-292    	; 0x132 <main+0x70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     256:	6f 81       	ldd	r22, Y+7	; 0x07
     258:	78 85       	ldd	r23, Y+8	; 0x08
     25a:	89 85       	ldd	r24, Y+9	; 0x09
     25c:	9a 85       	ldd	r25, Y+10	; 0x0a
     25e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     262:	dc 01       	movw	r26, r24
     264:	cb 01       	movw	r24, r22
     266:	9e 83       	std	Y+6, r25	; 0x06
     268:	8d 83       	std	Y+5, r24	; 0x05
     26a:	8d 81       	ldd	r24, Y+5	; 0x05
     26c:	9e 81       	ldd	r25, Y+6	; 0x06
     26e:	9a 83       	std	Y+2, r25	; 0x02
     270:	89 83       	std	Y+1, r24	; 0x01
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	9a 81       	ldd	r25, Y+2	; 0x02
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <main+0x1b4>
     27a:	9a 83       	std	Y+2, r25	; 0x02
     27c:	89 83       	std	Y+1, r24	; 0x01
     27e:	59 cf       	rjmp	.-334    	; 0x132 <main+0x70>

00000280 <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     280:	df 93       	push	r29
     282:	cf 93       	push	r28
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
     288:	e9 97       	sbiw	r28, 0x39	; 57
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	f8 94       	cli
     28e:	de bf       	out	0x3e, r29	; 62
     290:	0f be       	out	0x3f, r0	; 63
     292:	cd bf       	out	0x3d, r28	; 61
     294:	89 af       	std	Y+57, r24	; 0x39

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     296:	e5 e3       	ldi	r30, 0x35	; 53
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	89 ad       	ldd	r24, Y+57	; 0x39
     29c:	80 7f       	andi	r24, 0xF0	; 240
     29e:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     2a0:	a5 e3       	ldi	r26, 0x35	; 53
     2a2:	b0 e0       	ldi	r27, 0x00	; 0
     2a4:	e5 e3       	ldi	r30, 0x35	; 53
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	80 81       	ld	r24, Z
     2aa:	81 60       	ori	r24, 0x01	; 1
     2ac:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     2ae:	a5 e3       	ldi	r26, 0x35	; 53
     2b0:	b0 e0       	ldi	r27, 0x00	; 0
     2b2:	e5 e3       	ldi	r30, 0x35	; 53
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	84 60       	ori	r24, 0x04	; 4
     2ba:	8c 93       	st	X, r24
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	a0 e8       	ldi	r26, 0x80	; 128
     2c2:	bf e3       	ldi	r27, 0x3F	; 63
     2c4:	8d ab       	std	Y+53, r24	; 0x35
     2c6:	9e ab       	std	Y+54, r25	; 0x36
     2c8:	af ab       	std	Y+55, r26	; 0x37
     2ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2cc:	6d a9       	ldd	r22, Y+53	; 0x35
     2ce:	7e a9       	ldd	r23, Y+54	; 0x36
     2d0:	8f a9       	ldd	r24, Y+55	; 0x37
     2d2:	98 ad       	ldd	r25, Y+56	; 0x38
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	4a e7       	ldi	r20, 0x7A	; 122
     2da:	54 e4       	ldi	r21, 0x44	; 68
     2dc:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     2e0:	dc 01       	movw	r26, r24
     2e2:	cb 01       	movw	r24, r22
     2e4:	89 ab       	std	Y+49, r24	; 0x31
     2e6:	9a ab       	std	Y+50, r25	; 0x32
     2e8:	ab ab       	std	Y+51, r26	; 0x33
     2ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     2ec:	69 a9       	ldd	r22, Y+49	; 0x31
     2ee:	7a a9       	ldd	r23, Y+50	; 0x32
     2f0:	8b a9       	ldd	r24, Y+51	; 0x33
     2f2:	9c a9       	ldd	r25, Y+52	; 0x34
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e8       	ldi	r20, 0x80	; 128
     2fa:	5f e3       	ldi	r21, 0x3F	; 63
     2fc:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     300:	88 23       	and	r24, r24
     302:	2c f4       	brge	.+10     	; 0x30e <LCDsendChar+0x8e>
		__ticks = 1;
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	98 ab       	std	Y+48, r25	; 0x30
     30a:	8f a7       	std	Y+47, r24	; 0x2f
     30c:	3f c0       	rjmp	.+126    	; 0x38c <LCDsendChar+0x10c>
	else if (__tmp > 65535)
     30e:	69 a9       	ldd	r22, Y+49	; 0x31
     310:	7a a9       	ldd	r23, Y+50	; 0x32
     312:	8b a9       	ldd	r24, Y+51	; 0x33
     314:	9c a9       	ldd	r25, Y+52	; 0x34
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	3f ef       	ldi	r19, 0xFF	; 255
     31a:	4f e7       	ldi	r20, 0x7F	; 127
     31c:	57 e4       	ldi	r21, 0x47	; 71
     31e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     322:	18 16       	cp	r1, r24
     324:	4c f5       	brge	.+82     	; 0x378 <LCDsendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     326:	6d a9       	ldd	r22, Y+53	; 0x35
     328:	7e a9       	ldd	r23, Y+54	; 0x36
     32a:	8f a9       	ldd	r24, Y+55	; 0x37
     32c:	98 ad       	ldd	r25, Y+56	; 0x38
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e2       	ldi	r20, 0x20	; 32
     334:	51 e4       	ldi	r21, 0x41	; 65
     336:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     33a:	dc 01       	movw	r26, r24
     33c:	cb 01       	movw	r24, r22
     33e:	bc 01       	movw	r22, r24
     340:	cd 01       	movw	r24, r26
     342:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     346:	dc 01       	movw	r26, r24
     348:	cb 01       	movw	r24, r22
     34a:	98 ab       	std	Y+48, r25	; 0x30
     34c:	8f a7       	std	Y+47, r24	; 0x2f
     34e:	0f c0       	rjmp	.+30     	; 0x36e <LCDsendChar+0xee>
     350:	84 e6       	ldi	r24, 0x64	; 100
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	9e a7       	std	Y+46, r25	; 0x2e
     356:	8d a7       	std	Y+45, r24	; 0x2d
     358:	8d a5       	ldd	r24, Y+45	; 0x2d
     35a:	9e a5       	ldd	r25, Y+46	; 0x2e
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <LCDsendChar+0xdc>
     360:	9e a7       	std	Y+46, r25	; 0x2e
     362:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     364:	8f a5       	ldd	r24, Y+47	; 0x2f
     366:	98 a9       	ldd	r25, Y+48	; 0x30
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	98 ab       	std	Y+48, r25	; 0x30
     36c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     36e:	8f a5       	ldd	r24, Y+47	; 0x2f
     370:	98 a9       	ldd	r25, Y+48	; 0x30
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	69 f7       	brne	.-38     	; 0x350 <LCDsendChar+0xd0>
     376:	14 c0       	rjmp	.+40     	; 0x3a0 <LCDsendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     378:	69 a9       	ldd	r22, Y+49	; 0x31
     37a:	7a a9       	ldd	r23, Y+50	; 0x32
     37c:	8b a9       	ldd	r24, Y+51	; 0x33
     37e:	9c a9       	ldd	r25, Y+52	; 0x34
     380:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     384:	dc 01       	movw	r26, r24
     386:	cb 01       	movw	r24, r22
     388:	98 ab       	std	Y+48, r25	; 0x30
     38a:	8f a7       	std	Y+47, r24	; 0x2f
     38c:	8f a5       	ldd	r24, Y+47	; 0x2f
     38e:	98 a9       	ldd	r25, Y+48	; 0x30
     390:	9c a7       	std	Y+44, r25	; 0x2c
     392:	8b a7       	std	Y+43, r24	; 0x2b
     394:	8b a5       	ldd	r24, Y+43	; 0x2b
     396:	9c a5       	ldd	r25, Y+44	; 0x2c
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <LCDsendChar+0x118>
     39c:	9c a7       	std	Y+44, r25	; 0x2c
     39e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     3a0:	a5 e3       	ldi	r26, 0x35	; 53
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	e5 e3       	ldi	r30, 0x35	; 53
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	8b 7f       	andi	r24, 0xFB	; 251
     3ac:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     3ae:	a5 e3       	ldi	r26, 0x35	; 53
     3b0:	b0 e0       	ldi	r27, 0x00	; 0
     3b2:	e5 e3       	ldi	r30, 0x35	; 53
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	8e 7f       	andi	r24, 0xFE	; 254
     3ba:	8c 93       	st	X, r24
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	a0 e8       	ldi	r26, 0x80	; 128
     3c2:	bf e3       	ldi	r27, 0x3F	; 63
     3c4:	8f a3       	std	Y+39, r24	; 0x27
     3c6:	98 a7       	std	Y+40, r25	; 0x28
     3c8:	a9 a7       	std	Y+41, r26	; 0x29
     3ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3cc:	6f a1       	ldd	r22, Y+39	; 0x27
     3ce:	78 a5       	ldd	r23, Y+40	; 0x28
     3d0:	89 a5       	ldd	r24, Y+41	; 0x29
     3d2:	9a a5       	ldd	r25, Y+42	; 0x2a
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	4a e7       	ldi	r20, 0x7A	; 122
     3da:	54 e4       	ldi	r21, 0x44	; 68
     3dc:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     3e0:	dc 01       	movw	r26, r24
     3e2:	cb 01       	movw	r24, r22
     3e4:	8b a3       	std	Y+35, r24	; 0x23
     3e6:	9c a3       	std	Y+36, r25	; 0x24
     3e8:	ad a3       	std	Y+37, r26	; 0x25
     3ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     3ec:	6b a1       	ldd	r22, Y+35	; 0x23
     3ee:	7c a1       	ldd	r23, Y+36	; 0x24
     3f0:	8d a1       	ldd	r24, Y+37	; 0x25
     3f2:	9e a1       	ldd	r25, Y+38	; 0x26
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	40 e8       	ldi	r20, 0x80	; 128
     3fa:	5f e3       	ldi	r21, 0x3F	; 63
     3fc:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     400:	88 23       	and	r24, r24
     402:	2c f4       	brge	.+10     	; 0x40e <LCDsendChar+0x18e>
		__ticks = 1;
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	9a a3       	std	Y+34, r25	; 0x22
     40a:	89 a3       	std	Y+33, r24	; 0x21
     40c:	3f c0       	rjmp	.+126    	; 0x48c <__stack+0x2d>
	else if (__tmp > 65535)
     40e:	6b a1       	ldd	r22, Y+35	; 0x23
     410:	7c a1       	ldd	r23, Y+36	; 0x24
     412:	8d a1       	ldd	r24, Y+37	; 0x25
     414:	9e a1       	ldd	r25, Y+38	; 0x26
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	3f ef       	ldi	r19, 0xFF	; 255
     41a:	4f e7       	ldi	r20, 0x7F	; 127
     41c:	57 e4       	ldi	r21, 0x47	; 71
     41e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     422:	18 16       	cp	r1, r24
     424:	4c f5       	brge	.+82     	; 0x478 <__stack+0x19>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     426:	6f a1       	ldd	r22, Y+39	; 0x27
     428:	78 a5       	ldd	r23, Y+40	; 0x28
     42a:	89 a5       	ldd	r24, Y+41	; 0x29
     42c:	9a a5       	ldd	r25, Y+42	; 0x2a
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	40 e2       	ldi	r20, 0x20	; 32
     434:	51 e4       	ldi	r21, 0x41	; 65
     436:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     43a:	dc 01       	movw	r26, r24
     43c:	cb 01       	movw	r24, r22
     43e:	bc 01       	movw	r22, r24
     440:	cd 01       	movw	r24, r26
     442:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     446:	dc 01       	movw	r26, r24
     448:	cb 01       	movw	r24, r22
     44a:	9a a3       	std	Y+34, r25	; 0x22
     44c:	89 a3       	std	Y+33, r24	; 0x21
     44e:	0f c0       	rjmp	.+30     	; 0x46e <__stack+0xf>
     450:	84 e6       	ldi	r24, 0x64	; 100
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	98 a3       	std	Y+32, r25	; 0x20
     456:	8f 8f       	std	Y+31, r24	; 0x1f
     458:	8f 8d       	ldd	r24, Y+31	; 0x1f
     45a:	98 a1       	ldd	r25, Y+32	; 0x20
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <LCDsendChar+0x1dc>
     460:	98 a3       	std	Y+32, r25	; 0x20
     462:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     464:	89 a1       	ldd	r24, Y+33	; 0x21
     466:	9a a1       	ldd	r25, Y+34	; 0x22
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	9a a3       	std	Y+34, r25	; 0x22
     46c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     46e:	89 a1       	ldd	r24, Y+33	; 0x21
     470:	9a a1       	ldd	r25, Y+34	; 0x22
     472:	00 97       	sbiw	r24, 0x00	; 0
     474:	69 f7       	brne	.-38     	; 0x450 <LCDsendChar+0x1d0>
     476:	14 c0       	rjmp	.+40     	; 0x4a0 <__stack+0x41>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     478:	6b a1       	ldd	r22, Y+35	; 0x23
     47a:	7c a1       	ldd	r23, Y+36	; 0x24
     47c:	8d a1       	ldd	r24, Y+37	; 0x25
     47e:	9e a1       	ldd	r25, Y+38	; 0x26
     480:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     484:	dc 01       	movw	r26, r24
     486:	cb 01       	movw	r24, r22
     488:	9a a3       	std	Y+34, r25	; 0x22
     48a:	89 a3       	std	Y+33, r24	; 0x21
     48c:	89 a1       	ldd	r24, Y+33	; 0x21
     48e:	9a a1       	ldd	r25, Y+34	; 0x22
     490:	9e 8f       	std	Y+30, r25	; 0x1e
     492:	8d 8f       	std	Y+29, r24	; 0x1d
     494:	8d 8d       	ldd	r24, Y+29	; 0x1d
     496:	9e 8d       	ldd	r25, Y+30	; 0x1e
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <__stack+0x39>
     49c:	9e 8f       	std	Y+30, r25	; 0x1e
     49e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     4a0:	e5 e3       	ldi	r30, 0x35	; 53
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	89 ad       	ldd	r24, Y+57	; 0x39
     4a6:	88 2f       	mov	r24, r24
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	82 95       	swap	r24
     4ac:	92 95       	swap	r25
     4ae:	90 7f       	andi	r25, 0xF0	; 240
     4b0:	98 27       	eor	r25, r24
     4b2:	80 7f       	andi	r24, 0xF0	; 240
     4b4:	98 27       	eor	r25, r24
     4b6:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     4b8:	a5 e3       	ldi	r26, 0x35	; 53
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	e5 e3       	ldi	r30, 0x35	; 53
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	81 60       	ori	r24, 0x01	; 1
     4c4:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     4c6:	a5 e3       	ldi	r26, 0x35	; 53
     4c8:	b0 e0       	ldi	r27, 0x00	; 0
     4ca:	e5 e3       	ldi	r30, 0x35	; 53
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	80 81       	ld	r24, Z
     4d0:	84 60       	ori	r24, 0x04	; 4
     4d2:	8c 93       	st	X, r24
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	a0 e8       	ldi	r26, 0x80	; 128
     4da:	bf e3       	ldi	r27, 0x3F	; 63
     4dc:	89 8f       	std	Y+25, r24	; 0x19
     4de:	9a 8f       	std	Y+26, r25	; 0x1a
     4e0:	ab 8f       	std	Y+27, r26	; 0x1b
     4e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4e4:	69 8d       	ldd	r22, Y+25	; 0x19
     4e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     4e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	4a e7       	ldi	r20, 0x7A	; 122
     4f2:	54 e4       	ldi	r21, 0x44	; 68
     4f4:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     4f8:	dc 01       	movw	r26, r24
     4fa:	cb 01       	movw	r24, r22
     4fc:	8d 8b       	std	Y+21, r24	; 0x15
     4fe:	9e 8b       	std	Y+22, r25	; 0x16
     500:	af 8b       	std	Y+23, r26	; 0x17
     502:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     504:	6d 89       	ldd	r22, Y+21	; 0x15
     506:	7e 89       	ldd	r23, Y+22	; 0x16
     508:	8f 89       	ldd	r24, Y+23	; 0x17
     50a:	98 8d       	ldd	r25, Y+24	; 0x18
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	40 e8       	ldi	r20, 0x80	; 128
     512:	5f e3       	ldi	r21, 0x3F	; 63
     514:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     518:	88 23       	and	r24, r24
     51a:	2c f4       	brge	.+10     	; 0x526 <__stack+0xc7>
		__ticks = 1;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	9c 8b       	std	Y+20, r25	; 0x14
     522:	8b 8b       	std	Y+19, r24	; 0x13
     524:	3f c0       	rjmp	.+126    	; 0x5a4 <__stack+0x145>
	else if (__tmp > 65535)
     526:	6d 89       	ldd	r22, Y+21	; 0x15
     528:	7e 89       	ldd	r23, Y+22	; 0x16
     52a:	8f 89       	ldd	r24, Y+23	; 0x17
     52c:	98 8d       	ldd	r25, Y+24	; 0x18
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	3f ef       	ldi	r19, 0xFF	; 255
     532:	4f e7       	ldi	r20, 0x7F	; 127
     534:	57 e4       	ldi	r21, 0x47	; 71
     536:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     53a:	18 16       	cp	r1, r24
     53c:	4c f5       	brge	.+82     	; 0x590 <__stack+0x131>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     53e:	69 8d       	ldd	r22, Y+25	; 0x19
     540:	7a 8d       	ldd	r23, Y+26	; 0x1a
     542:	8b 8d       	ldd	r24, Y+27	; 0x1b
     544:	9c 8d       	ldd	r25, Y+28	; 0x1c
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	40 e2       	ldi	r20, 0x20	; 32
     54c:	51 e4       	ldi	r21, 0x41	; 65
     54e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     552:	dc 01       	movw	r26, r24
     554:	cb 01       	movw	r24, r22
     556:	bc 01       	movw	r22, r24
     558:	cd 01       	movw	r24, r26
     55a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     55e:	dc 01       	movw	r26, r24
     560:	cb 01       	movw	r24, r22
     562:	9c 8b       	std	Y+20, r25	; 0x14
     564:	8b 8b       	std	Y+19, r24	; 0x13
     566:	0f c0       	rjmp	.+30     	; 0x586 <__stack+0x127>
     568:	84 e6       	ldi	r24, 0x64	; 100
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	9a 8b       	std	Y+18, r25	; 0x12
     56e:	89 8b       	std	Y+17, r24	; 0x11
     570:	89 89       	ldd	r24, Y+17	; 0x11
     572:	9a 89       	ldd	r25, Y+18	; 0x12
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <__stack+0x115>
     578:	9a 8b       	std	Y+18, r25	; 0x12
     57a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     57c:	8b 89       	ldd	r24, Y+19	; 0x13
     57e:	9c 89       	ldd	r25, Y+20	; 0x14
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	9c 8b       	std	Y+20, r25	; 0x14
     584:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     586:	8b 89       	ldd	r24, Y+19	; 0x13
     588:	9c 89       	ldd	r25, Y+20	; 0x14
     58a:	00 97       	sbiw	r24, 0x00	; 0
     58c:	69 f7       	brne	.-38     	; 0x568 <__stack+0x109>
     58e:	14 c0       	rjmp	.+40     	; 0x5b8 <__stack+0x159>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     590:	6d 89       	ldd	r22, Y+21	; 0x15
     592:	7e 89       	ldd	r23, Y+22	; 0x16
     594:	8f 89       	ldd	r24, Y+23	; 0x17
     596:	98 8d       	ldd	r25, Y+24	; 0x18
     598:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     59c:	dc 01       	movw	r26, r24
     59e:	cb 01       	movw	r24, r22
     5a0:	9c 8b       	std	Y+20, r25	; 0x14
     5a2:	8b 8b       	std	Y+19, r24	; 0x13
     5a4:	8b 89       	ldd	r24, Y+19	; 0x13
     5a6:	9c 89       	ldd	r25, Y+20	; 0x14
     5a8:	98 8b       	std	Y+16, r25	; 0x10
     5aa:	8f 87       	std	Y+15, r24	; 0x0f
     5ac:	8f 85       	ldd	r24, Y+15	; 0x0f
     5ae:	98 89       	ldd	r25, Y+16	; 0x10
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <__stack+0x151>
     5b4:	98 8b       	std	Y+16, r25	; 0x10
     5b6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     5b8:	a5 e3       	ldi	r26, 0x35	; 53
     5ba:	b0 e0       	ldi	r27, 0x00	; 0
     5bc:	e5 e3       	ldi	r30, 0x35	; 53
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	8b 7f       	andi	r24, 0xFB	; 251
     5c4:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     5c6:	a5 e3       	ldi	r26, 0x35	; 53
     5c8:	b0 e0       	ldi	r27, 0x00	; 0
     5ca:	e5 e3       	ldi	r30, 0x35	; 53
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	80 81       	ld	r24, Z
     5d0:	8e 7f       	andi	r24, 0xFE	; 254
     5d2:	8c 93       	st	X, r24
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	a0 e8       	ldi	r26, 0x80	; 128
     5da:	bf e3       	ldi	r27, 0x3F	; 63
     5dc:	8b 87       	std	Y+11, r24	; 0x0b
     5de:	9c 87       	std	Y+12, r25	; 0x0c
     5e0:	ad 87       	std	Y+13, r26	; 0x0d
     5e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5e4:	6b 85       	ldd	r22, Y+11	; 0x0b
     5e6:	7c 85       	ldd	r23, Y+12	; 0x0c
     5e8:	8d 85       	ldd	r24, Y+13	; 0x0d
     5ea:	9e 85       	ldd	r25, Y+14	; 0x0e
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	4a e7       	ldi	r20, 0x7A	; 122
     5f2:	54 e4       	ldi	r21, 0x44	; 68
     5f4:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     5f8:	dc 01       	movw	r26, r24
     5fa:	cb 01       	movw	r24, r22
     5fc:	8f 83       	std	Y+7, r24	; 0x07
     5fe:	98 87       	std	Y+8, r25	; 0x08
     600:	a9 87       	std	Y+9, r26	; 0x09
     602:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     604:	6f 81       	ldd	r22, Y+7	; 0x07
     606:	78 85       	ldd	r23, Y+8	; 0x08
     608:	89 85       	ldd	r24, Y+9	; 0x09
     60a:	9a 85       	ldd	r25, Y+10	; 0x0a
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	40 e8       	ldi	r20, 0x80	; 128
     612:	5f e3       	ldi	r21, 0x3F	; 63
     614:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     618:	88 23       	and	r24, r24
     61a:	2c f4       	brge	.+10     	; 0x626 <__stack+0x1c7>
		__ticks = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	9e 83       	std	Y+6, r25	; 0x06
     622:	8d 83       	std	Y+5, r24	; 0x05
     624:	3f c0       	rjmp	.+126    	; 0x6a4 <__stack+0x245>
	else if (__tmp > 65535)
     626:	6f 81       	ldd	r22, Y+7	; 0x07
     628:	78 85       	ldd	r23, Y+8	; 0x08
     62a:	89 85       	ldd	r24, Y+9	; 0x09
     62c:	9a 85       	ldd	r25, Y+10	; 0x0a
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	3f ef       	ldi	r19, 0xFF	; 255
     632:	4f e7       	ldi	r20, 0x7F	; 127
     634:	57 e4       	ldi	r21, 0x47	; 71
     636:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     63a:	18 16       	cp	r1, r24
     63c:	4c f5       	brge	.+82     	; 0x690 <__stack+0x231>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     63e:	6b 85       	ldd	r22, Y+11	; 0x0b
     640:	7c 85       	ldd	r23, Y+12	; 0x0c
     642:	8d 85       	ldd	r24, Y+13	; 0x0d
     644:	9e 85       	ldd	r25, Y+14	; 0x0e
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 e2       	ldi	r20, 0x20	; 32
     64c:	51 e4       	ldi	r21, 0x41	; 65
     64e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     652:	dc 01       	movw	r26, r24
     654:	cb 01       	movw	r24, r22
     656:	bc 01       	movw	r22, r24
     658:	cd 01       	movw	r24, r26
     65a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     65e:	dc 01       	movw	r26, r24
     660:	cb 01       	movw	r24, r22
     662:	9e 83       	std	Y+6, r25	; 0x06
     664:	8d 83       	std	Y+5, r24	; 0x05
     666:	0f c0       	rjmp	.+30     	; 0x686 <__stack+0x227>
     668:	84 e6       	ldi	r24, 0x64	; 100
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	9c 83       	std	Y+4, r25	; 0x04
     66e:	8b 83       	std	Y+3, r24	; 0x03
     670:	8b 81       	ldd	r24, Y+3	; 0x03
     672:	9c 81       	ldd	r25, Y+4	; 0x04
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <__stack+0x215>
     678:	9c 83       	std	Y+4, r25	; 0x04
     67a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     67c:	8d 81       	ldd	r24, Y+5	; 0x05
     67e:	9e 81       	ldd	r25, Y+6	; 0x06
     680:	01 97       	sbiw	r24, 0x01	; 1
     682:	9e 83       	std	Y+6, r25	; 0x06
     684:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     686:	8d 81       	ldd	r24, Y+5	; 0x05
     688:	9e 81       	ldd	r25, Y+6	; 0x06
     68a:	00 97       	sbiw	r24, 0x00	; 0
     68c:	69 f7       	brne	.-38     	; 0x668 <__stack+0x209>
     68e:	14 c0       	rjmp	.+40     	; 0x6b8 <__stack+0x259>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     690:	6f 81       	ldd	r22, Y+7	; 0x07
     692:	78 85       	ldd	r23, Y+8	; 0x08
     694:	89 85       	ldd	r24, Y+9	; 0x09
     696:	9a 85       	ldd	r25, Y+10	; 0x0a
     698:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     69c:	dc 01       	movw	r26, r24
     69e:	cb 01       	movw	r24, r22
     6a0:	9e 83       	std	Y+6, r25	; 0x06
     6a2:	8d 83       	std	Y+5, r24	; 0x05
     6a4:	8d 81       	ldd	r24, Y+5	; 0x05
     6a6:	9e 81       	ldd	r25, Y+6	; 0x06
     6a8:	9a 83       	std	Y+2, r25	; 0x02
     6aa:	89 83       	std	Y+1, r24	; 0x01
     6ac:	89 81       	ldd	r24, Y+1	; 0x01
     6ae:	9a 81       	ldd	r25, Y+2	; 0x02
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	f1 f7       	brne	.-4      	; 0x6b0 <__stack+0x251>
     6b4:	9a 83       	std	Y+2, r25	; 0x02
     6b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     6b8:	e9 96       	adiw	r28, 0x39	; 57
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	cf 91       	pop	r28
     6c6:	df 91       	pop	r29
     6c8:	08 95       	ret

000006ca <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     6ca:	df 93       	push	r29
     6cc:	cf 93       	push	r28
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	e9 97       	sbiw	r28, 0x39	; 57
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	89 af       	std	Y+57, r24	; 0x39
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     6e0:	e5 e3       	ldi	r30, 0x35	; 53
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	89 ad       	ldd	r24, Y+57	; 0x39
     6e6:	80 7f       	andi	r24, 0xF0	; 240
     6e8:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     6ea:	a5 e3       	ldi	r26, 0x35	; 53
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
     6ee:	e5 e3       	ldi	r30, 0x35	; 53
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	84 60       	ori	r24, 0x04	; 4
     6f6:	8c 93       	st	X, r24
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	a0 e8       	ldi	r26, 0x80	; 128
     6fe:	bf e3       	ldi	r27, 0x3F	; 63
     700:	8d ab       	std	Y+53, r24	; 0x35
     702:	9e ab       	std	Y+54, r25	; 0x36
     704:	af ab       	std	Y+55, r26	; 0x37
     706:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     708:	6d a9       	ldd	r22, Y+53	; 0x35
     70a:	7e a9       	ldd	r23, Y+54	; 0x36
     70c:	8f a9       	ldd	r24, Y+55	; 0x37
     70e:	98 ad       	ldd	r25, Y+56	; 0x38
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	4a e7       	ldi	r20, 0x7A	; 122
     716:	54 e4       	ldi	r21, 0x44	; 68
     718:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     71c:	dc 01       	movw	r26, r24
     71e:	cb 01       	movw	r24, r22
     720:	89 ab       	std	Y+49, r24	; 0x31
     722:	9a ab       	std	Y+50, r25	; 0x32
     724:	ab ab       	std	Y+51, r26	; 0x33
     726:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     728:	69 a9       	ldd	r22, Y+49	; 0x31
     72a:	7a a9       	ldd	r23, Y+50	; 0x32
     72c:	8b a9       	ldd	r24, Y+51	; 0x33
     72e:	9c a9       	ldd	r25, Y+52	; 0x34
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	40 e8       	ldi	r20, 0x80	; 128
     736:	5f e3       	ldi	r21, 0x3F	; 63
     738:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     73c:	88 23       	and	r24, r24
     73e:	2c f4       	brge	.+10     	; 0x74a <LCDsendCommand+0x80>
		__ticks = 1;
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	98 ab       	std	Y+48, r25	; 0x30
     746:	8f a7       	std	Y+47, r24	; 0x2f
     748:	3f c0       	rjmp	.+126    	; 0x7c8 <LCDsendCommand+0xfe>
	else if (__tmp > 65535)
     74a:	69 a9       	ldd	r22, Y+49	; 0x31
     74c:	7a a9       	ldd	r23, Y+50	; 0x32
     74e:	8b a9       	ldd	r24, Y+51	; 0x33
     750:	9c a9       	ldd	r25, Y+52	; 0x34
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	3f ef       	ldi	r19, 0xFF	; 255
     756:	4f e7       	ldi	r20, 0x7F	; 127
     758:	57 e4       	ldi	r21, 0x47	; 71
     75a:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     75e:	18 16       	cp	r1, r24
     760:	4c f5       	brge	.+82     	; 0x7b4 <LCDsendCommand+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     762:	6d a9       	ldd	r22, Y+53	; 0x35
     764:	7e a9       	ldd	r23, Y+54	; 0x36
     766:	8f a9       	ldd	r24, Y+55	; 0x37
     768:	98 ad       	ldd	r25, Y+56	; 0x38
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 e2       	ldi	r20, 0x20	; 32
     770:	51 e4       	ldi	r21, 0x41	; 65
     772:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     776:	dc 01       	movw	r26, r24
     778:	cb 01       	movw	r24, r22
     77a:	bc 01       	movw	r22, r24
     77c:	cd 01       	movw	r24, r26
     77e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     782:	dc 01       	movw	r26, r24
     784:	cb 01       	movw	r24, r22
     786:	98 ab       	std	Y+48, r25	; 0x30
     788:	8f a7       	std	Y+47, r24	; 0x2f
     78a:	0f c0       	rjmp	.+30     	; 0x7aa <LCDsendCommand+0xe0>
     78c:	84 e6       	ldi	r24, 0x64	; 100
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	9e a7       	std	Y+46, r25	; 0x2e
     792:	8d a7       	std	Y+45, r24	; 0x2d
     794:	8d a5       	ldd	r24, Y+45	; 0x2d
     796:	9e a5       	ldd	r25, Y+46	; 0x2e
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <LCDsendCommand+0xce>
     79c:	9e a7       	std	Y+46, r25	; 0x2e
     79e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7a2:	98 a9       	ldd	r25, Y+48	; 0x30
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	98 ab       	std	Y+48, r25	; 0x30
     7a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7aa:	8f a5       	ldd	r24, Y+47	; 0x2f
     7ac:	98 a9       	ldd	r25, Y+48	; 0x30
     7ae:	00 97       	sbiw	r24, 0x00	; 0
     7b0:	69 f7       	brne	.-38     	; 0x78c <LCDsendCommand+0xc2>
     7b2:	14 c0       	rjmp	.+40     	; 0x7dc <LCDsendCommand+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7b4:	69 a9       	ldd	r22, Y+49	; 0x31
     7b6:	7a a9       	ldd	r23, Y+50	; 0x32
     7b8:	8b a9       	ldd	r24, Y+51	; 0x33
     7ba:	9c a9       	ldd	r25, Y+52	; 0x34
     7bc:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     7c0:	dc 01       	movw	r26, r24
     7c2:	cb 01       	movw	r24, r22
     7c4:	98 ab       	std	Y+48, r25	; 0x30
     7c6:	8f a7       	std	Y+47, r24	; 0x2f
     7c8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7ca:	98 a9       	ldd	r25, Y+48	; 0x30
     7cc:	9c a7       	std	Y+44, r25	; 0x2c
     7ce:	8b a7       	std	Y+43, r24	; 0x2b
     7d0:	8b a5       	ldd	r24, Y+43	; 0x2b
     7d2:	9c a5       	ldd	r25, Y+44	; 0x2c
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <LCDsendCommand+0x10a>
     7d8:	9c a7       	std	Y+44, r25	; 0x2c
     7da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     7dc:	a5 e3       	ldi	r26, 0x35	; 53
     7de:	b0 e0       	ldi	r27, 0x00	; 0
     7e0:	e5 e3       	ldi	r30, 0x35	; 53
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	8b 7f       	andi	r24, 0xFB	; 251
     7e8:	8c 93       	st	X, r24
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	a0 e8       	ldi	r26, 0x80	; 128
     7f0:	bf e3       	ldi	r27, 0x3F	; 63
     7f2:	8f a3       	std	Y+39, r24	; 0x27
     7f4:	98 a7       	std	Y+40, r25	; 0x28
     7f6:	a9 a7       	std	Y+41, r26	; 0x29
     7f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7fa:	6f a1       	ldd	r22, Y+39	; 0x27
     7fc:	78 a5       	ldd	r23, Y+40	; 0x28
     7fe:	89 a5       	ldd	r24, Y+41	; 0x29
     800:	9a a5       	ldd	r25, Y+42	; 0x2a
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	4a e7       	ldi	r20, 0x7A	; 122
     808:	54 e4       	ldi	r21, 0x44	; 68
     80a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     80e:	dc 01       	movw	r26, r24
     810:	cb 01       	movw	r24, r22
     812:	8b a3       	std	Y+35, r24	; 0x23
     814:	9c a3       	std	Y+36, r25	; 0x24
     816:	ad a3       	std	Y+37, r26	; 0x25
     818:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     81a:	6b a1       	ldd	r22, Y+35	; 0x23
     81c:	7c a1       	ldd	r23, Y+36	; 0x24
     81e:	8d a1       	ldd	r24, Y+37	; 0x25
     820:	9e a1       	ldd	r25, Y+38	; 0x26
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e8       	ldi	r20, 0x80	; 128
     828:	5f e3       	ldi	r21, 0x3F	; 63
     82a:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     82e:	88 23       	and	r24, r24
     830:	2c f4       	brge	.+10     	; 0x83c <LCDsendCommand+0x172>
		__ticks = 1;
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	9a a3       	std	Y+34, r25	; 0x22
     838:	89 a3       	std	Y+33, r24	; 0x21
     83a:	3f c0       	rjmp	.+126    	; 0x8ba <LCDsendCommand+0x1f0>
	else if (__tmp > 65535)
     83c:	6b a1       	ldd	r22, Y+35	; 0x23
     83e:	7c a1       	ldd	r23, Y+36	; 0x24
     840:	8d a1       	ldd	r24, Y+37	; 0x25
     842:	9e a1       	ldd	r25, Y+38	; 0x26
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	3f ef       	ldi	r19, 0xFF	; 255
     848:	4f e7       	ldi	r20, 0x7F	; 127
     84a:	57 e4       	ldi	r21, 0x47	; 71
     84c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     850:	18 16       	cp	r1, r24
     852:	4c f5       	brge	.+82     	; 0x8a6 <LCDsendCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     854:	6f a1       	ldd	r22, Y+39	; 0x27
     856:	78 a5       	ldd	r23, Y+40	; 0x28
     858:	89 a5       	ldd	r24, Y+41	; 0x29
     85a:	9a a5       	ldd	r25, Y+42	; 0x2a
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	40 e2       	ldi	r20, 0x20	; 32
     862:	51 e4       	ldi	r21, 0x41	; 65
     864:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	bc 01       	movw	r22, r24
     86e:	cd 01       	movw	r24, r26
     870:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     874:	dc 01       	movw	r26, r24
     876:	cb 01       	movw	r24, r22
     878:	9a a3       	std	Y+34, r25	; 0x22
     87a:	89 a3       	std	Y+33, r24	; 0x21
     87c:	0f c0       	rjmp	.+30     	; 0x89c <LCDsendCommand+0x1d2>
     87e:	84 e6       	ldi	r24, 0x64	; 100
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	98 a3       	std	Y+32, r25	; 0x20
     884:	8f 8f       	std	Y+31, r24	; 0x1f
     886:	8f 8d       	ldd	r24, Y+31	; 0x1f
     888:	98 a1       	ldd	r25, Y+32	; 0x20
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	f1 f7       	brne	.-4      	; 0x88a <LCDsendCommand+0x1c0>
     88e:	98 a3       	std	Y+32, r25	; 0x20
     890:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     892:	89 a1       	ldd	r24, Y+33	; 0x21
     894:	9a a1       	ldd	r25, Y+34	; 0x22
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	9a a3       	std	Y+34, r25	; 0x22
     89a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     89c:	89 a1       	ldd	r24, Y+33	; 0x21
     89e:	9a a1       	ldd	r25, Y+34	; 0x22
     8a0:	00 97       	sbiw	r24, 0x00	; 0
     8a2:	69 f7       	brne	.-38     	; 0x87e <LCDsendCommand+0x1b4>
     8a4:	14 c0       	rjmp	.+40     	; 0x8ce <LCDsendCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8a6:	6b a1       	ldd	r22, Y+35	; 0x23
     8a8:	7c a1       	ldd	r23, Y+36	; 0x24
     8aa:	8d a1       	ldd	r24, Y+37	; 0x25
     8ac:	9e a1       	ldd	r25, Y+38	; 0x26
     8ae:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     8b2:	dc 01       	movw	r26, r24
     8b4:	cb 01       	movw	r24, r22
     8b6:	9a a3       	std	Y+34, r25	; 0x22
     8b8:	89 a3       	std	Y+33, r24	; 0x21
     8ba:	89 a1       	ldd	r24, Y+33	; 0x21
     8bc:	9a a1       	ldd	r25, Y+34	; 0x22
     8be:	9e 8f       	std	Y+30, r25	; 0x1e
     8c0:	8d 8f       	std	Y+29, r24	; 0x1d
     8c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8c6:	01 97       	sbiw	r24, 0x01	; 1
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <LCDsendCommand+0x1fc>
     8ca:	9e 8f       	std	Y+30, r25	; 0x1e
     8cc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     8ce:	e5 e3       	ldi	r30, 0x35	; 53
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	89 ad       	ldd	r24, Y+57	; 0x39
     8d4:	88 2f       	mov	r24, r24
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	82 95       	swap	r24
     8da:	92 95       	swap	r25
     8dc:	90 7f       	andi	r25, 0xF0	; 240
     8de:	98 27       	eor	r25, r24
     8e0:	80 7f       	andi	r24, 0xF0	; 240
     8e2:	98 27       	eor	r25, r24
     8e4:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     8e6:	a5 e3       	ldi	r26, 0x35	; 53
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e5 e3       	ldi	r30, 0x35	; 53
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	84 60       	ori	r24, 0x04	; 4
     8f2:	8c 93       	st	X, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	a0 e8       	ldi	r26, 0x80	; 128
     8fa:	bf e3       	ldi	r27, 0x3F	; 63
     8fc:	89 8f       	std	Y+25, r24	; 0x19
     8fe:	9a 8f       	std	Y+26, r25	; 0x1a
     900:	ab 8f       	std	Y+27, r26	; 0x1b
     902:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     904:	69 8d       	ldd	r22, Y+25	; 0x19
     906:	7a 8d       	ldd	r23, Y+26	; 0x1a
     908:	8b 8d       	ldd	r24, Y+27	; 0x1b
     90a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	4a e7       	ldi	r20, 0x7A	; 122
     912:	54 e4       	ldi	r21, 0x44	; 68
     914:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     918:	dc 01       	movw	r26, r24
     91a:	cb 01       	movw	r24, r22
     91c:	8d 8b       	std	Y+21, r24	; 0x15
     91e:	9e 8b       	std	Y+22, r25	; 0x16
     920:	af 8b       	std	Y+23, r26	; 0x17
     922:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     924:	6d 89       	ldd	r22, Y+21	; 0x15
     926:	7e 89       	ldd	r23, Y+22	; 0x16
     928:	8f 89       	ldd	r24, Y+23	; 0x17
     92a:	98 8d       	ldd	r25, Y+24	; 0x18
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	40 e8       	ldi	r20, 0x80	; 128
     932:	5f e3       	ldi	r21, 0x3F	; 63
     934:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     938:	88 23       	and	r24, r24
     93a:	2c f4       	brge	.+10     	; 0x946 <LCDsendCommand+0x27c>
		__ticks = 1;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	9c 8b       	std	Y+20, r25	; 0x14
     942:	8b 8b       	std	Y+19, r24	; 0x13
     944:	3f c0       	rjmp	.+126    	; 0x9c4 <LCDsendCommand+0x2fa>
	else if (__tmp > 65535)
     946:	6d 89       	ldd	r22, Y+21	; 0x15
     948:	7e 89       	ldd	r23, Y+22	; 0x16
     94a:	8f 89       	ldd	r24, Y+23	; 0x17
     94c:	98 8d       	ldd	r25, Y+24	; 0x18
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	3f ef       	ldi	r19, 0xFF	; 255
     952:	4f e7       	ldi	r20, 0x7F	; 127
     954:	57 e4       	ldi	r21, 0x47	; 71
     956:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     95a:	18 16       	cp	r1, r24
     95c:	4c f5       	brge	.+82     	; 0x9b0 <LCDsendCommand+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     95e:	69 8d       	ldd	r22, Y+25	; 0x19
     960:	7a 8d       	ldd	r23, Y+26	; 0x1a
     962:	8b 8d       	ldd	r24, Y+27	; 0x1b
     964:	9c 8d       	ldd	r25, Y+28	; 0x1c
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	40 e2       	ldi	r20, 0x20	; 32
     96c:	51 e4       	ldi	r21, 0x41	; 65
     96e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     972:	dc 01       	movw	r26, r24
     974:	cb 01       	movw	r24, r22
     976:	bc 01       	movw	r22, r24
     978:	cd 01       	movw	r24, r26
     97a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     97e:	dc 01       	movw	r26, r24
     980:	cb 01       	movw	r24, r22
     982:	9c 8b       	std	Y+20, r25	; 0x14
     984:	8b 8b       	std	Y+19, r24	; 0x13
     986:	0f c0       	rjmp	.+30     	; 0x9a6 <LCDsendCommand+0x2dc>
     988:	84 e6       	ldi	r24, 0x64	; 100
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	9a 8b       	std	Y+18, r25	; 0x12
     98e:	89 8b       	std	Y+17, r24	; 0x11
     990:	89 89       	ldd	r24, Y+17	; 0x11
     992:	9a 89       	ldd	r25, Y+18	; 0x12
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	f1 f7       	brne	.-4      	; 0x994 <LCDsendCommand+0x2ca>
     998:	9a 8b       	std	Y+18, r25	; 0x12
     99a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     99c:	8b 89       	ldd	r24, Y+19	; 0x13
     99e:	9c 89       	ldd	r25, Y+20	; 0x14
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	9c 8b       	std	Y+20, r25	; 0x14
     9a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9a6:	8b 89       	ldd	r24, Y+19	; 0x13
     9a8:	9c 89       	ldd	r25, Y+20	; 0x14
     9aa:	00 97       	sbiw	r24, 0x00	; 0
     9ac:	69 f7       	brne	.-38     	; 0x988 <LCDsendCommand+0x2be>
     9ae:	14 c0       	rjmp	.+40     	; 0x9d8 <LCDsendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9b0:	6d 89       	ldd	r22, Y+21	; 0x15
     9b2:	7e 89       	ldd	r23, Y+22	; 0x16
     9b4:	8f 89       	ldd	r24, Y+23	; 0x17
     9b6:	98 8d       	ldd	r25, Y+24	; 0x18
     9b8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	9c 8b       	std	Y+20, r25	; 0x14
     9c2:	8b 8b       	std	Y+19, r24	; 0x13
     9c4:	8b 89       	ldd	r24, Y+19	; 0x13
     9c6:	9c 89       	ldd	r25, Y+20	; 0x14
     9c8:	98 8b       	std	Y+16, r25	; 0x10
     9ca:	8f 87       	std	Y+15, r24	; 0x0f
     9cc:	8f 85       	ldd	r24, Y+15	; 0x0f
     9ce:	98 89       	ldd	r25, Y+16	; 0x10
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <LCDsendCommand+0x306>
     9d4:	98 8b       	std	Y+16, r25	; 0x10
     9d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     9d8:	a5 e3       	ldi	r26, 0x35	; 53
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	e5 e3       	ldi	r30, 0x35	; 53
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	8b 7f       	andi	r24, 0xFB	; 251
     9e4:	8c 93       	st	X, r24
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	a0 e8       	ldi	r26, 0x80	; 128
     9ec:	bf e3       	ldi	r27, 0x3F	; 63
     9ee:	8b 87       	std	Y+11, r24	; 0x0b
     9f0:	9c 87       	std	Y+12, r25	; 0x0c
     9f2:	ad 87       	std	Y+13, r26	; 0x0d
     9f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9f6:	6b 85       	ldd	r22, Y+11	; 0x0b
     9f8:	7c 85       	ldd	r23, Y+12	; 0x0c
     9fa:	8d 85       	ldd	r24, Y+13	; 0x0d
     9fc:	9e 85       	ldd	r25, Y+14	; 0x0e
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	4a e7       	ldi	r20, 0x7A	; 122
     a04:	54 e4       	ldi	r21, 0x44	; 68
     a06:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     a0a:	dc 01       	movw	r26, r24
     a0c:	cb 01       	movw	r24, r22
     a0e:	8f 83       	std	Y+7, r24	; 0x07
     a10:	98 87       	std	Y+8, r25	; 0x08
     a12:	a9 87       	std	Y+9, r26	; 0x09
     a14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a16:	6f 81       	ldd	r22, Y+7	; 0x07
     a18:	78 85       	ldd	r23, Y+8	; 0x08
     a1a:	89 85       	ldd	r24, Y+9	; 0x09
     a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e8       	ldi	r20, 0x80	; 128
     a24:	5f e3       	ldi	r21, 0x3F	; 63
     a26:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     a2a:	88 23       	and	r24, r24
     a2c:	2c f4       	brge	.+10     	; 0xa38 <LCDsendCommand+0x36e>
		__ticks = 1;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	9e 83       	std	Y+6, r25	; 0x06
     a34:	8d 83       	std	Y+5, r24	; 0x05
     a36:	3f c0       	rjmp	.+126    	; 0xab6 <LCDsendCommand+0x3ec>
	else if (__tmp > 65535)
     a38:	6f 81       	ldd	r22, Y+7	; 0x07
     a3a:	78 85       	ldd	r23, Y+8	; 0x08
     a3c:	89 85       	ldd	r24, Y+9	; 0x09
     a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	3f ef       	ldi	r19, 0xFF	; 255
     a44:	4f e7       	ldi	r20, 0x7F	; 127
     a46:	57 e4       	ldi	r21, 0x47	; 71
     a48:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     a4c:	18 16       	cp	r1, r24
     a4e:	4c f5       	brge	.+82     	; 0xaa2 <LCDsendCommand+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a50:	6b 85       	ldd	r22, Y+11	; 0x0b
     a52:	7c 85       	ldd	r23, Y+12	; 0x0c
     a54:	8d 85       	ldd	r24, Y+13	; 0x0d
     a56:	9e 85       	ldd	r25, Y+14	; 0x0e
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 e2       	ldi	r20, 0x20	; 32
     a5e:	51 e4       	ldi	r21, 0x41	; 65
     a60:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     a64:	dc 01       	movw	r26, r24
     a66:	cb 01       	movw	r24, r22
     a68:	bc 01       	movw	r22, r24
     a6a:	cd 01       	movw	r24, r26
     a6c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     a70:	dc 01       	movw	r26, r24
     a72:	cb 01       	movw	r24, r22
     a74:	9e 83       	std	Y+6, r25	; 0x06
     a76:	8d 83       	std	Y+5, r24	; 0x05
     a78:	0f c0       	rjmp	.+30     	; 0xa98 <LCDsendCommand+0x3ce>
     a7a:	84 e6       	ldi	r24, 0x64	; 100
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	9c 83       	std	Y+4, r25	; 0x04
     a80:	8b 83       	std	Y+3, r24	; 0x03
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	9c 81       	ldd	r25, Y+4	; 0x04
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	f1 f7       	brne	.-4      	; 0xa86 <LCDsendCommand+0x3bc>
     a8a:	9c 83       	std	Y+4, r25	; 0x04
     a8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a8e:	8d 81       	ldd	r24, Y+5	; 0x05
     a90:	9e 81       	ldd	r25, Y+6	; 0x06
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	9e 83       	std	Y+6, r25	; 0x06
     a96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a98:	8d 81       	ldd	r24, Y+5	; 0x05
     a9a:	9e 81       	ldd	r25, Y+6	; 0x06
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	69 f7       	brne	.-38     	; 0xa7a <LCDsendCommand+0x3b0>
     aa0:	14 c0       	rjmp	.+40     	; 0xaca <LCDsendCommand+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aa2:	6f 81       	ldd	r22, Y+7	; 0x07
     aa4:	78 85       	ldd	r23, Y+8	; 0x08
     aa6:	89 85       	ldd	r24, Y+9	; 0x09
     aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
     aaa:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     aae:	dc 01       	movw	r26, r24
     ab0:	cb 01       	movw	r24, r22
     ab2:	9e 83       	std	Y+6, r25	; 0x06
     ab4:	8d 83       	std	Y+5, r24	; 0x05
     ab6:	8d 81       	ldd	r24, Y+5	; 0x05
     ab8:	9e 81       	ldd	r25, Y+6	; 0x06
     aba:	9a 83       	std	Y+2, r25	; 0x02
     abc:	89 83       	std	Y+1, r24	; 0x01
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	9a 81       	ldd	r25, Y+2	; 0x02
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <LCDsendCommand+0x3f8>
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	89 83       	std	Y+1, r24	; 0x01
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     aca:	e9 96       	adiw	r28, 0x39	; 57
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
     ad6:	cf 91       	pop	r28
     ad8:	df 91       	pop	r29
     ada:	08 95       	ret

00000adc <LCDinit>:
void LCDinit(void)//Initializes LCD
{
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	df 93       	push	r29
     ae2:	cf 93       	push	r28
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	c4 56       	subi	r28, 0x64	; 100
     aea:	d0 40       	sbci	r29, 0x00	; 0
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	cd bf       	out	0x3d, r28	; 61
     af6:	fe 01       	movw	r30, r28
     af8:	e1 5a       	subi	r30, 0xA1	; 161
     afa:	ff 4f       	sbci	r31, 0xFF	; 255
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e7       	ldi	r26, 0x70	; 112
     b02:	b1 e4       	ldi	r27, 0x41	; 65
     b04:	80 83       	st	Z, r24
     b06:	91 83       	std	Z+1, r25	; 0x01
     b08:	a2 83       	std	Z+2, r26	; 0x02
     b0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b0c:	8e 01       	movw	r16, r28
     b0e:	05 5a       	subi	r16, 0xA5	; 165
     b10:	1f 4f       	sbci	r17, 0xFF	; 255
     b12:	fe 01       	movw	r30, r28
     b14:	e1 5a       	subi	r30, 0xA1	; 161
     b16:	ff 4f       	sbci	r31, 0xFF	; 255
     b18:	60 81       	ld	r22, Z
     b1a:	71 81       	ldd	r23, Z+1	; 0x01
     b1c:	82 81       	ldd	r24, Z+2	; 0x02
     b1e:	93 81       	ldd	r25, Z+3	; 0x03
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	4a e7       	ldi	r20, 0x7A	; 122
     b26:	54 e4       	ldi	r21, 0x44	; 68
     b28:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     b2c:	dc 01       	movw	r26, r24
     b2e:	cb 01       	movw	r24, r22
     b30:	f8 01       	movw	r30, r16
     b32:	80 83       	st	Z, r24
     b34:	91 83       	std	Z+1, r25	; 0x01
     b36:	a2 83       	std	Z+2, r26	; 0x02
     b38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b3a:	fe 01       	movw	r30, r28
     b3c:	e5 5a       	subi	r30, 0xA5	; 165
     b3e:	ff 4f       	sbci	r31, 0xFF	; 255
     b40:	60 81       	ld	r22, Z
     b42:	71 81       	ldd	r23, Z+1	; 0x01
     b44:	82 81       	ldd	r24, Z+2	; 0x02
     b46:	93 81       	ldd	r25, Z+3	; 0x03
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	40 e8       	ldi	r20, 0x80	; 128
     b4e:	5f e3       	ldi	r21, 0x3F	; 63
     b50:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     b54:	88 23       	and	r24, r24
     b56:	44 f4       	brge	.+16     	; 0xb68 <LCDinit+0x8c>
		__ticks = 1;
     b58:	fe 01       	movw	r30, r28
     b5a:	e7 5a       	subi	r30, 0xA7	; 167
     b5c:	ff 4f       	sbci	r31, 0xFF	; 255
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	91 83       	std	Z+1, r25	; 0x01
     b64:	80 83       	st	Z, r24
     b66:	64 c0       	rjmp	.+200    	; 0xc30 <LCDinit+0x154>
	else if (__tmp > 65535)
     b68:	fe 01       	movw	r30, r28
     b6a:	e5 5a       	subi	r30, 0xA5	; 165
     b6c:	ff 4f       	sbci	r31, 0xFF	; 255
     b6e:	60 81       	ld	r22, Z
     b70:	71 81       	ldd	r23, Z+1	; 0x01
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	3f ef       	ldi	r19, 0xFF	; 255
     b7a:	4f e7       	ldi	r20, 0x7F	; 127
     b7c:	57 e4       	ldi	r21, 0x47	; 71
     b7e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     b82:	18 16       	cp	r1, r24
     b84:	0c f0       	brlt	.+2      	; 0xb88 <LCDinit+0xac>
     b86:	43 c0       	rjmp	.+134    	; 0xc0e <LCDinit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b88:	fe 01       	movw	r30, r28
     b8a:	e1 5a       	subi	r30, 0xA1	; 161
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	60 81       	ld	r22, Z
     b90:	71 81       	ldd	r23, Z+1	; 0x01
     b92:	82 81       	ldd	r24, Z+2	; 0x02
     b94:	93 81       	ldd	r25, Z+3	; 0x03
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	40 e2       	ldi	r20, 0x20	; 32
     b9c:	51 e4       	ldi	r21, 0x41	; 65
     b9e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     ba2:	dc 01       	movw	r26, r24
     ba4:	cb 01       	movw	r24, r22
     ba6:	8e 01       	movw	r16, r28
     ba8:	07 5a       	subi	r16, 0xA7	; 167
     baa:	1f 4f       	sbci	r17, 0xFF	; 255
     bac:	bc 01       	movw	r22, r24
     bae:	cd 01       	movw	r24, r26
     bb0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     bb4:	dc 01       	movw	r26, r24
     bb6:	cb 01       	movw	r24, r22
     bb8:	f8 01       	movw	r30, r16
     bba:	91 83       	std	Z+1, r25	; 0x01
     bbc:	80 83       	st	Z, r24
     bbe:	1f c0       	rjmp	.+62     	; 0xbfe <LCDinit+0x122>
     bc0:	fe 01       	movw	r30, r28
     bc2:	e9 5a       	subi	r30, 0xA9	; 169
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	84 e6       	ldi	r24, 0x64	; 100
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	91 83       	std	Z+1, r25	; 0x01
     bcc:	80 83       	st	Z, r24
     bce:	fe 01       	movw	r30, r28
     bd0:	e9 5a       	subi	r30, 0xA9	; 169
     bd2:	ff 4f       	sbci	r31, 0xFF	; 255
     bd4:	80 81       	ld	r24, Z
     bd6:	91 81       	ldd	r25, Z+1	; 0x01
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	f1 f7       	brne	.-4      	; 0xbd8 <LCDinit+0xfc>
     bdc:	fe 01       	movw	r30, r28
     bde:	e9 5a       	subi	r30, 0xA9	; 169
     be0:	ff 4f       	sbci	r31, 0xFF	; 255
     be2:	91 83       	std	Z+1, r25	; 0x01
     be4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be6:	de 01       	movw	r26, r28
     be8:	a7 5a       	subi	r26, 0xA7	; 167
     bea:	bf 4f       	sbci	r27, 0xFF	; 255
     bec:	fe 01       	movw	r30, r28
     bee:	e7 5a       	subi	r30, 0xA7	; 167
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	80 81       	ld	r24, Z
     bf4:	91 81       	ldd	r25, Z+1	; 0x01
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	9c 93       	st	X, r25
     bfc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bfe:	fe 01       	movw	r30, r28
     c00:	e7 5a       	subi	r30, 0xA7	; 167
     c02:	ff 4f       	sbci	r31, 0xFF	; 255
     c04:	80 81       	ld	r24, Z
     c06:	91 81       	ldd	r25, Z+1	; 0x01
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	d1 f6       	brne	.-76     	; 0xbc0 <LCDinit+0xe4>
     c0c:	27 c0       	rjmp	.+78     	; 0xc5c <LCDinit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c0e:	8e 01       	movw	r16, r28
     c10:	07 5a       	subi	r16, 0xA7	; 167
     c12:	1f 4f       	sbci	r17, 0xFF	; 255
     c14:	fe 01       	movw	r30, r28
     c16:	e5 5a       	subi	r30, 0xA5	; 165
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	60 81       	ld	r22, Z
     c1c:	71 81       	ldd	r23, Z+1	; 0x01
     c1e:	82 81       	ldd	r24, Z+2	; 0x02
     c20:	93 81       	ldd	r25, Z+3	; 0x03
     c22:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	f8 01       	movw	r30, r16
     c2c:	91 83       	std	Z+1, r25	; 0x01
     c2e:	80 83       	st	Z, r24
     c30:	de 01       	movw	r26, r28
     c32:	ab 5a       	subi	r26, 0xAB	; 171
     c34:	bf 4f       	sbci	r27, 0xFF	; 255
     c36:	fe 01       	movw	r30, r28
     c38:	e7 5a       	subi	r30, 0xA7	; 167
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	80 81       	ld	r24, Z
     c3e:	91 81       	ldd	r25, Z+1	; 0x01
     c40:	8d 93       	st	X+, r24
     c42:	9c 93       	st	X, r25
     c44:	fe 01       	movw	r30, r28
     c46:	eb 5a       	subi	r30, 0xAB	; 171
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	80 81       	ld	r24, Z
     c4c:	91 81       	ldd	r25, Z+1	; 0x01
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <LCDinit+0x172>
     c52:	fe 01       	movw	r30, r28
     c54:	eb 5a       	subi	r30, 0xAB	; 171
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	91 83       	std	Z+1, r25	; 0x01
     c5a:	80 83       	st	Z, r24
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     c5c:	e5 e3       	ldi	r30, 0x35	; 53
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	10 82       	st	Z, r1
	LCP=0x00;
     c62:	e5 e3       	ldi	r30, 0x35	; 53
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	10 82       	st	Z, r1
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     c68:	a4 e3       	ldi	r26, 0x34	; 52
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e4 e3       	ldi	r30, 0x34	; 52
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	80 6f       	ori	r24, 0xF0	; 240
     c74:	8c 93       	st	X, r24
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     c76:	a4 e3       	ldi	r26, 0x34	; 52
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e4 e3       	ldi	r30, 0x34	; 52
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	87 60       	ori	r24, 0x07	; 7
     c82:	8c 93       	st	X, r24
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     c84:	e5 e3       	ldi	r30, 0x35	; 53
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 e3       	ldi	r24, 0x30	; 48
     c8a:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     c8c:	a5 e3       	ldi	r26, 0x35	; 53
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e5 e3       	ldi	r30, 0x35	; 53
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	84 60       	ori	r24, 0x04	; 4
     c98:	8c 93       	st	X, r24
     c9a:	fe 01       	movw	r30, r28
     c9c:	ef 5a       	subi	r30, 0xAF	; 175
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	a0 e8       	ldi	r26, 0x80	; 128
     ca6:	bf e3       	ldi	r27, 0x3F	; 63
     ca8:	80 83       	st	Z, r24
     caa:	91 83       	std	Z+1, r25	; 0x01
     cac:	a2 83       	std	Z+2, r26	; 0x02
     cae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb0:	8e 01       	movw	r16, r28
     cb2:	03 5b       	subi	r16, 0xB3	; 179
     cb4:	1f 4f       	sbci	r17, 0xFF	; 255
     cb6:	fe 01       	movw	r30, r28
     cb8:	ef 5a       	subi	r30, 0xAF	; 175
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	60 81       	ld	r22, Z
     cbe:	71 81       	ldd	r23, Z+1	; 0x01
     cc0:	82 81       	ldd	r24, Z+2	; 0x02
     cc2:	93 81       	ldd	r25, Z+3	; 0x03
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	4a e7       	ldi	r20, 0x7A	; 122
     cca:	54 e4       	ldi	r21, 0x44	; 68
     ccc:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     cd0:	dc 01       	movw	r26, r24
     cd2:	cb 01       	movw	r24, r22
     cd4:	f8 01       	movw	r30, r16
     cd6:	80 83       	st	Z, r24
     cd8:	91 83       	std	Z+1, r25	; 0x01
     cda:	a2 83       	std	Z+2, r26	; 0x02
     cdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cde:	fe 01       	movw	r30, r28
     ce0:	e3 5b       	subi	r30, 0xB3	; 179
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	60 81       	ld	r22, Z
     ce6:	71 81       	ldd	r23, Z+1	; 0x01
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e8       	ldi	r20, 0x80	; 128
     cf2:	5f e3       	ldi	r21, 0x3F	; 63
     cf4:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     cf8:	88 23       	and	r24, r24
     cfa:	44 f4       	brge	.+16     	; 0xd0c <LCDinit+0x230>
		__ticks = 1;
     cfc:	fe 01       	movw	r30, r28
     cfe:	e5 5b       	subi	r30, 0xB5	; 181
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	91 83       	std	Z+1, r25	; 0x01
     d08:	80 83       	st	Z, r24
     d0a:	64 c0       	rjmp	.+200    	; 0xdd4 <LCDinit+0x2f8>
	else if (__tmp > 65535)
     d0c:	fe 01       	movw	r30, r28
     d0e:	e3 5b       	subi	r30, 0xB3	; 179
     d10:	ff 4f       	sbci	r31, 0xFF	; 255
     d12:	60 81       	ld	r22, Z
     d14:	71 81       	ldd	r23, Z+1	; 0x01
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	3f ef       	ldi	r19, 0xFF	; 255
     d1e:	4f e7       	ldi	r20, 0x7F	; 127
     d20:	57 e4       	ldi	r21, 0x47	; 71
     d22:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     d26:	18 16       	cp	r1, r24
     d28:	0c f0       	brlt	.+2      	; 0xd2c <LCDinit+0x250>
     d2a:	43 c0       	rjmp	.+134    	; 0xdb2 <LCDinit+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d2c:	fe 01       	movw	r30, r28
     d2e:	ef 5a       	subi	r30, 0xAF	; 175
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	60 81       	ld	r22, Z
     d34:	71 81       	ldd	r23, Z+1	; 0x01
     d36:	82 81       	ldd	r24, Z+2	; 0x02
     d38:	93 81       	ldd	r25, Z+3	; 0x03
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e2       	ldi	r20, 0x20	; 32
     d40:	51 e4       	ldi	r21, 0x41	; 65
     d42:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	8e 01       	movw	r16, r28
     d4c:	05 5b       	subi	r16, 0xB5	; 181
     d4e:	1f 4f       	sbci	r17, 0xFF	; 255
     d50:	bc 01       	movw	r22, r24
     d52:	cd 01       	movw	r24, r26
     d54:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	f8 01       	movw	r30, r16
     d5e:	91 83       	std	Z+1, r25	; 0x01
     d60:	80 83       	st	Z, r24
     d62:	1f c0       	rjmp	.+62     	; 0xda2 <LCDinit+0x2c6>
     d64:	fe 01       	movw	r30, r28
     d66:	e7 5b       	subi	r30, 0xB7	; 183
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	84 e6       	ldi	r24, 0x64	; 100
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	91 83       	std	Z+1, r25	; 0x01
     d70:	80 83       	st	Z, r24
     d72:	fe 01       	movw	r30, r28
     d74:	e7 5b       	subi	r30, 0xB7	; 183
     d76:	ff 4f       	sbci	r31, 0xFF	; 255
     d78:	80 81       	ld	r24, Z
     d7a:	91 81       	ldd	r25, Z+1	; 0x01
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	f1 f7       	brne	.-4      	; 0xd7c <LCDinit+0x2a0>
     d80:	fe 01       	movw	r30, r28
     d82:	e7 5b       	subi	r30, 0xB7	; 183
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8a:	de 01       	movw	r26, r28
     d8c:	a5 5b       	subi	r26, 0xB5	; 181
     d8e:	bf 4f       	sbci	r27, 0xFF	; 255
     d90:	fe 01       	movw	r30, r28
     d92:	e5 5b       	subi	r30, 0xB5	; 181
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	11 96       	adiw	r26, 0x01	; 1
     d9e:	9c 93       	st	X, r25
     da0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da2:	fe 01       	movw	r30, r28
     da4:	e5 5b       	subi	r30, 0xB5	; 181
     da6:	ff 4f       	sbci	r31, 0xFF	; 255
     da8:	80 81       	ld	r24, Z
     daa:	91 81       	ldd	r25, Z+1	; 0x01
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	d1 f6       	brne	.-76     	; 0xd64 <LCDinit+0x288>
     db0:	27 c0       	rjmp	.+78     	; 0xe00 <LCDinit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db2:	8e 01       	movw	r16, r28
     db4:	05 5b       	subi	r16, 0xB5	; 181
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	fe 01       	movw	r30, r28
     dba:	e3 5b       	subi	r30, 0xB3	; 179
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	60 81       	ld	r22, Z
     dc0:	71 81       	ldd	r23, Z+1	; 0x01
     dc2:	82 81       	ldd	r24, Z+2	; 0x02
     dc4:	93 81       	ldd	r25, Z+3	; 0x03
     dc6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	f8 01       	movw	r30, r16
     dd0:	91 83       	std	Z+1, r25	; 0x01
     dd2:	80 83       	st	Z, r24
     dd4:	de 01       	movw	r26, r28
     dd6:	a9 5b       	subi	r26, 0xB9	; 185
     dd8:	bf 4f       	sbci	r27, 0xFF	; 255
     dda:	fe 01       	movw	r30, r28
     ddc:	e5 5b       	subi	r30, 0xB5	; 181
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	80 81       	ld	r24, Z
     de2:	91 81       	ldd	r25, Z+1	; 0x01
     de4:	8d 93       	st	X+, r24
     de6:	9c 93       	st	X, r25
     de8:	fe 01       	movw	r30, r28
     dea:	e9 5b       	subi	r30, 0xB9	; 185
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	80 81       	ld	r24, Z
     df0:	91 81       	ldd	r25, Z+1	; 0x01
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <LCDinit+0x316>
     df6:	fe 01       	movw	r30, r28
     df8:	e9 5b       	subi	r30, 0xB9	; 185
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	80 83       	st	Z, r24
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e00:	a5 e3       	ldi	r26, 0x35	; 53
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e5 e3       	ldi	r30, 0x35	; 53
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8b 7f       	andi	r24, 0xFB	; 251
     e0c:	8c 93       	st	X, r24
     e0e:	fe 01       	movw	r30, r28
     e10:	ed 5b       	subi	r30, 0xBD	; 189
     e12:	ff 4f       	sbci	r31, 0xFF	; 255
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	a0 e8       	ldi	r26, 0x80	; 128
     e1a:	bf e3       	ldi	r27, 0x3F	; 63
     e1c:	80 83       	st	Z, r24
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	a2 83       	std	Z+2, r26	; 0x02
     e22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e24:	8e 01       	movw	r16, r28
     e26:	01 5c       	subi	r16, 0xC1	; 193
     e28:	1f 4f       	sbci	r17, 0xFF	; 255
     e2a:	fe 01       	movw	r30, r28
     e2c:	ed 5b       	subi	r30, 0xBD	; 189
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	60 81       	ld	r22, Z
     e32:	71 81       	ldd	r23, Z+1	; 0x01
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	93 81       	ldd	r25, Z+3	; 0x03
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	4a e7       	ldi	r20, 0x7A	; 122
     e3e:	54 e4       	ldi	r21, 0x44	; 68
     e40:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	f8 01       	movw	r30, r16
     e4a:	80 83       	st	Z, r24
     e4c:	91 83       	std	Z+1, r25	; 0x01
     e4e:	a2 83       	std	Z+2, r26	; 0x02
     e50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e52:	fe 01       	movw	r30, r28
     e54:	ff 96       	adiw	r30, 0x3f	; 63
     e56:	60 81       	ld	r22, Z
     e58:	71 81       	ldd	r23, Z+1	; 0x01
     e5a:	82 81       	ldd	r24, Z+2	; 0x02
     e5c:	93 81       	ldd	r25, Z+3	; 0x03
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e8       	ldi	r20, 0x80	; 128
     e64:	5f e3       	ldi	r21, 0x3F	; 63
     e66:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     e6a:	88 23       	and	r24, r24
     e6c:	2c f4       	brge	.+10     	; 0xe78 <LCDinit+0x39c>
		__ticks = 1;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	9e af       	std	Y+62, r25	; 0x3e
     e74:	8d af       	std	Y+61, r24	; 0x3d
     e76:	46 c0       	rjmp	.+140    	; 0xf04 <LCDinit+0x428>
	else if (__tmp > 65535)
     e78:	fe 01       	movw	r30, r28
     e7a:	ff 96       	adiw	r30, 0x3f	; 63
     e7c:	60 81       	ld	r22, Z
     e7e:	71 81       	ldd	r23, Z+1	; 0x01
     e80:	82 81       	ldd	r24, Z+2	; 0x02
     e82:	93 81       	ldd	r25, Z+3	; 0x03
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	3f ef       	ldi	r19, 0xFF	; 255
     e88:	4f e7       	ldi	r20, 0x7F	; 127
     e8a:	57 e4       	ldi	r21, 0x47	; 71
     e8c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     e90:	18 16       	cp	r1, r24
     e92:	64 f5       	brge	.+88     	; 0xeec <LCDinit+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e94:	fe 01       	movw	r30, r28
     e96:	ed 5b       	subi	r30, 0xBD	; 189
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	60 81       	ld	r22, Z
     e9c:	71 81       	ldd	r23, Z+1	; 0x01
     e9e:	82 81       	ldd	r24, Z+2	; 0x02
     ea0:	93 81       	ldd	r25, Z+3	; 0x03
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e2       	ldi	r20, 0x20	; 32
     ea8:	51 e4       	ldi	r21, 0x41	; 65
     eaa:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	bc 01       	movw	r22, r24
     eb4:	cd 01       	movw	r24, r26
     eb6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	9e af       	std	Y+62, r25	; 0x3e
     ec0:	8d af       	std	Y+61, r24	; 0x3d
     ec2:	0f c0       	rjmp	.+30     	; 0xee2 <LCDinit+0x406>
     ec4:	84 e6       	ldi	r24, 0x64	; 100
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	9c af       	std	Y+60, r25	; 0x3c
     eca:	8b af       	std	Y+59, r24	; 0x3b
     ecc:	8b ad       	ldd	r24, Y+59	; 0x3b
     ece:	9c ad       	ldd	r25, Y+60	; 0x3c
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <LCDinit+0x3f4>
     ed4:	9c af       	std	Y+60, r25	; 0x3c
     ed6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed8:	8d ad       	ldd	r24, Y+61	; 0x3d
     eda:	9e ad       	ldd	r25, Y+62	; 0x3e
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	9e af       	std	Y+62, r25	; 0x3e
     ee0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee2:	8d ad       	ldd	r24, Y+61	; 0x3d
     ee4:	9e ad       	ldd	r25, Y+62	; 0x3e
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	69 f7       	brne	.-38     	; 0xec4 <LCDinit+0x3e8>
     eea:	16 c0       	rjmp	.+44     	; 0xf18 <LCDinit+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eec:	fe 01       	movw	r30, r28
     eee:	ff 96       	adiw	r30, 0x3f	; 63
     ef0:	60 81       	ld	r22, Z
     ef2:	71 81       	ldd	r23, Z+1	; 0x01
     ef4:	82 81       	ldd	r24, Z+2	; 0x02
     ef6:	93 81       	ldd	r25, Z+3	; 0x03
     ef8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	9e af       	std	Y+62, r25	; 0x3e
     f02:	8d af       	std	Y+61, r24	; 0x3d
     f04:	8d ad       	ldd	r24, Y+61	; 0x3d
     f06:	9e ad       	ldd	r25, Y+62	; 0x3e
     f08:	9a af       	std	Y+58, r25	; 0x3a
     f0a:	89 af       	std	Y+57, r24	; 0x39
     f0c:	89 ad       	ldd	r24, Y+57	; 0x39
     f0e:	9a ad       	ldd	r25, Y+58	; 0x3a
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <LCDinit+0x434>
     f14:	9a af       	std	Y+58, r25	; 0x3a
     f16:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     f18:	e5 e3       	ldi	r30, 0x35	; 53
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 e3       	ldi	r24, 0x30	; 48
     f1e:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     f20:	a5 e3       	ldi	r26, 0x35	; 53
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e5 e3       	ldi	r30, 0x35	; 53
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	84 60       	ori	r24, 0x04	; 4
     f2c:	8c 93       	st	X, r24
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	a0 e8       	ldi	r26, 0x80	; 128
     f34:	bf e3       	ldi	r27, 0x3F	; 63
     f36:	8d ab       	std	Y+53, r24	; 0x35
     f38:	9e ab       	std	Y+54, r25	; 0x36
     f3a:	af ab       	std	Y+55, r26	; 0x37
     f3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f3e:	6d a9       	ldd	r22, Y+53	; 0x35
     f40:	7e a9       	ldd	r23, Y+54	; 0x36
     f42:	8f a9       	ldd	r24, Y+55	; 0x37
     f44:	98 ad       	ldd	r25, Y+56	; 0x38
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	4a e7       	ldi	r20, 0x7A	; 122
     f4c:	54 e4       	ldi	r21, 0x44	; 68
     f4e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	89 ab       	std	Y+49, r24	; 0x31
     f58:	9a ab       	std	Y+50, r25	; 0x32
     f5a:	ab ab       	std	Y+51, r26	; 0x33
     f5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f5e:	69 a9       	ldd	r22, Y+49	; 0x31
     f60:	7a a9       	ldd	r23, Y+50	; 0x32
     f62:	8b a9       	ldd	r24, Y+51	; 0x33
     f64:	9c a9       	ldd	r25, Y+52	; 0x34
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e8       	ldi	r20, 0x80	; 128
     f6c:	5f e3       	ldi	r21, 0x3F	; 63
     f6e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     f72:	88 23       	and	r24, r24
     f74:	2c f4       	brge	.+10     	; 0xf80 <LCDinit+0x4a4>
		__ticks = 1;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	98 ab       	std	Y+48, r25	; 0x30
     f7c:	8f a7       	std	Y+47, r24	; 0x2f
     f7e:	3f c0       	rjmp	.+126    	; 0xffe <LCDinit+0x522>
	else if (__tmp > 65535)
     f80:	69 a9       	ldd	r22, Y+49	; 0x31
     f82:	7a a9       	ldd	r23, Y+50	; 0x32
     f84:	8b a9       	ldd	r24, Y+51	; 0x33
     f86:	9c a9       	ldd	r25, Y+52	; 0x34
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	3f ef       	ldi	r19, 0xFF	; 255
     f8c:	4f e7       	ldi	r20, 0x7F	; 127
     f8e:	57 e4       	ldi	r21, 0x47	; 71
     f90:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     f94:	18 16       	cp	r1, r24
     f96:	4c f5       	brge	.+82     	; 0xfea <LCDinit+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f98:	6d a9       	ldd	r22, Y+53	; 0x35
     f9a:	7e a9       	ldd	r23, Y+54	; 0x36
     f9c:	8f a9       	ldd	r24, Y+55	; 0x37
     f9e:	98 ad       	ldd	r25, Y+56	; 0x38
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e2       	ldi	r20, 0x20	; 32
     fa6:	51 e4       	ldi	r21, 0x41	; 65
     fa8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	bc 01       	movw	r22, r24
     fb2:	cd 01       	movw	r24, r26
     fb4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	98 ab       	std	Y+48, r25	; 0x30
     fbe:	8f a7       	std	Y+47, r24	; 0x2f
     fc0:	0f c0       	rjmp	.+30     	; 0xfe0 <LCDinit+0x504>
     fc2:	84 e6       	ldi	r24, 0x64	; 100
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	9e a7       	std	Y+46, r25	; 0x2e
     fc8:	8d a7       	std	Y+45, r24	; 0x2d
     fca:	8d a5       	ldd	r24, Y+45	; 0x2d
     fcc:	9e a5       	ldd	r25, Y+46	; 0x2e
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <LCDinit+0x4f2>
     fd2:	9e a7       	std	Y+46, r25	; 0x2e
     fd4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd6:	8f a5       	ldd	r24, Y+47	; 0x2f
     fd8:	98 a9       	ldd	r25, Y+48	; 0x30
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	98 ab       	std	Y+48, r25	; 0x30
     fde:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe0:	8f a5       	ldd	r24, Y+47	; 0x2f
     fe2:	98 a9       	ldd	r25, Y+48	; 0x30
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	69 f7       	brne	.-38     	; 0xfc2 <LCDinit+0x4e6>
     fe8:	14 c0       	rjmp	.+40     	; 0x1012 <LCDinit+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fea:	69 a9       	ldd	r22, Y+49	; 0x31
     fec:	7a a9       	ldd	r23, Y+50	; 0x32
     fee:	8b a9       	ldd	r24, Y+51	; 0x33
     ff0:	9c a9       	ldd	r25, Y+52	; 0x34
     ff2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	98 ab       	std	Y+48, r25	; 0x30
     ffc:	8f a7       	std	Y+47, r24	; 0x2f
     ffe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1000:	98 a9       	ldd	r25, Y+48	; 0x30
    1002:	9c a7       	std	Y+44, r25	; 0x2c
    1004:	8b a7       	std	Y+43, r24	; 0x2b
    1006:	8b a5       	ldd	r24, Y+43	; 0x2b
    1008:	9c a5       	ldd	r25, Y+44	; 0x2c
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <LCDinit+0x52e>
    100e:	9c a7       	std	Y+44, r25	; 0x2c
    1010:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1012:	a5 e3       	ldi	r26, 0x35	; 53
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e5 e3       	ldi	r30, 0x35	; 53
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	8b 7f       	andi	r24, 0xFB	; 251
    101e:	8c 93       	st	X, r24
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	a0 e8       	ldi	r26, 0x80	; 128
    1026:	bf e3       	ldi	r27, 0x3F	; 63
    1028:	8f a3       	std	Y+39, r24	; 0x27
    102a:	98 a7       	std	Y+40, r25	; 0x28
    102c:	a9 a7       	std	Y+41, r26	; 0x29
    102e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1030:	6f a1       	ldd	r22, Y+39	; 0x27
    1032:	78 a5       	ldd	r23, Y+40	; 0x28
    1034:	89 a5       	ldd	r24, Y+41	; 0x29
    1036:	9a a5       	ldd	r25, Y+42	; 0x2a
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	4a e7       	ldi	r20, 0x7A	; 122
    103e:	54 e4       	ldi	r21, 0x44	; 68
    1040:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	8b a3       	std	Y+35, r24	; 0x23
    104a:	9c a3       	std	Y+36, r25	; 0x24
    104c:	ad a3       	std	Y+37, r26	; 0x25
    104e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1050:	6b a1       	ldd	r22, Y+35	; 0x23
    1052:	7c a1       	ldd	r23, Y+36	; 0x24
    1054:	8d a1       	ldd	r24, Y+37	; 0x25
    1056:	9e a1       	ldd	r25, Y+38	; 0x26
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e8       	ldi	r20, 0x80	; 128
    105e:	5f e3       	ldi	r21, 0x3F	; 63
    1060:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
    1064:	88 23       	and	r24, r24
    1066:	2c f4       	brge	.+10     	; 0x1072 <LCDinit+0x596>
		__ticks = 1;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9a a3       	std	Y+34, r25	; 0x22
    106e:	89 a3       	std	Y+33, r24	; 0x21
    1070:	3f c0       	rjmp	.+126    	; 0x10f0 <LCDinit+0x614>
	else if (__tmp > 65535)
    1072:	6b a1       	ldd	r22, Y+35	; 0x23
    1074:	7c a1       	ldd	r23, Y+36	; 0x24
    1076:	8d a1       	ldd	r24, Y+37	; 0x25
    1078:	9e a1       	ldd	r25, Y+38	; 0x26
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	3f ef       	ldi	r19, 0xFF	; 255
    107e:	4f e7       	ldi	r20, 0x7F	; 127
    1080:	57 e4       	ldi	r21, 0x47	; 71
    1082:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
    1086:	18 16       	cp	r1, r24
    1088:	4c f5       	brge	.+82     	; 0x10dc <LCDinit+0x600>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    108a:	6f a1       	ldd	r22, Y+39	; 0x27
    108c:	78 a5       	ldd	r23, Y+40	; 0x28
    108e:	89 a5       	ldd	r24, Y+41	; 0x29
    1090:	9a a5       	ldd	r25, Y+42	; 0x2a
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e2       	ldi	r20, 0x20	; 32
    1098:	51 e4       	ldi	r21, 0x41	; 65
    109a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	9a a3       	std	Y+34, r25	; 0x22
    10b0:	89 a3       	std	Y+33, r24	; 0x21
    10b2:	0f c0       	rjmp	.+30     	; 0x10d2 <LCDinit+0x5f6>
    10b4:	84 e6       	ldi	r24, 0x64	; 100
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	98 a3       	std	Y+32, r25	; 0x20
    10ba:	8f 8f       	std	Y+31, r24	; 0x1f
    10bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10be:	98 a1       	ldd	r25, Y+32	; 0x20
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <LCDinit+0x5e4>
    10c4:	98 a3       	std	Y+32, r25	; 0x20
    10c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c8:	89 a1       	ldd	r24, Y+33	; 0x21
    10ca:	9a a1       	ldd	r25, Y+34	; 0x22
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	9a a3       	std	Y+34, r25	; 0x22
    10d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d2:	89 a1       	ldd	r24, Y+33	; 0x21
    10d4:	9a a1       	ldd	r25, Y+34	; 0x22
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	69 f7       	brne	.-38     	; 0x10b4 <LCDinit+0x5d8>
    10da:	14 c0       	rjmp	.+40     	; 0x1104 <LCDinit+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10dc:	6b a1       	ldd	r22, Y+35	; 0x23
    10de:	7c a1       	ldd	r23, Y+36	; 0x24
    10e0:	8d a1       	ldd	r24, Y+37	; 0x25
    10e2:	9e a1       	ldd	r25, Y+38	; 0x26
    10e4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	9a a3       	std	Y+34, r25	; 0x22
    10ee:	89 a3       	std	Y+33, r24	; 0x21
    10f0:	89 a1       	ldd	r24, Y+33	; 0x21
    10f2:	9a a1       	ldd	r25, Y+34	; 0x22
    10f4:	9e 8f       	std	Y+30, r25	; 0x1e
    10f6:	8d 8f       	std	Y+29, r24	; 0x1d
    10f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <LCDinit+0x620>
    1100:	9e 8f       	std	Y+30, r25	; 0x1e
    1102:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1104:	e5 e3       	ldi	r30, 0x35	; 53
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 e2       	ldi	r24, 0x20	; 32
    110a:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    110c:	a5 e3       	ldi	r26, 0x35	; 53
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e5 e3       	ldi	r30, 0x35	; 53
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	84 60       	ori	r24, 0x04	; 4
    1118:	8c 93       	st	X, r24
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a0 e8       	ldi	r26, 0x80	; 128
    1120:	bf e3       	ldi	r27, 0x3F	; 63
    1122:	89 8f       	std	Y+25, r24	; 0x19
    1124:	9a 8f       	std	Y+26, r25	; 0x1a
    1126:	ab 8f       	std	Y+27, r26	; 0x1b
    1128:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112a:	69 8d       	ldd	r22, Y+25	; 0x19
    112c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    112e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1130:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	4a e7       	ldi	r20, 0x7A	; 122
    1138:	54 e4       	ldi	r21, 0x44	; 68
    113a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	8d 8b       	std	Y+21, r24	; 0x15
    1144:	9e 8b       	std	Y+22, r25	; 0x16
    1146:	af 8b       	std	Y+23, r26	; 0x17
    1148:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    114a:	6d 89       	ldd	r22, Y+21	; 0x15
    114c:	7e 89       	ldd	r23, Y+22	; 0x16
    114e:	8f 89       	ldd	r24, Y+23	; 0x17
    1150:	98 8d       	ldd	r25, Y+24	; 0x18
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e8       	ldi	r20, 0x80	; 128
    1158:	5f e3       	ldi	r21, 0x3F	; 63
    115a:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
    115e:	88 23       	and	r24, r24
    1160:	2c f4       	brge	.+10     	; 0x116c <LCDinit+0x690>
		__ticks = 1;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	9c 8b       	std	Y+20, r25	; 0x14
    1168:	8b 8b       	std	Y+19, r24	; 0x13
    116a:	3f c0       	rjmp	.+126    	; 0x11ea <LCDinit+0x70e>
	else if (__tmp > 65535)
    116c:	6d 89       	ldd	r22, Y+21	; 0x15
    116e:	7e 89       	ldd	r23, Y+22	; 0x16
    1170:	8f 89       	ldd	r24, Y+23	; 0x17
    1172:	98 8d       	ldd	r25, Y+24	; 0x18
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	3f ef       	ldi	r19, 0xFF	; 255
    1178:	4f e7       	ldi	r20, 0x7F	; 127
    117a:	57 e4       	ldi	r21, 0x47	; 71
    117c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
    1180:	18 16       	cp	r1, r24
    1182:	4c f5       	brge	.+82     	; 0x11d6 <LCDinit+0x6fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1184:	69 8d       	ldd	r22, Y+25	; 0x19
    1186:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1188:	8b 8d       	ldd	r24, Y+27	; 0x1b
    118a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e2       	ldi	r20, 0x20	; 32
    1192:	51 e4       	ldi	r21, 0x41	; 65
    1194:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	bc 01       	movw	r22, r24
    119e:	cd 01       	movw	r24, r26
    11a0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	9c 8b       	std	Y+20, r25	; 0x14
    11aa:	8b 8b       	std	Y+19, r24	; 0x13
    11ac:	0f c0       	rjmp	.+30     	; 0x11cc <LCDinit+0x6f0>
    11ae:	84 e6       	ldi	r24, 0x64	; 100
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	9a 8b       	std	Y+18, r25	; 0x12
    11b4:	89 8b       	std	Y+17, r24	; 0x11
    11b6:	89 89       	ldd	r24, Y+17	; 0x11
    11b8:	9a 89       	ldd	r25, Y+18	; 0x12
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <LCDinit+0x6de>
    11be:	9a 8b       	std	Y+18, r25	; 0x12
    11c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c2:	8b 89       	ldd	r24, Y+19	; 0x13
    11c4:	9c 89       	ldd	r25, Y+20	; 0x14
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	9c 8b       	std	Y+20, r25	; 0x14
    11ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11cc:	8b 89       	ldd	r24, Y+19	; 0x13
    11ce:	9c 89       	ldd	r25, Y+20	; 0x14
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	69 f7       	brne	.-38     	; 0x11ae <LCDinit+0x6d2>
    11d4:	14 c0       	rjmp	.+40     	; 0x11fe <LCDinit+0x722>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d6:	6d 89       	ldd	r22, Y+21	; 0x15
    11d8:	7e 89       	ldd	r23, Y+22	; 0x16
    11da:	8f 89       	ldd	r24, Y+23	; 0x17
    11dc:	98 8d       	ldd	r25, Y+24	; 0x18
    11de:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	9c 8b       	std	Y+20, r25	; 0x14
    11e8:	8b 8b       	std	Y+19, r24	; 0x13
    11ea:	8b 89       	ldd	r24, Y+19	; 0x13
    11ec:	9c 89       	ldd	r25, Y+20	; 0x14
    11ee:	98 8b       	std	Y+16, r25	; 0x10
    11f0:	8f 87       	std	Y+15, r24	; 0x0f
    11f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f4:	98 89       	ldd	r25, Y+16	; 0x10
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <LCDinit+0x71a>
    11fa:	98 8b       	std	Y+16, r25	; 0x10
    11fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    11fe:	a5 e3       	ldi	r26, 0x35	; 53
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e5 e3       	ldi	r30, 0x35	; 53
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	8b 7f       	andi	r24, 0xFB	; 251
    120a:	8c 93       	st	X, r24
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	a0 e8       	ldi	r26, 0x80	; 128
    1212:	bf e3       	ldi	r27, 0x3F	; 63
    1214:	8b 87       	std	Y+11, r24	; 0x0b
    1216:	9c 87       	std	Y+12, r25	; 0x0c
    1218:	ad 87       	std	Y+13, r26	; 0x0d
    121a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121c:	6b 85       	ldd	r22, Y+11	; 0x0b
    121e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1220:	8d 85       	ldd	r24, Y+13	; 0x0d
    1222:	9e 85       	ldd	r25, Y+14	; 0x0e
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	4a e7       	ldi	r20, 0x7A	; 122
    122a:	54 e4       	ldi	r21, 0x44	; 68
    122c:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	8f 83       	std	Y+7, r24	; 0x07
    1236:	98 87       	std	Y+8, r25	; 0x08
    1238:	a9 87       	std	Y+9, r26	; 0x09
    123a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    123c:	6f 81       	ldd	r22, Y+7	; 0x07
    123e:	78 85       	ldd	r23, Y+8	; 0x08
    1240:	89 85       	ldd	r24, Y+9	; 0x09
    1242:	9a 85       	ldd	r25, Y+10	; 0x0a
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e8       	ldi	r20, 0x80	; 128
    124a:	5f e3       	ldi	r21, 0x3F	; 63
    124c:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
    1250:	88 23       	and	r24, r24
    1252:	2c f4       	brge	.+10     	; 0x125e <LCDinit+0x782>
		__ticks = 1;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	9e 83       	std	Y+6, r25	; 0x06
    125a:	8d 83       	std	Y+5, r24	; 0x05
    125c:	3f c0       	rjmp	.+126    	; 0x12dc <LCDinit+0x800>
	else if (__tmp > 65535)
    125e:	6f 81       	ldd	r22, Y+7	; 0x07
    1260:	78 85       	ldd	r23, Y+8	; 0x08
    1262:	89 85       	ldd	r24, Y+9	; 0x09
    1264:	9a 85       	ldd	r25, Y+10	; 0x0a
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	3f ef       	ldi	r19, 0xFF	; 255
    126a:	4f e7       	ldi	r20, 0x7F	; 127
    126c:	57 e4       	ldi	r21, 0x47	; 71
    126e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
    1272:	18 16       	cp	r1, r24
    1274:	4c f5       	brge	.+82     	; 0x12c8 <LCDinit+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1276:	6b 85       	ldd	r22, Y+11	; 0x0b
    1278:	7c 85       	ldd	r23, Y+12	; 0x0c
    127a:	8d 85       	ldd	r24, Y+13	; 0x0d
    127c:	9e 85       	ldd	r25, Y+14	; 0x0e
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e2       	ldi	r20, 0x20	; 32
    1284:	51 e4       	ldi	r21, 0x41	; 65
    1286:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	bc 01       	movw	r22, r24
    1290:	cd 01       	movw	r24, r26
    1292:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	9e 83       	std	Y+6, r25	; 0x06
    129c:	8d 83       	std	Y+5, r24	; 0x05
    129e:	0f c0       	rjmp	.+30     	; 0x12be <LCDinit+0x7e2>
    12a0:	84 e6       	ldi	r24, 0x64	; 100
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	9c 83       	std	Y+4, r25	; 0x04
    12a6:	8b 83       	std	Y+3, r24	; 0x03
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <LCDinit+0x7d0>
    12b0:	9c 83       	std	Y+4, r25	; 0x04
    12b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b4:	8d 81       	ldd	r24, Y+5	; 0x05
    12b6:	9e 81       	ldd	r25, Y+6	; 0x06
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	9e 83       	std	Y+6, r25	; 0x06
    12bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12be:	8d 81       	ldd	r24, Y+5	; 0x05
    12c0:	9e 81       	ldd	r25, Y+6	; 0x06
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	69 f7       	brne	.-38     	; 0x12a0 <LCDinit+0x7c4>
    12c6:	14 c0       	rjmp	.+40     	; 0x12f0 <LCDinit+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ca:	78 85       	ldd	r23, Y+8	; 0x08
    12cc:	89 85       	ldd	r24, Y+9	; 0x09
    12ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	9e 83       	std	Y+6, r25	; 0x06
    12da:	8d 83       	std	Y+5, r24	; 0x05
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
    12e0:	9a 83       	std	Y+2, r25	; 0x02
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <LCDinit+0x80c>
    12ec:	9a 83       	std	Y+2, r25	; 0x02
    12ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    12f0:	88 e2       	ldi	r24, 0x28	; 40
    12f2:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    12f6:	8c e0       	ldi	r24, 0x0C	; 12
    12f8:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
    12fc:	fe 01       	movw	r30, r28
    12fe:	ec 59       	subi	r30, 0x9C	; 156
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	10 82       	st	Z, r1
    1304:	fe 01       	movw	r30, r28
    1306:	ed 59       	subi	r30, 0x9D	; 157
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	10 82       	st	Z, r1
    130c:	23 c0       	rjmp	.+70     	; 0x1354 <LCDinit+0x878>
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    130e:	fe 01       	movw	r30, r28
    1310:	ec 59       	subi	r30, 0x9C	; 156
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	80 81       	ld	r24, Z
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	9c 01       	movw	r18, r24
    131c:	2c 5a       	subi	r18, 0xAC	; 172
    131e:	3f 4f       	sbci	r19, 0xFF	; 255
    1320:	fe 01       	movw	r30, r28
    1322:	ed 59       	subi	r30, 0x9D	; 157
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	40 81       	ld	r20, Z
    1328:	de 01       	movw	r26, r28
    132a:	ad 59       	subi	r26, 0x9D	; 157
    132c:	bf 4f       	sbci	r27, 0xFF	; 255
    132e:	fe 01       	movw	r30, r28
    1330:	ed 59       	subi	r30, 0x9D	; 157
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	80 81       	ld	r24, Z
    1336:	8f 5f       	subi	r24, 0xFF	; 255
    1338:	8c 93       	st	X, r24
    133a:	c9 01       	movw	r24, r18
    133c:	64 2f       	mov	r22, r20
    133e:	0e 94 80 0a 	call	0x1500	; 0x1500 <LCDdefinechar>
		ch=ch+8;
    1342:	de 01       	movw	r26, r28
    1344:	ac 59       	subi	r26, 0x9C	; 156
    1346:	bf 4f       	sbci	r27, 0xFF	; 255
    1348:	fe 01       	movw	r30, r28
    134a:	ec 59       	subi	r30, 0x9C	; 156
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	80 81       	ld	r24, Z
    1350:	88 5f       	subi	r24, 0xF8	; 248
    1352:	8c 93       	st	X, r24
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1354:	fe 01       	movw	r30, r28
    1356:	ec 59       	subi	r30, 0x9C	; 156
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	80 81       	ld	r24, Z
    135c:	80 34       	cpi	r24, 0x40	; 64
    135e:	b8 f2       	brcs	.-82     	; 0x130e <LCDinit+0x832>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1360:	cc 59       	subi	r28, 0x9C	; 156
    1362:	df 4f       	sbci	r29, 0xFF	; 255
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	08 95       	ret

00001378 <LCDclr>:
void LCDclr(void)				//Clears LCD
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_CLR);
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCDsendCommand>
}
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_HOME);
    1394:	82 e0       	ldi	r24, 0x02	; 2
    1396:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCDsendCommand>
}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <LCDstring+0x6>
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <LCDstring+0x8>
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	9a 83       	std	Y+2, r25	; 0x02
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	6b 83       	std	Y+3, r22	; 0x03
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	9a 81       	ldd	r25, Y+2	; 0x02
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	a1 f0       	breq	.+40     	; 0x13e2 <LCDstring+0x42>

	// print data
	for(i=0; i<nBytes; i++)
    13ba:	1c 82       	std	Y+4, r1	; 0x04
    13bc:	0e c0       	rjmp	.+28     	; 0x13da <LCDstring+0x3a>
	{
		LCDsendChar(data[i]);
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	fc 01       	movw	r30, r24
    13ca:	e2 0f       	add	r30, r18
    13cc:	f3 1f       	adc	r31, r19
    13ce:	80 81       	ld	r24, Z
    13d0:	0e 94 40 01 	call	0x280	; 0x280 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	9f 5f       	subi	r25, 0xFF	; 255
    13d8:	9c 83       	std	Y+4, r25	; 0x04
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	98 17       	cp	r25, r24
    13e0:	70 f3       	brcs	.-36     	; 0x13be <LCDstring+0x1e>
	{
		LCDsendChar(data[i]);
	}
}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <LCDGotoXY+0x6>
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <LCDGotoXY+0x8>
    13f8:	0f 92       	push	r0
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	6a 83       	std	Y+2, r22	; 0x02
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	3d 83       	std	Y+5, r19	; 0x05
    140a:	2c 83       	std	Y+4, r18	; 0x04
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	91 05       	cpc	r25, r1
    1414:	c1 f0       	breq	.+48     	; 0x1446 <LCDGotoXY+0x56>
    1416:	2c 81       	ldd	r18, Y+4	; 0x04
    1418:	3d 81       	ldd	r19, Y+5	; 0x05
    141a:	22 30       	cpi	r18, 0x02	; 2
    141c:	31 05       	cpc	r19, r1
    141e:	2c f4       	brge	.+10     	; 0x142a <LCDGotoXY+0x3a>
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	9d 81       	ldd	r25, Y+5	; 0x05
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	61 f0       	breq	.+24     	; 0x1440 <LCDGotoXY+0x50>
    1428:	1d c0       	rjmp	.+58     	; 0x1464 <LCDGotoXY+0x74>
    142a:	2c 81       	ldd	r18, Y+4	; 0x04
    142c:	3d 81       	ldd	r19, Y+5	; 0x05
    142e:	22 30       	cpi	r18, 0x02	; 2
    1430:	31 05       	cpc	r19, r1
    1432:	71 f0       	breq	.+28     	; 0x1450 <LCDGotoXY+0x60>
    1434:	8c 81       	ldd	r24, Y+4	; 0x04
    1436:	9d 81       	ldd	r25, Y+5	; 0x05
    1438:	83 30       	cpi	r24, 0x03	; 3
    143a:	91 05       	cpc	r25, r1
    143c:	71 f0       	breq	.+28     	; 0x145a <LCDGotoXY+0x6a>
    143e:	12 c0       	rjmp	.+36     	; 0x1464 <LCDGotoXY+0x74>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
    1440:	99 81       	ldd	r25, Y+1	; 0x01
    1442:	9b 83       	std	Y+3, r25	; 0x03
    1444:	11 c0       	rjmp	.+34     	; 0x1468 <LCDGotoXY+0x78>
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	28 2f       	mov	r18, r24
    144a:	20 5c       	subi	r18, 0xC0	; 192
    144c:	2b 83       	std	Y+3, r18	; 0x03
    144e:	0c c0       	rjmp	.+24     	; 0x1468 <LCDGotoXY+0x78>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	38 2f       	mov	r19, r24
    1454:	3c 5e       	subi	r19, 0xEC	; 236
    1456:	3b 83       	std	Y+3, r19	; 0x03
    1458:	07 c0       	rjmp	.+14     	; 0x1468 <LCDGotoXY+0x78>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	98 2f       	mov	r25, r24
    145e:	9c 5a       	subi	r25, 0xAC	; 172
    1460:	9b 83       	std	Y+3, r25	; 0x03
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <LCDGotoXY+0x78>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
    1464:	29 81       	ldd	r18, Y+1	; 0x01
    1466:	2b 83       	std	Y+3, r18	; 0x03
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	80 68       	ori	r24, 0x80	; 128
    146c:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCDsendCommand>
	
}
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	2b 97       	sbiw	r28, 0x0b	; 11
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	99 87       	std	Y+9, r25	; 0x09
    1496:	88 87       	std	Y+8, r24	; 0x08
    1498:	6a 87       	std	Y+10, r22	; 0x0a
    149a:	4b 87       	std	Y+11, r20	; 0x0b
	uint8_t i;
	LCDGotoXY(x,y);
    149c:	8a 85       	ldd	r24, Y+10	; 0x0a
    149e:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a0:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    14a4:	1f 82       	std	Y+7, r1	; 0x07
    14a6:	13 c0       	rjmp	.+38     	; 0x14ce <CopyStringtoLCD+0x4e>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    14a8:	8f 81       	ldd	r24, Y+7	; 0x07
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	88 85       	ldd	r24, Y+8	; 0x08
    14b0:	99 85       	ldd	r25, Y+9	; 0x09
    14b2:	82 0f       	add	r24, r18
    14b4:	93 1f       	adc	r25, r19
    14b6:	9e 83       	std	Y+6, r25	; 0x06
    14b8:	8d 83       	std	Y+5, r24	; 0x05
    14ba:	ed 81       	ldd	r30, Y+5	; 0x05
    14bc:	fe 81       	ldd	r31, Y+6	; 0x06
    14be:	84 91       	lpm	r24, Z+
    14c0:	8c 83       	std	Y+4, r24	; 0x04
    14c2:	8c 81       	ldd	r24, Y+4	; 0x04
    14c4:	0e 94 40 01 	call	0x280	; 0x280 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    14c8:	8f 81       	ldd	r24, Y+7	; 0x07
    14ca:	8f 5f       	subi	r24, 0xFF	; 255
    14cc:	8f 83       	std	Y+7, r24	; 0x07
    14ce:	8f 81       	ldd	r24, Y+7	; 0x07
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	88 85       	ldd	r24, Y+8	; 0x08
    14d6:	99 85       	ldd	r25, Y+9	; 0x09
    14d8:	82 0f       	add	r24, r18
    14da:	93 1f       	adc	r25, r19
    14dc:	9b 83       	std	Y+3, r25	; 0x03
    14de:	8a 83       	std	Y+2, r24	; 0x02
    14e0:	ea 81       	ldd	r30, Y+2	; 0x02
    14e2:	fb 81       	ldd	r31, Y+3	; 0x03
    14e4:	84 91       	lpm	r24, Z+
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	88 23       	and	r24, r24
    14ec:	e9 f6       	brne	.-70     	; 0x14a8 <CopyStringtoLCD+0x28>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    14ee:	2b 96       	adiw	r28, 0x0b	; 11
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	2a 97       	sbiw	r28, 0x0a	; 10
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	99 87       	std	Y+9, r25	; 0x09
    1516:	88 87       	std	Y+8, r24	; 0x08
    1518:	6a 87       	std	Y+10, r22	; 0x0a
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    151a:	8a 85       	ldd	r24, Y+10	; 0x0a
    151c:	88 2f       	mov	r24, r24
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	80 64       	ori	r24, 0x40	; 64
    152e:	8f 83       	std	Y+7, r24	; 0x07
	for (i=0; i<8; i++){
    1530:	1d 82       	std	Y+5, r1	; 0x05
    1532:	1c 82       	std	Y+4, r1	; 0x04
    1534:	1d c0       	rjmp	.+58     	; 0x1570 <LCDdefinechar+0x70>
		pcc=pgm_read_byte(&pc[i]);
    1536:	28 85       	ldd	r18, Y+8	; 0x08
    1538:	39 85       	ldd	r19, Y+9	; 0x09
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	9d 81       	ldd	r25, Y+5	; 0x05
    153e:	82 0f       	add	r24, r18
    1540:	93 1f       	adc	r25, r19
    1542:	9b 83       	std	Y+3, r25	; 0x03
    1544:	8a 83       	std	Y+2, r24	; 0x02
    1546:	ea 81       	ldd	r30, Y+2	; 0x02
    1548:	fb 81       	ldd	r31, Y+3	; 0x03
    154a:	84 91       	lpm	r24, Z+
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	8e 83       	std	Y+6, r24	; 0x06
		LCDsendCommand(a++);
    1552:	9f 81       	ldd	r25, Y+7	; 0x07
    1554:	8f 81       	ldd	r24, Y+7	; 0x07
    1556:	8f 5f       	subi	r24, 0xFF	; 255
    1558:	8f 83       	std	Y+7, r24	; 0x07
    155a:	89 2f       	mov	r24, r25
    155c:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCDsendCommand>
		LCDsendChar(pcc);
    1560:	8e 81       	ldd	r24, Y+6	; 0x06
    1562:	0e 94 40 01 	call	0x280	; 0x280 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
    1568:	9d 81       	ldd	r25, Y+5	; 0x05
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	9d 83       	std	Y+5, r25	; 0x05
    156e:	8c 83       	std	Y+4, r24	; 0x04
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	9d 81       	ldd	r25, Y+5	; 0x05
    1574:	88 30       	cpi	r24, 0x08	; 8
    1576:	91 05       	cpc	r25, r1
    1578:	f0 f2       	brcs	.-68     	; 0x1536 <LCDdefinechar+0x36>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    157a:	2a 96       	adiw	r28, 0x0a	; 10
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <LCDshiftLeft>:

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	00 d0       	rcall	.+0      	; 0x1592 <LCDshiftLeft+0x6>
    1592:	0f 92       	push	r0
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    159a:	1a 82       	std	Y+2, r1	; 0x02
    159c:	19 82       	std	Y+1, r1	; 0x01
    159e:	08 c0       	rjmp	.+16     	; 0x15b0 <LCDshiftLeft+0x24>
	{
		LCDsendCommand(0x1E);
    15a0:	8e e1       	ldi	r24, 0x1E	; 30
    15a2:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	9a 81       	ldd	r25, Y+2	; 0x02
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	9a 83       	std	Y+2, r25	; 0x02
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ba:	82 17       	cp	r24, r18
    15bc:	93 07       	cpc	r25, r19
    15be:	84 f3       	brlt	.-32     	; 0x15a0 <LCDshiftLeft+0x14>
	{
		LCDsendCommand(0x1E);
	}
}
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <LCDshiftRight+0x6>
    15d2:	0f 92       	push	r0
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    15da:	1a 82       	std	Y+2, r1	; 0x02
    15dc:	19 82       	std	Y+1, r1	; 0x01
    15de:	08 c0       	rjmp	.+16     	; 0x15f0 <LCDshiftRight+0x24>
	{
		LCDsendCommand(0x18);
    15e0:	88 e1       	ldi	r24, 0x18	; 24
    15e2:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	9a 83       	std	Y+2, r25	; 0x02
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	9a 81       	ldd	r25, Y+2	; 0x02
    15fa:	82 17       	cp	r24, r18
    15fc:	93 07       	cpc	r25, r19
    15fe:	84 f3       	brlt	.-32     	; 0x15e0 <LCDshiftRight+0x14>
	{
		LCDsendCommand(0x18);
	}
}
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0E);
    1614:	8e e0       	ldi	r24, 0x0E	; 14
    1616:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCDsendCommand>
}
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0F);
    1628:	8f e0       	ldi	r24, 0x0F	; 15
    162a:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCDsendCommand>
}
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    163c:	8c e0       	ldi	r24, 0x0C	; 12
    163e:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCDsendCommand>
}
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x08);
    1650:	88 e0       	ldi	r24, 0x08	; 8
    1652:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCDsendCommand>
}
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    1664:	8c e0       	ldi	r24, 0x0C	; 12
    1666:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCDsendCommand>
}
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <LCDcursorLeft+0x6>
    1676:	0f 92       	push	r0
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    167e:	1a 82       	std	Y+2, r1	; 0x02
    1680:	19 82       	std	Y+1, r1	; 0x01
    1682:	08 c0       	rjmp	.+16     	; 0x1694 <LCDcursorLeft+0x24>
	{
		LCDsendCommand(0x10);
    1684:	80 e1       	ldi	r24, 0x10	; 16
    1686:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	9a 81       	ldd	r25, Y+2	; 0x02
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	82 17       	cp	r24, r18
    16a0:	93 07       	cpc	r25, r19
    16a2:	84 f3       	brlt	.-32     	; 0x1684 <LCDcursorLeft+0x14>
	{
		LCDsendCommand(0x10);
	}
}
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <LCDcursorRight+0x6>
    16b6:	0f 92       	push	r0
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	8b 83       	std	Y+3, r24	; 0x03
	for (i=0;i<n;i++)
    16be:	1a 82       	std	Y+2, r1	; 0x02
    16c0:	19 82       	std	Y+1, r1	; 0x01
    16c2:	08 c0       	rjmp	.+16     	; 0x16d4 <LCDcursorRight+0x24>
	{
		LCDsendCommand(0x14);
    16c4:	84 e1       	ldi	r24, 0x14	; 20
    16c6:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	9a 81       	ldd	r25, Y+2	; 0x02
    16ce:	01 96       	adiw	r24, 0x01	; 1
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	9a 81       	ldd	r25, Y+2	; 0x02
    16de:	82 17       	cp	r24, r18
    16e0:	93 07       	cpc	r25, r19
    16e2:	84 f3       	brlt	.-32     	; 0x16c4 <LCDcursorRight+0x14>
	{
		LCDsendCommand(0x14);
	}
}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	27 97       	sbiw	r28, 0x07	; 7
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	8d 83       	std	Y+5, r24	; 0x05
    1706:	6e 83       	std	Y+6, r22	; 0x06
    1708:	4f 83       	std	Y+7, r20	; 0x07
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	48 2f       	mov	r20, r24
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	8f 81       	ldd	r24, Y+7	; 0x07
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	c9 01       	movw	r24, r18
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	82 0f       	add	r24, r18
    171e:	93 1f       	adc	r25, r19
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	9a 01       	movw	r18, r20
    1726:	28 9f       	mul	r18, r24
    1728:	a0 01       	movw	r20, r0
    172a:	29 9f       	mul	r18, r25
    172c:	50 0d       	add	r21, r0
    172e:	38 9f       	mul	r19, r24
    1730:	50 0d       	add	r21, r0
    1732:	11 24       	eor	r1, r1
    1734:	8e 81       	ldd	r24, Y+6	; 0x06
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	ca 01       	movw	r24, r20
    173c:	b9 01       	movw	r22, r18
    173e:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__divmodhi4>
    1742:	cb 01       	movw	r24, r22
    1744:	9b 83       	std	Y+3, r25	; 0x03
    1746:	8a 83       	std	Y+2, r24	; 0x02
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1748:	1c 82       	std	Y+4, r1	; 0x04
    174a:	35 c0       	rjmp	.+106    	; 0x17b6 <LCDprogressBar+0xc6>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	c9 01       	movw	r24, r18
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	82 0f       	add	r24, r18
    175a:	93 1f       	adc	r25, r19
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	9c 01       	movw	r18, r24
    1762:	2b 5f       	subi	r18, 0xFB	; 251
    1764:	3f 4f       	sbci	r19, 0xFF	; 255
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	9b 81       	ldd	r25, Y+3	; 0x03
    176a:	82 17       	cp	r24, r18
    176c:	93 07       	cpc	r25, r19
    176e:	d8 f4       	brcc	.+54     	; 0x17a6 <LCDprogressBar+0xb6>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	c9 01       	movw	r24, r18
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	82 0f       	add	r24, r18
    177e:	93 1f       	adc	r25, r19
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	9c 01       	movw	r18, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	9b 81       	ldd	r25, Y+3	; 0x03
    178a:	82 17       	cp	r24, r18
    178c:	93 07       	cpc	r25, r19
    178e:	10 f4       	brcc	.+4      	; 0x1794 <LCDprogressBar+0xa4>
			{
				// this is an empty block
				// use space character?
				c = 0;
    1790:	19 82       	std	Y+1, r1	; 0x01
    1792:	0b c0       	rjmp	.+22     	; 0x17aa <LCDprogressBar+0xba>
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	9b 81       	ldd	r25, Y+3	; 0x03
    1798:	26 e0       	ldi	r18, 0x06	; 6
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	b9 01       	movw	r22, r18
    179e:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__udivmodhi4>
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <LCDprogressBar+0xba>
			}
		}
		else
		{
			// this is a full block
			c = 5;
    17a6:	85 e0       	ldi	r24, 0x05	; 5
    17a8:	89 83       	std	Y+1, r24	; 0x01
		}
		
		// write character to display
		LCDsendChar(c);
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	0e 94 40 01 	call	0x280	; 0x280 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	8f 5f       	subi	r24, 0xFF	; 255
    17b4:	8c 83       	std	Y+4, r24	; 0x04
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	8f 81       	ldd	r24, Y+7	; 0x07
    17ba:	98 17       	cp	r25, r24
    17bc:	38 f2       	brcs	.-114    	; 0x174c <LCDprogressBar+0x5c>
		
		// write character to display
		LCDsendChar(c);
	}

}
    17be:	27 96       	adiw	r28, 0x07	; 7
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <LCDdisplay>:

void LCDdisplay(char a[])
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <LCDdisplay+0x6>
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	9a 83       	std	Y+2, r25	; 0x02
    17dc:	89 83       	std	Y+1, r24	; 0x01
	LCDstring(a,strlen(a));
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	9a 81       	ldd	r25, Y+2	; 0x02
    17e2:	0e 94 b6 11 	call	0x236c	; 0x236c <strlen>
    17e6:	28 2f       	mov	r18, r24
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	9a 81       	ldd	r25, Y+2	; 0x02
    17ec:	62 2f       	mov	r22, r18
    17ee:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <LCDstring>
}
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <__fixunssfsi>:
    17fc:	ef 92       	push	r14
    17fe:	ff 92       	push	r15
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	7b 01       	movw	r14, r22
    1806:	8c 01       	movw	r16, r24
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	5f e4       	ldi	r21, 0x4F	; 79
    1810:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <__gesf2>
    1814:	88 23       	and	r24, r24
    1816:	8c f0       	brlt	.+34     	; 0x183a <__fixunssfsi+0x3e>
    1818:	c8 01       	movw	r24, r16
    181a:	b7 01       	movw	r22, r14
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	5f e4       	ldi	r21, 0x4F	; 79
    1824:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__subsf3>
    1828:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__fixsfsi>
    182c:	9b 01       	movw	r18, r22
    182e:	ac 01       	movw	r20, r24
    1830:	20 50       	subi	r18, 0x00	; 0
    1832:	30 40       	sbci	r19, 0x00	; 0
    1834:	40 40       	sbci	r20, 0x00	; 0
    1836:	50 48       	sbci	r21, 0x80	; 128
    1838:	06 c0       	rjmp	.+12     	; 0x1846 <__fixunssfsi+0x4a>
    183a:	c8 01       	movw	r24, r16
    183c:	b7 01       	movw	r22, r14
    183e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__fixsfsi>
    1842:	9b 01       	movw	r18, r22
    1844:	ac 01       	movw	r20, r24
    1846:	b9 01       	movw	r22, r18
    1848:	ca 01       	movw	r24, r20
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	08 95       	ret

00001854 <_fpadd_parts>:
    1854:	a0 e0       	ldi	r26, 0x00	; 0
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e0 e3       	ldi	r30, 0x30	; 48
    185a:	fc e0       	ldi	r31, 0x0C	; 12
    185c:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <__prologue_saves__>
    1860:	dc 01       	movw	r26, r24
    1862:	2b 01       	movw	r4, r22
    1864:	fa 01       	movw	r30, r20
    1866:	9c 91       	ld	r25, X
    1868:	92 30       	cpi	r25, 0x02	; 2
    186a:	08 f4       	brcc	.+2      	; 0x186e <_fpadd_parts+0x1a>
    186c:	39 c1       	rjmp	.+626    	; 0x1ae0 <_fpadd_parts+0x28c>
    186e:	eb 01       	movw	r28, r22
    1870:	88 81       	ld	r24, Y
    1872:	82 30       	cpi	r24, 0x02	; 2
    1874:	08 f4       	brcc	.+2      	; 0x1878 <_fpadd_parts+0x24>
    1876:	33 c1       	rjmp	.+614    	; 0x1ade <_fpadd_parts+0x28a>
    1878:	94 30       	cpi	r25, 0x04	; 4
    187a:	69 f4       	brne	.+26     	; 0x1896 <_fpadd_parts+0x42>
    187c:	84 30       	cpi	r24, 0x04	; 4
    187e:	09 f0       	breq	.+2      	; 0x1882 <_fpadd_parts+0x2e>
    1880:	2f c1       	rjmp	.+606    	; 0x1ae0 <_fpadd_parts+0x28c>
    1882:	11 96       	adiw	r26, 0x01	; 1
    1884:	9c 91       	ld	r25, X
    1886:	11 97       	sbiw	r26, 0x01	; 1
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	98 17       	cp	r25, r24
    188c:	09 f4       	brne	.+2      	; 0x1890 <_fpadd_parts+0x3c>
    188e:	28 c1       	rjmp	.+592    	; 0x1ae0 <_fpadd_parts+0x28c>
    1890:	ad e8       	ldi	r26, 0x8D	; 141
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	25 c1       	rjmp	.+586    	; 0x1ae0 <_fpadd_parts+0x28c>
    1896:	84 30       	cpi	r24, 0x04	; 4
    1898:	09 f4       	brne	.+2      	; 0x189c <_fpadd_parts+0x48>
    189a:	21 c1       	rjmp	.+578    	; 0x1ade <_fpadd_parts+0x28a>
    189c:	82 30       	cpi	r24, 0x02	; 2
    189e:	a9 f4       	brne	.+42     	; 0x18ca <_fpadd_parts+0x76>
    18a0:	92 30       	cpi	r25, 0x02	; 2
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <_fpadd_parts+0x52>
    18a4:	1d c1       	rjmp	.+570    	; 0x1ae0 <_fpadd_parts+0x28c>
    18a6:	9a 01       	movw	r18, r20
    18a8:	ad 01       	movw	r20, r26
    18aa:	88 e0       	ldi	r24, 0x08	; 8
    18ac:	ea 01       	movw	r28, r20
    18ae:	09 90       	ld	r0, Y+
    18b0:	ae 01       	movw	r20, r28
    18b2:	e9 01       	movw	r28, r18
    18b4:	09 92       	st	Y+, r0
    18b6:	9e 01       	movw	r18, r28
    18b8:	81 50       	subi	r24, 0x01	; 1
    18ba:	c1 f7       	brne	.-16     	; 0x18ac <_fpadd_parts+0x58>
    18bc:	e2 01       	movw	r28, r4
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	11 96       	adiw	r26, 0x01	; 1
    18c2:	9c 91       	ld	r25, X
    18c4:	89 23       	and	r24, r25
    18c6:	81 83       	std	Z+1, r24	; 0x01
    18c8:	08 c1       	rjmp	.+528    	; 0x1ada <_fpadd_parts+0x286>
    18ca:	92 30       	cpi	r25, 0x02	; 2
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <_fpadd_parts+0x7c>
    18ce:	07 c1       	rjmp	.+526    	; 0x1ade <_fpadd_parts+0x28a>
    18d0:	12 96       	adiw	r26, 0x02	; 2
    18d2:	2d 90       	ld	r2, X+
    18d4:	3c 90       	ld	r3, X
    18d6:	13 97       	sbiw	r26, 0x03	; 3
    18d8:	eb 01       	movw	r28, r22
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	9b 81       	ldd	r25, Y+3	; 0x03
    18de:	14 96       	adiw	r26, 0x04	; 4
    18e0:	ad 90       	ld	r10, X+
    18e2:	bd 90       	ld	r11, X+
    18e4:	cd 90       	ld	r12, X+
    18e6:	dc 90       	ld	r13, X
    18e8:	17 97       	sbiw	r26, 0x07	; 7
    18ea:	ec 80       	ldd	r14, Y+4	; 0x04
    18ec:	fd 80       	ldd	r15, Y+5	; 0x05
    18ee:	0e 81       	ldd	r16, Y+6	; 0x06
    18f0:	1f 81       	ldd	r17, Y+7	; 0x07
    18f2:	91 01       	movw	r18, r2
    18f4:	28 1b       	sub	r18, r24
    18f6:	39 0b       	sbc	r19, r25
    18f8:	b9 01       	movw	r22, r18
    18fa:	37 ff       	sbrs	r19, 7
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <_fpadd_parts+0xb2>
    18fe:	66 27       	eor	r22, r22
    1900:	77 27       	eor	r23, r23
    1902:	62 1b       	sub	r22, r18
    1904:	73 0b       	sbc	r23, r19
    1906:	60 32       	cpi	r22, 0x20	; 32
    1908:	71 05       	cpc	r23, r1
    190a:	0c f0       	brlt	.+2      	; 0x190e <_fpadd_parts+0xba>
    190c:	61 c0       	rjmp	.+194    	; 0x19d0 <_fpadd_parts+0x17c>
    190e:	12 16       	cp	r1, r18
    1910:	13 06       	cpc	r1, r19
    1912:	6c f5       	brge	.+90     	; 0x196e <_fpadd_parts+0x11a>
    1914:	37 01       	movw	r6, r14
    1916:	48 01       	movw	r8, r16
    1918:	06 2e       	mov	r0, r22
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <_fpadd_parts+0xd0>
    191c:	96 94       	lsr	r9
    191e:	87 94       	ror	r8
    1920:	77 94       	ror	r7
    1922:	67 94       	ror	r6
    1924:	0a 94       	dec	r0
    1926:	d2 f7       	brpl	.-12     	; 0x191c <_fpadd_parts+0xc8>
    1928:	21 e0       	ldi	r18, 0x01	; 1
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	50 e0       	ldi	r21, 0x00	; 0
    1930:	04 c0       	rjmp	.+8      	; 0x193a <_fpadd_parts+0xe6>
    1932:	22 0f       	add	r18, r18
    1934:	33 1f       	adc	r19, r19
    1936:	44 1f       	adc	r20, r20
    1938:	55 1f       	adc	r21, r21
    193a:	6a 95       	dec	r22
    193c:	d2 f7       	brpl	.-12     	; 0x1932 <_fpadd_parts+0xde>
    193e:	21 50       	subi	r18, 0x01	; 1
    1940:	30 40       	sbci	r19, 0x00	; 0
    1942:	40 40       	sbci	r20, 0x00	; 0
    1944:	50 40       	sbci	r21, 0x00	; 0
    1946:	2e 21       	and	r18, r14
    1948:	3f 21       	and	r19, r15
    194a:	40 23       	and	r20, r16
    194c:	51 23       	and	r21, r17
    194e:	21 15       	cp	r18, r1
    1950:	31 05       	cpc	r19, r1
    1952:	41 05       	cpc	r20, r1
    1954:	51 05       	cpc	r21, r1
    1956:	21 f0       	breq	.+8      	; 0x1960 <_fpadd_parts+0x10c>
    1958:	21 e0       	ldi	r18, 0x01	; 1
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	79 01       	movw	r14, r18
    1962:	8a 01       	movw	r16, r20
    1964:	e6 28       	or	r14, r6
    1966:	f7 28       	or	r15, r7
    1968:	08 29       	or	r16, r8
    196a:	19 29       	or	r17, r9
    196c:	3c c0       	rjmp	.+120    	; 0x19e6 <_fpadd_parts+0x192>
    196e:	23 2b       	or	r18, r19
    1970:	d1 f1       	breq	.+116    	; 0x19e6 <_fpadd_parts+0x192>
    1972:	26 0e       	add	r2, r22
    1974:	37 1e       	adc	r3, r23
    1976:	35 01       	movw	r6, r10
    1978:	46 01       	movw	r8, r12
    197a:	06 2e       	mov	r0, r22
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <_fpadd_parts+0x132>
    197e:	96 94       	lsr	r9
    1980:	87 94       	ror	r8
    1982:	77 94       	ror	r7
    1984:	67 94       	ror	r6
    1986:	0a 94       	dec	r0
    1988:	d2 f7       	brpl	.-12     	; 0x197e <_fpadd_parts+0x12a>
    198a:	21 e0       	ldi	r18, 0x01	; 1
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	04 c0       	rjmp	.+8      	; 0x199c <_fpadd_parts+0x148>
    1994:	22 0f       	add	r18, r18
    1996:	33 1f       	adc	r19, r19
    1998:	44 1f       	adc	r20, r20
    199a:	55 1f       	adc	r21, r21
    199c:	6a 95       	dec	r22
    199e:	d2 f7       	brpl	.-12     	; 0x1994 <_fpadd_parts+0x140>
    19a0:	21 50       	subi	r18, 0x01	; 1
    19a2:	30 40       	sbci	r19, 0x00	; 0
    19a4:	40 40       	sbci	r20, 0x00	; 0
    19a6:	50 40       	sbci	r21, 0x00	; 0
    19a8:	2a 21       	and	r18, r10
    19aa:	3b 21       	and	r19, r11
    19ac:	4c 21       	and	r20, r12
    19ae:	5d 21       	and	r21, r13
    19b0:	21 15       	cp	r18, r1
    19b2:	31 05       	cpc	r19, r1
    19b4:	41 05       	cpc	r20, r1
    19b6:	51 05       	cpc	r21, r1
    19b8:	21 f0       	breq	.+8      	; 0x19c2 <_fpadd_parts+0x16e>
    19ba:	21 e0       	ldi	r18, 0x01	; 1
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	50 e0       	ldi	r21, 0x00	; 0
    19c2:	59 01       	movw	r10, r18
    19c4:	6a 01       	movw	r12, r20
    19c6:	a6 28       	or	r10, r6
    19c8:	b7 28       	or	r11, r7
    19ca:	c8 28       	or	r12, r8
    19cc:	d9 28       	or	r13, r9
    19ce:	0b c0       	rjmp	.+22     	; 0x19e6 <_fpadd_parts+0x192>
    19d0:	82 15       	cp	r24, r2
    19d2:	93 05       	cpc	r25, r3
    19d4:	2c f0       	brlt	.+10     	; 0x19e0 <_fpadd_parts+0x18c>
    19d6:	1c 01       	movw	r2, r24
    19d8:	aa 24       	eor	r10, r10
    19da:	bb 24       	eor	r11, r11
    19dc:	65 01       	movw	r12, r10
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <_fpadd_parts+0x192>
    19e0:	ee 24       	eor	r14, r14
    19e2:	ff 24       	eor	r15, r15
    19e4:	87 01       	movw	r16, r14
    19e6:	11 96       	adiw	r26, 0x01	; 1
    19e8:	9c 91       	ld	r25, X
    19ea:	d2 01       	movw	r26, r4
    19ec:	11 96       	adiw	r26, 0x01	; 1
    19ee:	8c 91       	ld	r24, X
    19f0:	98 17       	cp	r25, r24
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <_fpadd_parts+0x1a2>
    19f4:	45 c0       	rjmp	.+138    	; 0x1a80 <_fpadd_parts+0x22c>
    19f6:	99 23       	and	r25, r25
    19f8:	39 f0       	breq	.+14     	; 0x1a08 <_fpadd_parts+0x1b4>
    19fa:	a8 01       	movw	r20, r16
    19fc:	97 01       	movw	r18, r14
    19fe:	2a 19       	sub	r18, r10
    1a00:	3b 09       	sbc	r19, r11
    1a02:	4c 09       	sbc	r20, r12
    1a04:	5d 09       	sbc	r21, r13
    1a06:	06 c0       	rjmp	.+12     	; 0x1a14 <_fpadd_parts+0x1c0>
    1a08:	a6 01       	movw	r20, r12
    1a0a:	95 01       	movw	r18, r10
    1a0c:	2e 19       	sub	r18, r14
    1a0e:	3f 09       	sbc	r19, r15
    1a10:	40 0b       	sbc	r20, r16
    1a12:	51 0b       	sbc	r21, r17
    1a14:	57 fd       	sbrc	r21, 7
    1a16:	08 c0       	rjmp	.+16     	; 0x1a28 <_fpadd_parts+0x1d4>
    1a18:	11 82       	std	Z+1, r1	; 0x01
    1a1a:	33 82       	std	Z+3, r3	; 0x03
    1a1c:	22 82       	std	Z+2, r2	; 0x02
    1a1e:	24 83       	std	Z+4, r18	; 0x04
    1a20:	35 83       	std	Z+5, r19	; 0x05
    1a22:	46 83       	std	Z+6, r20	; 0x06
    1a24:	57 83       	std	Z+7, r21	; 0x07
    1a26:	1d c0       	rjmp	.+58     	; 0x1a62 <_fpadd_parts+0x20e>
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	81 83       	std	Z+1, r24	; 0x01
    1a2c:	33 82       	std	Z+3, r3	; 0x03
    1a2e:	22 82       	std	Z+2, r2	; 0x02
    1a30:	88 27       	eor	r24, r24
    1a32:	99 27       	eor	r25, r25
    1a34:	dc 01       	movw	r26, r24
    1a36:	82 1b       	sub	r24, r18
    1a38:	93 0b       	sbc	r25, r19
    1a3a:	a4 0b       	sbc	r26, r20
    1a3c:	b5 0b       	sbc	r27, r21
    1a3e:	84 83       	std	Z+4, r24	; 0x04
    1a40:	95 83       	std	Z+5, r25	; 0x05
    1a42:	a6 83       	std	Z+6, r26	; 0x06
    1a44:	b7 83       	std	Z+7, r27	; 0x07
    1a46:	0d c0       	rjmp	.+26     	; 0x1a62 <_fpadd_parts+0x20e>
    1a48:	22 0f       	add	r18, r18
    1a4a:	33 1f       	adc	r19, r19
    1a4c:	44 1f       	adc	r20, r20
    1a4e:	55 1f       	adc	r21, r21
    1a50:	24 83       	std	Z+4, r18	; 0x04
    1a52:	35 83       	std	Z+5, r19	; 0x05
    1a54:	46 83       	std	Z+6, r20	; 0x06
    1a56:	57 83       	std	Z+7, r21	; 0x07
    1a58:	82 81       	ldd	r24, Z+2	; 0x02
    1a5a:	93 81       	ldd	r25, Z+3	; 0x03
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	93 83       	std	Z+3, r25	; 0x03
    1a60:	82 83       	std	Z+2, r24	; 0x02
    1a62:	24 81       	ldd	r18, Z+4	; 0x04
    1a64:	35 81       	ldd	r19, Z+5	; 0x05
    1a66:	46 81       	ldd	r20, Z+6	; 0x06
    1a68:	57 81       	ldd	r21, Z+7	; 0x07
    1a6a:	da 01       	movw	r26, r20
    1a6c:	c9 01       	movw	r24, r18
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	a1 09       	sbc	r26, r1
    1a72:	b1 09       	sbc	r27, r1
    1a74:	8f 5f       	subi	r24, 0xFF	; 255
    1a76:	9f 4f       	sbci	r25, 0xFF	; 255
    1a78:	af 4f       	sbci	r26, 0xFF	; 255
    1a7a:	bf 43       	sbci	r27, 0x3F	; 63
    1a7c:	28 f3       	brcs	.-54     	; 0x1a48 <_fpadd_parts+0x1f4>
    1a7e:	0b c0       	rjmp	.+22     	; 0x1a96 <_fpadd_parts+0x242>
    1a80:	91 83       	std	Z+1, r25	; 0x01
    1a82:	33 82       	std	Z+3, r3	; 0x03
    1a84:	22 82       	std	Z+2, r2	; 0x02
    1a86:	ea 0c       	add	r14, r10
    1a88:	fb 1c       	adc	r15, r11
    1a8a:	0c 1d       	adc	r16, r12
    1a8c:	1d 1d       	adc	r17, r13
    1a8e:	e4 82       	std	Z+4, r14	; 0x04
    1a90:	f5 82       	std	Z+5, r15	; 0x05
    1a92:	06 83       	std	Z+6, r16	; 0x06
    1a94:	17 83       	std	Z+7, r17	; 0x07
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	80 83       	st	Z, r24
    1a9a:	24 81       	ldd	r18, Z+4	; 0x04
    1a9c:	35 81       	ldd	r19, Z+5	; 0x05
    1a9e:	46 81       	ldd	r20, Z+6	; 0x06
    1aa0:	57 81       	ldd	r21, Z+7	; 0x07
    1aa2:	57 ff       	sbrs	r21, 7
    1aa4:	1a c0       	rjmp	.+52     	; 0x1ada <_fpadd_parts+0x286>
    1aa6:	c9 01       	movw	r24, r18
    1aa8:	aa 27       	eor	r26, r26
    1aaa:	97 fd       	sbrc	r25, 7
    1aac:	a0 95       	com	r26
    1aae:	ba 2f       	mov	r27, r26
    1ab0:	81 70       	andi	r24, 0x01	; 1
    1ab2:	90 70       	andi	r25, 0x00	; 0
    1ab4:	a0 70       	andi	r26, 0x00	; 0
    1ab6:	b0 70       	andi	r27, 0x00	; 0
    1ab8:	56 95       	lsr	r21
    1aba:	47 95       	ror	r20
    1abc:	37 95       	ror	r19
    1abe:	27 95       	ror	r18
    1ac0:	82 2b       	or	r24, r18
    1ac2:	93 2b       	or	r25, r19
    1ac4:	a4 2b       	or	r26, r20
    1ac6:	b5 2b       	or	r27, r21
    1ac8:	84 83       	std	Z+4, r24	; 0x04
    1aca:	95 83       	std	Z+5, r25	; 0x05
    1acc:	a6 83       	std	Z+6, r26	; 0x06
    1ace:	b7 83       	std	Z+7, r27	; 0x07
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	93 81       	ldd	r25, Z+3	; 0x03
    1ad4:	01 96       	adiw	r24, 0x01	; 1
    1ad6:	93 83       	std	Z+3, r25	; 0x03
    1ad8:	82 83       	std	Z+2, r24	; 0x02
    1ada:	df 01       	movw	r26, r30
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <_fpadd_parts+0x28c>
    1ade:	d2 01       	movw	r26, r4
    1ae0:	cd 01       	movw	r24, r26
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	e2 e1       	ldi	r30, 0x12	; 18
    1ae8:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__epilogue_restores__>

00001aec <__subsf3>:
    1aec:	a0 e2       	ldi	r26, 0x20	; 32
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	ec e7       	ldi	r30, 0x7C	; 124
    1af2:	fd e0       	ldi	r31, 0x0D	; 13
    1af4:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__prologue_saves__+0x18>
    1af8:	69 83       	std	Y+1, r22	; 0x01
    1afa:	7a 83       	std	Y+2, r23	; 0x02
    1afc:	8b 83       	std	Y+3, r24	; 0x03
    1afe:	9c 83       	std	Y+4, r25	; 0x04
    1b00:	2d 83       	std	Y+5, r18	; 0x05
    1b02:	3e 83       	std	Y+6, r19	; 0x06
    1b04:	4f 83       	std	Y+7, r20	; 0x07
    1b06:	58 87       	std	Y+8, r21	; 0x08
    1b08:	e9 e0       	ldi	r30, 0x09	; 9
    1b0a:	ee 2e       	mov	r14, r30
    1b0c:	f1 2c       	mov	r15, r1
    1b0e:	ec 0e       	add	r14, r28
    1b10:	fd 1e       	adc	r15, r29
    1b12:	ce 01       	movw	r24, r28
    1b14:	01 96       	adiw	r24, 0x01	; 1
    1b16:	b7 01       	movw	r22, r14
    1b18:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1b1c:	8e 01       	movw	r16, r28
    1b1e:	0f 5e       	subi	r16, 0xEF	; 239
    1b20:	1f 4f       	sbci	r17, 0xFF	; 255
    1b22:	ce 01       	movw	r24, r28
    1b24:	05 96       	adiw	r24, 0x05	; 5
    1b26:	b8 01       	movw	r22, r16
    1b28:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1b2c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	89 27       	eor	r24, r25
    1b32:	8a 8b       	std	Y+18, r24	; 0x12
    1b34:	c7 01       	movw	r24, r14
    1b36:	b8 01       	movw	r22, r16
    1b38:	ae 01       	movw	r20, r28
    1b3a:	47 5e       	subi	r20, 0xE7	; 231
    1b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b3e:	0e 94 2a 0c 	call	0x1854	; 0x1854 <_fpadd_parts>
    1b42:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__pack_f>
    1b46:	a0 96       	adiw	r28, 0x20	; 32
    1b48:	e6 e0       	ldi	r30, 0x06	; 6
    1b4a:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__epilogue_restores__+0x18>

00001b4e <__addsf3>:
    1b4e:	a0 e2       	ldi	r26, 0x20	; 32
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	ed ea       	ldi	r30, 0xAD	; 173
    1b54:	fd e0       	ldi	r31, 0x0D	; 13
    1b56:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__prologue_saves__+0x18>
    1b5a:	69 83       	std	Y+1, r22	; 0x01
    1b5c:	7a 83       	std	Y+2, r23	; 0x02
    1b5e:	8b 83       	std	Y+3, r24	; 0x03
    1b60:	9c 83       	std	Y+4, r25	; 0x04
    1b62:	2d 83       	std	Y+5, r18	; 0x05
    1b64:	3e 83       	std	Y+6, r19	; 0x06
    1b66:	4f 83       	std	Y+7, r20	; 0x07
    1b68:	58 87       	std	Y+8, r21	; 0x08
    1b6a:	f9 e0       	ldi	r31, 0x09	; 9
    1b6c:	ef 2e       	mov	r14, r31
    1b6e:	f1 2c       	mov	r15, r1
    1b70:	ec 0e       	add	r14, r28
    1b72:	fd 1e       	adc	r15, r29
    1b74:	ce 01       	movw	r24, r28
    1b76:	01 96       	adiw	r24, 0x01	; 1
    1b78:	b7 01       	movw	r22, r14
    1b7a:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1b7e:	8e 01       	movw	r16, r28
    1b80:	0f 5e       	subi	r16, 0xEF	; 239
    1b82:	1f 4f       	sbci	r17, 0xFF	; 255
    1b84:	ce 01       	movw	r24, r28
    1b86:	05 96       	adiw	r24, 0x05	; 5
    1b88:	b8 01       	movw	r22, r16
    1b8a:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1b8e:	c7 01       	movw	r24, r14
    1b90:	b8 01       	movw	r22, r16
    1b92:	ae 01       	movw	r20, r28
    1b94:	47 5e       	subi	r20, 0xE7	; 231
    1b96:	5f 4f       	sbci	r21, 0xFF	; 255
    1b98:	0e 94 2a 0c 	call	0x1854	; 0x1854 <_fpadd_parts>
    1b9c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__pack_f>
    1ba0:	a0 96       	adiw	r28, 0x20	; 32
    1ba2:	e6 e0       	ldi	r30, 0x06	; 6
    1ba4:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__epilogue_restores__+0x18>

00001ba8 <__mulsf3>:
    1ba8:	a0 e2       	ldi	r26, 0x20	; 32
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ea ed       	ldi	r30, 0xDA	; 218
    1bae:	fd e0       	ldi	r31, 0x0D	; 13
    1bb0:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <__prologue_saves__>
    1bb4:	69 83       	std	Y+1, r22	; 0x01
    1bb6:	7a 83       	std	Y+2, r23	; 0x02
    1bb8:	8b 83       	std	Y+3, r24	; 0x03
    1bba:	9c 83       	std	Y+4, r25	; 0x04
    1bbc:	2d 83       	std	Y+5, r18	; 0x05
    1bbe:	3e 83       	std	Y+6, r19	; 0x06
    1bc0:	4f 83       	std	Y+7, r20	; 0x07
    1bc2:	58 87       	std	Y+8, r21	; 0x08
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	be 01       	movw	r22, r28
    1bca:	67 5f       	subi	r22, 0xF7	; 247
    1bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bce:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	05 96       	adiw	r24, 0x05	; 5
    1bd6:	be 01       	movw	r22, r28
    1bd8:	6f 5e       	subi	r22, 0xEF	; 239
    1bda:	7f 4f       	sbci	r23, 0xFF	; 255
    1bdc:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1be0:	99 85       	ldd	r25, Y+9	; 0x09
    1be2:	92 30       	cpi	r25, 0x02	; 2
    1be4:	88 f0       	brcs	.+34     	; 0x1c08 <__mulsf3+0x60>
    1be6:	89 89       	ldd	r24, Y+17	; 0x11
    1be8:	82 30       	cpi	r24, 0x02	; 2
    1bea:	c8 f0       	brcs	.+50     	; 0x1c1e <__mulsf3+0x76>
    1bec:	94 30       	cpi	r25, 0x04	; 4
    1bee:	19 f4       	brne	.+6      	; 0x1bf6 <__mulsf3+0x4e>
    1bf0:	82 30       	cpi	r24, 0x02	; 2
    1bf2:	51 f4       	brne	.+20     	; 0x1c08 <__mulsf3+0x60>
    1bf4:	04 c0       	rjmp	.+8      	; 0x1bfe <__mulsf3+0x56>
    1bf6:	84 30       	cpi	r24, 0x04	; 4
    1bf8:	29 f4       	brne	.+10     	; 0x1c04 <__mulsf3+0x5c>
    1bfa:	92 30       	cpi	r25, 0x02	; 2
    1bfc:	81 f4       	brne	.+32     	; 0x1c1e <__mulsf3+0x76>
    1bfe:	8d e8       	ldi	r24, 0x8D	; 141
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	c6 c0       	rjmp	.+396    	; 0x1d90 <__mulsf3+0x1e8>
    1c04:	92 30       	cpi	r25, 0x02	; 2
    1c06:	49 f4       	brne	.+18     	; 0x1c1a <__mulsf3+0x72>
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c0e:	98 13       	cpse	r25, r24
    1c10:	21 e0       	ldi	r18, 0x01	; 1
    1c12:	2a 87       	std	Y+10, r18	; 0x0a
    1c14:	ce 01       	movw	r24, r28
    1c16:	09 96       	adiw	r24, 0x09	; 9
    1c18:	bb c0       	rjmp	.+374    	; 0x1d90 <__mulsf3+0x1e8>
    1c1a:	82 30       	cpi	r24, 0x02	; 2
    1c1c:	49 f4       	brne	.+18     	; 0x1c30 <__mulsf3+0x88>
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c22:	8a 89       	ldd	r24, Y+18	; 0x12
    1c24:	98 13       	cpse	r25, r24
    1c26:	21 e0       	ldi	r18, 0x01	; 1
    1c28:	2a 8b       	std	Y+18, r18	; 0x12
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	41 96       	adiw	r24, 0x11	; 17
    1c2e:	b0 c0       	rjmp	.+352    	; 0x1d90 <__mulsf3+0x1e8>
    1c30:	2d 84       	ldd	r2, Y+13	; 0x0d
    1c32:	3e 84       	ldd	r3, Y+14	; 0x0e
    1c34:	4f 84       	ldd	r4, Y+15	; 0x0f
    1c36:	58 88       	ldd	r5, Y+16	; 0x10
    1c38:	6d 88       	ldd	r6, Y+21	; 0x15
    1c3a:	7e 88       	ldd	r7, Y+22	; 0x16
    1c3c:	8f 88       	ldd	r8, Y+23	; 0x17
    1c3e:	98 8c       	ldd	r9, Y+24	; 0x18
    1c40:	ee 24       	eor	r14, r14
    1c42:	ff 24       	eor	r15, r15
    1c44:	87 01       	movw	r16, r14
    1c46:	aa 24       	eor	r10, r10
    1c48:	bb 24       	eor	r11, r11
    1c4a:	65 01       	movw	r12, r10
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	e0 e0       	ldi	r30, 0x00	; 0
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	c1 01       	movw	r24, r2
    1c5a:	81 70       	andi	r24, 0x01	; 1
    1c5c:	90 70       	andi	r25, 0x00	; 0
    1c5e:	89 2b       	or	r24, r25
    1c60:	e9 f0       	breq	.+58     	; 0x1c9c <__mulsf3+0xf4>
    1c62:	e6 0c       	add	r14, r6
    1c64:	f7 1c       	adc	r15, r7
    1c66:	08 1d       	adc	r16, r8
    1c68:	19 1d       	adc	r17, r9
    1c6a:	9a 01       	movw	r18, r20
    1c6c:	ab 01       	movw	r20, r22
    1c6e:	2a 0d       	add	r18, r10
    1c70:	3b 1d       	adc	r19, r11
    1c72:	4c 1d       	adc	r20, r12
    1c74:	5d 1d       	adc	r21, r13
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a0 e0       	ldi	r26, 0x00	; 0
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e6 14       	cp	r14, r6
    1c80:	f7 04       	cpc	r15, r7
    1c82:	08 05       	cpc	r16, r8
    1c84:	19 05       	cpc	r17, r9
    1c86:	20 f4       	brcc	.+8      	; 0x1c90 <__mulsf3+0xe8>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	a0 e0       	ldi	r26, 0x00	; 0
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	ba 01       	movw	r22, r20
    1c92:	a9 01       	movw	r20, r18
    1c94:	48 0f       	add	r20, r24
    1c96:	59 1f       	adc	r21, r25
    1c98:	6a 1f       	adc	r22, r26
    1c9a:	7b 1f       	adc	r23, r27
    1c9c:	aa 0c       	add	r10, r10
    1c9e:	bb 1c       	adc	r11, r11
    1ca0:	cc 1c       	adc	r12, r12
    1ca2:	dd 1c       	adc	r13, r13
    1ca4:	97 fe       	sbrs	r9, 7
    1ca6:	08 c0       	rjmp	.+16     	; 0x1cb8 <__mulsf3+0x110>
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a0 e0       	ldi	r26, 0x00	; 0
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	a8 2a       	or	r10, r24
    1cb2:	b9 2a       	or	r11, r25
    1cb4:	ca 2a       	or	r12, r26
    1cb6:	db 2a       	or	r13, r27
    1cb8:	31 96       	adiw	r30, 0x01	; 1
    1cba:	e0 32       	cpi	r30, 0x20	; 32
    1cbc:	f1 05       	cpc	r31, r1
    1cbe:	49 f0       	breq	.+18     	; 0x1cd2 <__mulsf3+0x12a>
    1cc0:	66 0c       	add	r6, r6
    1cc2:	77 1c       	adc	r7, r7
    1cc4:	88 1c       	adc	r8, r8
    1cc6:	99 1c       	adc	r9, r9
    1cc8:	56 94       	lsr	r5
    1cca:	47 94       	ror	r4
    1ccc:	37 94       	ror	r3
    1cce:	27 94       	ror	r2
    1cd0:	c3 cf       	rjmp	.-122    	; 0x1c58 <__mulsf3+0xb0>
    1cd2:	fa 85       	ldd	r31, Y+10	; 0x0a
    1cd4:	ea 89       	ldd	r30, Y+18	; 0x12
    1cd6:	2b 89       	ldd	r18, Y+19	; 0x13
    1cd8:	3c 89       	ldd	r19, Y+20	; 0x14
    1cda:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cde:	28 0f       	add	r18, r24
    1ce0:	39 1f       	adc	r19, r25
    1ce2:	2e 5f       	subi	r18, 0xFE	; 254
    1ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce6:	17 c0       	rjmp	.+46     	; 0x1d16 <__mulsf3+0x16e>
    1ce8:	ca 01       	movw	r24, r20
    1cea:	81 70       	andi	r24, 0x01	; 1
    1cec:	90 70       	andi	r25, 0x00	; 0
    1cee:	89 2b       	or	r24, r25
    1cf0:	61 f0       	breq	.+24     	; 0x1d0a <__mulsf3+0x162>
    1cf2:	16 95       	lsr	r17
    1cf4:	07 95       	ror	r16
    1cf6:	f7 94       	ror	r15
    1cf8:	e7 94       	ror	r14
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	a0 e0       	ldi	r26, 0x00	; 0
    1d00:	b0 e8       	ldi	r27, 0x80	; 128
    1d02:	e8 2a       	or	r14, r24
    1d04:	f9 2a       	or	r15, r25
    1d06:	0a 2b       	or	r16, r26
    1d08:	1b 2b       	or	r17, r27
    1d0a:	76 95       	lsr	r23
    1d0c:	67 95       	ror	r22
    1d0e:	57 95       	ror	r21
    1d10:	47 95       	ror	r20
    1d12:	2f 5f       	subi	r18, 0xFF	; 255
    1d14:	3f 4f       	sbci	r19, 0xFF	; 255
    1d16:	77 fd       	sbrc	r23, 7
    1d18:	e7 cf       	rjmp	.-50     	; 0x1ce8 <__mulsf3+0x140>
    1d1a:	0c c0       	rjmp	.+24     	; 0x1d34 <__mulsf3+0x18c>
    1d1c:	44 0f       	add	r20, r20
    1d1e:	55 1f       	adc	r21, r21
    1d20:	66 1f       	adc	r22, r22
    1d22:	77 1f       	adc	r23, r23
    1d24:	17 fd       	sbrc	r17, 7
    1d26:	41 60       	ori	r20, 0x01	; 1
    1d28:	ee 0c       	add	r14, r14
    1d2a:	ff 1c       	adc	r15, r15
    1d2c:	00 1f       	adc	r16, r16
    1d2e:	11 1f       	adc	r17, r17
    1d30:	21 50       	subi	r18, 0x01	; 1
    1d32:	30 40       	sbci	r19, 0x00	; 0
    1d34:	40 30       	cpi	r20, 0x00	; 0
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	59 07       	cpc	r21, r25
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	69 07       	cpc	r22, r25
    1d3e:	90 e4       	ldi	r25, 0x40	; 64
    1d40:	79 07       	cpc	r23, r25
    1d42:	60 f3       	brcs	.-40     	; 0x1d1c <__mulsf3+0x174>
    1d44:	2b 8f       	std	Y+27, r18	; 0x1b
    1d46:	3c 8f       	std	Y+28, r19	; 0x1c
    1d48:	db 01       	movw	r26, r22
    1d4a:	ca 01       	movw	r24, r20
    1d4c:	8f 77       	andi	r24, 0x7F	; 127
    1d4e:	90 70       	andi	r25, 0x00	; 0
    1d50:	a0 70       	andi	r26, 0x00	; 0
    1d52:	b0 70       	andi	r27, 0x00	; 0
    1d54:	80 34       	cpi	r24, 0x40	; 64
    1d56:	91 05       	cpc	r25, r1
    1d58:	a1 05       	cpc	r26, r1
    1d5a:	b1 05       	cpc	r27, r1
    1d5c:	61 f4       	brne	.+24     	; 0x1d76 <__mulsf3+0x1ce>
    1d5e:	47 fd       	sbrc	r20, 7
    1d60:	0a c0       	rjmp	.+20     	; 0x1d76 <__mulsf3+0x1ce>
    1d62:	e1 14       	cp	r14, r1
    1d64:	f1 04       	cpc	r15, r1
    1d66:	01 05       	cpc	r16, r1
    1d68:	11 05       	cpc	r17, r1
    1d6a:	29 f0       	breq	.+10     	; 0x1d76 <__mulsf3+0x1ce>
    1d6c:	40 5c       	subi	r20, 0xC0	; 192
    1d6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d70:	6f 4f       	sbci	r22, 0xFF	; 255
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255
    1d74:	40 78       	andi	r20, 0x80	; 128
    1d76:	1a 8e       	std	Y+26, r1	; 0x1a
    1d78:	fe 17       	cp	r31, r30
    1d7a:	11 f0       	breq	.+4      	; 0x1d80 <__mulsf3+0x1d8>
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	8a 8f       	std	Y+26, r24	; 0x1a
    1d80:	4d 8f       	std	Y+29, r20	; 0x1d
    1d82:	5e 8f       	std	Y+30, r21	; 0x1e
    1d84:	6f 8f       	std	Y+31, r22	; 0x1f
    1d86:	78 a3       	std	Y+32, r23	; 0x20
    1d88:	83 e0       	ldi	r24, 0x03	; 3
    1d8a:	89 8f       	std	Y+25, r24	; 0x19
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	49 96       	adiw	r24, 0x19	; 25
    1d90:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__pack_f>
    1d94:	a0 96       	adiw	r28, 0x20	; 32
    1d96:	e2 e1       	ldi	r30, 0x12	; 18
    1d98:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__epilogue_restores__>

00001d9c <__gtsf2>:
    1d9c:	a8 e1       	ldi	r26, 0x18	; 24
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e4 ed       	ldi	r30, 0xD4	; 212
    1da2:	fe e0       	ldi	r31, 0x0E	; 14
    1da4:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__prologue_saves__+0x18>
    1da8:	69 83       	std	Y+1, r22	; 0x01
    1daa:	7a 83       	std	Y+2, r23	; 0x02
    1dac:	8b 83       	std	Y+3, r24	; 0x03
    1dae:	9c 83       	std	Y+4, r25	; 0x04
    1db0:	2d 83       	std	Y+5, r18	; 0x05
    1db2:	3e 83       	std	Y+6, r19	; 0x06
    1db4:	4f 83       	std	Y+7, r20	; 0x07
    1db6:	58 87       	std	Y+8, r21	; 0x08
    1db8:	89 e0       	ldi	r24, 0x09	; 9
    1dba:	e8 2e       	mov	r14, r24
    1dbc:	f1 2c       	mov	r15, r1
    1dbe:	ec 0e       	add	r14, r28
    1dc0:	fd 1e       	adc	r15, r29
    1dc2:	ce 01       	movw	r24, r28
    1dc4:	01 96       	adiw	r24, 0x01	; 1
    1dc6:	b7 01       	movw	r22, r14
    1dc8:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1dcc:	8e 01       	movw	r16, r28
    1dce:	0f 5e       	subi	r16, 0xEF	; 239
    1dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	05 96       	adiw	r24, 0x05	; 5
    1dd6:	b8 01       	movw	r22, r16
    1dd8:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	82 30       	cpi	r24, 0x02	; 2
    1de0:	40 f0       	brcs	.+16     	; 0x1df2 <__gtsf2+0x56>
    1de2:	89 89       	ldd	r24, Y+17	; 0x11
    1de4:	82 30       	cpi	r24, 0x02	; 2
    1de6:	28 f0       	brcs	.+10     	; 0x1df2 <__gtsf2+0x56>
    1de8:	c7 01       	movw	r24, r14
    1dea:	b8 01       	movw	r22, r16
    1dec:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__fpcmp_parts_f>
    1df0:	01 c0       	rjmp	.+2      	; 0x1df4 <__gtsf2+0x58>
    1df2:	8f ef       	ldi	r24, 0xFF	; 255
    1df4:	68 96       	adiw	r28, 0x18	; 24
    1df6:	e6 e0       	ldi	r30, 0x06	; 6
    1df8:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__epilogue_restores__+0x18>

00001dfc <__gesf2>:
    1dfc:	a8 e1       	ldi	r26, 0x18	; 24
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e4 e0       	ldi	r30, 0x04	; 4
    1e02:	ff e0       	ldi	r31, 0x0F	; 15
    1e04:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__prologue_saves__+0x18>
    1e08:	69 83       	std	Y+1, r22	; 0x01
    1e0a:	7a 83       	std	Y+2, r23	; 0x02
    1e0c:	8b 83       	std	Y+3, r24	; 0x03
    1e0e:	9c 83       	std	Y+4, r25	; 0x04
    1e10:	2d 83       	std	Y+5, r18	; 0x05
    1e12:	3e 83       	std	Y+6, r19	; 0x06
    1e14:	4f 83       	std	Y+7, r20	; 0x07
    1e16:	58 87       	std	Y+8, r21	; 0x08
    1e18:	89 e0       	ldi	r24, 0x09	; 9
    1e1a:	e8 2e       	mov	r14, r24
    1e1c:	f1 2c       	mov	r15, r1
    1e1e:	ec 0e       	add	r14, r28
    1e20:	fd 1e       	adc	r15, r29
    1e22:	ce 01       	movw	r24, r28
    1e24:	01 96       	adiw	r24, 0x01	; 1
    1e26:	b7 01       	movw	r22, r14
    1e28:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1e2c:	8e 01       	movw	r16, r28
    1e2e:	0f 5e       	subi	r16, 0xEF	; 239
    1e30:	1f 4f       	sbci	r17, 0xFF	; 255
    1e32:	ce 01       	movw	r24, r28
    1e34:	05 96       	adiw	r24, 0x05	; 5
    1e36:	b8 01       	movw	r22, r16
    1e38:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1e3c:	89 85       	ldd	r24, Y+9	; 0x09
    1e3e:	82 30       	cpi	r24, 0x02	; 2
    1e40:	40 f0       	brcs	.+16     	; 0x1e52 <__gesf2+0x56>
    1e42:	89 89       	ldd	r24, Y+17	; 0x11
    1e44:	82 30       	cpi	r24, 0x02	; 2
    1e46:	28 f0       	brcs	.+10     	; 0x1e52 <__gesf2+0x56>
    1e48:	c7 01       	movw	r24, r14
    1e4a:	b8 01       	movw	r22, r16
    1e4c:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__fpcmp_parts_f>
    1e50:	01 c0       	rjmp	.+2      	; 0x1e54 <__gesf2+0x58>
    1e52:	8f ef       	ldi	r24, 0xFF	; 255
    1e54:	68 96       	adiw	r28, 0x18	; 24
    1e56:	e6 e0       	ldi	r30, 0x06	; 6
    1e58:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__epilogue_restores__+0x18>

00001e5c <__ltsf2>:
    1e5c:	a8 e1       	ldi	r26, 0x18	; 24
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e4 e3       	ldi	r30, 0x34	; 52
    1e62:	ff e0       	ldi	r31, 0x0F	; 15
    1e64:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__prologue_saves__+0x18>
    1e68:	69 83       	std	Y+1, r22	; 0x01
    1e6a:	7a 83       	std	Y+2, r23	; 0x02
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
    1e6e:	9c 83       	std	Y+4, r25	; 0x04
    1e70:	2d 83       	std	Y+5, r18	; 0x05
    1e72:	3e 83       	std	Y+6, r19	; 0x06
    1e74:	4f 83       	std	Y+7, r20	; 0x07
    1e76:	58 87       	std	Y+8, r21	; 0x08
    1e78:	89 e0       	ldi	r24, 0x09	; 9
    1e7a:	e8 2e       	mov	r14, r24
    1e7c:	f1 2c       	mov	r15, r1
    1e7e:	ec 0e       	add	r14, r28
    1e80:	fd 1e       	adc	r15, r29
    1e82:	ce 01       	movw	r24, r28
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	b7 01       	movw	r22, r14
    1e88:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1e8c:	8e 01       	movw	r16, r28
    1e8e:	0f 5e       	subi	r16, 0xEF	; 239
    1e90:	1f 4f       	sbci	r17, 0xFF	; 255
    1e92:	ce 01       	movw	r24, r28
    1e94:	05 96       	adiw	r24, 0x05	; 5
    1e96:	b8 01       	movw	r22, r16
    1e98:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1e9c:	89 85       	ldd	r24, Y+9	; 0x09
    1e9e:	82 30       	cpi	r24, 0x02	; 2
    1ea0:	40 f0       	brcs	.+16     	; 0x1eb2 <__ltsf2+0x56>
    1ea2:	89 89       	ldd	r24, Y+17	; 0x11
    1ea4:	82 30       	cpi	r24, 0x02	; 2
    1ea6:	28 f0       	brcs	.+10     	; 0x1eb2 <__ltsf2+0x56>
    1ea8:	c7 01       	movw	r24, r14
    1eaa:	b8 01       	movw	r22, r16
    1eac:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__fpcmp_parts_f>
    1eb0:	01 c0       	rjmp	.+2      	; 0x1eb4 <__ltsf2+0x58>
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	68 96       	adiw	r28, 0x18	; 24
    1eb6:	e6 e0       	ldi	r30, 0x06	; 6
    1eb8:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__epilogue_restores__+0x18>

00001ebc <__fixsfsi>:
    1ebc:	ac e0       	ldi	r26, 0x0C	; 12
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e4 e6       	ldi	r30, 0x64	; 100
    1ec2:	ff e0       	ldi	r31, 0x0F	; 15
    1ec4:	0c 94 8f 11 	jmp	0x231e	; 0x231e <__prologue_saves__+0x20>
    1ec8:	69 83       	std	Y+1, r22	; 0x01
    1eca:	7a 83       	std	Y+2, r23	; 0x02
    1ecc:	8b 83       	std	Y+3, r24	; 0x03
    1ece:	9c 83       	std	Y+4, r25	; 0x04
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	be 01       	movw	r22, r28
    1ed6:	6b 5f       	subi	r22, 0xFB	; 251
    1ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eda:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	82 30       	cpi	r24, 0x02	; 2
    1ee2:	61 f1       	breq	.+88     	; 0x1f3c <__fixsfsi+0x80>
    1ee4:	82 30       	cpi	r24, 0x02	; 2
    1ee6:	50 f1       	brcs	.+84     	; 0x1f3c <__fixsfsi+0x80>
    1ee8:	84 30       	cpi	r24, 0x04	; 4
    1eea:	21 f4       	brne	.+8      	; 0x1ef4 <__fixsfsi+0x38>
    1eec:	8e 81       	ldd	r24, Y+6	; 0x06
    1eee:	88 23       	and	r24, r24
    1ef0:	51 f1       	breq	.+84     	; 0x1f46 <__fixsfsi+0x8a>
    1ef2:	2e c0       	rjmp	.+92     	; 0x1f50 <__fixsfsi+0x94>
    1ef4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ef6:	38 85       	ldd	r19, Y+8	; 0x08
    1ef8:	37 fd       	sbrc	r19, 7
    1efa:	20 c0       	rjmp	.+64     	; 0x1f3c <__fixsfsi+0x80>
    1efc:	6e 81       	ldd	r22, Y+6	; 0x06
    1efe:	2f 31       	cpi	r18, 0x1F	; 31
    1f00:	31 05       	cpc	r19, r1
    1f02:	1c f0       	brlt	.+6      	; 0x1f0a <__fixsfsi+0x4e>
    1f04:	66 23       	and	r22, r22
    1f06:	f9 f0       	breq	.+62     	; 0x1f46 <__fixsfsi+0x8a>
    1f08:	23 c0       	rjmp	.+70     	; 0x1f50 <__fixsfsi+0x94>
    1f0a:	8e e1       	ldi	r24, 0x1E	; 30
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	82 1b       	sub	r24, r18
    1f10:	93 0b       	sbc	r25, r19
    1f12:	29 85       	ldd	r18, Y+9	; 0x09
    1f14:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f16:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f18:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f1a:	04 c0       	rjmp	.+8      	; 0x1f24 <__fixsfsi+0x68>
    1f1c:	56 95       	lsr	r21
    1f1e:	47 95       	ror	r20
    1f20:	37 95       	ror	r19
    1f22:	27 95       	ror	r18
    1f24:	8a 95       	dec	r24
    1f26:	d2 f7       	brpl	.-12     	; 0x1f1c <__fixsfsi+0x60>
    1f28:	66 23       	and	r22, r22
    1f2a:	b1 f0       	breq	.+44     	; 0x1f58 <__fixsfsi+0x9c>
    1f2c:	50 95       	com	r21
    1f2e:	40 95       	com	r20
    1f30:	30 95       	com	r19
    1f32:	21 95       	neg	r18
    1f34:	3f 4f       	sbci	r19, 0xFF	; 255
    1f36:	4f 4f       	sbci	r20, 0xFF	; 255
    1f38:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3a:	0e c0       	rjmp	.+28     	; 0x1f58 <__fixsfsi+0x9c>
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	50 e0       	ldi	r21, 0x00	; 0
    1f44:	09 c0       	rjmp	.+18     	; 0x1f58 <__fixsfsi+0x9c>
    1f46:	2f ef       	ldi	r18, 0xFF	; 255
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f ef       	ldi	r20, 0xFF	; 255
    1f4c:	5f e7       	ldi	r21, 0x7F	; 127
    1f4e:	04 c0       	rjmp	.+8      	; 0x1f58 <__fixsfsi+0x9c>
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e0       	ldi	r20, 0x00	; 0
    1f56:	50 e8       	ldi	r21, 0x80	; 128
    1f58:	b9 01       	movw	r22, r18
    1f5a:	ca 01       	movw	r24, r20
    1f5c:	2c 96       	adiw	r28, 0x0c	; 12
    1f5e:	e2 e0       	ldi	r30, 0x02	; 2
    1f60:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__epilogue_restores__+0x20>

00001f64 <__pack_f>:
    1f64:	df 92       	push	r13
    1f66:	ef 92       	push	r14
    1f68:	ff 92       	push	r15
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	fc 01       	movw	r30, r24
    1f70:	e4 80       	ldd	r14, Z+4	; 0x04
    1f72:	f5 80       	ldd	r15, Z+5	; 0x05
    1f74:	06 81       	ldd	r16, Z+6	; 0x06
    1f76:	17 81       	ldd	r17, Z+7	; 0x07
    1f78:	d1 80       	ldd	r13, Z+1	; 0x01
    1f7a:	80 81       	ld	r24, Z
    1f7c:	82 30       	cpi	r24, 0x02	; 2
    1f7e:	48 f4       	brcc	.+18     	; 0x1f92 <__pack_f+0x2e>
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	a0 e1       	ldi	r26, 0x10	; 16
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e8 2a       	or	r14, r24
    1f8a:	f9 2a       	or	r15, r25
    1f8c:	0a 2b       	or	r16, r26
    1f8e:	1b 2b       	or	r17, r27
    1f90:	a5 c0       	rjmp	.+330    	; 0x20dc <__pack_f+0x178>
    1f92:	84 30       	cpi	r24, 0x04	; 4
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <__pack_f+0x34>
    1f96:	9f c0       	rjmp	.+318    	; 0x20d6 <__pack_f+0x172>
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	21 f4       	brne	.+8      	; 0x1fa4 <__pack_f+0x40>
    1f9c:	ee 24       	eor	r14, r14
    1f9e:	ff 24       	eor	r15, r15
    1fa0:	87 01       	movw	r16, r14
    1fa2:	05 c0       	rjmp	.+10     	; 0x1fae <__pack_f+0x4a>
    1fa4:	e1 14       	cp	r14, r1
    1fa6:	f1 04       	cpc	r15, r1
    1fa8:	01 05       	cpc	r16, r1
    1faa:	11 05       	cpc	r17, r1
    1fac:	19 f4       	brne	.+6      	; 0x1fb4 <__pack_f+0x50>
    1fae:	e0 e0       	ldi	r30, 0x00	; 0
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	96 c0       	rjmp	.+300    	; 0x20e0 <__pack_f+0x17c>
    1fb4:	62 81       	ldd	r22, Z+2	; 0x02
    1fb6:	73 81       	ldd	r23, Z+3	; 0x03
    1fb8:	9f ef       	ldi	r25, 0xFF	; 255
    1fba:	62 38       	cpi	r22, 0x82	; 130
    1fbc:	79 07       	cpc	r23, r25
    1fbe:	0c f0       	brlt	.+2      	; 0x1fc2 <__pack_f+0x5e>
    1fc0:	5b c0       	rjmp	.+182    	; 0x2078 <__pack_f+0x114>
    1fc2:	22 e8       	ldi	r18, 0x82	; 130
    1fc4:	3f ef       	ldi	r19, 0xFF	; 255
    1fc6:	26 1b       	sub	r18, r22
    1fc8:	37 0b       	sbc	r19, r23
    1fca:	2a 31       	cpi	r18, 0x1A	; 26
    1fcc:	31 05       	cpc	r19, r1
    1fce:	2c f0       	brlt	.+10     	; 0x1fda <__pack_f+0x76>
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	50 e0       	ldi	r21, 0x00	; 0
    1fd8:	2a c0       	rjmp	.+84     	; 0x202e <__pack_f+0xca>
    1fda:	b8 01       	movw	r22, r16
    1fdc:	a7 01       	movw	r20, r14
    1fde:	02 2e       	mov	r0, r18
    1fe0:	04 c0       	rjmp	.+8      	; 0x1fea <__pack_f+0x86>
    1fe2:	76 95       	lsr	r23
    1fe4:	67 95       	ror	r22
    1fe6:	57 95       	ror	r21
    1fe8:	47 95       	ror	r20
    1fea:	0a 94       	dec	r0
    1fec:	d2 f7       	brpl	.-12     	; 0x1fe2 <__pack_f+0x7e>
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a0 e0       	ldi	r26, 0x00	; 0
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	04 c0       	rjmp	.+8      	; 0x2000 <__pack_f+0x9c>
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	aa 1f       	adc	r26, r26
    1ffe:	bb 1f       	adc	r27, r27
    2000:	2a 95       	dec	r18
    2002:	d2 f7       	brpl	.-12     	; 0x1ff8 <__pack_f+0x94>
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	a1 09       	sbc	r26, r1
    2008:	b1 09       	sbc	r27, r1
    200a:	8e 21       	and	r24, r14
    200c:	9f 21       	and	r25, r15
    200e:	a0 23       	and	r26, r16
    2010:	b1 23       	and	r27, r17
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	a1 05       	cpc	r26, r1
    2016:	b1 05       	cpc	r27, r1
    2018:	21 f0       	breq	.+8      	; 0x2022 <__pack_f+0xbe>
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a0 e0       	ldi	r26, 0x00	; 0
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	9a 01       	movw	r18, r20
    2024:	ab 01       	movw	r20, r22
    2026:	28 2b       	or	r18, r24
    2028:	39 2b       	or	r19, r25
    202a:	4a 2b       	or	r20, r26
    202c:	5b 2b       	or	r21, r27
    202e:	da 01       	movw	r26, r20
    2030:	c9 01       	movw	r24, r18
    2032:	8f 77       	andi	r24, 0x7F	; 127
    2034:	90 70       	andi	r25, 0x00	; 0
    2036:	a0 70       	andi	r26, 0x00	; 0
    2038:	b0 70       	andi	r27, 0x00	; 0
    203a:	80 34       	cpi	r24, 0x40	; 64
    203c:	91 05       	cpc	r25, r1
    203e:	a1 05       	cpc	r26, r1
    2040:	b1 05       	cpc	r27, r1
    2042:	39 f4       	brne	.+14     	; 0x2052 <__pack_f+0xee>
    2044:	27 ff       	sbrs	r18, 7
    2046:	09 c0       	rjmp	.+18     	; 0x205a <__pack_f+0xf6>
    2048:	20 5c       	subi	r18, 0xC0	; 192
    204a:	3f 4f       	sbci	r19, 0xFF	; 255
    204c:	4f 4f       	sbci	r20, 0xFF	; 255
    204e:	5f 4f       	sbci	r21, 0xFF	; 255
    2050:	04 c0       	rjmp	.+8      	; 0x205a <__pack_f+0xf6>
    2052:	21 5c       	subi	r18, 0xC1	; 193
    2054:	3f 4f       	sbci	r19, 0xFF	; 255
    2056:	4f 4f       	sbci	r20, 0xFF	; 255
    2058:	5f 4f       	sbci	r21, 0xFF	; 255
    205a:	e0 e0       	ldi	r30, 0x00	; 0
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	20 30       	cpi	r18, 0x00	; 0
    2060:	a0 e0       	ldi	r26, 0x00	; 0
    2062:	3a 07       	cpc	r19, r26
    2064:	a0 e0       	ldi	r26, 0x00	; 0
    2066:	4a 07       	cpc	r20, r26
    2068:	a0 e4       	ldi	r26, 0x40	; 64
    206a:	5a 07       	cpc	r21, r26
    206c:	10 f0       	brcs	.+4      	; 0x2072 <__pack_f+0x10e>
    206e:	e1 e0       	ldi	r30, 0x01	; 1
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	79 01       	movw	r14, r18
    2074:	8a 01       	movw	r16, r20
    2076:	27 c0       	rjmp	.+78     	; 0x20c6 <__pack_f+0x162>
    2078:	60 38       	cpi	r22, 0x80	; 128
    207a:	71 05       	cpc	r23, r1
    207c:	64 f5       	brge	.+88     	; 0x20d6 <__pack_f+0x172>
    207e:	fb 01       	movw	r30, r22
    2080:	e1 58       	subi	r30, 0x81	; 129
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	d8 01       	movw	r26, r16
    2086:	c7 01       	movw	r24, r14
    2088:	8f 77       	andi	r24, 0x7F	; 127
    208a:	90 70       	andi	r25, 0x00	; 0
    208c:	a0 70       	andi	r26, 0x00	; 0
    208e:	b0 70       	andi	r27, 0x00	; 0
    2090:	80 34       	cpi	r24, 0x40	; 64
    2092:	91 05       	cpc	r25, r1
    2094:	a1 05       	cpc	r26, r1
    2096:	b1 05       	cpc	r27, r1
    2098:	39 f4       	brne	.+14     	; 0x20a8 <__pack_f+0x144>
    209a:	e7 fe       	sbrs	r14, 7
    209c:	0d c0       	rjmp	.+26     	; 0x20b8 <__pack_f+0x154>
    209e:	80 e4       	ldi	r24, 0x40	; 64
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	a0 e0       	ldi	r26, 0x00	; 0
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	04 c0       	rjmp	.+8      	; 0x20b0 <__pack_f+0x14c>
    20a8:	8f e3       	ldi	r24, 0x3F	; 63
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	a0 e0       	ldi	r26, 0x00	; 0
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e8 0e       	add	r14, r24
    20b2:	f9 1e       	adc	r15, r25
    20b4:	0a 1f       	adc	r16, r26
    20b6:	1b 1f       	adc	r17, r27
    20b8:	17 ff       	sbrs	r17, 7
    20ba:	05 c0       	rjmp	.+10     	; 0x20c6 <__pack_f+0x162>
    20bc:	16 95       	lsr	r17
    20be:	07 95       	ror	r16
    20c0:	f7 94       	ror	r15
    20c2:	e7 94       	ror	r14
    20c4:	31 96       	adiw	r30, 0x01	; 1
    20c6:	87 e0       	ldi	r24, 0x07	; 7
    20c8:	16 95       	lsr	r17
    20ca:	07 95       	ror	r16
    20cc:	f7 94       	ror	r15
    20ce:	e7 94       	ror	r14
    20d0:	8a 95       	dec	r24
    20d2:	d1 f7       	brne	.-12     	; 0x20c8 <__pack_f+0x164>
    20d4:	05 c0       	rjmp	.+10     	; 0x20e0 <__pack_f+0x17c>
    20d6:	ee 24       	eor	r14, r14
    20d8:	ff 24       	eor	r15, r15
    20da:	87 01       	movw	r16, r14
    20dc:	ef ef       	ldi	r30, 0xFF	; 255
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	6e 2f       	mov	r22, r30
    20e2:	67 95       	ror	r22
    20e4:	66 27       	eor	r22, r22
    20e6:	67 95       	ror	r22
    20e8:	90 2f       	mov	r25, r16
    20ea:	9f 77       	andi	r25, 0x7F	; 127
    20ec:	d7 94       	ror	r13
    20ee:	dd 24       	eor	r13, r13
    20f0:	d7 94       	ror	r13
    20f2:	8e 2f       	mov	r24, r30
    20f4:	86 95       	lsr	r24
    20f6:	49 2f       	mov	r20, r25
    20f8:	46 2b       	or	r20, r22
    20fa:	58 2f       	mov	r21, r24
    20fc:	5d 29       	or	r21, r13
    20fe:	b7 01       	movw	r22, r14
    2100:	ca 01       	movw	r24, r20
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	ff 90       	pop	r15
    2108:	ef 90       	pop	r14
    210a:	df 90       	pop	r13
    210c:	08 95       	ret

0000210e <__unpack_f>:
    210e:	fc 01       	movw	r30, r24
    2110:	db 01       	movw	r26, r22
    2112:	40 81       	ld	r20, Z
    2114:	51 81       	ldd	r21, Z+1	; 0x01
    2116:	22 81       	ldd	r18, Z+2	; 0x02
    2118:	62 2f       	mov	r22, r18
    211a:	6f 77       	andi	r22, 0x7F	; 127
    211c:	70 e0       	ldi	r23, 0x00	; 0
    211e:	22 1f       	adc	r18, r18
    2120:	22 27       	eor	r18, r18
    2122:	22 1f       	adc	r18, r18
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	89 2f       	mov	r24, r25
    2128:	88 0f       	add	r24, r24
    212a:	82 2b       	or	r24, r18
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	99 1f       	adc	r25, r25
    2132:	99 27       	eor	r25, r25
    2134:	99 1f       	adc	r25, r25
    2136:	11 96       	adiw	r26, 0x01	; 1
    2138:	9c 93       	st	X, r25
    213a:	11 97       	sbiw	r26, 0x01	; 1
    213c:	21 15       	cp	r18, r1
    213e:	31 05       	cpc	r19, r1
    2140:	a9 f5       	brne	.+106    	; 0x21ac <__unpack_f+0x9e>
    2142:	41 15       	cp	r20, r1
    2144:	51 05       	cpc	r21, r1
    2146:	61 05       	cpc	r22, r1
    2148:	71 05       	cpc	r23, r1
    214a:	11 f4       	brne	.+4      	; 0x2150 <__unpack_f+0x42>
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	37 c0       	rjmp	.+110    	; 0x21be <__unpack_f+0xb0>
    2150:	82 e8       	ldi	r24, 0x82	; 130
    2152:	9f ef       	ldi	r25, 0xFF	; 255
    2154:	13 96       	adiw	r26, 0x03	; 3
    2156:	9c 93       	st	X, r25
    2158:	8e 93       	st	-X, r24
    215a:	12 97       	sbiw	r26, 0x02	; 2
    215c:	9a 01       	movw	r18, r20
    215e:	ab 01       	movw	r20, r22
    2160:	67 e0       	ldi	r22, 0x07	; 7
    2162:	22 0f       	add	r18, r18
    2164:	33 1f       	adc	r19, r19
    2166:	44 1f       	adc	r20, r20
    2168:	55 1f       	adc	r21, r21
    216a:	6a 95       	dec	r22
    216c:	d1 f7       	brne	.-12     	; 0x2162 <__unpack_f+0x54>
    216e:	83 e0       	ldi	r24, 0x03	; 3
    2170:	8c 93       	st	X, r24
    2172:	0d c0       	rjmp	.+26     	; 0x218e <__unpack_f+0x80>
    2174:	22 0f       	add	r18, r18
    2176:	33 1f       	adc	r19, r19
    2178:	44 1f       	adc	r20, r20
    217a:	55 1f       	adc	r21, r21
    217c:	12 96       	adiw	r26, 0x02	; 2
    217e:	8d 91       	ld	r24, X+
    2180:	9c 91       	ld	r25, X
    2182:	13 97       	sbiw	r26, 0x03	; 3
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	13 96       	adiw	r26, 0x03	; 3
    2188:	9c 93       	st	X, r25
    218a:	8e 93       	st	-X, r24
    218c:	12 97       	sbiw	r26, 0x02	; 2
    218e:	20 30       	cpi	r18, 0x00	; 0
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	38 07       	cpc	r19, r24
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	48 07       	cpc	r20, r24
    2198:	80 e4       	ldi	r24, 0x40	; 64
    219a:	58 07       	cpc	r21, r24
    219c:	58 f3       	brcs	.-42     	; 0x2174 <__unpack_f+0x66>
    219e:	14 96       	adiw	r26, 0x04	; 4
    21a0:	2d 93       	st	X+, r18
    21a2:	3d 93       	st	X+, r19
    21a4:	4d 93       	st	X+, r20
    21a6:	5c 93       	st	X, r21
    21a8:	17 97       	sbiw	r26, 0x07	; 7
    21aa:	08 95       	ret
    21ac:	2f 3f       	cpi	r18, 0xFF	; 255
    21ae:	31 05       	cpc	r19, r1
    21b0:	79 f4       	brne	.+30     	; 0x21d0 <__unpack_f+0xc2>
    21b2:	41 15       	cp	r20, r1
    21b4:	51 05       	cpc	r21, r1
    21b6:	61 05       	cpc	r22, r1
    21b8:	71 05       	cpc	r23, r1
    21ba:	19 f4       	brne	.+6      	; 0x21c2 <__unpack_f+0xb4>
    21bc:	84 e0       	ldi	r24, 0x04	; 4
    21be:	8c 93       	st	X, r24
    21c0:	08 95       	ret
    21c2:	64 ff       	sbrs	r22, 4
    21c4:	03 c0       	rjmp	.+6      	; 0x21cc <__unpack_f+0xbe>
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	8c 93       	st	X, r24
    21ca:	12 c0       	rjmp	.+36     	; 0x21f0 <__unpack_f+0xe2>
    21cc:	1c 92       	st	X, r1
    21ce:	10 c0       	rjmp	.+32     	; 0x21f0 <__unpack_f+0xe2>
    21d0:	2f 57       	subi	r18, 0x7F	; 127
    21d2:	30 40       	sbci	r19, 0x00	; 0
    21d4:	13 96       	adiw	r26, 0x03	; 3
    21d6:	3c 93       	st	X, r19
    21d8:	2e 93       	st	-X, r18
    21da:	12 97       	sbiw	r26, 0x02	; 2
    21dc:	83 e0       	ldi	r24, 0x03	; 3
    21de:	8c 93       	st	X, r24
    21e0:	87 e0       	ldi	r24, 0x07	; 7
    21e2:	44 0f       	add	r20, r20
    21e4:	55 1f       	adc	r21, r21
    21e6:	66 1f       	adc	r22, r22
    21e8:	77 1f       	adc	r23, r23
    21ea:	8a 95       	dec	r24
    21ec:	d1 f7       	brne	.-12     	; 0x21e2 <__unpack_f+0xd4>
    21ee:	70 64       	ori	r23, 0x40	; 64
    21f0:	14 96       	adiw	r26, 0x04	; 4
    21f2:	4d 93       	st	X+, r20
    21f4:	5d 93       	st	X+, r21
    21f6:	6d 93       	st	X+, r22
    21f8:	7c 93       	st	X, r23
    21fa:	17 97       	sbiw	r26, 0x07	; 7
    21fc:	08 95       	ret

000021fe <__fpcmp_parts_f>:
    21fe:	1f 93       	push	r17
    2200:	dc 01       	movw	r26, r24
    2202:	fb 01       	movw	r30, r22
    2204:	9c 91       	ld	r25, X
    2206:	92 30       	cpi	r25, 0x02	; 2
    2208:	08 f4       	brcc	.+2      	; 0x220c <__fpcmp_parts_f+0xe>
    220a:	47 c0       	rjmp	.+142    	; 0x229a <__fpcmp_parts_f+0x9c>
    220c:	80 81       	ld	r24, Z
    220e:	82 30       	cpi	r24, 0x02	; 2
    2210:	08 f4       	brcc	.+2      	; 0x2214 <__fpcmp_parts_f+0x16>
    2212:	43 c0       	rjmp	.+134    	; 0x229a <__fpcmp_parts_f+0x9c>
    2214:	94 30       	cpi	r25, 0x04	; 4
    2216:	51 f4       	brne	.+20     	; 0x222c <__fpcmp_parts_f+0x2e>
    2218:	11 96       	adiw	r26, 0x01	; 1
    221a:	1c 91       	ld	r17, X
    221c:	84 30       	cpi	r24, 0x04	; 4
    221e:	99 f5       	brne	.+102    	; 0x2286 <__fpcmp_parts_f+0x88>
    2220:	81 81       	ldd	r24, Z+1	; 0x01
    2222:	68 2f       	mov	r22, r24
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	61 1b       	sub	r22, r17
    2228:	71 09       	sbc	r23, r1
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <__fpcmp_parts_f+0xac>
    222c:	84 30       	cpi	r24, 0x04	; 4
    222e:	21 f0       	breq	.+8      	; 0x2238 <__fpcmp_parts_f+0x3a>
    2230:	92 30       	cpi	r25, 0x02	; 2
    2232:	31 f4       	brne	.+12     	; 0x2240 <__fpcmp_parts_f+0x42>
    2234:	82 30       	cpi	r24, 0x02	; 2
    2236:	b9 f1       	breq	.+110    	; 0x22a6 <__fpcmp_parts_f+0xa8>
    2238:	81 81       	ldd	r24, Z+1	; 0x01
    223a:	88 23       	and	r24, r24
    223c:	89 f1       	breq	.+98     	; 0x22a0 <__fpcmp_parts_f+0xa2>
    223e:	2d c0       	rjmp	.+90     	; 0x229a <__fpcmp_parts_f+0x9c>
    2240:	11 96       	adiw	r26, 0x01	; 1
    2242:	1c 91       	ld	r17, X
    2244:	11 97       	sbiw	r26, 0x01	; 1
    2246:	82 30       	cpi	r24, 0x02	; 2
    2248:	f1 f0       	breq	.+60     	; 0x2286 <__fpcmp_parts_f+0x88>
    224a:	81 81       	ldd	r24, Z+1	; 0x01
    224c:	18 17       	cp	r17, r24
    224e:	d9 f4       	brne	.+54     	; 0x2286 <__fpcmp_parts_f+0x88>
    2250:	12 96       	adiw	r26, 0x02	; 2
    2252:	2d 91       	ld	r18, X+
    2254:	3c 91       	ld	r19, X
    2256:	13 97       	sbiw	r26, 0x03	; 3
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	82 17       	cp	r24, r18
    225e:	93 07       	cpc	r25, r19
    2260:	94 f0       	brlt	.+36     	; 0x2286 <__fpcmp_parts_f+0x88>
    2262:	28 17       	cp	r18, r24
    2264:	39 07       	cpc	r19, r25
    2266:	bc f0       	brlt	.+46     	; 0x2296 <__fpcmp_parts_f+0x98>
    2268:	14 96       	adiw	r26, 0x04	; 4
    226a:	8d 91       	ld	r24, X+
    226c:	9d 91       	ld	r25, X+
    226e:	0d 90       	ld	r0, X+
    2270:	bc 91       	ld	r27, X
    2272:	a0 2d       	mov	r26, r0
    2274:	24 81       	ldd	r18, Z+4	; 0x04
    2276:	35 81       	ldd	r19, Z+5	; 0x05
    2278:	46 81       	ldd	r20, Z+6	; 0x06
    227a:	57 81       	ldd	r21, Z+7	; 0x07
    227c:	28 17       	cp	r18, r24
    227e:	39 07       	cpc	r19, r25
    2280:	4a 07       	cpc	r20, r26
    2282:	5b 07       	cpc	r21, r27
    2284:	18 f4       	brcc	.+6      	; 0x228c <__fpcmp_parts_f+0x8e>
    2286:	11 23       	and	r17, r17
    2288:	41 f0       	breq	.+16     	; 0x229a <__fpcmp_parts_f+0x9c>
    228a:	0a c0       	rjmp	.+20     	; 0x22a0 <__fpcmp_parts_f+0xa2>
    228c:	82 17       	cp	r24, r18
    228e:	93 07       	cpc	r25, r19
    2290:	a4 07       	cpc	r26, r20
    2292:	b5 07       	cpc	r27, r21
    2294:	40 f4       	brcc	.+16     	; 0x22a6 <__fpcmp_parts_f+0xa8>
    2296:	11 23       	and	r17, r17
    2298:	19 f0       	breq	.+6      	; 0x22a0 <__fpcmp_parts_f+0xa2>
    229a:	61 e0       	ldi	r22, 0x01	; 1
    229c:	70 e0       	ldi	r23, 0x00	; 0
    229e:	05 c0       	rjmp	.+10     	; 0x22aa <__fpcmp_parts_f+0xac>
    22a0:	6f ef       	ldi	r22, 0xFF	; 255
    22a2:	7f ef       	ldi	r23, 0xFF	; 255
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <__fpcmp_parts_f+0xac>
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	cb 01       	movw	r24, r22
    22ac:	1f 91       	pop	r17
    22ae:	08 95       	ret

000022b0 <__udivmodhi4>:
    22b0:	aa 1b       	sub	r26, r26
    22b2:	bb 1b       	sub	r27, r27
    22b4:	51 e1       	ldi	r21, 0x11	; 17
    22b6:	07 c0       	rjmp	.+14     	; 0x22c6 <__udivmodhi4_ep>

000022b8 <__udivmodhi4_loop>:
    22b8:	aa 1f       	adc	r26, r26
    22ba:	bb 1f       	adc	r27, r27
    22bc:	a6 17       	cp	r26, r22
    22be:	b7 07       	cpc	r27, r23
    22c0:	10 f0       	brcs	.+4      	; 0x22c6 <__udivmodhi4_ep>
    22c2:	a6 1b       	sub	r26, r22
    22c4:	b7 0b       	sbc	r27, r23

000022c6 <__udivmodhi4_ep>:
    22c6:	88 1f       	adc	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	5a 95       	dec	r21
    22cc:	a9 f7       	brne	.-22     	; 0x22b8 <__udivmodhi4_loop>
    22ce:	80 95       	com	r24
    22d0:	90 95       	com	r25
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	08 95       	ret

000022d8 <__divmodhi4>:
    22d8:	97 fb       	bst	r25, 7
    22da:	09 2e       	mov	r0, r25
    22dc:	07 26       	eor	r0, r23
    22de:	0a d0       	rcall	.+20     	; 0x22f4 <__divmodhi4_neg1>
    22e0:	77 fd       	sbrc	r23, 7
    22e2:	04 d0       	rcall	.+8      	; 0x22ec <__divmodhi4_neg2>
    22e4:	e5 df       	rcall	.-54     	; 0x22b0 <__udivmodhi4>
    22e6:	06 d0       	rcall	.+12     	; 0x22f4 <__divmodhi4_neg1>
    22e8:	00 20       	and	r0, r0
    22ea:	1a f4       	brpl	.+6      	; 0x22f2 <__divmodhi4_exit>

000022ec <__divmodhi4_neg2>:
    22ec:	70 95       	com	r23
    22ee:	61 95       	neg	r22
    22f0:	7f 4f       	sbci	r23, 0xFF	; 255

000022f2 <__divmodhi4_exit>:
    22f2:	08 95       	ret

000022f4 <__divmodhi4_neg1>:
    22f4:	f6 f7       	brtc	.-4      	; 0x22f2 <__divmodhi4_exit>
    22f6:	90 95       	com	r25
    22f8:	81 95       	neg	r24
    22fa:	9f 4f       	sbci	r25, 0xFF	; 255
    22fc:	08 95       	ret

000022fe <__prologue_saves__>:
    22fe:	2f 92       	push	r2
    2300:	3f 92       	push	r3
    2302:	4f 92       	push	r4
    2304:	5f 92       	push	r5
    2306:	6f 92       	push	r6
    2308:	7f 92       	push	r7
    230a:	8f 92       	push	r8
    230c:	9f 92       	push	r9
    230e:	af 92       	push	r10
    2310:	bf 92       	push	r11
    2312:	cf 92       	push	r12
    2314:	df 92       	push	r13
    2316:	ef 92       	push	r14
    2318:	ff 92       	push	r15
    231a:	0f 93       	push	r16
    231c:	1f 93       	push	r17
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	ca 1b       	sub	r28, r26
    2328:	db 0b       	sbc	r29, r27
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	09 94       	ijmp

00002336 <__epilogue_restores__>:
    2336:	2a 88       	ldd	r2, Y+18	; 0x12
    2338:	39 88       	ldd	r3, Y+17	; 0x11
    233a:	48 88       	ldd	r4, Y+16	; 0x10
    233c:	5f 84       	ldd	r5, Y+15	; 0x0f
    233e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2340:	7d 84       	ldd	r7, Y+13	; 0x0d
    2342:	8c 84       	ldd	r8, Y+12	; 0x0c
    2344:	9b 84       	ldd	r9, Y+11	; 0x0b
    2346:	aa 84       	ldd	r10, Y+10	; 0x0a
    2348:	b9 84       	ldd	r11, Y+9	; 0x09
    234a:	c8 84       	ldd	r12, Y+8	; 0x08
    234c:	df 80       	ldd	r13, Y+7	; 0x07
    234e:	ee 80       	ldd	r14, Y+6	; 0x06
    2350:	fd 80       	ldd	r15, Y+5	; 0x05
    2352:	0c 81       	ldd	r16, Y+4	; 0x04
    2354:	1b 81       	ldd	r17, Y+3	; 0x03
    2356:	aa 81       	ldd	r26, Y+2	; 0x02
    2358:	b9 81       	ldd	r27, Y+1	; 0x01
    235a:	ce 0f       	add	r28, r30
    235c:	d1 1d       	adc	r29, r1
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	ed 01       	movw	r28, r26
    236a:	08 95       	ret

0000236c <strlen>:
    236c:	fc 01       	movw	r30, r24
    236e:	01 90       	ld	r0, Z+
    2370:	00 20       	and	r0, r0
    2372:	e9 f7       	brne	.-6      	; 0x236e <strlen+0x2>
    2374:	80 95       	com	r24
    2376:	90 95       	com	r25
    2378:	8e 0f       	add	r24, r30
    237a:	9f 1f       	adc	r25, r31
    237c:	08 95       	ret

0000237e <sprintf>:
    237e:	ae e0       	ldi	r26, 0x0E	; 14
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e5 ec       	ldi	r30, 0xC5	; 197
    2384:	f1 e1       	ldi	r31, 0x11	; 17
    2386:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__+0x1c>
    238a:	0d 89       	ldd	r16, Y+21	; 0x15
    238c:	1e 89       	ldd	r17, Y+22	; 0x16
    238e:	86 e0       	ldi	r24, 0x06	; 6
    2390:	8c 83       	std	Y+4, r24	; 0x04
    2392:	1a 83       	std	Y+2, r17	; 0x02
    2394:	09 83       	std	Y+1, r16	; 0x01
    2396:	8f ef       	ldi	r24, 0xFF	; 255
    2398:	9f e7       	ldi	r25, 0x7F	; 127
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
    239e:	9e 01       	movw	r18, r28
    23a0:	27 5e       	subi	r18, 0xE7	; 231
    23a2:	3f 4f       	sbci	r19, 0xFF	; 255
    23a4:	ce 01       	movw	r24, r28
    23a6:	01 96       	adiw	r24, 0x01	; 1
    23a8:	6f 89       	ldd	r22, Y+23	; 0x17
    23aa:	78 8d       	ldd	r23, Y+24	; 0x18
    23ac:	a9 01       	movw	r20, r18
    23ae:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <vfprintf>
    23b2:	2f 81       	ldd	r18, Y+7	; 0x07
    23b4:	38 85       	ldd	r19, Y+8	; 0x08
    23b6:	02 0f       	add	r16, r18
    23b8:	13 1f       	adc	r17, r19
    23ba:	f8 01       	movw	r30, r16
    23bc:	10 82       	st	Z, r1
    23be:	2e 96       	adiw	r28, 0x0e	; 14
    23c0:	e4 e0       	ldi	r30, 0x04	; 4
    23c2:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__epilogue_restores__+0x1c>

000023c6 <vfprintf>:
    23c6:	ab e0       	ldi	r26, 0x0B	; 11
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e9 ee       	ldi	r30, 0xE9	; 233
    23cc:	f1 e1       	ldi	r31, 0x11	; 17
    23ce:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <__prologue_saves__>
    23d2:	3c 01       	movw	r6, r24
    23d4:	2b 01       	movw	r4, r22
    23d6:	5a 01       	movw	r10, r20
    23d8:	fc 01       	movw	r30, r24
    23da:	17 82       	std	Z+7, r1	; 0x07
    23dc:	16 82       	std	Z+6, r1	; 0x06
    23de:	83 81       	ldd	r24, Z+3	; 0x03
    23e0:	81 fd       	sbrc	r24, 1
    23e2:	03 c0       	rjmp	.+6      	; 0x23ea <vfprintf+0x24>
    23e4:	6f ef       	ldi	r22, 0xFF	; 255
    23e6:	7f ef       	ldi	r23, 0xFF	; 255
    23e8:	c6 c1       	rjmp	.+908    	; 0x2776 <vfprintf+0x3b0>
    23ea:	9a e0       	ldi	r25, 0x0A	; 10
    23ec:	89 2e       	mov	r8, r25
    23ee:	1e 01       	movw	r2, r28
    23f0:	08 94       	sec
    23f2:	21 1c       	adc	r2, r1
    23f4:	31 1c       	adc	r3, r1
    23f6:	f3 01       	movw	r30, r6
    23f8:	23 81       	ldd	r18, Z+3	; 0x03
    23fa:	f2 01       	movw	r30, r4
    23fc:	23 fd       	sbrc	r18, 3
    23fe:	85 91       	lpm	r24, Z+
    2400:	23 ff       	sbrs	r18, 3
    2402:	81 91       	ld	r24, Z+
    2404:	2f 01       	movw	r4, r30
    2406:	88 23       	and	r24, r24
    2408:	09 f4       	brne	.+2      	; 0x240c <vfprintf+0x46>
    240a:	b2 c1       	rjmp	.+868    	; 0x2770 <vfprintf+0x3aa>
    240c:	85 32       	cpi	r24, 0x25	; 37
    240e:	39 f4       	brne	.+14     	; 0x241e <vfprintf+0x58>
    2410:	23 fd       	sbrc	r18, 3
    2412:	85 91       	lpm	r24, Z+
    2414:	23 ff       	sbrs	r18, 3
    2416:	81 91       	ld	r24, Z+
    2418:	2f 01       	movw	r4, r30
    241a:	85 32       	cpi	r24, 0x25	; 37
    241c:	29 f4       	brne	.+10     	; 0x2428 <vfprintf+0x62>
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	b3 01       	movw	r22, r6
    2422:	0e 94 d6 13 	call	0x27ac	; 0x27ac <fputc>
    2426:	e7 cf       	rjmp	.-50     	; 0x23f6 <vfprintf+0x30>
    2428:	98 2f       	mov	r25, r24
    242a:	ff 24       	eor	r15, r15
    242c:	ee 24       	eor	r14, r14
    242e:	99 24       	eor	r9, r9
    2430:	ff e1       	ldi	r31, 0x1F	; 31
    2432:	ff 15       	cp	r31, r15
    2434:	d0 f0       	brcs	.+52     	; 0x246a <vfprintf+0xa4>
    2436:	9b 32       	cpi	r25, 0x2B	; 43
    2438:	69 f0       	breq	.+26     	; 0x2454 <vfprintf+0x8e>
    243a:	9c 32       	cpi	r25, 0x2C	; 44
    243c:	28 f4       	brcc	.+10     	; 0x2448 <vfprintf+0x82>
    243e:	90 32       	cpi	r25, 0x20	; 32
    2440:	59 f0       	breq	.+22     	; 0x2458 <vfprintf+0x92>
    2442:	93 32       	cpi	r25, 0x23	; 35
    2444:	91 f4       	brne	.+36     	; 0x246a <vfprintf+0xa4>
    2446:	0e c0       	rjmp	.+28     	; 0x2464 <vfprintf+0x9e>
    2448:	9d 32       	cpi	r25, 0x2D	; 45
    244a:	49 f0       	breq	.+18     	; 0x245e <vfprintf+0x98>
    244c:	90 33       	cpi	r25, 0x30	; 48
    244e:	69 f4       	brne	.+26     	; 0x246a <vfprintf+0xa4>
    2450:	41 e0       	ldi	r20, 0x01	; 1
    2452:	24 c0       	rjmp	.+72     	; 0x249c <vfprintf+0xd6>
    2454:	52 e0       	ldi	r21, 0x02	; 2
    2456:	f5 2a       	or	r15, r21
    2458:	84 e0       	ldi	r24, 0x04	; 4
    245a:	f8 2a       	or	r15, r24
    245c:	28 c0       	rjmp	.+80     	; 0x24ae <vfprintf+0xe8>
    245e:	98 e0       	ldi	r25, 0x08	; 8
    2460:	f9 2a       	or	r15, r25
    2462:	25 c0       	rjmp	.+74     	; 0x24ae <vfprintf+0xe8>
    2464:	e0 e1       	ldi	r30, 0x10	; 16
    2466:	fe 2a       	or	r15, r30
    2468:	22 c0       	rjmp	.+68     	; 0x24ae <vfprintf+0xe8>
    246a:	f7 fc       	sbrc	r15, 7
    246c:	29 c0       	rjmp	.+82     	; 0x24c0 <vfprintf+0xfa>
    246e:	89 2f       	mov	r24, r25
    2470:	80 53       	subi	r24, 0x30	; 48
    2472:	8a 30       	cpi	r24, 0x0A	; 10
    2474:	70 f4       	brcc	.+28     	; 0x2492 <vfprintf+0xcc>
    2476:	f6 fe       	sbrs	r15, 6
    2478:	05 c0       	rjmp	.+10     	; 0x2484 <vfprintf+0xbe>
    247a:	98 9c       	mul	r9, r8
    247c:	90 2c       	mov	r9, r0
    247e:	11 24       	eor	r1, r1
    2480:	98 0e       	add	r9, r24
    2482:	15 c0       	rjmp	.+42     	; 0x24ae <vfprintf+0xe8>
    2484:	e8 9c       	mul	r14, r8
    2486:	e0 2c       	mov	r14, r0
    2488:	11 24       	eor	r1, r1
    248a:	e8 0e       	add	r14, r24
    248c:	f0 e2       	ldi	r31, 0x20	; 32
    248e:	ff 2a       	or	r15, r31
    2490:	0e c0       	rjmp	.+28     	; 0x24ae <vfprintf+0xe8>
    2492:	9e 32       	cpi	r25, 0x2E	; 46
    2494:	29 f4       	brne	.+10     	; 0x24a0 <vfprintf+0xda>
    2496:	f6 fc       	sbrc	r15, 6
    2498:	6b c1       	rjmp	.+726    	; 0x2770 <vfprintf+0x3aa>
    249a:	40 e4       	ldi	r20, 0x40	; 64
    249c:	f4 2a       	or	r15, r20
    249e:	07 c0       	rjmp	.+14     	; 0x24ae <vfprintf+0xe8>
    24a0:	9c 36       	cpi	r25, 0x6C	; 108
    24a2:	19 f4       	brne	.+6      	; 0x24aa <vfprintf+0xe4>
    24a4:	50 e8       	ldi	r21, 0x80	; 128
    24a6:	f5 2a       	or	r15, r21
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <vfprintf+0xe8>
    24aa:	98 36       	cpi	r25, 0x68	; 104
    24ac:	49 f4       	brne	.+18     	; 0x24c0 <vfprintf+0xfa>
    24ae:	f2 01       	movw	r30, r4
    24b0:	23 fd       	sbrc	r18, 3
    24b2:	95 91       	lpm	r25, Z+
    24b4:	23 ff       	sbrs	r18, 3
    24b6:	91 91       	ld	r25, Z+
    24b8:	2f 01       	movw	r4, r30
    24ba:	99 23       	and	r25, r25
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <vfprintf+0xfa>
    24be:	b8 cf       	rjmp	.-144    	; 0x2430 <vfprintf+0x6a>
    24c0:	89 2f       	mov	r24, r25
    24c2:	85 54       	subi	r24, 0x45	; 69
    24c4:	83 30       	cpi	r24, 0x03	; 3
    24c6:	18 f0       	brcs	.+6      	; 0x24ce <vfprintf+0x108>
    24c8:	80 52       	subi	r24, 0x20	; 32
    24ca:	83 30       	cpi	r24, 0x03	; 3
    24cc:	38 f4       	brcc	.+14     	; 0x24dc <vfprintf+0x116>
    24ce:	44 e0       	ldi	r20, 0x04	; 4
    24d0:	50 e0       	ldi	r21, 0x00	; 0
    24d2:	a4 0e       	add	r10, r20
    24d4:	b5 1e       	adc	r11, r21
    24d6:	5f e3       	ldi	r21, 0x3F	; 63
    24d8:	59 83       	std	Y+1, r21	; 0x01
    24da:	0f c0       	rjmp	.+30     	; 0x24fa <vfprintf+0x134>
    24dc:	93 36       	cpi	r25, 0x63	; 99
    24de:	31 f0       	breq	.+12     	; 0x24ec <vfprintf+0x126>
    24e0:	93 37       	cpi	r25, 0x73	; 115
    24e2:	79 f0       	breq	.+30     	; 0x2502 <vfprintf+0x13c>
    24e4:	93 35       	cpi	r25, 0x53	; 83
    24e6:	09 f0       	breq	.+2      	; 0x24ea <vfprintf+0x124>
    24e8:	56 c0       	rjmp	.+172    	; 0x2596 <vfprintf+0x1d0>
    24ea:	20 c0       	rjmp	.+64     	; 0x252c <vfprintf+0x166>
    24ec:	f5 01       	movw	r30, r10
    24ee:	80 81       	ld	r24, Z
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	42 e0       	ldi	r20, 0x02	; 2
    24f4:	50 e0       	ldi	r21, 0x00	; 0
    24f6:	a4 0e       	add	r10, r20
    24f8:	b5 1e       	adc	r11, r21
    24fa:	61 01       	movw	r12, r2
    24fc:	01 e0       	ldi	r16, 0x01	; 1
    24fe:	10 e0       	ldi	r17, 0x00	; 0
    2500:	12 c0       	rjmp	.+36     	; 0x2526 <vfprintf+0x160>
    2502:	f5 01       	movw	r30, r10
    2504:	c0 80       	ld	r12, Z
    2506:	d1 80       	ldd	r13, Z+1	; 0x01
    2508:	f6 fc       	sbrc	r15, 6
    250a:	03 c0       	rjmp	.+6      	; 0x2512 <vfprintf+0x14c>
    250c:	6f ef       	ldi	r22, 0xFF	; 255
    250e:	7f ef       	ldi	r23, 0xFF	; 255
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <vfprintf+0x150>
    2512:	69 2d       	mov	r22, r9
    2514:	70 e0       	ldi	r23, 0x00	; 0
    2516:	42 e0       	ldi	r20, 0x02	; 2
    2518:	50 e0       	ldi	r21, 0x00	; 0
    251a:	a4 0e       	add	r10, r20
    251c:	b5 1e       	adc	r11, r21
    251e:	c6 01       	movw	r24, r12
    2520:	0e 94 cb 13 	call	0x2796	; 0x2796 <strnlen>
    2524:	8c 01       	movw	r16, r24
    2526:	5f e7       	ldi	r21, 0x7F	; 127
    2528:	f5 22       	and	r15, r21
    252a:	14 c0       	rjmp	.+40     	; 0x2554 <vfprintf+0x18e>
    252c:	f5 01       	movw	r30, r10
    252e:	c0 80       	ld	r12, Z
    2530:	d1 80       	ldd	r13, Z+1	; 0x01
    2532:	f6 fc       	sbrc	r15, 6
    2534:	03 c0       	rjmp	.+6      	; 0x253c <vfprintf+0x176>
    2536:	6f ef       	ldi	r22, 0xFF	; 255
    2538:	7f ef       	ldi	r23, 0xFF	; 255
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <vfprintf+0x17a>
    253c:	69 2d       	mov	r22, r9
    253e:	70 e0       	ldi	r23, 0x00	; 0
    2540:	42 e0       	ldi	r20, 0x02	; 2
    2542:	50 e0       	ldi	r21, 0x00	; 0
    2544:	a4 0e       	add	r10, r20
    2546:	b5 1e       	adc	r11, r21
    2548:	c6 01       	movw	r24, r12
    254a:	0e 94 c0 13 	call	0x2780	; 0x2780 <strnlen_P>
    254e:	8c 01       	movw	r16, r24
    2550:	50 e8       	ldi	r21, 0x80	; 128
    2552:	f5 2a       	or	r15, r21
    2554:	f3 fe       	sbrs	r15, 3
    2556:	07 c0       	rjmp	.+14     	; 0x2566 <vfprintf+0x1a0>
    2558:	1a c0       	rjmp	.+52     	; 0x258e <vfprintf+0x1c8>
    255a:	80 e2       	ldi	r24, 0x20	; 32
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	b3 01       	movw	r22, r6
    2560:	0e 94 d6 13 	call	0x27ac	; 0x27ac <fputc>
    2564:	ea 94       	dec	r14
    2566:	8e 2d       	mov	r24, r14
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	08 17       	cp	r16, r24
    256c:	19 07       	cpc	r17, r25
    256e:	a8 f3       	brcs	.-22     	; 0x255a <vfprintf+0x194>
    2570:	0e c0       	rjmp	.+28     	; 0x258e <vfprintf+0x1c8>
    2572:	f6 01       	movw	r30, r12
    2574:	f7 fc       	sbrc	r15, 7
    2576:	85 91       	lpm	r24, Z+
    2578:	f7 fe       	sbrs	r15, 7
    257a:	81 91       	ld	r24, Z+
    257c:	6f 01       	movw	r12, r30
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	b3 01       	movw	r22, r6
    2582:	0e 94 d6 13 	call	0x27ac	; 0x27ac <fputc>
    2586:	e1 10       	cpse	r14, r1
    2588:	ea 94       	dec	r14
    258a:	01 50       	subi	r16, 0x01	; 1
    258c:	10 40       	sbci	r17, 0x00	; 0
    258e:	01 15       	cp	r16, r1
    2590:	11 05       	cpc	r17, r1
    2592:	79 f7       	brne	.-34     	; 0x2572 <vfprintf+0x1ac>
    2594:	ea c0       	rjmp	.+468    	; 0x276a <vfprintf+0x3a4>
    2596:	94 36       	cpi	r25, 0x64	; 100
    2598:	11 f0       	breq	.+4      	; 0x259e <vfprintf+0x1d8>
    259a:	99 36       	cpi	r25, 0x69	; 105
    259c:	69 f5       	brne	.+90     	; 0x25f8 <vfprintf+0x232>
    259e:	f7 fe       	sbrs	r15, 7
    25a0:	08 c0       	rjmp	.+16     	; 0x25b2 <vfprintf+0x1ec>
    25a2:	f5 01       	movw	r30, r10
    25a4:	20 81       	ld	r18, Z
    25a6:	31 81       	ldd	r19, Z+1	; 0x01
    25a8:	42 81       	ldd	r20, Z+2	; 0x02
    25aa:	53 81       	ldd	r21, Z+3	; 0x03
    25ac:	84 e0       	ldi	r24, 0x04	; 4
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	0a c0       	rjmp	.+20     	; 0x25c6 <vfprintf+0x200>
    25b2:	f5 01       	movw	r30, r10
    25b4:	80 81       	ld	r24, Z
    25b6:	91 81       	ldd	r25, Z+1	; 0x01
    25b8:	9c 01       	movw	r18, r24
    25ba:	44 27       	eor	r20, r20
    25bc:	37 fd       	sbrc	r19, 7
    25be:	40 95       	com	r20
    25c0:	54 2f       	mov	r21, r20
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	a8 0e       	add	r10, r24
    25c8:	b9 1e       	adc	r11, r25
    25ca:	9f e6       	ldi	r25, 0x6F	; 111
    25cc:	f9 22       	and	r15, r25
    25ce:	57 ff       	sbrs	r21, 7
    25d0:	09 c0       	rjmp	.+18     	; 0x25e4 <vfprintf+0x21e>
    25d2:	50 95       	com	r21
    25d4:	40 95       	com	r20
    25d6:	30 95       	com	r19
    25d8:	21 95       	neg	r18
    25da:	3f 4f       	sbci	r19, 0xFF	; 255
    25dc:	4f 4f       	sbci	r20, 0xFF	; 255
    25de:	5f 4f       	sbci	r21, 0xFF	; 255
    25e0:	e0 e8       	ldi	r30, 0x80	; 128
    25e2:	fe 2a       	or	r15, r30
    25e4:	ca 01       	movw	r24, r20
    25e6:	b9 01       	movw	r22, r18
    25e8:	a1 01       	movw	r20, r2
    25ea:	2a e0       	ldi	r18, 0x0A	; 10
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	0e 94 02 14 	call	0x2804	; 0x2804 <__ultoa_invert>
    25f2:	d8 2e       	mov	r13, r24
    25f4:	d2 18       	sub	r13, r2
    25f6:	40 c0       	rjmp	.+128    	; 0x2678 <vfprintf+0x2b2>
    25f8:	95 37       	cpi	r25, 0x75	; 117
    25fa:	29 f4       	brne	.+10     	; 0x2606 <vfprintf+0x240>
    25fc:	1f 2d       	mov	r17, r15
    25fe:	1f 7e       	andi	r17, 0xEF	; 239
    2600:	2a e0       	ldi	r18, 0x0A	; 10
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	1d c0       	rjmp	.+58     	; 0x2640 <vfprintf+0x27a>
    2606:	1f 2d       	mov	r17, r15
    2608:	19 7f       	andi	r17, 0xF9	; 249
    260a:	9f 36       	cpi	r25, 0x6F	; 111
    260c:	61 f0       	breq	.+24     	; 0x2626 <vfprintf+0x260>
    260e:	90 37       	cpi	r25, 0x70	; 112
    2610:	20 f4       	brcc	.+8      	; 0x261a <vfprintf+0x254>
    2612:	98 35       	cpi	r25, 0x58	; 88
    2614:	09 f0       	breq	.+2      	; 0x2618 <vfprintf+0x252>
    2616:	ac c0       	rjmp	.+344    	; 0x2770 <vfprintf+0x3aa>
    2618:	0f c0       	rjmp	.+30     	; 0x2638 <vfprintf+0x272>
    261a:	90 37       	cpi	r25, 0x70	; 112
    261c:	39 f0       	breq	.+14     	; 0x262c <vfprintf+0x266>
    261e:	98 37       	cpi	r25, 0x78	; 120
    2620:	09 f0       	breq	.+2      	; 0x2624 <vfprintf+0x25e>
    2622:	a6 c0       	rjmp	.+332    	; 0x2770 <vfprintf+0x3aa>
    2624:	04 c0       	rjmp	.+8      	; 0x262e <vfprintf+0x268>
    2626:	28 e0       	ldi	r18, 0x08	; 8
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	0a c0       	rjmp	.+20     	; 0x2640 <vfprintf+0x27a>
    262c:	10 61       	ori	r17, 0x10	; 16
    262e:	14 fd       	sbrc	r17, 4
    2630:	14 60       	ori	r17, 0x04	; 4
    2632:	20 e1       	ldi	r18, 0x10	; 16
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	04 c0       	rjmp	.+8      	; 0x2640 <vfprintf+0x27a>
    2638:	14 fd       	sbrc	r17, 4
    263a:	16 60       	ori	r17, 0x06	; 6
    263c:	20 e1       	ldi	r18, 0x10	; 16
    263e:	32 e0       	ldi	r19, 0x02	; 2
    2640:	17 ff       	sbrs	r17, 7
    2642:	08 c0       	rjmp	.+16     	; 0x2654 <vfprintf+0x28e>
    2644:	f5 01       	movw	r30, r10
    2646:	60 81       	ld	r22, Z
    2648:	71 81       	ldd	r23, Z+1	; 0x01
    264a:	82 81       	ldd	r24, Z+2	; 0x02
    264c:	93 81       	ldd	r25, Z+3	; 0x03
    264e:	44 e0       	ldi	r20, 0x04	; 4
    2650:	50 e0       	ldi	r21, 0x00	; 0
    2652:	08 c0       	rjmp	.+16     	; 0x2664 <vfprintf+0x29e>
    2654:	f5 01       	movw	r30, r10
    2656:	80 81       	ld	r24, Z
    2658:	91 81       	ldd	r25, Z+1	; 0x01
    265a:	bc 01       	movw	r22, r24
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	42 e0       	ldi	r20, 0x02	; 2
    2662:	50 e0       	ldi	r21, 0x00	; 0
    2664:	a4 0e       	add	r10, r20
    2666:	b5 1e       	adc	r11, r21
    2668:	a1 01       	movw	r20, r2
    266a:	0e 94 02 14 	call	0x2804	; 0x2804 <__ultoa_invert>
    266e:	d8 2e       	mov	r13, r24
    2670:	d2 18       	sub	r13, r2
    2672:	8f e7       	ldi	r24, 0x7F	; 127
    2674:	f8 2e       	mov	r15, r24
    2676:	f1 22       	and	r15, r17
    2678:	f6 fe       	sbrs	r15, 6
    267a:	0b c0       	rjmp	.+22     	; 0x2692 <vfprintf+0x2cc>
    267c:	5e ef       	ldi	r21, 0xFE	; 254
    267e:	f5 22       	and	r15, r21
    2680:	d9 14       	cp	r13, r9
    2682:	38 f4       	brcc	.+14     	; 0x2692 <vfprintf+0x2cc>
    2684:	f4 fe       	sbrs	r15, 4
    2686:	07 c0       	rjmp	.+14     	; 0x2696 <vfprintf+0x2d0>
    2688:	f2 fc       	sbrc	r15, 2
    268a:	05 c0       	rjmp	.+10     	; 0x2696 <vfprintf+0x2d0>
    268c:	8f ee       	ldi	r24, 0xEF	; 239
    268e:	f8 22       	and	r15, r24
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <vfprintf+0x2d0>
    2692:	1d 2d       	mov	r17, r13
    2694:	01 c0       	rjmp	.+2      	; 0x2698 <vfprintf+0x2d2>
    2696:	19 2d       	mov	r17, r9
    2698:	f4 fe       	sbrs	r15, 4
    269a:	0d c0       	rjmp	.+26     	; 0x26b6 <vfprintf+0x2f0>
    269c:	fe 01       	movw	r30, r28
    269e:	ed 0d       	add	r30, r13
    26a0:	f1 1d       	adc	r31, r1
    26a2:	80 81       	ld	r24, Z
    26a4:	80 33       	cpi	r24, 0x30	; 48
    26a6:	19 f4       	brne	.+6      	; 0x26ae <vfprintf+0x2e8>
    26a8:	99 ee       	ldi	r25, 0xE9	; 233
    26aa:	f9 22       	and	r15, r25
    26ac:	08 c0       	rjmp	.+16     	; 0x26be <vfprintf+0x2f8>
    26ae:	1f 5f       	subi	r17, 0xFF	; 255
    26b0:	f2 fe       	sbrs	r15, 2
    26b2:	05 c0       	rjmp	.+10     	; 0x26be <vfprintf+0x2f8>
    26b4:	03 c0       	rjmp	.+6      	; 0x26bc <vfprintf+0x2f6>
    26b6:	8f 2d       	mov	r24, r15
    26b8:	86 78       	andi	r24, 0x86	; 134
    26ba:	09 f0       	breq	.+2      	; 0x26be <vfprintf+0x2f8>
    26bc:	1f 5f       	subi	r17, 0xFF	; 255
    26be:	0f 2d       	mov	r16, r15
    26c0:	f3 fc       	sbrc	r15, 3
    26c2:	14 c0       	rjmp	.+40     	; 0x26ec <vfprintf+0x326>
    26c4:	f0 fe       	sbrs	r15, 0
    26c6:	0f c0       	rjmp	.+30     	; 0x26e6 <vfprintf+0x320>
    26c8:	1e 15       	cp	r17, r14
    26ca:	10 f0       	brcs	.+4      	; 0x26d0 <vfprintf+0x30a>
    26cc:	9d 2c       	mov	r9, r13
    26ce:	0b c0       	rjmp	.+22     	; 0x26e6 <vfprintf+0x320>
    26d0:	9d 2c       	mov	r9, r13
    26d2:	9e 0c       	add	r9, r14
    26d4:	91 1a       	sub	r9, r17
    26d6:	1e 2d       	mov	r17, r14
    26d8:	06 c0       	rjmp	.+12     	; 0x26e6 <vfprintf+0x320>
    26da:	80 e2       	ldi	r24, 0x20	; 32
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	b3 01       	movw	r22, r6
    26e0:	0e 94 d6 13 	call	0x27ac	; 0x27ac <fputc>
    26e4:	1f 5f       	subi	r17, 0xFF	; 255
    26e6:	1e 15       	cp	r17, r14
    26e8:	c0 f3       	brcs	.-16     	; 0x26da <vfprintf+0x314>
    26ea:	04 c0       	rjmp	.+8      	; 0x26f4 <vfprintf+0x32e>
    26ec:	1e 15       	cp	r17, r14
    26ee:	10 f4       	brcc	.+4      	; 0x26f4 <vfprintf+0x32e>
    26f0:	e1 1a       	sub	r14, r17
    26f2:	01 c0       	rjmp	.+2      	; 0x26f6 <vfprintf+0x330>
    26f4:	ee 24       	eor	r14, r14
    26f6:	04 ff       	sbrs	r16, 4
    26f8:	0f c0       	rjmp	.+30     	; 0x2718 <vfprintf+0x352>
    26fa:	80 e3       	ldi	r24, 0x30	; 48
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	b3 01       	movw	r22, r6
    2700:	0e 94 d6 13 	call	0x27ac	; 0x27ac <fputc>
    2704:	02 ff       	sbrs	r16, 2
    2706:	1d c0       	rjmp	.+58     	; 0x2742 <vfprintf+0x37c>
    2708:	01 fd       	sbrc	r16, 1
    270a:	03 c0       	rjmp	.+6      	; 0x2712 <vfprintf+0x34c>
    270c:	88 e7       	ldi	r24, 0x78	; 120
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	0e c0       	rjmp	.+28     	; 0x272e <vfprintf+0x368>
    2712:	88 e5       	ldi	r24, 0x58	; 88
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	0b c0       	rjmp	.+22     	; 0x272e <vfprintf+0x368>
    2718:	80 2f       	mov	r24, r16
    271a:	86 78       	andi	r24, 0x86	; 134
    271c:	91 f0       	breq	.+36     	; 0x2742 <vfprintf+0x37c>
    271e:	01 ff       	sbrs	r16, 1
    2720:	02 c0       	rjmp	.+4      	; 0x2726 <vfprintf+0x360>
    2722:	8b e2       	ldi	r24, 0x2B	; 43
    2724:	01 c0       	rjmp	.+2      	; 0x2728 <vfprintf+0x362>
    2726:	80 e2       	ldi	r24, 0x20	; 32
    2728:	f7 fc       	sbrc	r15, 7
    272a:	8d e2       	ldi	r24, 0x2D	; 45
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	b3 01       	movw	r22, r6
    2730:	0e 94 d6 13 	call	0x27ac	; 0x27ac <fputc>
    2734:	06 c0       	rjmp	.+12     	; 0x2742 <vfprintf+0x37c>
    2736:	80 e3       	ldi	r24, 0x30	; 48
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	b3 01       	movw	r22, r6
    273c:	0e 94 d6 13 	call	0x27ac	; 0x27ac <fputc>
    2740:	9a 94       	dec	r9
    2742:	d9 14       	cp	r13, r9
    2744:	c0 f3       	brcs	.-16     	; 0x2736 <vfprintf+0x370>
    2746:	da 94       	dec	r13
    2748:	f1 01       	movw	r30, r2
    274a:	ed 0d       	add	r30, r13
    274c:	f1 1d       	adc	r31, r1
    274e:	80 81       	ld	r24, Z
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	b3 01       	movw	r22, r6
    2754:	0e 94 d6 13 	call	0x27ac	; 0x27ac <fputc>
    2758:	dd 20       	and	r13, r13
    275a:	a9 f7       	brne	.-22     	; 0x2746 <vfprintf+0x380>
    275c:	06 c0       	rjmp	.+12     	; 0x276a <vfprintf+0x3a4>
    275e:	80 e2       	ldi	r24, 0x20	; 32
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	b3 01       	movw	r22, r6
    2764:	0e 94 d6 13 	call	0x27ac	; 0x27ac <fputc>
    2768:	ea 94       	dec	r14
    276a:	ee 20       	and	r14, r14
    276c:	c1 f7       	brne	.-16     	; 0x275e <vfprintf+0x398>
    276e:	43 ce       	rjmp	.-890    	; 0x23f6 <vfprintf+0x30>
    2770:	f3 01       	movw	r30, r6
    2772:	66 81       	ldd	r22, Z+6	; 0x06
    2774:	77 81       	ldd	r23, Z+7	; 0x07
    2776:	cb 01       	movw	r24, r22
    2778:	2b 96       	adiw	r28, 0x0b	; 11
    277a:	e2 e1       	ldi	r30, 0x12	; 18
    277c:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__epilogue_restores__>

00002780 <strnlen_P>:
    2780:	fc 01       	movw	r30, r24
    2782:	05 90       	lpm	r0, Z+
    2784:	61 50       	subi	r22, 0x01	; 1
    2786:	70 40       	sbci	r23, 0x00	; 0
    2788:	01 10       	cpse	r0, r1
    278a:	d8 f7       	brcc	.-10     	; 0x2782 <strnlen_P+0x2>
    278c:	80 95       	com	r24
    278e:	90 95       	com	r25
    2790:	8e 0f       	add	r24, r30
    2792:	9f 1f       	adc	r25, r31
    2794:	08 95       	ret

00002796 <strnlen>:
    2796:	fc 01       	movw	r30, r24
    2798:	61 50       	subi	r22, 0x01	; 1
    279a:	70 40       	sbci	r23, 0x00	; 0
    279c:	01 90       	ld	r0, Z+
    279e:	01 10       	cpse	r0, r1
    27a0:	d8 f7       	brcc	.-10     	; 0x2798 <strnlen+0x2>
    27a2:	80 95       	com	r24
    27a4:	90 95       	com	r25
    27a6:	8e 0f       	add	r24, r30
    27a8:	9f 1f       	adc	r25, r31
    27aa:	08 95       	ret

000027ac <fputc>:
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
    27b4:	8c 01       	movw	r16, r24
    27b6:	eb 01       	movw	r28, r22
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	81 ff       	sbrs	r24, 1
    27bc:	1b c0       	rjmp	.+54     	; 0x27f4 <fputc+0x48>
    27be:	82 ff       	sbrs	r24, 2
    27c0:	0d c0       	rjmp	.+26     	; 0x27dc <fputc+0x30>
    27c2:	2e 81       	ldd	r18, Y+6	; 0x06
    27c4:	3f 81       	ldd	r19, Y+7	; 0x07
    27c6:	8c 81       	ldd	r24, Y+4	; 0x04
    27c8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ca:	28 17       	cp	r18, r24
    27cc:	39 07       	cpc	r19, r25
    27ce:	64 f4       	brge	.+24     	; 0x27e8 <fputc+0x3c>
    27d0:	e8 81       	ld	r30, Y
    27d2:	f9 81       	ldd	r31, Y+1	; 0x01
    27d4:	01 93       	st	Z+, r16
    27d6:	f9 83       	std	Y+1, r31	; 0x01
    27d8:	e8 83       	st	Y, r30
    27da:	06 c0       	rjmp	.+12     	; 0x27e8 <fputc+0x3c>
    27dc:	e8 85       	ldd	r30, Y+8	; 0x08
    27de:	f9 85       	ldd	r31, Y+9	; 0x09
    27e0:	80 2f       	mov	r24, r16
    27e2:	09 95       	icall
    27e4:	89 2b       	or	r24, r25
    27e6:	31 f4       	brne	.+12     	; 0x27f4 <fputc+0x48>
    27e8:	8e 81       	ldd	r24, Y+6	; 0x06
    27ea:	9f 81       	ldd	r25, Y+7	; 0x07
    27ec:	01 96       	adiw	r24, 0x01	; 1
    27ee:	9f 83       	std	Y+7, r25	; 0x07
    27f0:	8e 83       	std	Y+6, r24	; 0x06
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <fputc+0x4c>
    27f4:	0f ef       	ldi	r16, 0xFF	; 255
    27f6:	1f ef       	ldi	r17, 0xFF	; 255
    27f8:	c8 01       	movw	r24, r16
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	08 95       	ret

00002804 <__ultoa_invert>:
    2804:	fa 01       	movw	r30, r20
    2806:	aa 27       	eor	r26, r26
    2808:	28 30       	cpi	r18, 0x08	; 8
    280a:	51 f1       	breq	.+84     	; 0x2860 <__ultoa_invert+0x5c>
    280c:	20 31       	cpi	r18, 0x10	; 16
    280e:	81 f1       	breq	.+96     	; 0x2870 <__ultoa_invert+0x6c>
    2810:	e8 94       	clt
    2812:	6f 93       	push	r22
    2814:	6e 7f       	andi	r22, 0xFE	; 254
    2816:	6e 5f       	subi	r22, 0xFE	; 254
    2818:	7f 4f       	sbci	r23, 0xFF	; 255
    281a:	8f 4f       	sbci	r24, 0xFF	; 255
    281c:	9f 4f       	sbci	r25, 0xFF	; 255
    281e:	af 4f       	sbci	r26, 0xFF	; 255
    2820:	b1 e0       	ldi	r27, 0x01	; 1
    2822:	3e d0       	rcall	.+124    	; 0x28a0 <__ultoa_invert+0x9c>
    2824:	b4 e0       	ldi	r27, 0x04	; 4
    2826:	3c d0       	rcall	.+120    	; 0x28a0 <__ultoa_invert+0x9c>
    2828:	67 0f       	add	r22, r23
    282a:	78 1f       	adc	r23, r24
    282c:	89 1f       	adc	r24, r25
    282e:	9a 1f       	adc	r25, r26
    2830:	a1 1d       	adc	r26, r1
    2832:	68 0f       	add	r22, r24
    2834:	79 1f       	adc	r23, r25
    2836:	8a 1f       	adc	r24, r26
    2838:	91 1d       	adc	r25, r1
    283a:	a1 1d       	adc	r26, r1
    283c:	6a 0f       	add	r22, r26
    283e:	71 1d       	adc	r23, r1
    2840:	81 1d       	adc	r24, r1
    2842:	91 1d       	adc	r25, r1
    2844:	a1 1d       	adc	r26, r1
    2846:	20 d0       	rcall	.+64     	; 0x2888 <__ultoa_invert+0x84>
    2848:	09 f4       	brne	.+2      	; 0x284c <__ultoa_invert+0x48>
    284a:	68 94       	set
    284c:	3f 91       	pop	r19
    284e:	2a e0       	ldi	r18, 0x0A	; 10
    2850:	26 9f       	mul	r18, r22
    2852:	11 24       	eor	r1, r1
    2854:	30 19       	sub	r19, r0
    2856:	30 5d       	subi	r19, 0xD0	; 208
    2858:	31 93       	st	Z+, r19
    285a:	de f6       	brtc	.-74     	; 0x2812 <__ultoa_invert+0xe>
    285c:	cf 01       	movw	r24, r30
    285e:	08 95       	ret
    2860:	46 2f       	mov	r20, r22
    2862:	47 70       	andi	r20, 0x07	; 7
    2864:	40 5d       	subi	r20, 0xD0	; 208
    2866:	41 93       	st	Z+, r20
    2868:	b3 e0       	ldi	r27, 0x03	; 3
    286a:	0f d0       	rcall	.+30     	; 0x288a <__ultoa_invert+0x86>
    286c:	c9 f7       	brne	.-14     	; 0x2860 <__ultoa_invert+0x5c>
    286e:	f6 cf       	rjmp	.-20     	; 0x285c <__ultoa_invert+0x58>
    2870:	46 2f       	mov	r20, r22
    2872:	4f 70       	andi	r20, 0x0F	; 15
    2874:	40 5d       	subi	r20, 0xD0	; 208
    2876:	4a 33       	cpi	r20, 0x3A	; 58
    2878:	18 f0       	brcs	.+6      	; 0x2880 <__ultoa_invert+0x7c>
    287a:	49 5d       	subi	r20, 0xD9	; 217
    287c:	31 fd       	sbrc	r19, 1
    287e:	40 52       	subi	r20, 0x20	; 32
    2880:	41 93       	st	Z+, r20
    2882:	02 d0       	rcall	.+4      	; 0x2888 <__ultoa_invert+0x84>
    2884:	a9 f7       	brne	.-22     	; 0x2870 <__ultoa_invert+0x6c>
    2886:	ea cf       	rjmp	.-44     	; 0x285c <__ultoa_invert+0x58>
    2888:	b4 e0       	ldi	r27, 0x04	; 4
    288a:	a6 95       	lsr	r26
    288c:	97 95       	ror	r25
    288e:	87 95       	ror	r24
    2890:	77 95       	ror	r23
    2892:	67 95       	ror	r22
    2894:	ba 95       	dec	r27
    2896:	c9 f7       	brne	.-14     	; 0x288a <__ultoa_invert+0x86>
    2898:	00 97       	sbiw	r24, 0x00	; 0
    289a:	61 05       	cpc	r22, r1
    289c:	71 05       	cpc	r23, r1
    289e:	08 95       	ret
    28a0:	9b 01       	movw	r18, r22
    28a2:	ac 01       	movw	r20, r24
    28a4:	0a 2e       	mov	r0, r26
    28a6:	06 94       	lsr	r0
    28a8:	57 95       	ror	r21
    28aa:	47 95       	ror	r20
    28ac:	37 95       	ror	r19
    28ae:	27 95       	ror	r18
    28b0:	ba 95       	dec	r27
    28b2:	c9 f7       	brne	.-14     	; 0x28a6 <__ultoa_invert+0xa2>
    28b4:	62 0f       	add	r22, r18
    28b6:	73 1f       	adc	r23, r19
    28b8:	84 1f       	adc	r24, r20
    28ba:	95 1f       	adc	r25, r21
    28bc:	a0 1d       	adc	r26, r0
    28be:	08 95       	ret

000028c0 <_exit>:
    28c0:	f8 94       	cli

000028c2 <__stop_program>:
    28c2:	ff cf       	rjmp	.-2      	; 0x28c2 <__stop_program>
