
motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000280a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000280a  0000287e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000028ec  00000000  00000000  00002890  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010c4  00000000  00000000  0000517c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001c9  00000000  00000000  000063e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022af  00000000  00000000  000065a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001267  00000000  00000000  00008858  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013c7  00000000  00000000  00009abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000ae88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  0000b048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c9d  00000000  00000000  0000b46f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000c10c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	ea e0       	ldi	r30, 0x0A	; 10
      a8:	f8 e2       	ldi	r31, 0x28	; 40
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
      b0:	a0 37       	cpi	r26, 0x70	; 112
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>
      b6:	0e 94 98 00 	call	0x130	; 0x130 <main>
      ba:	0c 94 03 14 	jmp	0x2806	; 0x2806 <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <read_adc>:

#define ADC_VREF_TYPE 0x00

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	0f 92       	push	r0
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
      cc:	89 83       	std	Y+1, r24	; 0x01
ADMUX=adc_input|ADC_VREF_TYPE;
      ce:	e7 e2       	ldi	r30, 0x27	; 39
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	89 81       	ldd	r24, Y+1	; 0x01
      d4:	80 83       	st	Z, r24
// Start the AD conversion
ADCSRA|=0x40;
      d6:	a6 e2       	ldi	r26, 0x26	; 38
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e6 e2       	ldi	r30, 0x26	; 38
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	80 64       	ori	r24, 0x40	; 64
      e2:	8c 93       	st	X, r24
// Wait for the AD conversion to complete
while ((ADCSRA & 0x10)==0);
      e4:	e6 e2       	ldi	r30, 0x26	; 38
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	88 2f       	mov	r24, r24
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	80 71       	andi	r24, 0x10	; 16
      f0:	90 70       	andi	r25, 0x00	; 0
      f2:	00 97       	sbiw	r24, 0x00	; 0
      f4:	b9 f3       	breq	.-18     	; 0xe4 <read_adc+0x22>
ADCSRA|=0x10;
      f6:	a6 e2       	ldi	r26, 0x26	; 38
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e6 e2       	ldi	r30, 0x26	; 38
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	80 81       	ld	r24, Z
     100:	80 61       	ori	r24, 0x10	; 16
     102:	8c 93       	st	X, r24
return ADCW;
     104:	e4 e2       	ldi	r30, 0x24	; 36
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	80 81       	ld	r24, Z
     10a:	91 81       	ldd	r25, Z+1	; 0x01
}
     10c:	0f 90       	pop	r0
     10e:	cf 91       	pop	r28
     110:	df 91       	pop	r29
     112:	08 95       	ret

00000114 <ADCinit>:




void ADCinit()
{
     114:	df 93       	push	r29
     116:	cf 93       	push	r28
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
ADMUX=0b00000000;
     11c:	e7 e2       	ldi	r30, 0x27	; 39
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	10 82       	st	Z, r1
ADCSRA=0x85;
     122:	e6 e2       	ldi	r30, 0x26	; 38
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	85 e8       	ldi	r24, 0x85	; 133
     128:	80 83       	st	Z, r24
}
     12a:	cf 91       	pop	r28
     12c:	df 91       	pop	r29
     12e:	08 95       	ret

00000130 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include<stdio.h>

int main(void)
{
     130:	df 93       	push	r29
     132:	cf 93       	push	r28
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	66 97       	sbiw	r28, 0x16	; 22
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
	char A[20]="";
     144:	1b 82       	std	Y+3, r1	; 0x03
     146:	1c 82       	std	Y+4, r1	; 0x04
     148:	1d 82       	std	Y+5, r1	; 0x05
     14a:	1e 82       	std	Y+6, r1	; 0x06
     14c:	80 e1       	ldi	r24, 0x10	; 16
     14e:	fe 01       	movw	r30, r28
     150:	37 96       	adiw	r30, 0x07	; 7
     152:	df 01       	movw	r26, r30
     154:	98 2f       	mov	r25, r24
     156:	1d 92       	st	X+, r1
     158:	9a 95       	dec	r25
     15a:	e9 f7       	brne	.-6      	; 0x156 <main+0x26>
	int i=0;
     15c:	1a 82       	std	Y+2, r1	; 0x02
     15e:	19 82       	std	Y+1, r1	; 0x01
ADCinit();
     160:	0e 94 8a 00 	call	0x114	; 0x114 <ADCinit>
LCDinit();
     164:	0e 94 11 05 	call	0xa22	; 0xa22 <LCDinit>
LCDclr();
     168:	0e 94 5f 09 	call	0x12be	; 0x12be <LCDclr>

while(1){
i=read_adc(0);
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 61 00 	call	0xc2	; 0xc2 <read_adc>
     174:	9a 83       	std	Y+2, r25	; 0x02
     176:	89 83       	std	Y+1, r24	; 0x01
sprintf(A,"V= %d ",i);
     178:	00 d0       	rcall	.+0      	; 0x17a <main+0x4a>
     17a:	00 d0       	rcall	.+0      	; 0x17c <main+0x4c>
     17c:	00 d0       	rcall	.+0      	; 0x17e <main+0x4e>
     17e:	ed b7       	in	r30, 0x3d	; 61
     180:	fe b7       	in	r31, 0x3e	; 62
     182:	31 96       	adiw	r30, 0x01	; 1
     184:	ce 01       	movw	r24, r28
     186:	03 96       	adiw	r24, 0x03	; 3
     188:	91 83       	std	Z+1, r25	; 0x01
     18a:	80 83       	st	Z, r24
     18c:	80 e6       	ldi	r24, 0x60	; 96
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	93 83       	std	Z+3, r25	; 0x03
     192:	82 83       	std	Z+2, r24	; 0x02
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	9a 81       	ldd	r25, Y+2	; 0x02
     198:	95 83       	std	Z+5, r25	; 0x05
     19a:	84 83       	std	Z+4, r24	; 0x04
     19c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <sprintf>
     1a0:	ad b7       	in	r26, 0x3d	; 61
     1a2:	be b7       	in	r27, 0x3e	; 62
     1a4:	16 96       	adiw	r26, 0x06	; 6
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	f8 94       	cli
     1aa:	be bf       	out	0x3e, r27	; 62
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	ad bf       	out	0x3d, r26	; 61
LCDGotoXY(0,0);
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDGotoXY>
LCDdisplay(A);
     1bc:	ce 01       	movw	r24, r28
     1be:	03 96       	adiw	r24, 0x03	; 3
     1c0:	0e 94 8b 0b 	call	0x1716	; 0x1716 <LCDdisplay>
     1c4:	d3 cf       	rjmp	.-90     	; 0x16c <main+0x3c>

000001c6 <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     1c6:	df 93       	push	r29
     1c8:	cf 93       	push	r28
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	e9 97       	sbiw	r28, 0x39	; 57
     1d0:	0f b6       	in	r0, 0x3f	; 63
     1d2:	f8 94       	cli
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	0f be       	out	0x3f, r0	; 63
     1d8:	cd bf       	out	0x3d, r28	; 61
     1da:	89 af       	std	Y+57, r24	; 0x39

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     1dc:	e5 e3       	ldi	r30, 0x35	; 53
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	89 ad       	ldd	r24, Y+57	; 0x39
     1e2:	80 7f       	andi	r24, 0xF0	; 240
     1e4:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     1e6:	a5 e3       	ldi	r26, 0x35	; 53
     1e8:	b0 e0       	ldi	r27, 0x00	; 0
     1ea:	e5 e3       	ldi	r30, 0x35	; 53
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	80 81       	ld	r24, Z
     1f0:	81 60       	ori	r24, 0x01	; 1
     1f2:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     1f4:	a5 e3       	ldi	r26, 0x35	; 53
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	e5 e3       	ldi	r30, 0x35	; 53
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	84 60       	ori	r24, 0x04	; 4
     200:	8c 93       	st	X, r24
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	a0 e8       	ldi	r26, 0x80	; 128
     208:	bf e3       	ldi	r27, 0x3F	; 63
     20a:	8d ab       	std	Y+53, r24	; 0x35
     20c:	9e ab       	std	Y+54, r25	; 0x36
     20e:	af ab       	std	Y+55, r26	; 0x37
     210:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     212:	6d a9       	ldd	r22, Y+53	; 0x35
     214:	7e a9       	ldd	r23, Y+54	; 0x36
     216:	8f a9       	ldd	r24, Y+55	; 0x37
     218:	98 ad       	ldd	r25, Y+56	; 0x38
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	4a e7       	ldi	r20, 0x7A	; 122
     220:	54 e4       	ldi	r21, 0x44	; 68
     222:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     226:	dc 01       	movw	r26, r24
     228:	cb 01       	movw	r24, r22
     22a:	89 ab       	std	Y+49, r24	; 0x31
     22c:	9a ab       	std	Y+50, r25	; 0x32
     22e:	ab ab       	std	Y+51, r26	; 0x33
     230:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     232:	69 a9       	ldd	r22, Y+49	; 0x31
     234:	7a a9       	ldd	r23, Y+50	; 0x32
     236:	8b a9       	ldd	r24, Y+51	; 0x33
     238:	9c a9       	ldd	r25, Y+52	; 0x34
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	40 e8       	ldi	r20, 0x80	; 128
     240:	5f e3       	ldi	r21, 0x3F	; 63
     242:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__ltsf2>
     246:	88 23       	and	r24, r24
     248:	2c f4       	brge	.+10     	; 0x254 <LCDsendChar+0x8e>
		__ticks = 1;
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	98 ab       	std	Y+48, r25	; 0x30
     250:	8f a7       	std	Y+47, r24	; 0x2f
     252:	3f c0       	rjmp	.+126    	; 0x2d2 <LCDsendChar+0x10c>
	else if (__tmp > 65535)
     254:	69 a9       	ldd	r22, Y+49	; 0x31
     256:	7a a9       	ldd	r23, Y+50	; 0x32
     258:	8b a9       	ldd	r24, Y+51	; 0x33
     25a:	9c a9       	ldd	r25, Y+52	; 0x34
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	3f ef       	ldi	r19, 0xFF	; 255
     260:	4f e7       	ldi	r20, 0x7F	; 127
     262:	57 e4       	ldi	r21, 0x47	; 71
     264:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gtsf2>
     268:	18 16       	cp	r1, r24
     26a:	4c f5       	brge	.+82     	; 0x2be <LCDsendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     26c:	6d a9       	ldd	r22, Y+53	; 0x35
     26e:	7e a9       	ldd	r23, Y+54	; 0x36
     270:	8f a9       	ldd	r24, Y+55	; 0x37
     272:	98 ad       	ldd	r25, Y+56	; 0x38
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	40 e2       	ldi	r20, 0x20	; 32
     27a:	51 e4       	ldi	r21, 0x41	; 65
     27c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     280:	dc 01       	movw	r26, r24
     282:	cb 01       	movw	r24, r22
     284:	bc 01       	movw	r22, r24
     286:	cd 01       	movw	r24, r26
     288:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     28c:	dc 01       	movw	r26, r24
     28e:	cb 01       	movw	r24, r22
     290:	98 ab       	std	Y+48, r25	; 0x30
     292:	8f a7       	std	Y+47, r24	; 0x2f
     294:	0f c0       	rjmp	.+30     	; 0x2b4 <LCDsendChar+0xee>
     296:	84 e6       	ldi	r24, 0x64	; 100
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	9e a7       	std	Y+46, r25	; 0x2e
     29c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     29e:	8d a5       	ldd	r24, Y+45	; 0x2d
     2a0:	9e a5       	ldd	r25, Y+46	; 0x2e
     2a2:	01 97       	sbiw	r24, 0x01	; 1
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCDsendChar+0xdc>
     2a6:	9e a7       	std	Y+46, r25	; 0x2e
     2a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2aa:	8f a5       	ldd	r24, Y+47	; 0x2f
     2ac:	98 a9       	ldd	r25, Y+48	; 0x30
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	98 ab       	std	Y+48, r25	; 0x30
     2b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2b4:	8f a5       	ldd	r24, Y+47	; 0x2f
     2b6:	98 a9       	ldd	r25, Y+48	; 0x30
     2b8:	00 97       	sbiw	r24, 0x00	; 0
     2ba:	69 f7       	brne	.-38     	; 0x296 <LCDsendChar+0xd0>
     2bc:	14 c0       	rjmp	.+40     	; 0x2e6 <LCDsendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2be:	69 a9       	ldd	r22, Y+49	; 0x31
     2c0:	7a a9       	ldd	r23, Y+50	; 0x32
     2c2:	8b a9       	ldd	r24, Y+51	; 0x33
     2c4:	9c a9       	ldd	r25, Y+52	; 0x34
     2c6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     2ca:	dc 01       	movw	r26, r24
     2cc:	cb 01       	movw	r24, r22
     2ce:	98 ab       	std	Y+48, r25	; 0x30
     2d0:	8f a7       	std	Y+47, r24	; 0x2f
     2d2:	8f a5       	ldd	r24, Y+47	; 0x2f
     2d4:	98 a9       	ldd	r25, Y+48	; 0x30
     2d6:	9c a7       	std	Y+44, r25	; 0x2c
     2d8:	8b a7       	std	Y+43, r24	; 0x2b
     2da:	8b a5       	ldd	r24, Y+43	; 0x2b
     2dc:	9c a5       	ldd	r25, Y+44	; 0x2c
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <LCDsendChar+0x118>
     2e2:	9c a7       	std	Y+44, r25	; 0x2c
     2e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     2e6:	a5 e3       	ldi	r26, 0x35	; 53
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e5 e3       	ldi	r30, 0x35	; 53
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	8b 7f       	andi	r24, 0xFB	; 251
     2f2:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     2f4:	a5 e3       	ldi	r26, 0x35	; 53
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	e5 e3       	ldi	r30, 0x35	; 53
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	80 81       	ld	r24, Z
     2fe:	8e 7f       	andi	r24, 0xFE	; 254
     300:	8c 93       	st	X, r24
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	a0 e8       	ldi	r26, 0x80	; 128
     308:	bf e3       	ldi	r27, 0x3F	; 63
     30a:	8f a3       	std	Y+39, r24	; 0x27
     30c:	98 a7       	std	Y+40, r25	; 0x28
     30e:	a9 a7       	std	Y+41, r26	; 0x29
     310:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     312:	6f a1       	ldd	r22, Y+39	; 0x27
     314:	78 a5       	ldd	r23, Y+40	; 0x28
     316:	89 a5       	ldd	r24, Y+41	; 0x29
     318:	9a a5       	ldd	r25, Y+42	; 0x2a
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	4a e7       	ldi	r20, 0x7A	; 122
     320:	54 e4       	ldi	r21, 0x44	; 68
     322:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     326:	dc 01       	movw	r26, r24
     328:	cb 01       	movw	r24, r22
     32a:	8b a3       	std	Y+35, r24	; 0x23
     32c:	9c a3       	std	Y+36, r25	; 0x24
     32e:	ad a3       	std	Y+37, r26	; 0x25
     330:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     332:	6b a1       	ldd	r22, Y+35	; 0x23
     334:	7c a1       	ldd	r23, Y+36	; 0x24
     336:	8d a1       	ldd	r24, Y+37	; 0x25
     338:	9e a1       	ldd	r25, Y+38	; 0x26
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	40 e8       	ldi	r20, 0x80	; 128
     340:	5f e3       	ldi	r21, 0x3F	; 63
     342:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__ltsf2>
     346:	88 23       	and	r24, r24
     348:	2c f4       	brge	.+10     	; 0x354 <LCDsendChar+0x18e>
		__ticks = 1;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	9a a3       	std	Y+34, r25	; 0x22
     350:	89 a3       	std	Y+33, r24	; 0x21
     352:	3f c0       	rjmp	.+126    	; 0x3d2 <LCDsendChar+0x20c>
	else if (__tmp > 65535)
     354:	6b a1       	ldd	r22, Y+35	; 0x23
     356:	7c a1       	ldd	r23, Y+36	; 0x24
     358:	8d a1       	ldd	r24, Y+37	; 0x25
     35a:	9e a1       	ldd	r25, Y+38	; 0x26
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	4c f5       	brge	.+82     	; 0x3be <LCDsendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36c:	6f a1       	ldd	r22, Y+39	; 0x27
     36e:	78 a5       	ldd	r23, Y+40	; 0x28
     370:	89 a5       	ldd	r24, Y+41	; 0x29
     372:	9a a5       	ldd	r25, Y+42	; 0x2a
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 e2       	ldi	r20, 0x20	; 32
     37a:	51 e4       	ldi	r21, 0x41	; 65
     37c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     380:	dc 01       	movw	r26, r24
     382:	cb 01       	movw	r24, r22
     384:	bc 01       	movw	r22, r24
     386:	cd 01       	movw	r24, r26
     388:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     38c:	dc 01       	movw	r26, r24
     38e:	cb 01       	movw	r24, r22
     390:	9a a3       	std	Y+34, r25	; 0x22
     392:	89 a3       	std	Y+33, r24	; 0x21
     394:	0f c0       	rjmp	.+30     	; 0x3b4 <LCDsendChar+0x1ee>
     396:	84 e6       	ldi	r24, 0x64	; 100
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	98 a3       	std	Y+32, r25	; 0x20
     39c:	8f 8f       	std	Y+31, r24	; 0x1f
     39e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3a0:	98 a1       	ldd	r25, Y+32	; 0x20
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCDsendChar+0x1dc>
     3a6:	98 a3       	std	Y+32, r25	; 0x20
     3a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3aa:	89 a1       	ldd	r24, Y+33	; 0x21
     3ac:	9a a1       	ldd	r25, Y+34	; 0x22
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	9a a3       	std	Y+34, r25	; 0x22
     3b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3b4:	89 a1       	ldd	r24, Y+33	; 0x21
     3b6:	9a a1       	ldd	r25, Y+34	; 0x22
     3b8:	00 97       	sbiw	r24, 0x00	; 0
     3ba:	69 f7       	brne	.-38     	; 0x396 <LCDsendChar+0x1d0>
     3bc:	14 c0       	rjmp	.+40     	; 0x3e6 <LCDsendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3be:	6b a1       	ldd	r22, Y+35	; 0x23
     3c0:	7c a1       	ldd	r23, Y+36	; 0x24
     3c2:	8d a1       	ldd	r24, Y+37	; 0x25
     3c4:	9e a1       	ldd	r25, Y+38	; 0x26
     3c6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     3ca:	dc 01       	movw	r26, r24
     3cc:	cb 01       	movw	r24, r22
     3ce:	9a a3       	std	Y+34, r25	; 0x22
     3d0:	89 a3       	std	Y+33, r24	; 0x21
     3d2:	89 a1       	ldd	r24, Y+33	; 0x21
     3d4:	9a a1       	ldd	r25, Y+34	; 0x22
     3d6:	9e 8f       	std	Y+30, r25	; 0x1e
     3d8:	8d 8f       	std	Y+29, r24	; 0x1d
     3da:	8d 8d       	ldd	r24, Y+29	; 0x1d
     3dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <LCDsendChar+0x218>
     3e2:	9e 8f       	std	Y+30, r25	; 0x1e
     3e4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     3e6:	e5 e3       	ldi	r30, 0x35	; 53
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	89 ad       	ldd	r24, Y+57	; 0x39
     3ec:	88 2f       	mov	r24, r24
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	82 95       	swap	r24
     3f2:	92 95       	swap	r25
     3f4:	90 7f       	andi	r25, 0xF0	; 240
     3f6:	98 27       	eor	r25, r24
     3f8:	80 7f       	andi	r24, 0xF0	; 240
     3fa:	98 27       	eor	r25, r24
     3fc:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     3fe:	a5 e3       	ldi	r26, 0x35	; 53
     400:	b0 e0       	ldi	r27, 0x00	; 0
     402:	e5 e3       	ldi	r30, 0x35	; 53
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     40c:	a5 e3       	ldi	r26, 0x35	; 53
     40e:	b0 e0       	ldi	r27, 0x00	; 0
     410:	e5 e3       	ldi	r30, 0x35	; 53
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	84 60       	ori	r24, 0x04	; 4
     418:	8c 93       	st	X, r24
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	a0 e8       	ldi	r26, 0x80	; 128
     420:	bf e3       	ldi	r27, 0x3F	; 63
     422:	89 8f       	std	Y+25, r24	; 0x19
     424:	9a 8f       	std	Y+26, r25	; 0x1a
     426:	ab 8f       	std	Y+27, r26	; 0x1b
     428:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     42a:	69 8d       	ldd	r22, Y+25	; 0x19
     42c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     42e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     430:	9c 8d       	ldd	r25, Y+28	; 0x1c
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4a e7       	ldi	r20, 0x7A	; 122
     438:	54 e4       	ldi	r21, 0x44	; 68
     43a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     43e:	dc 01       	movw	r26, r24
     440:	cb 01       	movw	r24, r22
     442:	8d 8b       	std	Y+21, r24	; 0x15
     444:	9e 8b       	std	Y+22, r25	; 0x16
     446:	af 8b       	std	Y+23, r26	; 0x17
     448:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     44a:	6d 89       	ldd	r22, Y+21	; 0x15
     44c:	7e 89       	ldd	r23, Y+22	; 0x16
     44e:	8f 89       	ldd	r24, Y+23	; 0x17
     450:	98 8d       	ldd	r25, Y+24	; 0x18
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	40 e8       	ldi	r20, 0x80	; 128
     458:	5f e3       	ldi	r21, 0x3F	; 63
     45a:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__ltsf2>
     45e:	88 23       	and	r24, r24
     460:	2c f4       	brge	.+10     	; 0x46c <LCDsendChar+0x2a6>
		__ticks = 1;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	9c 8b       	std	Y+20, r25	; 0x14
     468:	8b 8b       	std	Y+19, r24	; 0x13
     46a:	3f c0       	rjmp	.+126    	; 0x4ea <LCDsendChar+0x324>
	else if (__tmp > 65535)
     46c:	6d 89       	ldd	r22, Y+21	; 0x15
     46e:	7e 89       	ldd	r23, Y+22	; 0x16
     470:	8f 89       	ldd	r24, Y+23	; 0x17
     472:	98 8d       	ldd	r25, Y+24	; 0x18
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	3f ef       	ldi	r19, 0xFF	; 255
     478:	4f e7       	ldi	r20, 0x7F	; 127
     47a:	57 e4       	ldi	r21, 0x47	; 71
     47c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gtsf2>
     480:	18 16       	cp	r1, r24
     482:	4c f5       	brge	.+82     	; 0x4d6 <LCDsendChar+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     484:	69 8d       	ldd	r22, Y+25	; 0x19
     486:	7a 8d       	ldd	r23, Y+26	; 0x1a
     488:	8b 8d       	ldd	r24, Y+27	; 0x1b
     48a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	40 e2       	ldi	r20, 0x20	; 32
     492:	51 e4       	ldi	r21, 0x41	; 65
     494:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     498:	dc 01       	movw	r26, r24
     49a:	cb 01       	movw	r24, r22
     49c:	bc 01       	movw	r22, r24
     49e:	cd 01       	movw	r24, r26
     4a0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     4a4:	dc 01       	movw	r26, r24
     4a6:	cb 01       	movw	r24, r22
     4a8:	9c 8b       	std	Y+20, r25	; 0x14
     4aa:	8b 8b       	std	Y+19, r24	; 0x13
     4ac:	0f c0       	rjmp	.+30     	; 0x4cc <LCDsendChar+0x306>
     4ae:	84 e6       	ldi	r24, 0x64	; 100
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	9a 8b       	std	Y+18, r25	; 0x12
     4b4:	89 8b       	std	Y+17, r24	; 0x11
     4b6:	89 89       	ldd	r24, Y+17	; 0x11
     4b8:	9a 89       	ldd	r25, Y+18	; 0x12
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <LCDsendChar+0x2f4>
     4be:	9a 8b       	std	Y+18, r25	; 0x12
     4c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4c2:	8b 89       	ldd	r24, Y+19	; 0x13
     4c4:	9c 89       	ldd	r25, Y+20	; 0x14
     4c6:	01 97       	sbiw	r24, 0x01	; 1
     4c8:	9c 8b       	std	Y+20, r25	; 0x14
     4ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4cc:	8b 89       	ldd	r24, Y+19	; 0x13
     4ce:	9c 89       	ldd	r25, Y+20	; 0x14
     4d0:	00 97       	sbiw	r24, 0x00	; 0
     4d2:	69 f7       	brne	.-38     	; 0x4ae <LCDsendChar+0x2e8>
     4d4:	14 c0       	rjmp	.+40     	; 0x4fe <LCDsendChar+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4d6:	6d 89       	ldd	r22, Y+21	; 0x15
     4d8:	7e 89       	ldd	r23, Y+22	; 0x16
     4da:	8f 89       	ldd	r24, Y+23	; 0x17
     4dc:	98 8d       	ldd	r25, Y+24	; 0x18
     4de:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     4e2:	dc 01       	movw	r26, r24
     4e4:	cb 01       	movw	r24, r22
     4e6:	9c 8b       	std	Y+20, r25	; 0x14
     4e8:	8b 8b       	std	Y+19, r24	; 0x13
     4ea:	8b 89       	ldd	r24, Y+19	; 0x13
     4ec:	9c 89       	ldd	r25, Y+20	; 0x14
     4ee:	98 8b       	std	Y+16, r25	; 0x10
     4f0:	8f 87       	std	Y+15, r24	; 0x0f
     4f2:	8f 85       	ldd	r24, Y+15	; 0x0f
     4f4:	98 89       	ldd	r25, Y+16	; 0x10
     4f6:	01 97       	sbiw	r24, 0x01	; 1
     4f8:	f1 f7       	brne	.-4      	; 0x4f6 <LCDsendChar+0x330>
     4fa:	98 8b       	std	Y+16, r25	; 0x10
     4fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     4fe:	a5 e3       	ldi	r26, 0x35	; 53
     500:	b0 e0       	ldi	r27, 0x00	; 0
     502:	e5 e3       	ldi	r30, 0x35	; 53
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	80 81       	ld	r24, Z
     508:	8b 7f       	andi	r24, 0xFB	; 251
     50a:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     50c:	a5 e3       	ldi	r26, 0x35	; 53
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	e5 e3       	ldi	r30, 0x35	; 53
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	8e 7f       	andi	r24, 0xFE	; 254
     518:	8c 93       	st	X, r24
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	a0 e8       	ldi	r26, 0x80	; 128
     520:	bf e3       	ldi	r27, 0x3F	; 63
     522:	8b 87       	std	Y+11, r24	; 0x0b
     524:	9c 87       	std	Y+12, r25	; 0x0c
     526:	ad 87       	std	Y+13, r26	; 0x0d
     528:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     52a:	6b 85       	ldd	r22, Y+11	; 0x0b
     52c:	7c 85       	ldd	r23, Y+12	; 0x0c
     52e:	8d 85       	ldd	r24, Y+13	; 0x0d
     530:	9e 85       	ldd	r25, Y+14	; 0x0e
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	4a e7       	ldi	r20, 0x7A	; 122
     538:	54 e4       	ldi	r21, 0x44	; 68
     53a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     53e:	dc 01       	movw	r26, r24
     540:	cb 01       	movw	r24, r22
     542:	8f 83       	std	Y+7, r24	; 0x07
     544:	98 87       	std	Y+8, r25	; 0x08
     546:	a9 87       	std	Y+9, r26	; 0x09
     548:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     54a:	6f 81       	ldd	r22, Y+7	; 0x07
     54c:	78 85       	ldd	r23, Y+8	; 0x08
     54e:	89 85       	ldd	r24, Y+9	; 0x09
     550:	9a 85       	ldd	r25, Y+10	; 0x0a
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	40 e8       	ldi	r20, 0x80	; 128
     558:	5f e3       	ldi	r21, 0x3F	; 63
     55a:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__ltsf2>
     55e:	88 23       	and	r24, r24
     560:	2c f4       	brge	.+10     	; 0x56c <LCDsendChar+0x3a6>
		__ticks = 1;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	9e 83       	std	Y+6, r25	; 0x06
     568:	8d 83       	std	Y+5, r24	; 0x05
     56a:	3f c0       	rjmp	.+126    	; 0x5ea <LCDsendChar+0x424>
	else if (__tmp > 65535)
     56c:	6f 81       	ldd	r22, Y+7	; 0x07
     56e:	78 85       	ldd	r23, Y+8	; 0x08
     570:	89 85       	ldd	r24, Y+9	; 0x09
     572:	9a 85       	ldd	r25, Y+10	; 0x0a
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	3f ef       	ldi	r19, 0xFF	; 255
     578:	4f e7       	ldi	r20, 0x7F	; 127
     57a:	57 e4       	ldi	r21, 0x47	; 71
     57c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gtsf2>
     580:	18 16       	cp	r1, r24
     582:	4c f5       	brge	.+82     	; 0x5d6 <LCDsendChar+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     584:	6b 85       	ldd	r22, Y+11	; 0x0b
     586:	7c 85       	ldd	r23, Y+12	; 0x0c
     588:	8d 85       	ldd	r24, Y+13	; 0x0d
     58a:	9e 85       	ldd	r25, Y+14	; 0x0e
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	40 e2       	ldi	r20, 0x20	; 32
     592:	51 e4       	ldi	r21, 0x41	; 65
     594:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     598:	dc 01       	movw	r26, r24
     59a:	cb 01       	movw	r24, r22
     59c:	bc 01       	movw	r22, r24
     59e:	cd 01       	movw	r24, r26
     5a0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     5a4:	dc 01       	movw	r26, r24
     5a6:	cb 01       	movw	r24, r22
     5a8:	9e 83       	std	Y+6, r25	; 0x06
     5aa:	8d 83       	std	Y+5, r24	; 0x05
     5ac:	0f c0       	rjmp	.+30     	; 0x5cc <LCDsendChar+0x406>
     5ae:	84 e6       	ldi	r24, 0x64	; 100
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	9c 83       	std	Y+4, r25	; 0x04
     5b4:	8b 83       	std	Y+3, r24	; 0x03
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	f1 f7       	brne	.-4      	; 0x5ba <LCDsendChar+0x3f4>
     5be:	9c 83       	std	Y+4, r25	; 0x04
     5c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c2:	8d 81       	ldd	r24, Y+5	; 0x05
     5c4:	9e 81       	ldd	r25, Y+6	; 0x06
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	9e 83       	std	Y+6, r25	; 0x06
     5ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5cc:	8d 81       	ldd	r24, Y+5	; 0x05
     5ce:	9e 81       	ldd	r25, Y+6	; 0x06
     5d0:	00 97       	sbiw	r24, 0x00	; 0
     5d2:	69 f7       	brne	.-38     	; 0x5ae <LCDsendChar+0x3e8>
     5d4:	14 c0       	rjmp	.+40     	; 0x5fe <LCDsendChar+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5d6:	6f 81       	ldd	r22, Y+7	; 0x07
     5d8:	78 85       	ldd	r23, Y+8	; 0x08
     5da:	89 85       	ldd	r24, Y+9	; 0x09
     5dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5de:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     5e2:	dc 01       	movw	r26, r24
     5e4:	cb 01       	movw	r24, r22
     5e6:	9e 83       	std	Y+6, r25	; 0x06
     5e8:	8d 83       	std	Y+5, r24	; 0x05
     5ea:	8d 81       	ldd	r24, Y+5	; 0x05
     5ec:	9e 81       	ldd	r25, Y+6	; 0x06
     5ee:	9a 83       	std	Y+2, r25	; 0x02
     5f0:	89 83       	std	Y+1, r24	; 0x01
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	9a 81       	ldd	r25, Y+2	; 0x02
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <LCDsendChar+0x430>
     5fa:	9a 83       	std	Y+2, r25	; 0x02
     5fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     5fe:	e9 96       	adiw	r28, 0x39	; 57
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	f8 94       	cli
     604:	de bf       	out	0x3e, r29	; 62
     606:	0f be       	out	0x3f, r0	; 63
     608:	cd bf       	out	0x3d, r28	; 61
     60a:	cf 91       	pop	r28
     60c:	df 91       	pop	r29
     60e:	08 95       	ret

00000610 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     610:	df 93       	push	r29
     612:	cf 93       	push	r28
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62
     618:	e9 97       	sbiw	r28, 0x39	; 57
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
     624:	89 af       	std	Y+57, r24	; 0x39
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     626:	e5 e3       	ldi	r30, 0x35	; 53
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	89 ad       	ldd	r24, Y+57	; 0x39
     62c:	80 7f       	andi	r24, 0xF0	; 240
     62e:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     630:	a5 e3       	ldi	r26, 0x35	; 53
     632:	b0 e0       	ldi	r27, 0x00	; 0
     634:	e5 e3       	ldi	r30, 0x35	; 53
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	84 60       	ori	r24, 0x04	; 4
     63c:	8c 93       	st	X, r24
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	a0 e8       	ldi	r26, 0x80	; 128
     644:	bf e3       	ldi	r27, 0x3F	; 63
     646:	8d ab       	std	Y+53, r24	; 0x35
     648:	9e ab       	std	Y+54, r25	; 0x36
     64a:	af ab       	std	Y+55, r26	; 0x37
     64c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     64e:	6d a9       	ldd	r22, Y+53	; 0x35
     650:	7e a9       	ldd	r23, Y+54	; 0x36
     652:	8f a9       	ldd	r24, Y+55	; 0x37
     654:	98 ad       	ldd	r25, Y+56	; 0x38
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	4a e7       	ldi	r20, 0x7A	; 122
     65c:	54 e4       	ldi	r21, 0x44	; 68
     65e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     662:	dc 01       	movw	r26, r24
     664:	cb 01       	movw	r24, r22
     666:	89 ab       	std	Y+49, r24	; 0x31
     668:	9a ab       	std	Y+50, r25	; 0x32
     66a:	ab ab       	std	Y+51, r26	; 0x33
     66c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     66e:	69 a9       	ldd	r22, Y+49	; 0x31
     670:	7a a9       	ldd	r23, Y+50	; 0x32
     672:	8b a9       	ldd	r24, Y+51	; 0x33
     674:	9c a9       	ldd	r25, Y+52	; 0x34
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	40 e8       	ldi	r20, 0x80	; 128
     67c:	5f e3       	ldi	r21, 0x3F	; 63
     67e:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__ltsf2>
     682:	88 23       	and	r24, r24
     684:	2c f4       	brge	.+10     	; 0x690 <LCDsendCommand+0x80>
		__ticks = 1;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	98 ab       	std	Y+48, r25	; 0x30
     68c:	8f a7       	std	Y+47, r24	; 0x2f
     68e:	3f c0       	rjmp	.+126    	; 0x70e <LCDsendCommand+0xfe>
	else if (__tmp > 65535)
     690:	69 a9       	ldd	r22, Y+49	; 0x31
     692:	7a a9       	ldd	r23, Y+50	; 0x32
     694:	8b a9       	ldd	r24, Y+51	; 0x33
     696:	9c a9       	ldd	r25, Y+52	; 0x34
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	3f ef       	ldi	r19, 0xFF	; 255
     69c:	4f e7       	ldi	r20, 0x7F	; 127
     69e:	57 e4       	ldi	r21, 0x47	; 71
     6a0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gtsf2>
     6a4:	18 16       	cp	r1, r24
     6a6:	4c f5       	brge	.+82     	; 0x6fa <LCDsendCommand+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6a8:	6d a9       	ldd	r22, Y+53	; 0x35
     6aa:	7e a9       	ldd	r23, Y+54	; 0x36
     6ac:	8f a9       	ldd	r24, Y+55	; 0x37
     6ae:	98 ad       	ldd	r25, Y+56	; 0x38
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	40 e2       	ldi	r20, 0x20	; 32
     6b6:	51 e4       	ldi	r21, 0x41	; 65
     6b8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     6bc:	dc 01       	movw	r26, r24
     6be:	cb 01       	movw	r24, r22
     6c0:	bc 01       	movw	r22, r24
     6c2:	cd 01       	movw	r24, r26
     6c4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     6c8:	dc 01       	movw	r26, r24
     6ca:	cb 01       	movw	r24, r22
     6cc:	98 ab       	std	Y+48, r25	; 0x30
     6ce:	8f a7       	std	Y+47, r24	; 0x2f
     6d0:	0f c0       	rjmp	.+30     	; 0x6f0 <LCDsendCommand+0xe0>
     6d2:	84 e6       	ldi	r24, 0x64	; 100
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	9e a7       	std	Y+46, r25	; 0x2e
     6d8:	8d a7       	std	Y+45, r24	; 0x2d
     6da:	8d a5       	ldd	r24, Y+45	; 0x2d
     6dc:	9e a5       	ldd	r25, Y+46	; 0x2e
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <LCDsendCommand+0xce>
     6e2:	9e a7       	std	Y+46, r25	; 0x2e
     6e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6e6:	8f a5       	ldd	r24, Y+47	; 0x2f
     6e8:	98 a9       	ldd	r25, Y+48	; 0x30
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	98 ab       	std	Y+48, r25	; 0x30
     6ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6f0:	8f a5       	ldd	r24, Y+47	; 0x2f
     6f2:	98 a9       	ldd	r25, Y+48	; 0x30
     6f4:	00 97       	sbiw	r24, 0x00	; 0
     6f6:	69 f7       	brne	.-38     	; 0x6d2 <LCDsendCommand+0xc2>
     6f8:	14 c0       	rjmp	.+40     	; 0x722 <LCDsendCommand+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6fa:	69 a9       	ldd	r22, Y+49	; 0x31
     6fc:	7a a9       	ldd	r23, Y+50	; 0x32
     6fe:	8b a9       	ldd	r24, Y+51	; 0x33
     700:	9c a9       	ldd	r25, Y+52	; 0x34
     702:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     706:	dc 01       	movw	r26, r24
     708:	cb 01       	movw	r24, r22
     70a:	98 ab       	std	Y+48, r25	; 0x30
     70c:	8f a7       	std	Y+47, r24	; 0x2f
     70e:	8f a5       	ldd	r24, Y+47	; 0x2f
     710:	98 a9       	ldd	r25, Y+48	; 0x30
     712:	9c a7       	std	Y+44, r25	; 0x2c
     714:	8b a7       	std	Y+43, r24	; 0x2b
     716:	8b a5       	ldd	r24, Y+43	; 0x2b
     718:	9c a5       	ldd	r25, Y+44	; 0x2c
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <LCDsendCommand+0x10a>
     71e:	9c a7       	std	Y+44, r25	; 0x2c
     720:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     722:	a5 e3       	ldi	r26, 0x35	; 53
     724:	b0 e0       	ldi	r27, 0x00	; 0
     726:	e5 e3       	ldi	r30, 0x35	; 53
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	80 81       	ld	r24, Z
     72c:	8b 7f       	andi	r24, 0xFB	; 251
     72e:	8c 93       	st	X, r24
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	a0 e8       	ldi	r26, 0x80	; 128
     736:	bf e3       	ldi	r27, 0x3F	; 63
     738:	8f a3       	std	Y+39, r24	; 0x27
     73a:	98 a7       	std	Y+40, r25	; 0x28
     73c:	a9 a7       	std	Y+41, r26	; 0x29
     73e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     740:	6f a1       	ldd	r22, Y+39	; 0x27
     742:	78 a5       	ldd	r23, Y+40	; 0x28
     744:	89 a5       	ldd	r24, Y+41	; 0x29
     746:	9a a5       	ldd	r25, Y+42	; 0x2a
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	4a e7       	ldi	r20, 0x7A	; 122
     74e:	54 e4       	ldi	r21, 0x44	; 68
     750:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     754:	dc 01       	movw	r26, r24
     756:	cb 01       	movw	r24, r22
     758:	8b a3       	std	Y+35, r24	; 0x23
     75a:	9c a3       	std	Y+36, r25	; 0x24
     75c:	ad a3       	std	Y+37, r26	; 0x25
     75e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     760:	6b a1       	ldd	r22, Y+35	; 0x23
     762:	7c a1       	ldd	r23, Y+36	; 0x24
     764:	8d a1       	ldd	r24, Y+37	; 0x25
     766:	9e a1       	ldd	r25, Y+38	; 0x26
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	40 e8       	ldi	r20, 0x80	; 128
     76e:	5f e3       	ldi	r21, 0x3F	; 63
     770:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__ltsf2>
     774:	88 23       	and	r24, r24
     776:	2c f4       	brge	.+10     	; 0x782 <LCDsendCommand+0x172>
		__ticks = 1;
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	9a a3       	std	Y+34, r25	; 0x22
     77e:	89 a3       	std	Y+33, r24	; 0x21
     780:	3f c0       	rjmp	.+126    	; 0x800 <LCDsendCommand+0x1f0>
	else if (__tmp > 65535)
     782:	6b a1       	ldd	r22, Y+35	; 0x23
     784:	7c a1       	ldd	r23, Y+36	; 0x24
     786:	8d a1       	ldd	r24, Y+37	; 0x25
     788:	9e a1       	ldd	r25, Y+38	; 0x26
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	3f ef       	ldi	r19, 0xFF	; 255
     78e:	4f e7       	ldi	r20, 0x7F	; 127
     790:	57 e4       	ldi	r21, 0x47	; 71
     792:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gtsf2>
     796:	18 16       	cp	r1, r24
     798:	4c f5       	brge	.+82     	; 0x7ec <LCDsendCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     79a:	6f a1       	ldd	r22, Y+39	; 0x27
     79c:	78 a5       	ldd	r23, Y+40	; 0x28
     79e:	89 a5       	ldd	r24, Y+41	; 0x29
     7a0:	9a a5       	ldd	r25, Y+42	; 0x2a
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	40 e2       	ldi	r20, 0x20	; 32
     7a8:	51 e4       	ldi	r21, 0x41	; 65
     7aa:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     7ae:	dc 01       	movw	r26, r24
     7b0:	cb 01       	movw	r24, r22
     7b2:	bc 01       	movw	r22, r24
     7b4:	cd 01       	movw	r24, r26
     7b6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     7ba:	dc 01       	movw	r26, r24
     7bc:	cb 01       	movw	r24, r22
     7be:	9a a3       	std	Y+34, r25	; 0x22
     7c0:	89 a3       	std	Y+33, r24	; 0x21
     7c2:	0f c0       	rjmp	.+30     	; 0x7e2 <LCDsendCommand+0x1d2>
     7c4:	84 e6       	ldi	r24, 0x64	; 100
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	98 a3       	std	Y+32, r25	; 0x20
     7ca:	8f 8f       	std	Y+31, r24	; 0x1f
     7cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7ce:	98 a1       	ldd	r25, Y+32	; 0x20
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <LCDsendCommand+0x1c0>
     7d4:	98 a3       	std	Y+32, r25	; 0x20
     7d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7d8:	89 a1       	ldd	r24, Y+33	; 0x21
     7da:	9a a1       	ldd	r25, Y+34	; 0x22
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	9a a3       	std	Y+34, r25	; 0x22
     7e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7e2:	89 a1       	ldd	r24, Y+33	; 0x21
     7e4:	9a a1       	ldd	r25, Y+34	; 0x22
     7e6:	00 97       	sbiw	r24, 0x00	; 0
     7e8:	69 f7       	brne	.-38     	; 0x7c4 <LCDsendCommand+0x1b4>
     7ea:	14 c0       	rjmp	.+40     	; 0x814 <LCDsendCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7ec:	6b a1       	ldd	r22, Y+35	; 0x23
     7ee:	7c a1       	ldd	r23, Y+36	; 0x24
     7f0:	8d a1       	ldd	r24, Y+37	; 0x25
     7f2:	9e a1       	ldd	r25, Y+38	; 0x26
     7f4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     7f8:	dc 01       	movw	r26, r24
     7fa:	cb 01       	movw	r24, r22
     7fc:	9a a3       	std	Y+34, r25	; 0x22
     7fe:	89 a3       	std	Y+33, r24	; 0x21
     800:	89 a1       	ldd	r24, Y+33	; 0x21
     802:	9a a1       	ldd	r25, Y+34	; 0x22
     804:	9e 8f       	std	Y+30, r25	; 0x1e
     806:	8d 8f       	std	Y+29, r24	; 0x1d
     808:	8d 8d       	ldd	r24, Y+29	; 0x1d
     80a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <LCDsendCommand+0x1fc>
     810:	9e 8f       	std	Y+30, r25	; 0x1e
     812:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     814:	e5 e3       	ldi	r30, 0x35	; 53
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	89 ad       	ldd	r24, Y+57	; 0x39
     81a:	88 2f       	mov	r24, r24
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	82 95       	swap	r24
     820:	92 95       	swap	r25
     822:	90 7f       	andi	r25, 0xF0	; 240
     824:	98 27       	eor	r25, r24
     826:	80 7f       	andi	r24, 0xF0	; 240
     828:	98 27       	eor	r25, r24
     82a:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     82c:	a5 e3       	ldi	r26, 0x35	; 53
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	e5 e3       	ldi	r30, 0x35	; 53
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	84 60       	ori	r24, 0x04	; 4
     838:	8c 93       	st	X, r24
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	a0 e8       	ldi	r26, 0x80	; 128
     840:	bf e3       	ldi	r27, 0x3F	; 63
     842:	89 8f       	std	Y+25, r24	; 0x19
     844:	9a 8f       	std	Y+26, r25	; 0x1a
     846:	ab 8f       	std	Y+27, r26	; 0x1b
     848:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     84a:	69 8d       	ldd	r22, Y+25	; 0x19
     84c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     84e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     850:	9c 8d       	ldd	r25, Y+28	; 0x1c
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	4a e7       	ldi	r20, 0x7A	; 122
     858:	54 e4       	ldi	r21, 0x44	; 68
     85a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     85e:	dc 01       	movw	r26, r24
     860:	cb 01       	movw	r24, r22
     862:	8d 8b       	std	Y+21, r24	; 0x15
     864:	9e 8b       	std	Y+22, r25	; 0x16
     866:	af 8b       	std	Y+23, r26	; 0x17
     868:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     86a:	6d 89       	ldd	r22, Y+21	; 0x15
     86c:	7e 89       	ldd	r23, Y+22	; 0x16
     86e:	8f 89       	ldd	r24, Y+23	; 0x17
     870:	98 8d       	ldd	r25, Y+24	; 0x18
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e8       	ldi	r20, 0x80	; 128
     878:	5f e3       	ldi	r21, 0x3F	; 63
     87a:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__ltsf2>
     87e:	88 23       	and	r24, r24
     880:	2c f4       	brge	.+10     	; 0x88c <__stack+0x2d>
		__ticks = 1;
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	9c 8b       	std	Y+20, r25	; 0x14
     888:	8b 8b       	std	Y+19, r24	; 0x13
     88a:	3f c0       	rjmp	.+126    	; 0x90a <__stack+0xab>
	else if (__tmp > 65535)
     88c:	6d 89       	ldd	r22, Y+21	; 0x15
     88e:	7e 89       	ldd	r23, Y+22	; 0x16
     890:	8f 89       	ldd	r24, Y+23	; 0x17
     892:	98 8d       	ldd	r25, Y+24	; 0x18
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	3f ef       	ldi	r19, 0xFF	; 255
     898:	4f e7       	ldi	r20, 0x7F	; 127
     89a:	57 e4       	ldi	r21, 0x47	; 71
     89c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gtsf2>
     8a0:	18 16       	cp	r1, r24
     8a2:	4c f5       	brge	.+82     	; 0x8f6 <__stack+0x97>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a4:	69 8d       	ldd	r22, Y+25	; 0x19
     8a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	40 e2       	ldi	r20, 0x20	; 32
     8b2:	51 e4       	ldi	r21, 0x41	; 65
     8b4:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     8b8:	dc 01       	movw	r26, r24
     8ba:	cb 01       	movw	r24, r22
     8bc:	bc 01       	movw	r22, r24
     8be:	cd 01       	movw	r24, r26
     8c0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     8c4:	dc 01       	movw	r26, r24
     8c6:	cb 01       	movw	r24, r22
     8c8:	9c 8b       	std	Y+20, r25	; 0x14
     8ca:	8b 8b       	std	Y+19, r24	; 0x13
     8cc:	0f c0       	rjmp	.+30     	; 0x8ec <__stack+0x8d>
     8ce:	84 e6       	ldi	r24, 0x64	; 100
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	9a 8b       	std	Y+18, r25	; 0x12
     8d4:	89 8b       	std	Y+17, r24	; 0x11
     8d6:	89 89       	ldd	r24, Y+17	; 0x11
     8d8:	9a 89       	ldd	r25, Y+18	; 0x12
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	f1 f7       	brne	.-4      	; 0x8da <__stack+0x7b>
     8de:	9a 8b       	std	Y+18, r25	; 0x12
     8e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e2:	8b 89       	ldd	r24, Y+19	; 0x13
     8e4:	9c 89       	ldd	r25, Y+20	; 0x14
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	9c 8b       	std	Y+20, r25	; 0x14
     8ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ec:	8b 89       	ldd	r24, Y+19	; 0x13
     8ee:	9c 89       	ldd	r25, Y+20	; 0x14
     8f0:	00 97       	sbiw	r24, 0x00	; 0
     8f2:	69 f7       	brne	.-38     	; 0x8ce <__stack+0x6f>
     8f4:	14 c0       	rjmp	.+40     	; 0x91e <__stack+0xbf>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8f6:	6d 89       	ldd	r22, Y+21	; 0x15
     8f8:	7e 89       	ldd	r23, Y+22	; 0x16
     8fa:	8f 89       	ldd	r24, Y+23	; 0x17
     8fc:	98 8d       	ldd	r25, Y+24	; 0x18
     8fe:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     902:	dc 01       	movw	r26, r24
     904:	cb 01       	movw	r24, r22
     906:	9c 8b       	std	Y+20, r25	; 0x14
     908:	8b 8b       	std	Y+19, r24	; 0x13
     90a:	8b 89       	ldd	r24, Y+19	; 0x13
     90c:	9c 89       	ldd	r25, Y+20	; 0x14
     90e:	98 8b       	std	Y+16, r25	; 0x10
     910:	8f 87       	std	Y+15, r24	; 0x0f
     912:	8f 85       	ldd	r24, Y+15	; 0x0f
     914:	98 89       	ldd	r25, Y+16	; 0x10
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <__stack+0xb7>
     91a:	98 8b       	std	Y+16, r25	; 0x10
     91c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     91e:	a5 e3       	ldi	r26, 0x35	; 53
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	e5 e3       	ldi	r30, 0x35	; 53
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	8b 7f       	andi	r24, 0xFB	; 251
     92a:	8c 93       	st	X, r24
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	a0 e8       	ldi	r26, 0x80	; 128
     932:	bf e3       	ldi	r27, 0x3F	; 63
     934:	8b 87       	std	Y+11, r24	; 0x0b
     936:	9c 87       	std	Y+12, r25	; 0x0c
     938:	ad 87       	std	Y+13, r26	; 0x0d
     93a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     93c:	6b 85       	ldd	r22, Y+11	; 0x0b
     93e:	7c 85       	ldd	r23, Y+12	; 0x0c
     940:	8d 85       	ldd	r24, Y+13	; 0x0d
     942:	9e 85       	ldd	r25, Y+14	; 0x0e
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	4a e7       	ldi	r20, 0x7A	; 122
     94a:	54 e4       	ldi	r21, 0x44	; 68
     94c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	8f 83       	std	Y+7, r24	; 0x07
     956:	98 87       	std	Y+8, r25	; 0x08
     958:	a9 87       	std	Y+9, r26	; 0x09
     95a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     95c:	6f 81       	ldd	r22, Y+7	; 0x07
     95e:	78 85       	ldd	r23, Y+8	; 0x08
     960:	89 85       	ldd	r24, Y+9	; 0x09
     962:	9a 85       	ldd	r25, Y+10	; 0x0a
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 e8       	ldi	r20, 0x80	; 128
     96a:	5f e3       	ldi	r21, 0x3F	; 63
     96c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__ltsf2>
     970:	88 23       	and	r24, r24
     972:	2c f4       	brge	.+10     	; 0x97e <__stack+0x11f>
		__ticks = 1;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	9e 83       	std	Y+6, r25	; 0x06
     97a:	8d 83       	std	Y+5, r24	; 0x05
     97c:	3f c0       	rjmp	.+126    	; 0x9fc <__stack+0x19d>
	else if (__tmp > 65535)
     97e:	6f 81       	ldd	r22, Y+7	; 0x07
     980:	78 85       	ldd	r23, Y+8	; 0x08
     982:	89 85       	ldd	r24, Y+9	; 0x09
     984:	9a 85       	ldd	r25, Y+10	; 0x0a
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	3f ef       	ldi	r19, 0xFF	; 255
     98a:	4f e7       	ldi	r20, 0x7F	; 127
     98c:	57 e4       	ldi	r21, 0x47	; 71
     98e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gtsf2>
     992:	18 16       	cp	r1, r24
     994:	4c f5       	brge	.+82     	; 0x9e8 <__stack+0x189>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     996:	6b 85       	ldd	r22, Y+11	; 0x0b
     998:	7c 85       	ldd	r23, Y+12	; 0x0c
     99a:	8d 85       	ldd	r24, Y+13	; 0x0d
     99c:	9e 85       	ldd	r25, Y+14	; 0x0e
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e2       	ldi	r20, 0x20	; 32
     9a4:	51 e4       	ldi	r21, 0x41	; 65
     9a6:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	bc 01       	movw	r22, r24
     9b0:	cd 01       	movw	r24, r26
     9b2:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	9e 83       	std	Y+6, r25	; 0x06
     9bc:	8d 83       	std	Y+5, r24	; 0x05
     9be:	0f c0       	rjmp	.+30     	; 0x9de <__stack+0x17f>
     9c0:	84 e6       	ldi	r24, 0x64	; 100
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	9c 83       	std	Y+4, r25	; 0x04
     9c6:	8b 83       	std	Y+3, r24	; 0x03
     9c8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ca:	9c 81       	ldd	r25, Y+4	; 0x04
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <__stack+0x16d>
     9d0:	9c 83       	std	Y+4, r25	; 0x04
     9d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9d4:	8d 81       	ldd	r24, Y+5	; 0x05
     9d6:	9e 81       	ldd	r25, Y+6	; 0x06
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	9e 83       	std	Y+6, r25	; 0x06
     9dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9de:	8d 81       	ldd	r24, Y+5	; 0x05
     9e0:	9e 81       	ldd	r25, Y+6	; 0x06
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	69 f7       	brne	.-38     	; 0x9c0 <__stack+0x161>
     9e6:	14 c0       	rjmp	.+40     	; 0xa10 <__stack+0x1b1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9e8:	6f 81       	ldd	r22, Y+7	; 0x07
     9ea:	78 85       	ldd	r23, Y+8	; 0x08
     9ec:	89 85       	ldd	r24, Y+9	; 0x09
     9ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     9f0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	9e 83       	std	Y+6, r25	; 0x06
     9fa:	8d 83       	std	Y+5, r24	; 0x05
     9fc:	8d 81       	ldd	r24, Y+5	; 0x05
     9fe:	9e 81       	ldd	r25, Y+6	; 0x06
     a00:	9a 83       	std	Y+2, r25	; 0x02
     a02:	89 83       	std	Y+1, r24	; 0x01
     a04:	89 81       	ldd	r24, Y+1	; 0x01
     a06:	9a 81       	ldd	r25, Y+2	; 0x02
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <__stack+0x1a9>
     a0c:	9a 83       	std	Y+2, r25	; 0x02
     a0e:	89 83       	std	Y+1, r24	; 0x01
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     a10:	e9 96       	adiw	r28, 0x39	; 57
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	cf 91       	pop	r28
     a1e:	df 91       	pop	r29
     a20:	08 95       	ret

00000a22 <LCDinit>:
void LCDinit(void)//Initializes LCD
{
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	df 93       	push	r29
     a28:	cf 93       	push	r28
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	c4 56       	subi	r28, 0x64	; 100
     a30:	d0 40       	sbci	r29, 0x00	; 0
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	de bf       	out	0x3e, r29	; 62
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	cd bf       	out	0x3d, r28	; 61
     a3c:	fe 01       	movw	r30, r28
     a3e:	e1 5a       	subi	r30, 0xA1	; 161
     a40:	ff 4f       	sbci	r31, 0xFF	; 255
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	a0 e7       	ldi	r26, 0x70	; 112
     a48:	b1 e4       	ldi	r27, 0x41	; 65
     a4a:	80 83       	st	Z, r24
     a4c:	91 83       	std	Z+1, r25	; 0x01
     a4e:	a2 83       	std	Z+2, r26	; 0x02
     a50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a52:	8e 01       	movw	r16, r28
     a54:	05 5a       	subi	r16, 0xA5	; 165
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	fe 01       	movw	r30, r28
     a5a:	e1 5a       	subi	r30, 0xA1	; 161
     a5c:	ff 4f       	sbci	r31, 0xFF	; 255
     a5e:	60 81       	ld	r22, Z
     a60:	71 81       	ldd	r23, Z+1	; 0x01
     a62:	82 81       	ldd	r24, Z+2	; 0x02
     a64:	93 81       	ldd	r25, Z+3	; 0x03
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	4a e7       	ldi	r20, 0x7A	; 122
     a6c:	54 e4       	ldi	r21, 0x44	; 68
     a6e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	f8 01       	movw	r30, r16
     a78:	80 83       	st	Z, r24
     a7a:	91 83       	std	Z+1, r25	; 0x01
     a7c:	a2 83       	std	Z+2, r26	; 0x02
     a7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a80:	fe 01       	movw	r30, r28
     a82:	e5 5a       	subi	r30, 0xA5	; 165
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	60 81       	ld	r22, Z
     a88:	71 81       	ldd	r23, Z+1	; 0x01
     a8a:	82 81       	ldd	r24, Z+2	; 0x02
     a8c:	93 81       	ldd	r25, Z+3	; 0x03
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e8       	ldi	r20, 0x80	; 128
     a94:	5f e3       	ldi	r21, 0x3F	; 63
     a96:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__ltsf2>
     a9a:	88 23       	and	r24, r24
     a9c:	44 f4       	brge	.+16     	; 0xaae <LCDinit+0x8c>
		__ticks = 1;
     a9e:	fe 01       	movw	r30, r28
     aa0:	e7 5a       	subi	r30, 0xA7	; 167
     aa2:	ff 4f       	sbci	r31, 0xFF	; 255
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	91 83       	std	Z+1, r25	; 0x01
     aaa:	80 83       	st	Z, r24
     aac:	64 c0       	rjmp	.+200    	; 0xb76 <LCDinit+0x154>
	else if (__tmp > 65535)
     aae:	fe 01       	movw	r30, r28
     ab0:	e5 5a       	subi	r30, 0xA5	; 165
     ab2:	ff 4f       	sbci	r31, 0xFF	; 255
     ab4:	60 81       	ld	r22, Z
     ab6:	71 81       	ldd	r23, Z+1	; 0x01
     ab8:	82 81       	ldd	r24, Z+2	; 0x02
     aba:	93 81       	ldd	r25, Z+3	; 0x03
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	3f ef       	ldi	r19, 0xFF	; 255
     ac0:	4f e7       	ldi	r20, 0x7F	; 127
     ac2:	57 e4       	ldi	r21, 0x47	; 71
     ac4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gtsf2>
     ac8:	18 16       	cp	r1, r24
     aca:	0c f0       	brlt	.+2      	; 0xace <LCDinit+0xac>
     acc:	43 c0       	rjmp	.+134    	; 0xb54 <LCDinit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ace:	fe 01       	movw	r30, r28
     ad0:	e1 5a       	subi	r30, 0xA1	; 161
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	60 81       	ld	r22, Z
     ad6:	71 81       	ldd	r23, Z+1	; 0x01
     ad8:	82 81       	ldd	r24, Z+2	; 0x02
     ada:	93 81       	ldd	r25, Z+3	; 0x03
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	40 e2       	ldi	r20, 0x20	; 32
     ae2:	51 e4       	ldi	r21, 0x41	; 65
     ae4:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     ae8:	dc 01       	movw	r26, r24
     aea:	cb 01       	movw	r24, r22
     aec:	8e 01       	movw	r16, r28
     aee:	07 5a       	subi	r16, 0xA7	; 167
     af0:	1f 4f       	sbci	r17, 0xFF	; 255
     af2:	bc 01       	movw	r22, r24
     af4:	cd 01       	movw	r24, r26
     af6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     afa:	dc 01       	movw	r26, r24
     afc:	cb 01       	movw	r24, r22
     afe:	f8 01       	movw	r30, r16
     b00:	91 83       	std	Z+1, r25	; 0x01
     b02:	80 83       	st	Z, r24
     b04:	1f c0       	rjmp	.+62     	; 0xb44 <LCDinit+0x122>
     b06:	fe 01       	movw	r30, r28
     b08:	e9 5a       	subi	r30, 0xA9	; 169
     b0a:	ff 4f       	sbci	r31, 0xFF	; 255
     b0c:	84 e6       	ldi	r24, 0x64	; 100
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	91 83       	std	Z+1, r25	; 0x01
     b12:	80 83       	st	Z, r24
     b14:	fe 01       	movw	r30, r28
     b16:	e9 5a       	subi	r30, 0xA9	; 169
     b18:	ff 4f       	sbci	r31, 0xFF	; 255
     b1a:	80 81       	ld	r24, Z
     b1c:	91 81       	ldd	r25, Z+1	; 0x01
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <LCDinit+0xfc>
     b22:	fe 01       	movw	r30, r28
     b24:	e9 5a       	subi	r30, 0xA9	; 169
     b26:	ff 4f       	sbci	r31, 0xFF	; 255
     b28:	91 83       	std	Z+1, r25	; 0x01
     b2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b2c:	de 01       	movw	r26, r28
     b2e:	a7 5a       	subi	r26, 0xA7	; 167
     b30:	bf 4f       	sbci	r27, 0xFF	; 255
     b32:	fe 01       	movw	r30, r28
     b34:	e7 5a       	subi	r30, 0xA7	; 167
     b36:	ff 4f       	sbci	r31, 0xFF	; 255
     b38:	80 81       	ld	r24, Z
     b3a:	91 81       	ldd	r25, Z+1	; 0x01
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	11 96       	adiw	r26, 0x01	; 1
     b40:	9c 93       	st	X, r25
     b42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b44:	fe 01       	movw	r30, r28
     b46:	e7 5a       	subi	r30, 0xA7	; 167
     b48:	ff 4f       	sbci	r31, 0xFF	; 255
     b4a:	80 81       	ld	r24, Z
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	d1 f6       	brne	.-76     	; 0xb06 <LCDinit+0xe4>
     b52:	27 c0       	rjmp	.+78     	; 0xba2 <LCDinit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b54:	8e 01       	movw	r16, r28
     b56:	07 5a       	subi	r16, 0xA7	; 167
     b58:	1f 4f       	sbci	r17, 0xFF	; 255
     b5a:	fe 01       	movw	r30, r28
     b5c:	e5 5a       	subi	r30, 0xA5	; 165
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	60 81       	ld	r22, Z
     b62:	71 81       	ldd	r23, Z+1	; 0x01
     b64:	82 81       	ldd	r24, Z+2	; 0x02
     b66:	93 81       	ldd	r25, Z+3	; 0x03
     b68:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     b6c:	dc 01       	movw	r26, r24
     b6e:	cb 01       	movw	r24, r22
     b70:	f8 01       	movw	r30, r16
     b72:	91 83       	std	Z+1, r25	; 0x01
     b74:	80 83       	st	Z, r24
     b76:	de 01       	movw	r26, r28
     b78:	ab 5a       	subi	r26, 0xAB	; 171
     b7a:	bf 4f       	sbci	r27, 0xFF	; 255
     b7c:	fe 01       	movw	r30, r28
     b7e:	e7 5a       	subi	r30, 0xA7	; 167
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	80 81       	ld	r24, Z
     b84:	91 81       	ldd	r25, Z+1	; 0x01
     b86:	8d 93       	st	X+, r24
     b88:	9c 93       	st	X, r25
     b8a:	fe 01       	movw	r30, r28
     b8c:	eb 5a       	subi	r30, 0xAB	; 171
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	80 81       	ld	r24, Z
     b92:	91 81       	ldd	r25, Z+1	; 0x01
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	f1 f7       	brne	.-4      	; 0xb94 <LCDinit+0x172>
     b98:	fe 01       	movw	r30, r28
     b9a:	eb 5a       	subi	r30, 0xAB	; 171
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	80 83       	st	Z, r24
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     ba2:	e5 e3       	ldi	r30, 0x35	; 53
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	10 82       	st	Z, r1
	LCP=0x00;
     ba8:	e5 e3       	ldi	r30, 0x35	; 53
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	10 82       	st	Z, r1
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     bae:	a4 e3       	ldi	r26, 0x34	; 52
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e4 e3       	ldi	r30, 0x34	; 52
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	80 6f       	ori	r24, 0xF0	; 240
     bba:	8c 93       	st	X, r24
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     bbc:	a4 e3       	ldi	r26, 0x34	; 52
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e4 e3       	ldi	r30, 0x34	; 52
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	87 60       	ori	r24, 0x07	; 7
     bc8:	8c 93       	st	X, r24
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     bca:	e5 e3       	ldi	r30, 0x35	; 53
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 e3       	ldi	r24, 0x30	; 48
     bd0:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     bd2:	a5 e3       	ldi	r26, 0x35	; 53
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e5 e3       	ldi	r30, 0x35	; 53
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	84 60       	ori	r24, 0x04	; 4
     bde:	8c 93       	st	X, r24
     be0:	fe 01       	movw	r30, r28
     be2:	ef 5a       	subi	r30, 0xAF	; 175
     be4:	ff 4f       	sbci	r31, 0xFF	; 255
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e8       	ldi	r26, 0x80	; 128
     bec:	bf e3       	ldi	r27, 0x3F	; 63
     bee:	80 83       	st	Z, r24
     bf0:	91 83       	std	Z+1, r25	; 0x01
     bf2:	a2 83       	std	Z+2, r26	; 0x02
     bf4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bf6:	8e 01       	movw	r16, r28
     bf8:	03 5b       	subi	r16, 0xB3	; 179
     bfa:	1f 4f       	sbci	r17, 0xFF	; 255
     bfc:	fe 01       	movw	r30, r28
     bfe:	ef 5a       	subi	r30, 0xAF	; 175
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	60 81       	ld	r22, Z
     c04:	71 81       	ldd	r23, Z+1	; 0x01
     c06:	82 81       	ldd	r24, Z+2	; 0x02
     c08:	93 81       	ldd	r25, Z+3	; 0x03
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	4a e7       	ldi	r20, 0x7A	; 122
     c10:	54 e4       	ldi	r21, 0x44	; 68
     c12:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	f8 01       	movw	r30, r16
     c1c:	80 83       	st	Z, r24
     c1e:	91 83       	std	Z+1, r25	; 0x01
     c20:	a2 83       	std	Z+2, r26	; 0x02
     c22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c24:	fe 01       	movw	r30, r28
     c26:	e3 5b       	subi	r30, 0xB3	; 179
     c28:	ff 4f       	sbci	r31, 0xFF	; 255
     c2a:	60 81       	ld	r22, Z
     c2c:	71 81       	ldd	r23, Z+1	; 0x01
     c2e:	82 81       	ldd	r24, Z+2	; 0x02
     c30:	93 81       	ldd	r25, Z+3	; 0x03
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e8       	ldi	r20, 0x80	; 128
     c38:	5f e3       	ldi	r21, 0x3F	; 63
     c3a:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__ltsf2>
     c3e:	88 23       	and	r24, r24
     c40:	44 f4       	brge	.+16     	; 0xc52 <LCDinit+0x230>
		__ticks = 1;
     c42:	fe 01       	movw	r30, r28
     c44:	e5 5b       	subi	r30, 0xB5	; 181
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	91 83       	std	Z+1, r25	; 0x01
     c4e:	80 83       	st	Z, r24
     c50:	64 c0       	rjmp	.+200    	; 0xd1a <LCDinit+0x2f8>
	else if (__tmp > 65535)
     c52:	fe 01       	movw	r30, r28
     c54:	e3 5b       	subi	r30, 0xB3	; 179
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	60 81       	ld	r22, Z
     c5a:	71 81       	ldd	r23, Z+1	; 0x01
     c5c:	82 81       	ldd	r24, Z+2	; 0x02
     c5e:	93 81       	ldd	r25, Z+3	; 0x03
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	3f ef       	ldi	r19, 0xFF	; 255
     c64:	4f e7       	ldi	r20, 0x7F	; 127
     c66:	57 e4       	ldi	r21, 0x47	; 71
     c68:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gtsf2>
     c6c:	18 16       	cp	r1, r24
     c6e:	0c f0       	brlt	.+2      	; 0xc72 <LCDinit+0x250>
     c70:	43 c0       	rjmp	.+134    	; 0xcf8 <LCDinit+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c72:	fe 01       	movw	r30, r28
     c74:	ef 5a       	subi	r30, 0xAF	; 175
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	60 81       	ld	r22, Z
     c7a:	71 81       	ldd	r23, Z+1	; 0x01
     c7c:	82 81       	ldd	r24, Z+2	; 0x02
     c7e:	93 81       	ldd	r25, Z+3	; 0x03
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e2       	ldi	r20, 0x20	; 32
     c86:	51 e4       	ldi	r21, 0x41	; 65
     c88:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	8e 01       	movw	r16, r28
     c92:	05 5b       	subi	r16, 0xB5	; 181
     c94:	1f 4f       	sbci	r17, 0xFF	; 255
     c96:	bc 01       	movw	r22, r24
     c98:	cd 01       	movw	r24, r26
     c9a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	f8 01       	movw	r30, r16
     ca4:	91 83       	std	Z+1, r25	; 0x01
     ca6:	80 83       	st	Z, r24
     ca8:	1f c0       	rjmp	.+62     	; 0xce8 <LCDinit+0x2c6>
     caa:	fe 01       	movw	r30, r28
     cac:	e7 5b       	subi	r30, 0xB7	; 183
     cae:	ff 4f       	sbci	r31, 0xFF	; 255
     cb0:	84 e6       	ldi	r24, 0x64	; 100
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	91 83       	std	Z+1, r25	; 0x01
     cb6:	80 83       	st	Z, r24
     cb8:	fe 01       	movw	r30, r28
     cba:	e7 5b       	subi	r30, 0xB7	; 183
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	80 81       	ld	r24, Z
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <LCDinit+0x2a0>
     cc6:	fe 01       	movw	r30, r28
     cc8:	e7 5b       	subi	r30, 0xB7	; 183
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	91 83       	std	Z+1, r25	; 0x01
     cce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd0:	de 01       	movw	r26, r28
     cd2:	a5 5b       	subi	r26, 0xB5	; 181
     cd4:	bf 4f       	sbci	r27, 0xFF	; 255
     cd6:	fe 01       	movw	r30, r28
     cd8:	e5 5b       	subi	r30, 0xB5	; 181
     cda:	ff 4f       	sbci	r31, 0xFF	; 255
     cdc:	80 81       	ld	r24, Z
     cde:	91 81       	ldd	r25, Z+1	; 0x01
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	11 96       	adiw	r26, 0x01	; 1
     ce4:	9c 93       	st	X, r25
     ce6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ce8:	fe 01       	movw	r30, r28
     cea:	e5 5b       	subi	r30, 0xB5	; 181
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	80 81       	ld	r24, Z
     cf0:	91 81       	ldd	r25, Z+1	; 0x01
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	d1 f6       	brne	.-76     	; 0xcaa <LCDinit+0x288>
     cf6:	27 c0       	rjmp	.+78     	; 0xd46 <LCDinit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf8:	8e 01       	movw	r16, r28
     cfa:	05 5b       	subi	r16, 0xB5	; 181
     cfc:	1f 4f       	sbci	r17, 0xFF	; 255
     cfe:	fe 01       	movw	r30, r28
     d00:	e3 5b       	subi	r30, 0xB3	; 179
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	60 81       	ld	r22, Z
     d06:	71 81       	ldd	r23, Z+1	; 0x01
     d08:	82 81       	ldd	r24, Z+2	; 0x02
     d0a:	93 81       	ldd	r25, Z+3	; 0x03
     d0c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	f8 01       	movw	r30, r16
     d16:	91 83       	std	Z+1, r25	; 0x01
     d18:	80 83       	st	Z, r24
     d1a:	de 01       	movw	r26, r28
     d1c:	a9 5b       	subi	r26, 0xB9	; 185
     d1e:	bf 4f       	sbci	r27, 0xFF	; 255
     d20:	fe 01       	movw	r30, r28
     d22:	e5 5b       	subi	r30, 0xB5	; 181
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	80 81       	ld	r24, Z
     d28:	91 81       	ldd	r25, Z+1	; 0x01
     d2a:	8d 93       	st	X+, r24
     d2c:	9c 93       	st	X, r25
     d2e:	fe 01       	movw	r30, r28
     d30:	e9 5b       	subi	r30, 0xB9	; 185
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	80 81       	ld	r24, Z
     d36:	91 81       	ldd	r25, Z+1	; 0x01
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <LCDinit+0x316>
     d3c:	fe 01       	movw	r30, r28
     d3e:	e9 5b       	subi	r30, 0xB9	; 185
     d40:	ff 4f       	sbci	r31, 0xFF	; 255
     d42:	91 83       	std	Z+1, r25	; 0x01
     d44:	80 83       	st	Z, r24
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     d46:	a5 e3       	ldi	r26, 0x35	; 53
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e5 e3       	ldi	r30, 0x35	; 53
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8b 7f       	andi	r24, 0xFB	; 251
     d52:	8c 93       	st	X, r24
     d54:	fe 01       	movw	r30, r28
     d56:	ed 5b       	subi	r30, 0xBD	; 189
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	a0 e8       	ldi	r26, 0x80	; 128
     d60:	bf e3       	ldi	r27, 0x3F	; 63
     d62:	80 83       	st	Z, r24
     d64:	91 83       	std	Z+1, r25	; 0x01
     d66:	a2 83       	std	Z+2, r26	; 0x02
     d68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d6a:	8e 01       	movw	r16, r28
     d6c:	01 5c       	subi	r16, 0xC1	; 193
     d6e:	1f 4f       	sbci	r17, 0xFF	; 255
     d70:	fe 01       	movw	r30, r28
     d72:	ed 5b       	subi	r30, 0xBD	; 189
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	60 81       	ld	r22, Z
     d78:	71 81       	ldd	r23, Z+1	; 0x01
     d7a:	82 81       	ldd	r24, Z+2	; 0x02
     d7c:	93 81       	ldd	r25, Z+3	; 0x03
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	4a e7       	ldi	r20, 0x7A	; 122
     d84:	54 e4       	ldi	r21, 0x44	; 68
     d86:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	f8 01       	movw	r30, r16
     d90:	80 83       	st	Z, r24
     d92:	91 83       	std	Z+1, r25	; 0x01
     d94:	a2 83       	std	Z+2, r26	; 0x02
     d96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d98:	fe 01       	movw	r30, r28
     d9a:	ff 96       	adiw	r30, 0x3f	; 63
     d9c:	60 81       	ld	r22, Z
     d9e:	71 81       	ldd	r23, Z+1	; 0x01
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e8       	ldi	r20, 0x80	; 128
     daa:	5f e3       	ldi	r21, 0x3F	; 63
     dac:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__ltsf2>
     db0:	88 23       	and	r24, r24
     db2:	2c f4       	brge	.+10     	; 0xdbe <LCDinit+0x39c>
		__ticks = 1;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	9e af       	std	Y+62, r25	; 0x3e
     dba:	8d af       	std	Y+61, r24	; 0x3d
     dbc:	46 c0       	rjmp	.+140    	; 0xe4a <LCDinit+0x428>
	else if (__tmp > 65535)
     dbe:	fe 01       	movw	r30, r28
     dc0:	ff 96       	adiw	r30, 0x3f	; 63
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	3f ef       	ldi	r19, 0xFF	; 255
     dce:	4f e7       	ldi	r20, 0x7F	; 127
     dd0:	57 e4       	ldi	r21, 0x47	; 71
     dd2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gtsf2>
     dd6:	18 16       	cp	r1, r24
     dd8:	64 f5       	brge	.+88     	; 0xe32 <LCDinit+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dda:	fe 01       	movw	r30, r28
     ddc:	ed 5b       	subi	r30, 0xBD	; 189
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	82 81       	ldd	r24, Z+2	; 0x02
     de6:	93 81       	ldd	r25, Z+3	; 0x03
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e2       	ldi	r20, 0x20	; 32
     dee:	51 e4       	ldi	r21, 0x41	; 65
     df0:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	bc 01       	movw	r22, r24
     dfa:	cd 01       	movw	r24, r26
     dfc:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	9e af       	std	Y+62, r25	; 0x3e
     e06:	8d af       	std	Y+61, r24	; 0x3d
     e08:	0f c0       	rjmp	.+30     	; 0xe28 <LCDinit+0x406>
     e0a:	84 e6       	ldi	r24, 0x64	; 100
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	9c af       	std	Y+60, r25	; 0x3c
     e10:	8b af       	std	Y+59, r24	; 0x3b
     e12:	8b ad       	ldd	r24, Y+59	; 0x3b
     e14:	9c ad       	ldd	r25, Y+60	; 0x3c
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <LCDinit+0x3f4>
     e1a:	9c af       	std	Y+60, r25	; 0x3c
     e1c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e1e:	8d ad       	ldd	r24, Y+61	; 0x3d
     e20:	9e ad       	ldd	r25, Y+62	; 0x3e
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	9e af       	std	Y+62, r25	; 0x3e
     e26:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e28:	8d ad       	ldd	r24, Y+61	; 0x3d
     e2a:	9e ad       	ldd	r25, Y+62	; 0x3e
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	69 f7       	brne	.-38     	; 0xe0a <LCDinit+0x3e8>
     e30:	16 c0       	rjmp	.+44     	; 0xe5e <LCDinit+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e32:	fe 01       	movw	r30, r28
     e34:	ff 96       	adiw	r30, 0x3f	; 63
     e36:	60 81       	ld	r22, Z
     e38:	71 81       	ldd	r23, Z+1	; 0x01
     e3a:	82 81       	ldd	r24, Z+2	; 0x02
     e3c:	93 81       	ldd	r25, Z+3	; 0x03
     e3e:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	9e af       	std	Y+62, r25	; 0x3e
     e48:	8d af       	std	Y+61, r24	; 0x3d
     e4a:	8d ad       	ldd	r24, Y+61	; 0x3d
     e4c:	9e ad       	ldd	r25, Y+62	; 0x3e
     e4e:	9a af       	std	Y+58, r25	; 0x3a
     e50:	89 af       	std	Y+57, r24	; 0x39
     e52:	89 ad       	ldd	r24, Y+57	; 0x39
     e54:	9a ad       	ldd	r25, Y+58	; 0x3a
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <LCDinit+0x434>
     e5a:	9a af       	std	Y+58, r25	; 0x3a
     e5c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     e5e:	e5 e3       	ldi	r30, 0x35	; 53
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 e3       	ldi	r24, 0x30	; 48
     e64:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e66:	a5 e3       	ldi	r26, 0x35	; 53
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e5 e3       	ldi	r30, 0x35	; 53
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	84 60       	ori	r24, 0x04	; 4
     e72:	8c 93       	st	X, r24
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	a0 e8       	ldi	r26, 0x80	; 128
     e7a:	bf e3       	ldi	r27, 0x3F	; 63
     e7c:	8d ab       	std	Y+53, r24	; 0x35
     e7e:	9e ab       	std	Y+54, r25	; 0x36
     e80:	af ab       	std	Y+55, r26	; 0x37
     e82:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e84:	6d a9       	ldd	r22, Y+53	; 0x35
     e86:	7e a9       	ldd	r23, Y+54	; 0x36
     e88:	8f a9       	ldd	r24, Y+55	; 0x37
     e8a:	98 ad       	ldd	r25, Y+56	; 0x38
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	4a e7       	ldi	r20, 0x7A	; 122
     e92:	54 e4       	ldi	r21, 0x44	; 68
     e94:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	89 ab       	std	Y+49, r24	; 0x31
     e9e:	9a ab       	std	Y+50, r25	; 0x32
     ea0:	ab ab       	std	Y+51, r26	; 0x33
     ea2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ea4:	69 a9       	ldd	r22, Y+49	; 0x31
     ea6:	7a a9       	ldd	r23, Y+50	; 0x32
     ea8:	8b a9       	ldd	r24, Y+51	; 0x33
     eaa:	9c a9       	ldd	r25, Y+52	; 0x34
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e8       	ldi	r20, 0x80	; 128
     eb2:	5f e3       	ldi	r21, 0x3F	; 63
     eb4:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__ltsf2>
     eb8:	88 23       	and	r24, r24
     eba:	2c f4       	brge	.+10     	; 0xec6 <LCDinit+0x4a4>
		__ticks = 1;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	98 ab       	std	Y+48, r25	; 0x30
     ec2:	8f a7       	std	Y+47, r24	; 0x2f
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <LCDinit+0x522>
	else if (__tmp > 65535)
     ec6:	69 a9       	ldd	r22, Y+49	; 0x31
     ec8:	7a a9       	ldd	r23, Y+50	; 0x32
     eca:	8b a9       	ldd	r24, Y+51	; 0x33
     ecc:	9c a9       	ldd	r25, Y+52	; 0x34
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	3f ef       	ldi	r19, 0xFF	; 255
     ed2:	4f e7       	ldi	r20, 0x7F	; 127
     ed4:	57 e4       	ldi	r21, 0x47	; 71
     ed6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gtsf2>
     eda:	18 16       	cp	r1, r24
     edc:	4c f5       	brge	.+82     	; 0xf30 <LCDinit+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ede:	6d a9       	ldd	r22, Y+53	; 0x35
     ee0:	7e a9       	ldd	r23, Y+54	; 0x36
     ee2:	8f a9       	ldd	r24, Y+55	; 0x37
     ee4:	98 ad       	ldd	r25, Y+56	; 0x38
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e2       	ldi	r20, 0x20	; 32
     eec:	51 e4       	ldi	r21, 0x41	; 65
     eee:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	bc 01       	movw	r22, r24
     ef8:	cd 01       	movw	r24, r26
     efa:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	98 ab       	std	Y+48, r25	; 0x30
     f04:	8f a7       	std	Y+47, r24	; 0x2f
     f06:	0f c0       	rjmp	.+30     	; 0xf26 <LCDinit+0x504>
     f08:	84 e6       	ldi	r24, 0x64	; 100
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	9e a7       	std	Y+46, r25	; 0x2e
     f0e:	8d a7       	std	Y+45, r24	; 0x2d
     f10:	8d a5       	ldd	r24, Y+45	; 0x2d
     f12:	9e a5       	ldd	r25, Y+46	; 0x2e
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <LCDinit+0x4f2>
     f18:	9e a7       	std	Y+46, r25	; 0x2e
     f1a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f1e:	98 a9       	ldd	r25, Y+48	; 0x30
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	98 ab       	std	Y+48, r25	; 0x30
     f24:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f26:	8f a5       	ldd	r24, Y+47	; 0x2f
     f28:	98 a9       	ldd	r25, Y+48	; 0x30
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	69 f7       	brne	.-38     	; 0xf08 <LCDinit+0x4e6>
     f2e:	14 c0       	rjmp	.+40     	; 0xf58 <LCDinit+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f30:	69 a9       	ldd	r22, Y+49	; 0x31
     f32:	7a a9       	ldd	r23, Y+50	; 0x32
     f34:	8b a9       	ldd	r24, Y+51	; 0x33
     f36:	9c a9       	ldd	r25, Y+52	; 0x34
     f38:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	98 ab       	std	Y+48, r25	; 0x30
     f42:	8f a7       	std	Y+47, r24	; 0x2f
     f44:	8f a5       	ldd	r24, Y+47	; 0x2f
     f46:	98 a9       	ldd	r25, Y+48	; 0x30
     f48:	9c a7       	std	Y+44, r25	; 0x2c
     f4a:	8b a7       	std	Y+43, r24	; 0x2b
     f4c:	8b a5       	ldd	r24, Y+43	; 0x2b
     f4e:	9c a5       	ldd	r25, Y+44	; 0x2c
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <LCDinit+0x52e>
     f54:	9c a7       	std	Y+44, r25	; 0x2c
     f56:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     f58:	a5 e3       	ldi	r26, 0x35	; 53
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e5 e3       	ldi	r30, 0x35	; 53
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	8b 7f       	andi	r24, 0xFB	; 251
     f64:	8c 93       	st	X, r24
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	a0 e8       	ldi	r26, 0x80	; 128
     f6c:	bf e3       	ldi	r27, 0x3F	; 63
     f6e:	8f a3       	std	Y+39, r24	; 0x27
     f70:	98 a7       	std	Y+40, r25	; 0x28
     f72:	a9 a7       	std	Y+41, r26	; 0x29
     f74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f76:	6f a1       	ldd	r22, Y+39	; 0x27
     f78:	78 a5       	ldd	r23, Y+40	; 0x28
     f7a:	89 a5       	ldd	r24, Y+41	; 0x29
     f7c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	4a e7       	ldi	r20, 0x7A	; 122
     f84:	54 e4       	ldi	r21, 0x44	; 68
     f86:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	8b a3       	std	Y+35, r24	; 0x23
     f90:	9c a3       	std	Y+36, r25	; 0x24
     f92:	ad a3       	std	Y+37, r26	; 0x25
     f94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f96:	6b a1       	ldd	r22, Y+35	; 0x23
     f98:	7c a1       	ldd	r23, Y+36	; 0x24
     f9a:	8d a1       	ldd	r24, Y+37	; 0x25
     f9c:	9e a1       	ldd	r25, Y+38	; 0x26
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e8       	ldi	r20, 0x80	; 128
     fa4:	5f e3       	ldi	r21, 0x3F	; 63
     fa6:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__ltsf2>
     faa:	88 23       	and	r24, r24
     fac:	2c f4       	brge	.+10     	; 0xfb8 <LCDinit+0x596>
		__ticks = 1;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	9a a3       	std	Y+34, r25	; 0x22
     fb4:	89 a3       	std	Y+33, r24	; 0x21
     fb6:	3f c0       	rjmp	.+126    	; 0x1036 <LCDinit+0x614>
	else if (__tmp > 65535)
     fb8:	6b a1       	ldd	r22, Y+35	; 0x23
     fba:	7c a1       	ldd	r23, Y+36	; 0x24
     fbc:	8d a1       	ldd	r24, Y+37	; 0x25
     fbe:	9e a1       	ldd	r25, Y+38	; 0x26
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	3f ef       	ldi	r19, 0xFF	; 255
     fc4:	4f e7       	ldi	r20, 0x7F	; 127
     fc6:	57 e4       	ldi	r21, 0x47	; 71
     fc8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gtsf2>
     fcc:	18 16       	cp	r1, r24
     fce:	4c f5       	brge	.+82     	; 0x1022 <LCDinit+0x600>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd0:	6f a1       	ldd	r22, Y+39	; 0x27
     fd2:	78 a5       	ldd	r23, Y+40	; 0x28
     fd4:	89 a5       	ldd	r24, Y+41	; 0x29
     fd6:	9a a5       	ldd	r25, Y+42	; 0x2a
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e2       	ldi	r20, 0x20	; 32
     fde:	51 e4       	ldi	r21, 0x41	; 65
     fe0:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	bc 01       	movw	r22, r24
     fea:	cd 01       	movw	r24, r26
     fec:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	9a a3       	std	Y+34, r25	; 0x22
     ff6:	89 a3       	std	Y+33, r24	; 0x21
     ff8:	0f c0       	rjmp	.+30     	; 0x1018 <LCDinit+0x5f6>
     ffa:	84 e6       	ldi	r24, 0x64	; 100
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	98 a3       	std	Y+32, r25	; 0x20
    1000:	8f 8f       	std	Y+31, r24	; 0x1f
    1002:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1004:	98 a1       	ldd	r25, Y+32	; 0x20
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <LCDinit+0x5e4>
    100a:	98 a3       	std	Y+32, r25	; 0x20
    100c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100e:	89 a1       	ldd	r24, Y+33	; 0x21
    1010:	9a a1       	ldd	r25, Y+34	; 0x22
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	9a a3       	std	Y+34, r25	; 0x22
    1016:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1018:	89 a1       	ldd	r24, Y+33	; 0x21
    101a:	9a a1       	ldd	r25, Y+34	; 0x22
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	69 f7       	brne	.-38     	; 0xffa <LCDinit+0x5d8>
    1020:	14 c0       	rjmp	.+40     	; 0x104a <LCDinit+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1022:	6b a1       	ldd	r22, Y+35	; 0x23
    1024:	7c a1       	ldd	r23, Y+36	; 0x24
    1026:	8d a1       	ldd	r24, Y+37	; 0x25
    1028:	9e a1       	ldd	r25, Y+38	; 0x26
    102a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	9a a3       	std	Y+34, r25	; 0x22
    1034:	89 a3       	std	Y+33, r24	; 0x21
    1036:	89 a1       	ldd	r24, Y+33	; 0x21
    1038:	9a a1       	ldd	r25, Y+34	; 0x22
    103a:	9e 8f       	std	Y+30, r25	; 0x1e
    103c:	8d 8f       	std	Y+29, r24	; 0x1d
    103e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1040:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <LCDinit+0x620>
    1046:	9e 8f       	std	Y+30, r25	; 0x1e
    1048:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    104a:	e5 e3       	ldi	r30, 0x35	; 53
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 e2       	ldi	r24, 0x20	; 32
    1050:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1052:	a5 e3       	ldi	r26, 0x35	; 53
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e5 e3       	ldi	r30, 0x35	; 53
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	84 60       	ori	r24, 0x04	; 4
    105e:	8c 93       	st	X, r24
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	a0 e8       	ldi	r26, 0x80	; 128
    1066:	bf e3       	ldi	r27, 0x3F	; 63
    1068:	89 8f       	std	Y+25, r24	; 0x19
    106a:	9a 8f       	std	Y+26, r25	; 0x1a
    106c:	ab 8f       	std	Y+27, r26	; 0x1b
    106e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1070:	69 8d       	ldd	r22, Y+25	; 0x19
    1072:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1074:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1076:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	4a e7       	ldi	r20, 0x7A	; 122
    107e:	54 e4       	ldi	r21, 0x44	; 68
    1080:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	8d 8b       	std	Y+21, r24	; 0x15
    108a:	9e 8b       	std	Y+22, r25	; 0x16
    108c:	af 8b       	std	Y+23, r26	; 0x17
    108e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1090:	6d 89       	ldd	r22, Y+21	; 0x15
    1092:	7e 89       	ldd	r23, Y+22	; 0x16
    1094:	8f 89       	ldd	r24, Y+23	; 0x17
    1096:	98 8d       	ldd	r25, Y+24	; 0x18
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 e8       	ldi	r20, 0x80	; 128
    109e:	5f e3       	ldi	r21, 0x3F	; 63
    10a0:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__ltsf2>
    10a4:	88 23       	and	r24, r24
    10a6:	2c f4       	brge	.+10     	; 0x10b2 <LCDinit+0x690>
		__ticks = 1;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	9c 8b       	std	Y+20, r25	; 0x14
    10ae:	8b 8b       	std	Y+19, r24	; 0x13
    10b0:	3f c0       	rjmp	.+126    	; 0x1130 <LCDinit+0x70e>
	else if (__tmp > 65535)
    10b2:	6d 89       	ldd	r22, Y+21	; 0x15
    10b4:	7e 89       	ldd	r23, Y+22	; 0x16
    10b6:	8f 89       	ldd	r24, Y+23	; 0x17
    10b8:	98 8d       	ldd	r25, Y+24	; 0x18
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	3f ef       	ldi	r19, 0xFF	; 255
    10be:	4f e7       	ldi	r20, 0x7F	; 127
    10c0:	57 e4       	ldi	r21, 0x47	; 71
    10c2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gtsf2>
    10c6:	18 16       	cp	r1, r24
    10c8:	4c f5       	brge	.+82     	; 0x111c <LCDinit+0x6fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ca:	69 8d       	ldd	r22, Y+25	; 0x19
    10cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	40 e2       	ldi	r20, 0x20	; 32
    10d8:	51 e4       	ldi	r21, 0x41	; 65
    10da:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	bc 01       	movw	r22, r24
    10e4:	cd 01       	movw	r24, r26
    10e6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	9c 8b       	std	Y+20, r25	; 0x14
    10f0:	8b 8b       	std	Y+19, r24	; 0x13
    10f2:	0f c0       	rjmp	.+30     	; 0x1112 <LCDinit+0x6f0>
    10f4:	84 e6       	ldi	r24, 0x64	; 100
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	9a 8b       	std	Y+18, r25	; 0x12
    10fa:	89 8b       	std	Y+17, r24	; 0x11
    10fc:	89 89       	ldd	r24, Y+17	; 0x11
    10fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	f1 f7       	brne	.-4      	; 0x1100 <LCDinit+0x6de>
    1104:	9a 8b       	std	Y+18, r25	; 0x12
    1106:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1108:	8b 89       	ldd	r24, Y+19	; 0x13
    110a:	9c 89       	ldd	r25, Y+20	; 0x14
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	9c 8b       	std	Y+20, r25	; 0x14
    1110:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1112:	8b 89       	ldd	r24, Y+19	; 0x13
    1114:	9c 89       	ldd	r25, Y+20	; 0x14
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	69 f7       	brne	.-38     	; 0x10f4 <LCDinit+0x6d2>
    111a:	14 c0       	rjmp	.+40     	; 0x1144 <LCDinit+0x722>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111c:	6d 89       	ldd	r22, Y+21	; 0x15
    111e:	7e 89       	ldd	r23, Y+22	; 0x16
    1120:	8f 89       	ldd	r24, Y+23	; 0x17
    1122:	98 8d       	ldd	r25, Y+24	; 0x18
    1124:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	9c 8b       	std	Y+20, r25	; 0x14
    112e:	8b 8b       	std	Y+19, r24	; 0x13
    1130:	8b 89       	ldd	r24, Y+19	; 0x13
    1132:	9c 89       	ldd	r25, Y+20	; 0x14
    1134:	98 8b       	std	Y+16, r25	; 0x10
    1136:	8f 87       	std	Y+15, r24	; 0x0f
    1138:	8f 85       	ldd	r24, Y+15	; 0x0f
    113a:	98 89       	ldd	r25, Y+16	; 0x10
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	f1 f7       	brne	.-4      	; 0x113c <LCDinit+0x71a>
    1140:	98 8b       	std	Y+16, r25	; 0x10
    1142:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1144:	a5 e3       	ldi	r26, 0x35	; 53
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e5 e3       	ldi	r30, 0x35	; 53
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	8b 7f       	andi	r24, 0xFB	; 251
    1150:	8c 93       	st	X, r24
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a0 e8       	ldi	r26, 0x80	; 128
    1158:	bf e3       	ldi	r27, 0x3F	; 63
    115a:	8b 87       	std	Y+11, r24	; 0x0b
    115c:	9c 87       	std	Y+12, r25	; 0x0c
    115e:	ad 87       	std	Y+13, r26	; 0x0d
    1160:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1162:	6b 85       	ldd	r22, Y+11	; 0x0b
    1164:	7c 85       	ldd	r23, Y+12	; 0x0c
    1166:	8d 85       	ldd	r24, Y+13	; 0x0d
    1168:	9e 85       	ldd	r25, Y+14	; 0x0e
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	4a e7       	ldi	r20, 0x7A	; 122
    1170:	54 e4       	ldi	r21, 0x44	; 68
    1172:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	8f 83       	std	Y+7, r24	; 0x07
    117c:	98 87       	std	Y+8, r25	; 0x08
    117e:	a9 87       	std	Y+9, r26	; 0x09
    1180:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1182:	6f 81       	ldd	r22, Y+7	; 0x07
    1184:	78 85       	ldd	r23, Y+8	; 0x08
    1186:	89 85       	ldd	r24, Y+9	; 0x09
    1188:	9a 85       	ldd	r25, Y+10	; 0x0a
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e8       	ldi	r20, 0x80	; 128
    1190:	5f e3       	ldi	r21, 0x3F	; 63
    1192:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__ltsf2>
    1196:	88 23       	and	r24, r24
    1198:	2c f4       	brge	.+10     	; 0x11a4 <LCDinit+0x782>
		__ticks = 1;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9e 83       	std	Y+6, r25	; 0x06
    11a0:	8d 83       	std	Y+5, r24	; 0x05
    11a2:	3f c0       	rjmp	.+126    	; 0x1222 <LCDinit+0x800>
	else if (__tmp > 65535)
    11a4:	6f 81       	ldd	r22, Y+7	; 0x07
    11a6:	78 85       	ldd	r23, Y+8	; 0x08
    11a8:	89 85       	ldd	r24, Y+9	; 0x09
    11aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	3f ef       	ldi	r19, 0xFF	; 255
    11b0:	4f e7       	ldi	r20, 0x7F	; 127
    11b2:	57 e4       	ldi	r21, 0x47	; 71
    11b4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__gtsf2>
    11b8:	18 16       	cp	r1, r24
    11ba:	4c f5       	brge	.+82     	; 0x120e <LCDinit+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    11be:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e2       	ldi	r20, 0x20	; 32
    11ca:	51 e4       	ldi	r21, 0x41	; 65
    11cc:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulsf3>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	bc 01       	movw	r22, r24
    11d6:	cd 01       	movw	r24, r26
    11d8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	9e 83       	std	Y+6, r25	; 0x06
    11e2:	8d 83       	std	Y+5, r24	; 0x05
    11e4:	0f c0       	rjmp	.+30     	; 0x1204 <LCDinit+0x7e2>
    11e6:	84 e6       	ldi	r24, 0x64	; 100
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	9c 83       	std	Y+4, r25	; 0x04
    11ec:	8b 83       	std	Y+3, r24	; 0x03
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	9c 81       	ldd	r25, Y+4	; 0x04
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <LCDinit+0x7d0>
    11f6:	9c 83       	std	Y+4, r25	; 0x04
    11f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	9e 83       	std	Y+6, r25	; 0x06
    1202:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
    1206:	9e 81       	ldd	r25, Y+6	; 0x06
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	69 f7       	brne	.-38     	; 0x11e6 <LCDinit+0x7c4>
    120c:	14 c0       	rjmp	.+40     	; 0x1236 <LCDinit+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    120e:	6f 81       	ldd	r22, Y+7	; 0x07
    1210:	78 85       	ldd	r23, Y+8	; 0x08
    1212:	89 85       	ldd	r24, Y+9	; 0x09
    1214:	9a 85       	ldd	r25, Y+10	; 0x0a
    1216:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__fixunssfsi>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	9e 83       	std	Y+6, r25	; 0x06
    1220:	8d 83       	std	Y+5, r24	; 0x05
    1222:	8d 81       	ldd	r24, Y+5	; 0x05
    1224:	9e 81       	ldd	r25, Y+6	; 0x06
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <LCDinit+0x80c>
    1232:	9a 83       	std	Y+2, r25	; 0x02
    1234:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1236:	88 e2       	ldi	r24, 0x28	; 40
    1238:	0e 94 08 03 	call	0x610	; 0x610 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    123c:	8c e0       	ldi	r24, 0x0C	; 12
    123e:	0e 94 08 03 	call	0x610	; 0x610 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
    1242:	fe 01       	movw	r30, r28
    1244:	ec 59       	subi	r30, 0x9C	; 156
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	10 82       	st	Z, r1
    124a:	fe 01       	movw	r30, r28
    124c:	ed 59       	subi	r30, 0x9D	; 157
    124e:	ff 4f       	sbci	r31, 0xFF	; 255
    1250:	10 82       	st	Z, r1
    1252:	23 c0       	rjmp	.+70     	; 0x129a <LCDinit+0x878>
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1254:	fe 01       	movw	r30, r28
    1256:	ec 59       	subi	r30, 0x9C	; 156
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	80 81       	ld	r24, Z
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	9c 01       	movw	r18, r24
    1262:	2c 5a       	subi	r18, 0xAC	; 172
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	fe 01       	movw	r30, r28
    1268:	ed 59       	subi	r30, 0x9D	; 157
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	40 81       	ld	r20, Z
    126e:	de 01       	movw	r26, r28
    1270:	ad 59       	subi	r26, 0x9D	; 157
    1272:	bf 4f       	sbci	r27, 0xFF	; 255
    1274:	fe 01       	movw	r30, r28
    1276:	ed 59       	subi	r30, 0x9D	; 157
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	80 81       	ld	r24, Z
    127c:	8f 5f       	subi	r24, 0xFF	; 255
    127e:	8c 93       	st	X, r24
    1280:	c9 01       	movw	r24, r18
    1282:	64 2f       	mov	r22, r20
    1284:	0e 94 23 0a 	call	0x1446	; 0x1446 <LCDdefinechar>
		ch=ch+8;
    1288:	de 01       	movw	r26, r28
    128a:	ac 59       	subi	r26, 0x9C	; 156
    128c:	bf 4f       	sbci	r27, 0xFF	; 255
    128e:	fe 01       	movw	r30, r28
    1290:	ec 59       	subi	r30, 0x9C	; 156
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	80 81       	ld	r24, Z
    1296:	88 5f       	subi	r24, 0xF8	; 248
    1298:	8c 93       	st	X, r24
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    129a:	fe 01       	movw	r30, r28
    129c:	ec 59       	subi	r30, 0x9C	; 156
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	80 81       	ld	r24, Z
    12a2:	80 34       	cpi	r24, 0x40	; 64
    12a4:	b8 f2       	brcs	.-82     	; 0x1254 <LCDinit+0x832>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    12a6:	cc 59       	subi	r28, 0x9C	; 156
    12a8:	df 4f       	sbci	r29, 0xFF	; 255
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	08 95       	ret

000012be <LCDclr>:
void LCDclr(void)				//Clears LCD
{
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_CLR);
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	0e 94 08 03 	call	0x610	; 0x610 <LCDsendCommand>
}
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_HOME);
    12da:	82 e0       	ldi	r24, 0x02	; 2
    12dc:	0e 94 08 03 	call	0x610	; 0x610 <LCDsendCommand>
}
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <LCDstring+0x6>
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <LCDstring+0x8>
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	6b 83       	std	Y+3, r22	; 0x03
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	9a 81       	ldd	r25, Y+2	; 0x02
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	a1 f0       	breq	.+40     	; 0x1328 <LCDstring+0x42>

	// print data
	for(i=0; i<nBytes; i++)
    1300:	1c 82       	std	Y+4, r1	; 0x04
    1302:	0e c0       	rjmp	.+28     	; 0x1320 <LCDstring+0x3a>
	{
		LCDsendChar(data[i]);
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	fc 01       	movw	r30, r24
    1310:	e2 0f       	add	r30, r18
    1312:	f3 1f       	adc	r31, r19
    1314:	80 81       	ld	r24, Z
    1316:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    131a:	9c 81       	ldd	r25, Y+4	; 0x04
    131c:	9f 5f       	subi	r25, 0xFF	; 255
    131e:	9c 83       	std	Y+4, r25	; 0x04
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	98 17       	cp	r25, r24
    1326:	70 f3       	brcs	.-36     	; 0x1304 <LCDstring+0x1e>
	{
		LCDsendChar(data[i]);
	}
}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <LCDGotoXY+0x6>
    133c:	00 d0       	rcall	.+0      	; 0x133e <LCDGotoXY+0x8>
    133e:	0f 92       	push	r0
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	6a 83       	std	Y+2, r22	; 0x02
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	3d 83       	std	Y+5, r19	; 0x05
    1350:	2c 83       	std	Y+4, r18	; 0x04
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	9d 81       	ldd	r25, Y+5	; 0x05
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	91 05       	cpc	r25, r1
    135a:	c1 f0       	breq	.+48     	; 0x138c <LCDGotoXY+0x56>
    135c:	2c 81       	ldd	r18, Y+4	; 0x04
    135e:	3d 81       	ldd	r19, Y+5	; 0x05
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	2c f4       	brge	.+10     	; 0x1370 <LCDGotoXY+0x3a>
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	9d 81       	ldd	r25, Y+5	; 0x05
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	61 f0       	breq	.+24     	; 0x1386 <LCDGotoXY+0x50>
    136e:	1d c0       	rjmp	.+58     	; 0x13aa <LCDGotoXY+0x74>
    1370:	2c 81       	ldd	r18, Y+4	; 0x04
    1372:	3d 81       	ldd	r19, Y+5	; 0x05
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	71 f0       	breq	.+28     	; 0x1396 <LCDGotoXY+0x60>
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	9d 81       	ldd	r25, Y+5	; 0x05
    137e:	83 30       	cpi	r24, 0x03	; 3
    1380:	91 05       	cpc	r25, r1
    1382:	71 f0       	breq	.+28     	; 0x13a0 <LCDGotoXY+0x6a>
    1384:	12 c0       	rjmp	.+36     	; 0x13aa <LCDGotoXY+0x74>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
    1386:	99 81       	ldd	r25, Y+1	; 0x01
    1388:	9b 83       	std	Y+3, r25	; 0x03
    138a:	11 c0       	rjmp	.+34     	; 0x13ae <LCDGotoXY+0x78>
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	28 2f       	mov	r18, r24
    1390:	20 5c       	subi	r18, 0xC0	; 192
    1392:	2b 83       	std	Y+3, r18	; 0x03
    1394:	0c c0       	rjmp	.+24     	; 0x13ae <LCDGotoXY+0x78>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	38 2f       	mov	r19, r24
    139a:	3c 5e       	subi	r19, 0xEC	; 236
    139c:	3b 83       	std	Y+3, r19	; 0x03
    139e:	07 c0       	rjmp	.+14     	; 0x13ae <LCDGotoXY+0x78>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	98 2f       	mov	r25, r24
    13a4:	9c 5a       	subi	r25, 0xAC	; 172
    13a6:	9b 83       	std	Y+3, r25	; 0x03
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <LCDGotoXY+0x78>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
    13aa:	29 81       	ldd	r18, Y+1	; 0x01
    13ac:	2b 83       	std	Y+3, r18	; 0x03
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	80 68       	ori	r24, 0x80	; 128
    13b2:	0e 94 08 03 	call	0x610	; 0x610 <LCDsendCommand>
	
}
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	2b 97       	sbiw	r28, 0x0b	; 11
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	99 87       	std	Y+9, r25	; 0x09
    13dc:	88 87       	std	Y+8, r24	; 0x08
    13de:	6a 87       	std	Y+10, r22	; 0x0a
    13e0:	4b 87       	std	Y+11, r20	; 0x0b
	uint8_t i;
	LCDGotoXY(x,y);
    13e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    13e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e6:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    13ea:	1f 82       	std	Y+7, r1	; 0x07
    13ec:	13 c0       	rjmp	.+38     	; 0x1414 <CopyStringtoLCD+0x4e>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    13ee:	8f 81       	ldd	r24, Y+7	; 0x07
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	88 85       	ldd	r24, Y+8	; 0x08
    13f6:	99 85       	ldd	r25, Y+9	; 0x09
    13f8:	82 0f       	add	r24, r18
    13fa:	93 1f       	adc	r25, r19
    13fc:	9e 83       	std	Y+6, r25	; 0x06
    13fe:	8d 83       	std	Y+5, r24	; 0x05
    1400:	ed 81       	ldd	r30, Y+5	; 0x05
    1402:	fe 81       	ldd	r31, Y+6	; 0x06
    1404:	84 91       	lpm	r24, Z+
    1406:	8c 83       	std	Y+4, r24	; 0x04
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
    140a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    140e:	8f 81       	ldd	r24, Y+7	; 0x07
    1410:	8f 5f       	subi	r24, 0xFF	; 255
    1412:	8f 83       	std	Y+7, r24	; 0x07
    1414:	8f 81       	ldd	r24, Y+7	; 0x07
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	88 85       	ldd	r24, Y+8	; 0x08
    141c:	99 85       	ldd	r25, Y+9	; 0x09
    141e:	82 0f       	add	r24, r18
    1420:	93 1f       	adc	r25, r19
    1422:	9b 83       	std	Y+3, r25	; 0x03
    1424:	8a 83       	std	Y+2, r24	; 0x02
    1426:	ea 81       	ldd	r30, Y+2	; 0x02
    1428:	fb 81       	ldd	r31, Y+3	; 0x03
    142a:	84 91       	lpm	r24, Z+
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	88 23       	and	r24, r24
    1432:	e9 f6       	brne	.-70     	; 0x13ee <CopyStringtoLCD+0x28>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1434:	2b 96       	adiw	r28, 0x0b	; 11
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	2a 97       	sbiw	r28, 0x0a	; 10
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	99 87       	std	Y+9, r25	; 0x09
    145c:	88 87       	std	Y+8, r24	; 0x08
    145e:	6a 87       	std	Y+10, r22	; 0x0a
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    1460:	8a 85       	ldd	r24, Y+10	; 0x0a
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	80 64       	ori	r24, 0x40	; 64
    1474:	8f 83       	std	Y+7, r24	; 0x07
	for (i=0; i<8; i++){
    1476:	1d 82       	std	Y+5, r1	; 0x05
    1478:	1c 82       	std	Y+4, r1	; 0x04
    147a:	1d c0       	rjmp	.+58     	; 0x14b6 <LCDdefinechar+0x70>
		pcc=pgm_read_byte(&pc[i]);
    147c:	28 85       	ldd	r18, Y+8	; 0x08
    147e:	39 85       	ldd	r19, Y+9	; 0x09
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	9d 81       	ldd	r25, Y+5	; 0x05
    1484:	82 0f       	add	r24, r18
    1486:	93 1f       	adc	r25, r19
    1488:	9b 83       	std	Y+3, r25	; 0x03
    148a:	8a 83       	std	Y+2, r24	; 0x02
    148c:	ea 81       	ldd	r30, Y+2	; 0x02
    148e:	fb 81       	ldd	r31, Y+3	; 0x03
    1490:	84 91       	lpm	r24, Z+
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	8e 83       	std	Y+6, r24	; 0x06
		LCDsendCommand(a++);
    1498:	9f 81       	ldd	r25, Y+7	; 0x07
    149a:	8f 81       	ldd	r24, Y+7	; 0x07
    149c:	8f 5f       	subi	r24, 0xFF	; 255
    149e:	8f 83       	std	Y+7, r24	; 0x07
    14a0:	89 2f       	mov	r24, r25
    14a2:	0e 94 08 03 	call	0x610	; 0x610 <LCDsendCommand>
		LCDsendChar(pcc);
    14a6:	8e 81       	ldd	r24, Y+6	; 0x06
    14a8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	9d 81       	ldd	r25, Y+5	; 0x05
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	9d 83       	std	Y+5, r25	; 0x05
    14b4:	8c 83       	std	Y+4, r24	; 0x04
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ba:	88 30       	cpi	r24, 0x08	; 8
    14bc:	91 05       	cpc	r25, r1
    14be:	f0 f2       	brcs	.-68     	; 0x147c <LCDdefinechar+0x36>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    14c0:	2a 96       	adiw	r28, 0x0a	; 10
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <LCDshiftLeft>:

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <LCDshiftLeft+0x6>
    14d8:	0f 92       	push	r0
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    14e0:	1a 82       	std	Y+2, r1	; 0x02
    14e2:	19 82       	std	Y+1, r1	; 0x01
    14e4:	08 c0       	rjmp	.+16     	; 0x14f6 <LCDshiftLeft+0x24>
	{
		LCDsendCommand(0x1E);
    14e6:	8e e1       	ldi	r24, 0x1E	; 30
    14e8:	0e 94 08 03 	call	0x610	; 0x610 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	9a 81       	ldd	r25, Y+2	; 0x02
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	82 17       	cp	r24, r18
    1502:	93 07       	cpc	r25, r19
    1504:	84 f3       	brlt	.-32     	; 0x14e6 <LCDshiftLeft+0x14>
	{
		LCDsendCommand(0x1E);
	}
}
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <LCDshiftRight+0x6>
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    1520:	1a 82       	std	Y+2, r1	; 0x02
    1522:	19 82       	std	Y+1, r1	; 0x01
    1524:	08 c0       	rjmp	.+16     	; 0x1536 <LCDshiftRight+0x24>
	{
		LCDsendCommand(0x18);
    1526:	88 e1       	ldi	r24, 0x18	; 24
    1528:	0e 94 08 03 	call	0x610	; 0x610 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	82 17       	cp	r24, r18
    1542:	93 07       	cpc	r25, r19
    1544:	84 f3       	brlt	.-32     	; 0x1526 <LCDshiftRight+0x14>
	{
		LCDsendCommand(0x18);
	}
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0E);
    155a:	8e e0       	ldi	r24, 0x0E	; 14
    155c:	0e 94 08 03 	call	0x610	; 0x610 <LCDsendCommand>
}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0F);
    156e:	8f e0       	ldi	r24, 0x0F	; 15
    1570:	0e 94 08 03 	call	0x610	; 0x610 <LCDsendCommand>
}
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    1582:	8c e0       	ldi	r24, 0x0C	; 12
    1584:	0e 94 08 03 	call	0x610	; 0x610 <LCDsendCommand>
}
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <LCDblank>:
void LCDblank(void)		//blanks LCD
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x08);
    1596:	88 e0       	ldi	r24, 0x08	; 8
    1598:	0e 94 08 03 	call	0x610	; 0x610 <LCDsendCommand>
}
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    15aa:	8c e0       	ldi	r24, 0x0C	; 12
    15ac:	0e 94 08 03 	call	0x610	; 0x610 <LCDsendCommand>
}
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <LCDcursorLeft+0x6>
    15bc:	0f 92       	push	r0
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    15c4:	1a 82       	std	Y+2, r1	; 0x02
    15c6:	19 82       	std	Y+1, r1	; 0x01
    15c8:	08 c0       	rjmp	.+16     	; 0x15da <LCDcursorLeft+0x24>
	{
		LCDsendCommand(0x10);
    15ca:	80 e1       	ldi	r24, 0x10	; 16
    15cc:	0e 94 08 03 	call	0x610	; 0x610 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	9a 81       	ldd	r25, Y+2	; 0x02
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	82 17       	cp	r24, r18
    15e6:	93 07       	cpc	r25, r19
    15e8:	84 f3       	brlt	.-32     	; 0x15ca <LCDcursorLeft+0x14>
	{
		LCDsendCommand(0x10);
	}
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <LCDcursorRight+0x6>
    15fc:	0f 92       	push	r0
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	8b 83       	std	Y+3, r24	; 0x03
	for (i=0;i<n;i++)
    1604:	1a 82       	std	Y+2, r1	; 0x02
    1606:	19 82       	std	Y+1, r1	; 0x01
    1608:	08 c0       	rjmp	.+16     	; 0x161a <LCDcursorRight+0x24>
	{
		LCDsendCommand(0x14);
    160a:	84 e1       	ldi	r24, 0x14	; 20
    160c:	0e 94 08 03 	call	0x610	; 0x610 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	01 96       	adiw	r24, 0x01	; 1
    1616:	9a 83       	std	Y+2, r25	; 0x02
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	82 17       	cp	r24, r18
    1626:	93 07       	cpc	r25, r19
    1628:	84 f3       	brlt	.-32     	; 0x160a <LCDcursorRight+0x14>
	{
		LCDsendCommand(0x14);
	}
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	27 97       	sbiw	r28, 0x07	; 7
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	8d 83       	std	Y+5, r24	; 0x05
    164c:	6e 83       	std	Y+6, r22	; 0x06
    164e:	4f 83       	std	Y+7, r20	; 0x07
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	48 2f       	mov	r20, r24
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	8f 81       	ldd	r24, Y+7	; 0x07
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	c9 01       	movw	r24, r18
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	82 0f       	add	r24, r18
    1664:	93 1f       	adc	r25, r19
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	9a 01       	movw	r18, r20
    166c:	28 9f       	mul	r18, r24
    166e:	a0 01       	movw	r20, r0
    1670:	29 9f       	mul	r18, r25
    1672:	50 0d       	add	r21, r0
    1674:	38 9f       	mul	r19, r24
    1676:	50 0d       	add	r21, r0
    1678:	11 24       	eor	r1, r1
    167a:	8e 81       	ldd	r24, Y+6	; 0x06
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	ca 01       	movw	r24, r20
    1682:	b9 01       	movw	r22, r18
    1684:	0e 94 0f 11 	call	0x221e	; 0x221e <__divmodhi4>
    1688:	cb 01       	movw	r24, r22
    168a:	9b 83       	std	Y+3, r25	; 0x03
    168c:	8a 83       	std	Y+2, r24	; 0x02
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    168e:	1c 82       	std	Y+4, r1	; 0x04
    1690:	35 c0       	rjmp	.+106    	; 0x16fc <LCDprogressBar+0xc6>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	c9 01       	movw	r24, r18
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	82 0f       	add	r24, r18
    16a0:	93 1f       	adc	r25, r19
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	9c 01       	movw	r18, r24
    16a8:	2b 5f       	subi	r18, 0xFB	; 251
    16aa:	3f 4f       	sbci	r19, 0xFF	; 255
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	9b 81       	ldd	r25, Y+3	; 0x03
    16b0:	82 17       	cp	r24, r18
    16b2:	93 07       	cpc	r25, r19
    16b4:	d8 f4       	brcc	.+54     	; 0x16ec <LCDprogressBar+0xb6>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    16b6:	8c 81       	ldd	r24, Y+4	; 0x04
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	c9 01       	movw	r24, r18
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	82 0f       	add	r24, r18
    16c4:	93 1f       	adc	r25, r19
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	9c 01       	movw	r18, r24
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	9b 81       	ldd	r25, Y+3	; 0x03
    16d0:	82 17       	cp	r24, r18
    16d2:	93 07       	cpc	r25, r19
    16d4:	10 f4       	brcc	.+4      	; 0x16da <LCDprogressBar+0xa4>
			{
				// this is an empty block
				// use space character?
				c = 0;
    16d6:	19 82       	std	Y+1, r1	; 0x01
    16d8:	0b c0       	rjmp	.+22     	; 0x16f0 <LCDprogressBar+0xba>
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	9b 81       	ldd	r25, Y+3	; 0x03
    16de:	26 e0       	ldi	r18, 0x06	; 6
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	b9 01       	movw	r22, r18
    16e4:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__udivmodhi4>
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <LCDprogressBar+0xba>
			}
		}
		else
		{
			// this is a full block
			c = 5;
    16ec:	85 e0       	ldi	r24, 0x05	; 5
    16ee:	89 83       	std	Y+1, r24	; 0x01
		}
		
		// write character to display
		LCDsendChar(c);
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	8f 5f       	subi	r24, 0xFF	; 255
    16fa:	8c 83       	std	Y+4, r24	; 0x04
    16fc:	9c 81       	ldd	r25, Y+4	; 0x04
    16fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1700:	98 17       	cp	r25, r24
    1702:	38 f2       	brcs	.-114    	; 0x1692 <LCDprogressBar+0x5c>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1704:	27 96       	adiw	r28, 0x07	; 7
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <LCDdisplay>:

void LCDdisplay(char a[])
{
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	00 d0       	rcall	.+0      	; 0x171c <LCDdisplay+0x6>
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	9a 83       	std	Y+2, r25	; 0x02
    1722:	89 83       	std	Y+1, r24	; 0x01
	LCDstring(a,strlen(a));
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	9a 81       	ldd	r25, Y+2	; 0x02
    1728:	0e 94 59 11 	call	0x22b2	; 0x22b2 <strlen>
    172c:	28 2f       	mov	r18, r24
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	9a 81       	ldd	r25, Y+2	; 0x02
    1732:	62 2f       	mov	r22, r18
    1734:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCDstring>
}
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <__fixunssfsi>:
    1742:	ef 92       	push	r14
    1744:	ff 92       	push	r15
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	7b 01       	movw	r14, r22
    174c:	8c 01       	movw	r16, r24
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e0       	ldi	r20, 0x00	; 0
    1754:	5f e4       	ldi	r21, 0x4F	; 79
    1756:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__gesf2>
    175a:	88 23       	and	r24, r24
    175c:	8c f0       	brlt	.+34     	; 0x1780 <__fixunssfsi+0x3e>
    175e:	c8 01       	movw	r24, r16
    1760:	b7 01       	movw	r22, r14
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	5f e4       	ldi	r21, 0x4F	; 79
    176a:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__subsf3>
    176e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__fixsfsi>
    1772:	9b 01       	movw	r18, r22
    1774:	ac 01       	movw	r20, r24
    1776:	20 50       	subi	r18, 0x00	; 0
    1778:	30 40       	sbci	r19, 0x00	; 0
    177a:	40 40       	sbci	r20, 0x00	; 0
    177c:	50 48       	sbci	r21, 0x80	; 128
    177e:	06 c0       	rjmp	.+12     	; 0x178c <__fixunssfsi+0x4a>
    1780:	c8 01       	movw	r24, r16
    1782:	b7 01       	movw	r22, r14
    1784:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__fixsfsi>
    1788:	9b 01       	movw	r18, r22
    178a:	ac 01       	movw	r20, r24
    178c:	b9 01       	movw	r22, r18
    178e:	ca 01       	movw	r24, r20
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	08 95       	ret

0000179a <_fpadd_parts>:
    179a:	a0 e0       	ldi	r26, 0x00	; 0
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e3 ed       	ldi	r30, 0xD3	; 211
    17a0:	fb e0       	ldi	r31, 0x0B	; 11
    17a2:	0c 94 22 11 	jmp	0x2244	; 0x2244 <__prologue_saves__>
    17a6:	dc 01       	movw	r26, r24
    17a8:	2b 01       	movw	r4, r22
    17aa:	fa 01       	movw	r30, r20
    17ac:	9c 91       	ld	r25, X
    17ae:	92 30       	cpi	r25, 0x02	; 2
    17b0:	08 f4       	brcc	.+2      	; 0x17b4 <_fpadd_parts+0x1a>
    17b2:	39 c1       	rjmp	.+626    	; 0x1a26 <_fpadd_parts+0x28c>
    17b4:	eb 01       	movw	r28, r22
    17b6:	88 81       	ld	r24, Y
    17b8:	82 30       	cpi	r24, 0x02	; 2
    17ba:	08 f4       	brcc	.+2      	; 0x17be <_fpadd_parts+0x24>
    17bc:	33 c1       	rjmp	.+614    	; 0x1a24 <_fpadd_parts+0x28a>
    17be:	94 30       	cpi	r25, 0x04	; 4
    17c0:	69 f4       	brne	.+26     	; 0x17dc <_fpadd_parts+0x42>
    17c2:	84 30       	cpi	r24, 0x04	; 4
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <_fpadd_parts+0x2e>
    17c6:	2f c1       	rjmp	.+606    	; 0x1a26 <_fpadd_parts+0x28c>
    17c8:	11 96       	adiw	r26, 0x01	; 1
    17ca:	9c 91       	ld	r25, X
    17cc:	11 97       	sbiw	r26, 0x01	; 1
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	98 17       	cp	r25, r24
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <_fpadd_parts+0x3c>
    17d4:	28 c1       	rjmp	.+592    	; 0x1a26 <_fpadd_parts+0x28c>
    17d6:	a7 e6       	ldi	r26, 0x67	; 103
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	25 c1       	rjmp	.+586    	; 0x1a26 <_fpadd_parts+0x28c>
    17dc:	84 30       	cpi	r24, 0x04	; 4
    17de:	09 f4       	brne	.+2      	; 0x17e2 <_fpadd_parts+0x48>
    17e0:	21 c1       	rjmp	.+578    	; 0x1a24 <_fpadd_parts+0x28a>
    17e2:	82 30       	cpi	r24, 0x02	; 2
    17e4:	a9 f4       	brne	.+42     	; 0x1810 <_fpadd_parts+0x76>
    17e6:	92 30       	cpi	r25, 0x02	; 2
    17e8:	09 f0       	breq	.+2      	; 0x17ec <_fpadd_parts+0x52>
    17ea:	1d c1       	rjmp	.+570    	; 0x1a26 <_fpadd_parts+0x28c>
    17ec:	9a 01       	movw	r18, r20
    17ee:	ad 01       	movw	r20, r26
    17f0:	88 e0       	ldi	r24, 0x08	; 8
    17f2:	ea 01       	movw	r28, r20
    17f4:	09 90       	ld	r0, Y+
    17f6:	ae 01       	movw	r20, r28
    17f8:	e9 01       	movw	r28, r18
    17fa:	09 92       	st	Y+, r0
    17fc:	9e 01       	movw	r18, r28
    17fe:	81 50       	subi	r24, 0x01	; 1
    1800:	c1 f7       	brne	.-16     	; 0x17f2 <_fpadd_parts+0x58>
    1802:	e2 01       	movw	r28, r4
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	11 96       	adiw	r26, 0x01	; 1
    1808:	9c 91       	ld	r25, X
    180a:	89 23       	and	r24, r25
    180c:	81 83       	std	Z+1, r24	; 0x01
    180e:	08 c1       	rjmp	.+528    	; 0x1a20 <_fpadd_parts+0x286>
    1810:	92 30       	cpi	r25, 0x02	; 2
    1812:	09 f4       	brne	.+2      	; 0x1816 <_fpadd_parts+0x7c>
    1814:	07 c1       	rjmp	.+526    	; 0x1a24 <_fpadd_parts+0x28a>
    1816:	12 96       	adiw	r26, 0x02	; 2
    1818:	2d 90       	ld	r2, X+
    181a:	3c 90       	ld	r3, X
    181c:	13 97       	sbiw	r26, 0x03	; 3
    181e:	eb 01       	movw	r28, r22
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	9b 81       	ldd	r25, Y+3	; 0x03
    1824:	14 96       	adiw	r26, 0x04	; 4
    1826:	ad 90       	ld	r10, X+
    1828:	bd 90       	ld	r11, X+
    182a:	cd 90       	ld	r12, X+
    182c:	dc 90       	ld	r13, X
    182e:	17 97       	sbiw	r26, 0x07	; 7
    1830:	ec 80       	ldd	r14, Y+4	; 0x04
    1832:	fd 80       	ldd	r15, Y+5	; 0x05
    1834:	0e 81       	ldd	r16, Y+6	; 0x06
    1836:	1f 81       	ldd	r17, Y+7	; 0x07
    1838:	91 01       	movw	r18, r2
    183a:	28 1b       	sub	r18, r24
    183c:	39 0b       	sbc	r19, r25
    183e:	b9 01       	movw	r22, r18
    1840:	37 ff       	sbrs	r19, 7
    1842:	04 c0       	rjmp	.+8      	; 0x184c <_fpadd_parts+0xb2>
    1844:	66 27       	eor	r22, r22
    1846:	77 27       	eor	r23, r23
    1848:	62 1b       	sub	r22, r18
    184a:	73 0b       	sbc	r23, r19
    184c:	60 32       	cpi	r22, 0x20	; 32
    184e:	71 05       	cpc	r23, r1
    1850:	0c f0       	brlt	.+2      	; 0x1854 <_fpadd_parts+0xba>
    1852:	61 c0       	rjmp	.+194    	; 0x1916 <_fpadd_parts+0x17c>
    1854:	12 16       	cp	r1, r18
    1856:	13 06       	cpc	r1, r19
    1858:	6c f5       	brge	.+90     	; 0x18b4 <_fpadd_parts+0x11a>
    185a:	37 01       	movw	r6, r14
    185c:	48 01       	movw	r8, r16
    185e:	06 2e       	mov	r0, r22
    1860:	04 c0       	rjmp	.+8      	; 0x186a <_fpadd_parts+0xd0>
    1862:	96 94       	lsr	r9
    1864:	87 94       	ror	r8
    1866:	77 94       	ror	r7
    1868:	67 94       	ror	r6
    186a:	0a 94       	dec	r0
    186c:	d2 f7       	brpl	.-12     	; 0x1862 <_fpadd_parts+0xc8>
    186e:	21 e0       	ldi	r18, 0x01	; 1
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	04 c0       	rjmp	.+8      	; 0x1880 <_fpadd_parts+0xe6>
    1878:	22 0f       	add	r18, r18
    187a:	33 1f       	adc	r19, r19
    187c:	44 1f       	adc	r20, r20
    187e:	55 1f       	adc	r21, r21
    1880:	6a 95       	dec	r22
    1882:	d2 f7       	brpl	.-12     	; 0x1878 <_fpadd_parts+0xde>
    1884:	21 50       	subi	r18, 0x01	; 1
    1886:	30 40       	sbci	r19, 0x00	; 0
    1888:	40 40       	sbci	r20, 0x00	; 0
    188a:	50 40       	sbci	r21, 0x00	; 0
    188c:	2e 21       	and	r18, r14
    188e:	3f 21       	and	r19, r15
    1890:	40 23       	and	r20, r16
    1892:	51 23       	and	r21, r17
    1894:	21 15       	cp	r18, r1
    1896:	31 05       	cpc	r19, r1
    1898:	41 05       	cpc	r20, r1
    189a:	51 05       	cpc	r21, r1
    189c:	21 f0       	breq	.+8      	; 0x18a6 <_fpadd_parts+0x10c>
    189e:	21 e0       	ldi	r18, 0x01	; 1
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	79 01       	movw	r14, r18
    18a8:	8a 01       	movw	r16, r20
    18aa:	e6 28       	or	r14, r6
    18ac:	f7 28       	or	r15, r7
    18ae:	08 29       	or	r16, r8
    18b0:	19 29       	or	r17, r9
    18b2:	3c c0       	rjmp	.+120    	; 0x192c <_fpadd_parts+0x192>
    18b4:	23 2b       	or	r18, r19
    18b6:	d1 f1       	breq	.+116    	; 0x192c <_fpadd_parts+0x192>
    18b8:	26 0e       	add	r2, r22
    18ba:	37 1e       	adc	r3, r23
    18bc:	35 01       	movw	r6, r10
    18be:	46 01       	movw	r8, r12
    18c0:	06 2e       	mov	r0, r22
    18c2:	04 c0       	rjmp	.+8      	; 0x18cc <_fpadd_parts+0x132>
    18c4:	96 94       	lsr	r9
    18c6:	87 94       	ror	r8
    18c8:	77 94       	ror	r7
    18ca:	67 94       	ror	r6
    18cc:	0a 94       	dec	r0
    18ce:	d2 f7       	brpl	.-12     	; 0x18c4 <_fpadd_parts+0x12a>
    18d0:	21 e0       	ldi	r18, 0x01	; 1
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	04 c0       	rjmp	.+8      	; 0x18e2 <_fpadd_parts+0x148>
    18da:	22 0f       	add	r18, r18
    18dc:	33 1f       	adc	r19, r19
    18de:	44 1f       	adc	r20, r20
    18e0:	55 1f       	adc	r21, r21
    18e2:	6a 95       	dec	r22
    18e4:	d2 f7       	brpl	.-12     	; 0x18da <_fpadd_parts+0x140>
    18e6:	21 50       	subi	r18, 0x01	; 1
    18e8:	30 40       	sbci	r19, 0x00	; 0
    18ea:	40 40       	sbci	r20, 0x00	; 0
    18ec:	50 40       	sbci	r21, 0x00	; 0
    18ee:	2a 21       	and	r18, r10
    18f0:	3b 21       	and	r19, r11
    18f2:	4c 21       	and	r20, r12
    18f4:	5d 21       	and	r21, r13
    18f6:	21 15       	cp	r18, r1
    18f8:	31 05       	cpc	r19, r1
    18fa:	41 05       	cpc	r20, r1
    18fc:	51 05       	cpc	r21, r1
    18fe:	21 f0       	breq	.+8      	; 0x1908 <_fpadd_parts+0x16e>
    1900:	21 e0       	ldi	r18, 0x01	; 1
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	50 e0       	ldi	r21, 0x00	; 0
    1908:	59 01       	movw	r10, r18
    190a:	6a 01       	movw	r12, r20
    190c:	a6 28       	or	r10, r6
    190e:	b7 28       	or	r11, r7
    1910:	c8 28       	or	r12, r8
    1912:	d9 28       	or	r13, r9
    1914:	0b c0       	rjmp	.+22     	; 0x192c <_fpadd_parts+0x192>
    1916:	82 15       	cp	r24, r2
    1918:	93 05       	cpc	r25, r3
    191a:	2c f0       	brlt	.+10     	; 0x1926 <_fpadd_parts+0x18c>
    191c:	1c 01       	movw	r2, r24
    191e:	aa 24       	eor	r10, r10
    1920:	bb 24       	eor	r11, r11
    1922:	65 01       	movw	r12, r10
    1924:	03 c0       	rjmp	.+6      	; 0x192c <_fpadd_parts+0x192>
    1926:	ee 24       	eor	r14, r14
    1928:	ff 24       	eor	r15, r15
    192a:	87 01       	movw	r16, r14
    192c:	11 96       	adiw	r26, 0x01	; 1
    192e:	9c 91       	ld	r25, X
    1930:	d2 01       	movw	r26, r4
    1932:	11 96       	adiw	r26, 0x01	; 1
    1934:	8c 91       	ld	r24, X
    1936:	98 17       	cp	r25, r24
    1938:	09 f4       	brne	.+2      	; 0x193c <_fpadd_parts+0x1a2>
    193a:	45 c0       	rjmp	.+138    	; 0x19c6 <_fpadd_parts+0x22c>
    193c:	99 23       	and	r25, r25
    193e:	39 f0       	breq	.+14     	; 0x194e <_fpadd_parts+0x1b4>
    1940:	a8 01       	movw	r20, r16
    1942:	97 01       	movw	r18, r14
    1944:	2a 19       	sub	r18, r10
    1946:	3b 09       	sbc	r19, r11
    1948:	4c 09       	sbc	r20, r12
    194a:	5d 09       	sbc	r21, r13
    194c:	06 c0       	rjmp	.+12     	; 0x195a <_fpadd_parts+0x1c0>
    194e:	a6 01       	movw	r20, r12
    1950:	95 01       	movw	r18, r10
    1952:	2e 19       	sub	r18, r14
    1954:	3f 09       	sbc	r19, r15
    1956:	40 0b       	sbc	r20, r16
    1958:	51 0b       	sbc	r21, r17
    195a:	57 fd       	sbrc	r21, 7
    195c:	08 c0       	rjmp	.+16     	; 0x196e <_fpadd_parts+0x1d4>
    195e:	11 82       	std	Z+1, r1	; 0x01
    1960:	33 82       	std	Z+3, r3	; 0x03
    1962:	22 82       	std	Z+2, r2	; 0x02
    1964:	24 83       	std	Z+4, r18	; 0x04
    1966:	35 83       	std	Z+5, r19	; 0x05
    1968:	46 83       	std	Z+6, r20	; 0x06
    196a:	57 83       	std	Z+7, r21	; 0x07
    196c:	1d c0       	rjmp	.+58     	; 0x19a8 <_fpadd_parts+0x20e>
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	81 83       	std	Z+1, r24	; 0x01
    1972:	33 82       	std	Z+3, r3	; 0x03
    1974:	22 82       	std	Z+2, r2	; 0x02
    1976:	88 27       	eor	r24, r24
    1978:	99 27       	eor	r25, r25
    197a:	dc 01       	movw	r26, r24
    197c:	82 1b       	sub	r24, r18
    197e:	93 0b       	sbc	r25, r19
    1980:	a4 0b       	sbc	r26, r20
    1982:	b5 0b       	sbc	r27, r21
    1984:	84 83       	std	Z+4, r24	; 0x04
    1986:	95 83       	std	Z+5, r25	; 0x05
    1988:	a6 83       	std	Z+6, r26	; 0x06
    198a:	b7 83       	std	Z+7, r27	; 0x07
    198c:	0d c0       	rjmp	.+26     	; 0x19a8 <_fpadd_parts+0x20e>
    198e:	22 0f       	add	r18, r18
    1990:	33 1f       	adc	r19, r19
    1992:	44 1f       	adc	r20, r20
    1994:	55 1f       	adc	r21, r21
    1996:	24 83       	std	Z+4, r18	; 0x04
    1998:	35 83       	std	Z+5, r19	; 0x05
    199a:	46 83       	std	Z+6, r20	; 0x06
    199c:	57 83       	std	Z+7, r21	; 0x07
    199e:	82 81       	ldd	r24, Z+2	; 0x02
    19a0:	93 81       	ldd	r25, Z+3	; 0x03
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	93 83       	std	Z+3, r25	; 0x03
    19a6:	82 83       	std	Z+2, r24	; 0x02
    19a8:	24 81       	ldd	r18, Z+4	; 0x04
    19aa:	35 81       	ldd	r19, Z+5	; 0x05
    19ac:	46 81       	ldd	r20, Z+6	; 0x06
    19ae:	57 81       	ldd	r21, Z+7	; 0x07
    19b0:	da 01       	movw	r26, r20
    19b2:	c9 01       	movw	r24, r18
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	a1 09       	sbc	r26, r1
    19b8:	b1 09       	sbc	r27, r1
    19ba:	8f 5f       	subi	r24, 0xFF	; 255
    19bc:	9f 4f       	sbci	r25, 0xFF	; 255
    19be:	af 4f       	sbci	r26, 0xFF	; 255
    19c0:	bf 43       	sbci	r27, 0x3F	; 63
    19c2:	28 f3       	brcs	.-54     	; 0x198e <_fpadd_parts+0x1f4>
    19c4:	0b c0       	rjmp	.+22     	; 0x19dc <_fpadd_parts+0x242>
    19c6:	91 83       	std	Z+1, r25	; 0x01
    19c8:	33 82       	std	Z+3, r3	; 0x03
    19ca:	22 82       	std	Z+2, r2	; 0x02
    19cc:	ea 0c       	add	r14, r10
    19ce:	fb 1c       	adc	r15, r11
    19d0:	0c 1d       	adc	r16, r12
    19d2:	1d 1d       	adc	r17, r13
    19d4:	e4 82       	std	Z+4, r14	; 0x04
    19d6:	f5 82       	std	Z+5, r15	; 0x05
    19d8:	06 83       	std	Z+6, r16	; 0x06
    19da:	17 83       	std	Z+7, r17	; 0x07
    19dc:	83 e0       	ldi	r24, 0x03	; 3
    19de:	80 83       	st	Z, r24
    19e0:	24 81       	ldd	r18, Z+4	; 0x04
    19e2:	35 81       	ldd	r19, Z+5	; 0x05
    19e4:	46 81       	ldd	r20, Z+6	; 0x06
    19e6:	57 81       	ldd	r21, Z+7	; 0x07
    19e8:	57 ff       	sbrs	r21, 7
    19ea:	1a c0       	rjmp	.+52     	; 0x1a20 <_fpadd_parts+0x286>
    19ec:	c9 01       	movw	r24, r18
    19ee:	aa 27       	eor	r26, r26
    19f0:	97 fd       	sbrc	r25, 7
    19f2:	a0 95       	com	r26
    19f4:	ba 2f       	mov	r27, r26
    19f6:	81 70       	andi	r24, 0x01	; 1
    19f8:	90 70       	andi	r25, 0x00	; 0
    19fa:	a0 70       	andi	r26, 0x00	; 0
    19fc:	b0 70       	andi	r27, 0x00	; 0
    19fe:	56 95       	lsr	r21
    1a00:	47 95       	ror	r20
    1a02:	37 95       	ror	r19
    1a04:	27 95       	ror	r18
    1a06:	82 2b       	or	r24, r18
    1a08:	93 2b       	or	r25, r19
    1a0a:	a4 2b       	or	r26, r20
    1a0c:	b5 2b       	or	r27, r21
    1a0e:	84 83       	std	Z+4, r24	; 0x04
    1a10:	95 83       	std	Z+5, r25	; 0x05
    1a12:	a6 83       	std	Z+6, r26	; 0x06
    1a14:	b7 83       	std	Z+7, r27	; 0x07
    1a16:	82 81       	ldd	r24, Z+2	; 0x02
    1a18:	93 81       	ldd	r25, Z+3	; 0x03
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	93 83       	std	Z+3, r25	; 0x03
    1a1e:	82 83       	std	Z+2, r24	; 0x02
    1a20:	df 01       	movw	r26, r30
    1a22:	01 c0       	rjmp	.+2      	; 0x1a26 <_fpadd_parts+0x28c>
    1a24:	d2 01       	movw	r26, r4
    1a26:	cd 01       	movw	r24, r26
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	e2 e1       	ldi	r30, 0x12	; 18
    1a2e:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__epilogue_restores__>

00001a32 <__subsf3>:
    1a32:	a0 e2       	ldi	r26, 0x20	; 32
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	ef e1       	ldi	r30, 0x1F	; 31
    1a38:	fd e0       	ldi	r31, 0x0D	; 13
    1a3a:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__prologue_saves__+0x18>
    1a3e:	69 83       	std	Y+1, r22	; 0x01
    1a40:	7a 83       	std	Y+2, r23	; 0x02
    1a42:	8b 83       	std	Y+3, r24	; 0x03
    1a44:	9c 83       	std	Y+4, r25	; 0x04
    1a46:	2d 83       	std	Y+5, r18	; 0x05
    1a48:	3e 83       	std	Y+6, r19	; 0x06
    1a4a:	4f 83       	std	Y+7, r20	; 0x07
    1a4c:	58 87       	std	Y+8, r21	; 0x08
    1a4e:	e9 e0       	ldi	r30, 0x09	; 9
    1a50:	ee 2e       	mov	r14, r30
    1a52:	f1 2c       	mov	r15, r1
    1a54:	ec 0e       	add	r14, r28
    1a56:	fd 1e       	adc	r15, r29
    1a58:	ce 01       	movw	r24, r28
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	b7 01       	movw	r22, r14
    1a5e:	0e 94 2a 10 	call	0x2054	; 0x2054 <__unpack_f>
    1a62:	8e 01       	movw	r16, r28
    1a64:	0f 5e       	subi	r16, 0xEF	; 239
    1a66:	1f 4f       	sbci	r17, 0xFF	; 255
    1a68:	ce 01       	movw	r24, r28
    1a6a:	05 96       	adiw	r24, 0x05	; 5
    1a6c:	b8 01       	movw	r22, r16
    1a6e:	0e 94 2a 10 	call	0x2054	; 0x2054 <__unpack_f>
    1a72:	8a 89       	ldd	r24, Y+18	; 0x12
    1a74:	91 e0       	ldi	r25, 0x01	; 1
    1a76:	89 27       	eor	r24, r25
    1a78:	8a 8b       	std	Y+18, r24	; 0x12
    1a7a:	c7 01       	movw	r24, r14
    1a7c:	b8 01       	movw	r22, r16
    1a7e:	ae 01       	movw	r20, r28
    1a80:	47 5e       	subi	r20, 0xE7	; 231
    1a82:	5f 4f       	sbci	r21, 0xFF	; 255
    1a84:	0e 94 cd 0b 	call	0x179a	; 0x179a <_fpadd_parts>
    1a88:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__pack_f>
    1a8c:	a0 96       	adiw	r28, 0x20	; 32
    1a8e:	e6 e0       	ldi	r30, 0x06	; 6
    1a90:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__epilogue_restores__+0x18>

00001a94 <__addsf3>:
    1a94:	a0 e2       	ldi	r26, 0x20	; 32
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e0 e5       	ldi	r30, 0x50	; 80
    1a9a:	fd e0       	ldi	r31, 0x0D	; 13
    1a9c:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__prologue_saves__+0x18>
    1aa0:	69 83       	std	Y+1, r22	; 0x01
    1aa2:	7a 83       	std	Y+2, r23	; 0x02
    1aa4:	8b 83       	std	Y+3, r24	; 0x03
    1aa6:	9c 83       	std	Y+4, r25	; 0x04
    1aa8:	2d 83       	std	Y+5, r18	; 0x05
    1aaa:	3e 83       	std	Y+6, r19	; 0x06
    1aac:	4f 83       	std	Y+7, r20	; 0x07
    1aae:	58 87       	std	Y+8, r21	; 0x08
    1ab0:	f9 e0       	ldi	r31, 0x09	; 9
    1ab2:	ef 2e       	mov	r14, r31
    1ab4:	f1 2c       	mov	r15, r1
    1ab6:	ec 0e       	add	r14, r28
    1ab8:	fd 1e       	adc	r15, r29
    1aba:	ce 01       	movw	r24, r28
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	b7 01       	movw	r22, r14
    1ac0:	0e 94 2a 10 	call	0x2054	; 0x2054 <__unpack_f>
    1ac4:	8e 01       	movw	r16, r28
    1ac6:	0f 5e       	subi	r16, 0xEF	; 239
    1ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aca:	ce 01       	movw	r24, r28
    1acc:	05 96       	adiw	r24, 0x05	; 5
    1ace:	b8 01       	movw	r22, r16
    1ad0:	0e 94 2a 10 	call	0x2054	; 0x2054 <__unpack_f>
    1ad4:	c7 01       	movw	r24, r14
    1ad6:	b8 01       	movw	r22, r16
    1ad8:	ae 01       	movw	r20, r28
    1ada:	47 5e       	subi	r20, 0xE7	; 231
    1adc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ade:	0e 94 cd 0b 	call	0x179a	; 0x179a <_fpadd_parts>
    1ae2:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__pack_f>
    1ae6:	a0 96       	adiw	r28, 0x20	; 32
    1ae8:	e6 e0       	ldi	r30, 0x06	; 6
    1aea:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__epilogue_restores__+0x18>

00001aee <__mulsf3>:
    1aee:	a0 e2       	ldi	r26, 0x20	; 32
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	ed e7       	ldi	r30, 0x7D	; 125
    1af4:	fd e0       	ldi	r31, 0x0D	; 13
    1af6:	0c 94 22 11 	jmp	0x2244	; 0x2244 <__prologue_saves__>
    1afa:	69 83       	std	Y+1, r22	; 0x01
    1afc:	7a 83       	std	Y+2, r23	; 0x02
    1afe:	8b 83       	std	Y+3, r24	; 0x03
    1b00:	9c 83       	std	Y+4, r25	; 0x04
    1b02:	2d 83       	std	Y+5, r18	; 0x05
    1b04:	3e 83       	std	Y+6, r19	; 0x06
    1b06:	4f 83       	std	Y+7, r20	; 0x07
    1b08:	58 87       	std	Y+8, r21	; 0x08
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	be 01       	movw	r22, r28
    1b10:	67 5f       	subi	r22, 0xF7	; 247
    1b12:	7f 4f       	sbci	r23, 0xFF	; 255
    1b14:	0e 94 2a 10 	call	0x2054	; 0x2054 <__unpack_f>
    1b18:	ce 01       	movw	r24, r28
    1b1a:	05 96       	adiw	r24, 0x05	; 5
    1b1c:	be 01       	movw	r22, r28
    1b1e:	6f 5e       	subi	r22, 0xEF	; 239
    1b20:	7f 4f       	sbci	r23, 0xFF	; 255
    1b22:	0e 94 2a 10 	call	0x2054	; 0x2054 <__unpack_f>
    1b26:	99 85       	ldd	r25, Y+9	; 0x09
    1b28:	92 30       	cpi	r25, 0x02	; 2
    1b2a:	88 f0       	brcs	.+34     	; 0x1b4e <__mulsf3+0x60>
    1b2c:	89 89       	ldd	r24, Y+17	; 0x11
    1b2e:	82 30       	cpi	r24, 0x02	; 2
    1b30:	c8 f0       	brcs	.+50     	; 0x1b64 <__mulsf3+0x76>
    1b32:	94 30       	cpi	r25, 0x04	; 4
    1b34:	19 f4       	brne	.+6      	; 0x1b3c <__mulsf3+0x4e>
    1b36:	82 30       	cpi	r24, 0x02	; 2
    1b38:	51 f4       	brne	.+20     	; 0x1b4e <__mulsf3+0x60>
    1b3a:	04 c0       	rjmp	.+8      	; 0x1b44 <__mulsf3+0x56>
    1b3c:	84 30       	cpi	r24, 0x04	; 4
    1b3e:	29 f4       	brne	.+10     	; 0x1b4a <__mulsf3+0x5c>
    1b40:	92 30       	cpi	r25, 0x02	; 2
    1b42:	81 f4       	brne	.+32     	; 0x1b64 <__mulsf3+0x76>
    1b44:	87 e6       	ldi	r24, 0x67	; 103
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	c6 c0       	rjmp	.+396    	; 0x1cd6 <__mulsf3+0x1e8>
    1b4a:	92 30       	cpi	r25, 0x02	; 2
    1b4c:	49 f4       	brne	.+18     	; 0x1b60 <__mulsf3+0x72>
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	8a 89       	ldd	r24, Y+18	; 0x12
    1b54:	98 13       	cpse	r25, r24
    1b56:	21 e0       	ldi	r18, 0x01	; 1
    1b58:	2a 87       	std	Y+10, r18	; 0x0a
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	09 96       	adiw	r24, 0x09	; 9
    1b5e:	bb c0       	rjmp	.+374    	; 0x1cd6 <__mulsf3+0x1e8>
    1b60:	82 30       	cpi	r24, 0x02	; 2
    1b62:	49 f4       	brne	.+18     	; 0x1b76 <__mulsf3+0x88>
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b68:	8a 89       	ldd	r24, Y+18	; 0x12
    1b6a:	98 13       	cpse	r25, r24
    1b6c:	21 e0       	ldi	r18, 0x01	; 1
    1b6e:	2a 8b       	std	Y+18, r18	; 0x12
    1b70:	ce 01       	movw	r24, r28
    1b72:	41 96       	adiw	r24, 0x11	; 17
    1b74:	b0 c0       	rjmp	.+352    	; 0x1cd6 <__mulsf3+0x1e8>
    1b76:	2d 84       	ldd	r2, Y+13	; 0x0d
    1b78:	3e 84       	ldd	r3, Y+14	; 0x0e
    1b7a:	4f 84       	ldd	r4, Y+15	; 0x0f
    1b7c:	58 88       	ldd	r5, Y+16	; 0x10
    1b7e:	6d 88       	ldd	r6, Y+21	; 0x15
    1b80:	7e 88       	ldd	r7, Y+22	; 0x16
    1b82:	8f 88       	ldd	r8, Y+23	; 0x17
    1b84:	98 8c       	ldd	r9, Y+24	; 0x18
    1b86:	ee 24       	eor	r14, r14
    1b88:	ff 24       	eor	r15, r15
    1b8a:	87 01       	movw	r16, r14
    1b8c:	aa 24       	eor	r10, r10
    1b8e:	bb 24       	eor	r11, r11
    1b90:	65 01       	movw	r12, r10
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	50 e0       	ldi	r21, 0x00	; 0
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	e0 e0       	ldi	r30, 0x00	; 0
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	c1 01       	movw	r24, r2
    1ba0:	81 70       	andi	r24, 0x01	; 1
    1ba2:	90 70       	andi	r25, 0x00	; 0
    1ba4:	89 2b       	or	r24, r25
    1ba6:	e9 f0       	breq	.+58     	; 0x1be2 <__mulsf3+0xf4>
    1ba8:	e6 0c       	add	r14, r6
    1baa:	f7 1c       	adc	r15, r7
    1bac:	08 1d       	adc	r16, r8
    1bae:	19 1d       	adc	r17, r9
    1bb0:	9a 01       	movw	r18, r20
    1bb2:	ab 01       	movw	r20, r22
    1bb4:	2a 0d       	add	r18, r10
    1bb6:	3b 1d       	adc	r19, r11
    1bb8:	4c 1d       	adc	r20, r12
    1bba:	5d 1d       	adc	r21, r13
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e0       	ldi	r26, 0x00	; 0
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e6 14       	cp	r14, r6
    1bc6:	f7 04       	cpc	r15, r7
    1bc8:	08 05       	cpc	r16, r8
    1bca:	19 05       	cpc	r17, r9
    1bcc:	20 f4       	brcc	.+8      	; 0x1bd6 <__mulsf3+0xe8>
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	a0 e0       	ldi	r26, 0x00	; 0
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	ba 01       	movw	r22, r20
    1bd8:	a9 01       	movw	r20, r18
    1bda:	48 0f       	add	r20, r24
    1bdc:	59 1f       	adc	r21, r25
    1bde:	6a 1f       	adc	r22, r26
    1be0:	7b 1f       	adc	r23, r27
    1be2:	aa 0c       	add	r10, r10
    1be4:	bb 1c       	adc	r11, r11
    1be6:	cc 1c       	adc	r12, r12
    1be8:	dd 1c       	adc	r13, r13
    1bea:	97 fe       	sbrs	r9, 7
    1bec:	08 c0       	rjmp	.+16     	; 0x1bfe <__mulsf3+0x110>
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a0 e0       	ldi	r26, 0x00	; 0
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	a8 2a       	or	r10, r24
    1bf8:	b9 2a       	or	r11, r25
    1bfa:	ca 2a       	or	r12, r26
    1bfc:	db 2a       	or	r13, r27
    1bfe:	31 96       	adiw	r30, 0x01	; 1
    1c00:	e0 32       	cpi	r30, 0x20	; 32
    1c02:	f1 05       	cpc	r31, r1
    1c04:	49 f0       	breq	.+18     	; 0x1c18 <__mulsf3+0x12a>
    1c06:	66 0c       	add	r6, r6
    1c08:	77 1c       	adc	r7, r7
    1c0a:	88 1c       	adc	r8, r8
    1c0c:	99 1c       	adc	r9, r9
    1c0e:	56 94       	lsr	r5
    1c10:	47 94       	ror	r4
    1c12:	37 94       	ror	r3
    1c14:	27 94       	ror	r2
    1c16:	c3 cf       	rjmp	.-122    	; 0x1b9e <__mulsf3+0xb0>
    1c18:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c1a:	ea 89       	ldd	r30, Y+18	; 0x12
    1c1c:	2b 89       	ldd	r18, Y+19	; 0x13
    1c1e:	3c 89       	ldd	r19, Y+20	; 0x14
    1c20:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c22:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c24:	28 0f       	add	r18, r24
    1c26:	39 1f       	adc	r19, r25
    1c28:	2e 5f       	subi	r18, 0xFE	; 254
    1c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2c:	17 c0       	rjmp	.+46     	; 0x1c5c <__mulsf3+0x16e>
    1c2e:	ca 01       	movw	r24, r20
    1c30:	81 70       	andi	r24, 0x01	; 1
    1c32:	90 70       	andi	r25, 0x00	; 0
    1c34:	89 2b       	or	r24, r25
    1c36:	61 f0       	breq	.+24     	; 0x1c50 <__mulsf3+0x162>
    1c38:	16 95       	lsr	r17
    1c3a:	07 95       	ror	r16
    1c3c:	f7 94       	ror	r15
    1c3e:	e7 94       	ror	r14
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a0 e0       	ldi	r26, 0x00	; 0
    1c46:	b0 e8       	ldi	r27, 0x80	; 128
    1c48:	e8 2a       	or	r14, r24
    1c4a:	f9 2a       	or	r15, r25
    1c4c:	0a 2b       	or	r16, r26
    1c4e:	1b 2b       	or	r17, r27
    1c50:	76 95       	lsr	r23
    1c52:	67 95       	ror	r22
    1c54:	57 95       	ror	r21
    1c56:	47 95       	ror	r20
    1c58:	2f 5f       	subi	r18, 0xFF	; 255
    1c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5c:	77 fd       	sbrc	r23, 7
    1c5e:	e7 cf       	rjmp	.-50     	; 0x1c2e <__mulsf3+0x140>
    1c60:	0c c0       	rjmp	.+24     	; 0x1c7a <__mulsf3+0x18c>
    1c62:	44 0f       	add	r20, r20
    1c64:	55 1f       	adc	r21, r21
    1c66:	66 1f       	adc	r22, r22
    1c68:	77 1f       	adc	r23, r23
    1c6a:	17 fd       	sbrc	r17, 7
    1c6c:	41 60       	ori	r20, 0x01	; 1
    1c6e:	ee 0c       	add	r14, r14
    1c70:	ff 1c       	adc	r15, r15
    1c72:	00 1f       	adc	r16, r16
    1c74:	11 1f       	adc	r17, r17
    1c76:	21 50       	subi	r18, 0x01	; 1
    1c78:	30 40       	sbci	r19, 0x00	; 0
    1c7a:	40 30       	cpi	r20, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	59 07       	cpc	r21, r25
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	69 07       	cpc	r22, r25
    1c84:	90 e4       	ldi	r25, 0x40	; 64
    1c86:	79 07       	cpc	r23, r25
    1c88:	60 f3       	brcs	.-40     	; 0x1c62 <__mulsf3+0x174>
    1c8a:	2b 8f       	std	Y+27, r18	; 0x1b
    1c8c:	3c 8f       	std	Y+28, r19	; 0x1c
    1c8e:	db 01       	movw	r26, r22
    1c90:	ca 01       	movw	r24, r20
    1c92:	8f 77       	andi	r24, 0x7F	; 127
    1c94:	90 70       	andi	r25, 0x00	; 0
    1c96:	a0 70       	andi	r26, 0x00	; 0
    1c98:	b0 70       	andi	r27, 0x00	; 0
    1c9a:	80 34       	cpi	r24, 0x40	; 64
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	a1 05       	cpc	r26, r1
    1ca0:	b1 05       	cpc	r27, r1
    1ca2:	61 f4       	brne	.+24     	; 0x1cbc <__mulsf3+0x1ce>
    1ca4:	47 fd       	sbrc	r20, 7
    1ca6:	0a c0       	rjmp	.+20     	; 0x1cbc <__mulsf3+0x1ce>
    1ca8:	e1 14       	cp	r14, r1
    1caa:	f1 04       	cpc	r15, r1
    1cac:	01 05       	cpc	r16, r1
    1cae:	11 05       	cpc	r17, r1
    1cb0:	29 f0       	breq	.+10     	; 0x1cbc <__mulsf3+0x1ce>
    1cb2:	40 5c       	subi	r20, 0xC0	; 192
    1cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb6:	6f 4f       	sbci	r22, 0xFF	; 255
    1cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cba:	40 78       	andi	r20, 0x80	; 128
    1cbc:	1a 8e       	std	Y+26, r1	; 0x1a
    1cbe:	fe 17       	cp	r31, r30
    1cc0:	11 f0       	breq	.+4      	; 0x1cc6 <__mulsf3+0x1d8>
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	8a 8f       	std	Y+26, r24	; 0x1a
    1cc6:	4d 8f       	std	Y+29, r20	; 0x1d
    1cc8:	5e 8f       	std	Y+30, r21	; 0x1e
    1cca:	6f 8f       	std	Y+31, r22	; 0x1f
    1ccc:	78 a3       	std	Y+32, r23	; 0x20
    1cce:	83 e0       	ldi	r24, 0x03	; 3
    1cd0:	89 8f       	std	Y+25, r24	; 0x19
    1cd2:	ce 01       	movw	r24, r28
    1cd4:	49 96       	adiw	r24, 0x19	; 25
    1cd6:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__pack_f>
    1cda:	a0 96       	adiw	r28, 0x20	; 32
    1cdc:	e2 e1       	ldi	r30, 0x12	; 18
    1cde:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__epilogue_restores__>

00001ce2 <__gtsf2>:
    1ce2:	a8 e1       	ldi	r26, 0x18	; 24
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e7 e7       	ldi	r30, 0x77	; 119
    1ce8:	fe e0       	ldi	r31, 0x0E	; 14
    1cea:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__prologue_saves__+0x18>
    1cee:	69 83       	std	Y+1, r22	; 0x01
    1cf0:	7a 83       	std	Y+2, r23	; 0x02
    1cf2:	8b 83       	std	Y+3, r24	; 0x03
    1cf4:	9c 83       	std	Y+4, r25	; 0x04
    1cf6:	2d 83       	std	Y+5, r18	; 0x05
    1cf8:	3e 83       	std	Y+6, r19	; 0x06
    1cfa:	4f 83       	std	Y+7, r20	; 0x07
    1cfc:	58 87       	std	Y+8, r21	; 0x08
    1cfe:	89 e0       	ldi	r24, 0x09	; 9
    1d00:	e8 2e       	mov	r14, r24
    1d02:	f1 2c       	mov	r15, r1
    1d04:	ec 0e       	add	r14, r28
    1d06:	fd 1e       	adc	r15, r29
    1d08:	ce 01       	movw	r24, r28
    1d0a:	01 96       	adiw	r24, 0x01	; 1
    1d0c:	b7 01       	movw	r22, r14
    1d0e:	0e 94 2a 10 	call	0x2054	; 0x2054 <__unpack_f>
    1d12:	8e 01       	movw	r16, r28
    1d14:	0f 5e       	subi	r16, 0xEF	; 239
    1d16:	1f 4f       	sbci	r17, 0xFF	; 255
    1d18:	ce 01       	movw	r24, r28
    1d1a:	05 96       	adiw	r24, 0x05	; 5
    1d1c:	b8 01       	movw	r22, r16
    1d1e:	0e 94 2a 10 	call	0x2054	; 0x2054 <__unpack_f>
    1d22:	89 85       	ldd	r24, Y+9	; 0x09
    1d24:	82 30       	cpi	r24, 0x02	; 2
    1d26:	40 f0       	brcs	.+16     	; 0x1d38 <__gtsf2+0x56>
    1d28:	89 89       	ldd	r24, Y+17	; 0x11
    1d2a:	82 30       	cpi	r24, 0x02	; 2
    1d2c:	28 f0       	brcs	.+10     	; 0x1d38 <__gtsf2+0x56>
    1d2e:	c7 01       	movw	r24, r14
    1d30:	b8 01       	movw	r22, r16
    1d32:	0e 94 a2 10 	call	0x2144	; 0x2144 <__fpcmp_parts_f>
    1d36:	01 c0       	rjmp	.+2      	; 0x1d3a <__gtsf2+0x58>
    1d38:	8f ef       	ldi	r24, 0xFF	; 255
    1d3a:	68 96       	adiw	r28, 0x18	; 24
    1d3c:	e6 e0       	ldi	r30, 0x06	; 6
    1d3e:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__epilogue_restores__+0x18>

00001d42 <__gesf2>:
    1d42:	a8 e1       	ldi	r26, 0x18	; 24
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e7 ea       	ldi	r30, 0xA7	; 167
    1d48:	fe e0       	ldi	r31, 0x0E	; 14
    1d4a:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__prologue_saves__+0x18>
    1d4e:	69 83       	std	Y+1, r22	; 0x01
    1d50:	7a 83       	std	Y+2, r23	; 0x02
    1d52:	8b 83       	std	Y+3, r24	; 0x03
    1d54:	9c 83       	std	Y+4, r25	; 0x04
    1d56:	2d 83       	std	Y+5, r18	; 0x05
    1d58:	3e 83       	std	Y+6, r19	; 0x06
    1d5a:	4f 83       	std	Y+7, r20	; 0x07
    1d5c:	58 87       	std	Y+8, r21	; 0x08
    1d5e:	89 e0       	ldi	r24, 0x09	; 9
    1d60:	e8 2e       	mov	r14, r24
    1d62:	f1 2c       	mov	r15, r1
    1d64:	ec 0e       	add	r14, r28
    1d66:	fd 1e       	adc	r15, r29
    1d68:	ce 01       	movw	r24, r28
    1d6a:	01 96       	adiw	r24, 0x01	; 1
    1d6c:	b7 01       	movw	r22, r14
    1d6e:	0e 94 2a 10 	call	0x2054	; 0x2054 <__unpack_f>
    1d72:	8e 01       	movw	r16, r28
    1d74:	0f 5e       	subi	r16, 0xEF	; 239
    1d76:	1f 4f       	sbci	r17, 0xFF	; 255
    1d78:	ce 01       	movw	r24, r28
    1d7a:	05 96       	adiw	r24, 0x05	; 5
    1d7c:	b8 01       	movw	r22, r16
    1d7e:	0e 94 2a 10 	call	0x2054	; 0x2054 <__unpack_f>
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	82 30       	cpi	r24, 0x02	; 2
    1d86:	40 f0       	brcs	.+16     	; 0x1d98 <__gesf2+0x56>
    1d88:	89 89       	ldd	r24, Y+17	; 0x11
    1d8a:	82 30       	cpi	r24, 0x02	; 2
    1d8c:	28 f0       	brcs	.+10     	; 0x1d98 <__gesf2+0x56>
    1d8e:	c7 01       	movw	r24, r14
    1d90:	b8 01       	movw	r22, r16
    1d92:	0e 94 a2 10 	call	0x2144	; 0x2144 <__fpcmp_parts_f>
    1d96:	01 c0       	rjmp	.+2      	; 0x1d9a <__gesf2+0x58>
    1d98:	8f ef       	ldi	r24, 0xFF	; 255
    1d9a:	68 96       	adiw	r28, 0x18	; 24
    1d9c:	e6 e0       	ldi	r30, 0x06	; 6
    1d9e:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__epilogue_restores__+0x18>

00001da2 <__ltsf2>:
    1da2:	a8 e1       	ldi	r26, 0x18	; 24
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e7 ed       	ldi	r30, 0xD7	; 215
    1da8:	fe e0       	ldi	r31, 0x0E	; 14
    1daa:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__prologue_saves__+0x18>
    1dae:	69 83       	std	Y+1, r22	; 0x01
    1db0:	7a 83       	std	Y+2, r23	; 0x02
    1db2:	8b 83       	std	Y+3, r24	; 0x03
    1db4:	9c 83       	std	Y+4, r25	; 0x04
    1db6:	2d 83       	std	Y+5, r18	; 0x05
    1db8:	3e 83       	std	Y+6, r19	; 0x06
    1dba:	4f 83       	std	Y+7, r20	; 0x07
    1dbc:	58 87       	std	Y+8, r21	; 0x08
    1dbe:	89 e0       	ldi	r24, 0x09	; 9
    1dc0:	e8 2e       	mov	r14, r24
    1dc2:	f1 2c       	mov	r15, r1
    1dc4:	ec 0e       	add	r14, r28
    1dc6:	fd 1e       	adc	r15, r29
    1dc8:	ce 01       	movw	r24, r28
    1dca:	01 96       	adiw	r24, 0x01	; 1
    1dcc:	b7 01       	movw	r22, r14
    1dce:	0e 94 2a 10 	call	0x2054	; 0x2054 <__unpack_f>
    1dd2:	8e 01       	movw	r16, r28
    1dd4:	0f 5e       	subi	r16, 0xEF	; 239
    1dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd8:	ce 01       	movw	r24, r28
    1dda:	05 96       	adiw	r24, 0x05	; 5
    1ddc:	b8 01       	movw	r22, r16
    1dde:	0e 94 2a 10 	call	0x2054	; 0x2054 <__unpack_f>
    1de2:	89 85       	ldd	r24, Y+9	; 0x09
    1de4:	82 30       	cpi	r24, 0x02	; 2
    1de6:	40 f0       	brcs	.+16     	; 0x1df8 <__ltsf2+0x56>
    1de8:	89 89       	ldd	r24, Y+17	; 0x11
    1dea:	82 30       	cpi	r24, 0x02	; 2
    1dec:	28 f0       	brcs	.+10     	; 0x1df8 <__ltsf2+0x56>
    1dee:	c7 01       	movw	r24, r14
    1df0:	b8 01       	movw	r22, r16
    1df2:	0e 94 a2 10 	call	0x2144	; 0x2144 <__fpcmp_parts_f>
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <__ltsf2+0x58>
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	68 96       	adiw	r28, 0x18	; 24
    1dfc:	e6 e0       	ldi	r30, 0x06	; 6
    1dfe:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__epilogue_restores__+0x18>

00001e02 <__fixsfsi>:
    1e02:	ac e0       	ldi	r26, 0x0C	; 12
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e7 e0       	ldi	r30, 0x07	; 7
    1e08:	ff e0       	ldi	r31, 0x0F	; 15
    1e0a:	0c 94 32 11 	jmp	0x2264	; 0x2264 <__prologue_saves__+0x20>
    1e0e:	69 83       	std	Y+1, r22	; 0x01
    1e10:	7a 83       	std	Y+2, r23	; 0x02
    1e12:	8b 83       	std	Y+3, r24	; 0x03
    1e14:	9c 83       	std	Y+4, r25	; 0x04
    1e16:	ce 01       	movw	r24, r28
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	be 01       	movw	r22, r28
    1e1c:	6b 5f       	subi	r22, 0xFB	; 251
    1e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e20:	0e 94 2a 10 	call	0x2054	; 0x2054 <__unpack_f>
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	82 30       	cpi	r24, 0x02	; 2
    1e28:	61 f1       	breq	.+88     	; 0x1e82 <__fixsfsi+0x80>
    1e2a:	82 30       	cpi	r24, 0x02	; 2
    1e2c:	50 f1       	brcs	.+84     	; 0x1e82 <__fixsfsi+0x80>
    1e2e:	84 30       	cpi	r24, 0x04	; 4
    1e30:	21 f4       	brne	.+8      	; 0x1e3a <__fixsfsi+0x38>
    1e32:	8e 81       	ldd	r24, Y+6	; 0x06
    1e34:	88 23       	and	r24, r24
    1e36:	51 f1       	breq	.+84     	; 0x1e8c <__fixsfsi+0x8a>
    1e38:	2e c0       	rjmp	.+92     	; 0x1e96 <__fixsfsi+0x94>
    1e3a:	2f 81       	ldd	r18, Y+7	; 0x07
    1e3c:	38 85       	ldd	r19, Y+8	; 0x08
    1e3e:	37 fd       	sbrc	r19, 7
    1e40:	20 c0       	rjmp	.+64     	; 0x1e82 <__fixsfsi+0x80>
    1e42:	6e 81       	ldd	r22, Y+6	; 0x06
    1e44:	2f 31       	cpi	r18, 0x1F	; 31
    1e46:	31 05       	cpc	r19, r1
    1e48:	1c f0       	brlt	.+6      	; 0x1e50 <__fixsfsi+0x4e>
    1e4a:	66 23       	and	r22, r22
    1e4c:	f9 f0       	breq	.+62     	; 0x1e8c <__fixsfsi+0x8a>
    1e4e:	23 c0       	rjmp	.+70     	; 0x1e96 <__fixsfsi+0x94>
    1e50:	8e e1       	ldi	r24, 0x1E	; 30
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	82 1b       	sub	r24, r18
    1e56:	93 0b       	sbc	r25, r19
    1e58:	29 85       	ldd	r18, Y+9	; 0x09
    1e5a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e5c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e5e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e60:	04 c0       	rjmp	.+8      	; 0x1e6a <__fixsfsi+0x68>
    1e62:	56 95       	lsr	r21
    1e64:	47 95       	ror	r20
    1e66:	37 95       	ror	r19
    1e68:	27 95       	ror	r18
    1e6a:	8a 95       	dec	r24
    1e6c:	d2 f7       	brpl	.-12     	; 0x1e62 <__fixsfsi+0x60>
    1e6e:	66 23       	and	r22, r22
    1e70:	b1 f0       	breq	.+44     	; 0x1e9e <__fixsfsi+0x9c>
    1e72:	50 95       	com	r21
    1e74:	40 95       	com	r20
    1e76:	30 95       	com	r19
    1e78:	21 95       	neg	r18
    1e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7c:	4f 4f       	sbci	r20, 0xFF	; 255
    1e7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e80:	0e c0       	rjmp	.+28     	; 0x1e9e <__fixsfsi+0x9c>
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e0       	ldi	r20, 0x00	; 0
    1e88:	50 e0       	ldi	r21, 0x00	; 0
    1e8a:	09 c0       	rjmp	.+18     	; 0x1e9e <__fixsfsi+0x9c>
    1e8c:	2f ef       	ldi	r18, 0xFF	; 255
    1e8e:	3f ef       	ldi	r19, 0xFF	; 255
    1e90:	4f ef       	ldi	r20, 0xFF	; 255
    1e92:	5f e7       	ldi	r21, 0x7F	; 127
    1e94:	04 c0       	rjmp	.+8      	; 0x1e9e <__fixsfsi+0x9c>
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	50 e8       	ldi	r21, 0x80	; 128
    1e9e:	b9 01       	movw	r22, r18
    1ea0:	ca 01       	movw	r24, r20
    1ea2:	2c 96       	adiw	r28, 0x0c	; 12
    1ea4:	e2 e0       	ldi	r30, 0x02	; 2
    1ea6:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__epilogue_restores__+0x20>

00001eaa <__pack_f>:
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	e4 80       	ldd	r14, Z+4	; 0x04
    1eb8:	f5 80       	ldd	r15, Z+5	; 0x05
    1eba:	06 81       	ldd	r16, Z+6	; 0x06
    1ebc:	17 81       	ldd	r17, Z+7	; 0x07
    1ebe:	d1 80       	ldd	r13, Z+1	; 0x01
    1ec0:	80 81       	ld	r24, Z
    1ec2:	82 30       	cpi	r24, 0x02	; 2
    1ec4:	48 f4       	brcc	.+18     	; 0x1ed8 <__pack_f+0x2e>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a0 e1       	ldi	r26, 0x10	; 16
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e8 2a       	or	r14, r24
    1ed0:	f9 2a       	or	r15, r25
    1ed2:	0a 2b       	or	r16, r26
    1ed4:	1b 2b       	or	r17, r27
    1ed6:	a5 c0       	rjmp	.+330    	; 0x2022 <__pack_f+0x178>
    1ed8:	84 30       	cpi	r24, 0x04	; 4
    1eda:	09 f4       	brne	.+2      	; 0x1ede <__pack_f+0x34>
    1edc:	9f c0       	rjmp	.+318    	; 0x201c <__pack_f+0x172>
    1ede:	82 30       	cpi	r24, 0x02	; 2
    1ee0:	21 f4       	brne	.+8      	; 0x1eea <__pack_f+0x40>
    1ee2:	ee 24       	eor	r14, r14
    1ee4:	ff 24       	eor	r15, r15
    1ee6:	87 01       	movw	r16, r14
    1ee8:	05 c0       	rjmp	.+10     	; 0x1ef4 <__pack_f+0x4a>
    1eea:	e1 14       	cp	r14, r1
    1eec:	f1 04       	cpc	r15, r1
    1eee:	01 05       	cpc	r16, r1
    1ef0:	11 05       	cpc	r17, r1
    1ef2:	19 f4       	brne	.+6      	; 0x1efa <__pack_f+0x50>
    1ef4:	e0 e0       	ldi	r30, 0x00	; 0
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	96 c0       	rjmp	.+300    	; 0x2026 <__pack_f+0x17c>
    1efa:	62 81       	ldd	r22, Z+2	; 0x02
    1efc:	73 81       	ldd	r23, Z+3	; 0x03
    1efe:	9f ef       	ldi	r25, 0xFF	; 255
    1f00:	62 38       	cpi	r22, 0x82	; 130
    1f02:	79 07       	cpc	r23, r25
    1f04:	0c f0       	brlt	.+2      	; 0x1f08 <__pack_f+0x5e>
    1f06:	5b c0       	rjmp	.+182    	; 0x1fbe <__pack_f+0x114>
    1f08:	22 e8       	ldi	r18, 0x82	; 130
    1f0a:	3f ef       	ldi	r19, 0xFF	; 255
    1f0c:	26 1b       	sub	r18, r22
    1f0e:	37 0b       	sbc	r19, r23
    1f10:	2a 31       	cpi	r18, 0x1A	; 26
    1f12:	31 05       	cpc	r19, r1
    1f14:	2c f0       	brlt	.+10     	; 0x1f20 <__pack_f+0x76>
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	50 e0       	ldi	r21, 0x00	; 0
    1f1e:	2a c0       	rjmp	.+84     	; 0x1f74 <__pack_f+0xca>
    1f20:	b8 01       	movw	r22, r16
    1f22:	a7 01       	movw	r20, r14
    1f24:	02 2e       	mov	r0, r18
    1f26:	04 c0       	rjmp	.+8      	; 0x1f30 <__pack_f+0x86>
    1f28:	76 95       	lsr	r23
    1f2a:	67 95       	ror	r22
    1f2c:	57 95       	ror	r21
    1f2e:	47 95       	ror	r20
    1f30:	0a 94       	dec	r0
    1f32:	d2 f7       	brpl	.-12     	; 0x1f28 <__pack_f+0x7e>
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	a0 e0       	ldi	r26, 0x00	; 0
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	04 c0       	rjmp	.+8      	; 0x1f46 <__pack_f+0x9c>
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	aa 1f       	adc	r26, r26
    1f44:	bb 1f       	adc	r27, r27
    1f46:	2a 95       	dec	r18
    1f48:	d2 f7       	brpl	.-12     	; 0x1f3e <__pack_f+0x94>
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	a1 09       	sbc	r26, r1
    1f4e:	b1 09       	sbc	r27, r1
    1f50:	8e 21       	and	r24, r14
    1f52:	9f 21       	and	r25, r15
    1f54:	a0 23       	and	r26, r16
    1f56:	b1 23       	and	r27, r17
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	a1 05       	cpc	r26, r1
    1f5c:	b1 05       	cpc	r27, r1
    1f5e:	21 f0       	breq	.+8      	; 0x1f68 <__pack_f+0xbe>
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a0 e0       	ldi	r26, 0x00	; 0
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	9a 01       	movw	r18, r20
    1f6a:	ab 01       	movw	r20, r22
    1f6c:	28 2b       	or	r18, r24
    1f6e:	39 2b       	or	r19, r25
    1f70:	4a 2b       	or	r20, r26
    1f72:	5b 2b       	or	r21, r27
    1f74:	da 01       	movw	r26, r20
    1f76:	c9 01       	movw	r24, r18
    1f78:	8f 77       	andi	r24, 0x7F	; 127
    1f7a:	90 70       	andi	r25, 0x00	; 0
    1f7c:	a0 70       	andi	r26, 0x00	; 0
    1f7e:	b0 70       	andi	r27, 0x00	; 0
    1f80:	80 34       	cpi	r24, 0x40	; 64
    1f82:	91 05       	cpc	r25, r1
    1f84:	a1 05       	cpc	r26, r1
    1f86:	b1 05       	cpc	r27, r1
    1f88:	39 f4       	brne	.+14     	; 0x1f98 <__pack_f+0xee>
    1f8a:	27 ff       	sbrs	r18, 7
    1f8c:	09 c0       	rjmp	.+18     	; 0x1fa0 <__pack_f+0xf6>
    1f8e:	20 5c       	subi	r18, 0xC0	; 192
    1f90:	3f 4f       	sbci	r19, 0xFF	; 255
    1f92:	4f 4f       	sbci	r20, 0xFF	; 255
    1f94:	5f 4f       	sbci	r21, 0xFF	; 255
    1f96:	04 c0       	rjmp	.+8      	; 0x1fa0 <__pack_f+0xf6>
    1f98:	21 5c       	subi	r18, 0xC1	; 193
    1f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9c:	4f 4f       	sbci	r20, 0xFF	; 255
    1f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa0:	e0 e0       	ldi	r30, 0x00	; 0
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	20 30       	cpi	r18, 0x00	; 0
    1fa6:	a0 e0       	ldi	r26, 0x00	; 0
    1fa8:	3a 07       	cpc	r19, r26
    1faa:	a0 e0       	ldi	r26, 0x00	; 0
    1fac:	4a 07       	cpc	r20, r26
    1fae:	a0 e4       	ldi	r26, 0x40	; 64
    1fb0:	5a 07       	cpc	r21, r26
    1fb2:	10 f0       	brcs	.+4      	; 0x1fb8 <__pack_f+0x10e>
    1fb4:	e1 e0       	ldi	r30, 0x01	; 1
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	79 01       	movw	r14, r18
    1fba:	8a 01       	movw	r16, r20
    1fbc:	27 c0       	rjmp	.+78     	; 0x200c <__pack_f+0x162>
    1fbe:	60 38       	cpi	r22, 0x80	; 128
    1fc0:	71 05       	cpc	r23, r1
    1fc2:	64 f5       	brge	.+88     	; 0x201c <__pack_f+0x172>
    1fc4:	fb 01       	movw	r30, r22
    1fc6:	e1 58       	subi	r30, 0x81	; 129
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	d8 01       	movw	r26, r16
    1fcc:	c7 01       	movw	r24, r14
    1fce:	8f 77       	andi	r24, 0x7F	; 127
    1fd0:	90 70       	andi	r25, 0x00	; 0
    1fd2:	a0 70       	andi	r26, 0x00	; 0
    1fd4:	b0 70       	andi	r27, 0x00	; 0
    1fd6:	80 34       	cpi	r24, 0x40	; 64
    1fd8:	91 05       	cpc	r25, r1
    1fda:	a1 05       	cpc	r26, r1
    1fdc:	b1 05       	cpc	r27, r1
    1fde:	39 f4       	brne	.+14     	; 0x1fee <__pack_f+0x144>
    1fe0:	e7 fe       	sbrs	r14, 7
    1fe2:	0d c0       	rjmp	.+26     	; 0x1ffe <__pack_f+0x154>
    1fe4:	80 e4       	ldi	r24, 0x40	; 64
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	a0 e0       	ldi	r26, 0x00	; 0
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	04 c0       	rjmp	.+8      	; 0x1ff6 <__pack_f+0x14c>
    1fee:	8f e3       	ldi	r24, 0x3F	; 63
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a0 e0       	ldi	r26, 0x00	; 0
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e8 0e       	add	r14, r24
    1ff8:	f9 1e       	adc	r15, r25
    1ffa:	0a 1f       	adc	r16, r26
    1ffc:	1b 1f       	adc	r17, r27
    1ffe:	17 ff       	sbrs	r17, 7
    2000:	05 c0       	rjmp	.+10     	; 0x200c <__pack_f+0x162>
    2002:	16 95       	lsr	r17
    2004:	07 95       	ror	r16
    2006:	f7 94       	ror	r15
    2008:	e7 94       	ror	r14
    200a:	31 96       	adiw	r30, 0x01	; 1
    200c:	87 e0       	ldi	r24, 0x07	; 7
    200e:	16 95       	lsr	r17
    2010:	07 95       	ror	r16
    2012:	f7 94       	ror	r15
    2014:	e7 94       	ror	r14
    2016:	8a 95       	dec	r24
    2018:	d1 f7       	brne	.-12     	; 0x200e <__pack_f+0x164>
    201a:	05 c0       	rjmp	.+10     	; 0x2026 <__pack_f+0x17c>
    201c:	ee 24       	eor	r14, r14
    201e:	ff 24       	eor	r15, r15
    2020:	87 01       	movw	r16, r14
    2022:	ef ef       	ldi	r30, 0xFF	; 255
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	6e 2f       	mov	r22, r30
    2028:	67 95       	ror	r22
    202a:	66 27       	eor	r22, r22
    202c:	67 95       	ror	r22
    202e:	90 2f       	mov	r25, r16
    2030:	9f 77       	andi	r25, 0x7F	; 127
    2032:	d7 94       	ror	r13
    2034:	dd 24       	eor	r13, r13
    2036:	d7 94       	ror	r13
    2038:	8e 2f       	mov	r24, r30
    203a:	86 95       	lsr	r24
    203c:	49 2f       	mov	r20, r25
    203e:	46 2b       	or	r20, r22
    2040:	58 2f       	mov	r21, r24
    2042:	5d 29       	or	r21, r13
    2044:	b7 01       	movw	r22, r14
    2046:	ca 01       	movw	r24, r20
    2048:	1f 91       	pop	r17
    204a:	0f 91       	pop	r16
    204c:	ff 90       	pop	r15
    204e:	ef 90       	pop	r14
    2050:	df 90       	pop	r13
    2052:	08 95       	ret

00002054 <__unpack_f>:
    2054:	fc 01       	movw	r30, r24
    2056:	db 01       	movw	r26, r22
    2058:	40 81       	ld	r20, Z
    205a:	51 81       	ldd	r21, Z+1	; 0x01
    205c:	22 81       	ldd	r18, Z+2	; 0x02
    205e:	62 2f       	mov	r22, r18
    2060:	6f 77       	andi	r22, 0x7F	; 127
    2062:	70 e0       	ldi	r23, 0x00	; 0
    2064:	22 1f       	adc	r18, r18
    2066:	22 27       	eor	r18, r18
    2068:	22 1f       	adc	r18, r18
    206a:	93 81       	ldd	r25, Z+3	; 0x03
    206c:	89 2f       	mov	r24, r25
    206e:	88 0f       	add	r24, r24
    2070:	82 2b       	or	r24, r18
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	99 1f       	adc	r25, r25
    2078:	99 27       	eor	r25, r25
    207a:	99 1f       	adc	r25, r25
    207c:	11 96       	adiw	r26, 0x01	; 1
    207e:	9c 93       	st	X, r25
    2080:	11 97       	sbiw	r26, 0x01	; 1
    2082:	21 15       	cp	r18, r1
    2084:	31 05       	cpc	r19, r1
    2086:	a9 f5       	brne	.+106    	; 0x20f2 <__unpack_f+0x9e>
    2088:	41 15       	cp	r20, r1
    208a:	51 05       	cpc	r21, r1
    208c:	61 05       	cpc	r22, r1
    208e:	71 05       	cpc	r23, r1
    2090:	11 f4       	brne	.+4      	; 0x2096 <__unpack_f+0x42>
    2092:	82 e0       	ldi	r24, 0x02	; 2
    2094:	37 c0       	rjmp	.+110    	; 0x2104 <__unpack_f+0xb0>
    2096:	82 e8       	ldi	r24, 0x82	; 130
    2098:	9f ef       	ldi	r25, 0xFF	; 255
    209a:	13 96       	adiw	r26, 0x03	; 3
    209c:	9c 93       	st	X, r25
    209e:	8e 93       	st	-X, r24
    20a0:	12 97       	sbiw	r26, 0x02	; 2
    20a2:	9a 01       	movw	r18, r20
    20a4:	ab 01       	movw	r20, r22
    20a6:	67 e0       	ldi	r22, 0x07	; 7
    20a8:	22 0f       	add	r18, r18
    20aa:	33 1f       	adc	r19, r19
    20ac:	44 1f       	adc	r20, r20
    20ae:	55 1f       	adc	r21, r21
    20b0:	6a 95       	dec	r22
    20b2:	d1 f7       	brne	.-12     	; 0x20a8 <__unpack_f+0x54>
    20b4:	83 e0       	ldi	r24, 0x03	; 3
    20b6:	8c 93       	st	X, r24
    20b8:	0d c0       	rjmp	.+26     	; 0x20d4 <__unpack_f+0x80>
    20ba:	22 0f       	add	r18, r18
    20bc:	33 1f       	adc	r19, r19
    20be:	44 1f       	adc	r20, r20
    20c0:	55 1f       	adc	r21, r21
    20c2:	12 96       	adiw	r26, 0x02	; 2
    20c4:	8d 91       	ld	r24, X+
    20c6:	9c 91       	ld	r25, X
    20c8:	13 97       	sbiw	r26, 0x03	; 3
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	13 96       	adiw	r26, 0x03	; 3
    20ce:	9c 93       	st	X, r25
    20d0:	8e 93       	st	-X, r24
    20d2:	12 97       	sbiw	r26, 0x02	; 2
    20d4:	20 30       	cpi	r18, 0x00	; 0
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	38 07       	cpc	r19, r24
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	48 07       	cpc	r20, r24
    20de:	80 e4       	ldi	r24, 0x40	; 64
    20e0:	58 07       	cpc	r21, r24
    20e2:	58 f3       	brcs	.-42     	; 0x20ba <__unpack_f+0x66>
    20e4:	14 96       	adiw	r26, 0x04	; 4
    20e6:	2d 93       	st	X+, r18
    20e8:	3d 93       	st	X+, r19
    20ea:	4d 93       	st	X+, r20
    20ec:	5c 93       	st	X, r21
    20ee:	17 97       	sbiw	r26, 0x07	; 7
    20f0:	08 95       	ret
    20f2:	2f 3f       	cpi	r18, 0xFF	; 255
    20f4:	31 05       	cpc	r19, r1
    20f6:	79 f4       	brne	.+30     	; 0x2116 <__unpack_f+0xc2>
    20f8:	41 15       	cp	r20, r1
    20fa:	51 05       	cpc	r21, r1
    20fc:	61 05       	cpc	r22, r1
    20fe:	71 05       	cpc	r23, r1
    2100:	19 f4       	brne	.+6      	; 0x2108 <__unpack_f+0xb4>
    2102:	84 e0       	ldi	r24, 0x04	; 4
    2104:	8c 93       	st	X, r24
    2106:	08 95       	ret
    2108:	64 ff       	sbrs	r22, 4
    210a:	03 c0       	rjmp	.+6      	; 0x2112 <__unpack_f+0xbe>
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	8c 93       	st	X, r24
    2110:	12 c0       	rjmp	.+36     	; 0x2136 <__unpack_f+0xe2>
    2112:	1c 92       	st	X, r1
    2114:	10 c0       	rjmp	.+32     	; 0x2136 <__unpack_f+0xe2>
    2116:	2f 57       	subi	r18, 0x7F	; 127
    2118:	30 40       	sbci	r19, 0x00	; 0
    211a:	13 96       	adiw	r26, 0x03	; 3
    211c:	3c 93       	st	X, r19
    211e:	2e 93       	st	-X, r18
    2120:	12 97       	sbiw	r26, 0x02	; 2
    2122:	83 e0       	ldi	r24, 0x03	; 3
    2124:	8c 93       	st	X, r24
    2126:	87 e0       	ldi	r24, 0x07	; 7
    2128:	44 0f       	add	r20, r20
    212a:	55 1f       	adc	r21, r21
    212c:	66 1f       	adc	r22, r22
    212e:	77 1f       	adc	r23, r23
    2130:	8a 95       	dec	r24
    2132:	d1 f7       	brne	.-12     	; 0x2128 <__unpack_f+0xd4>
    2134:	70 64       	ori	r23, 0x40	; 64
    2136:	14 96       	adiw	r26, 0x04	; 4
    2138:	4d 93       	st	X+, r20
    213a:	5d 93       	st	X+, r21
    213c:	6d 93       	st	X+, r22
    213e:	7c 93       	st	X, r23
    2140:	17 97       	sbiw	r26, 0x07	; 7
    2142:	08 95       	ret

00002144 <__fpcmp_parts_f>:
    2144:	1f 93       	push	r17
    2146:	dc 01       	movw	r26, r24
    2148:	fb 01       	movw	r30, r22
    214a:	9c 91       	ld	r25, X
    214c:	92 30       	cpi	r25, 0x02	; 2
    214e:	08 f4       	brcc	.+2      	; 0x2152 <__fpcmp_parts_f+0xe>
    2150:	47 c0       	rjmp	.+142    	; 0x21e0 <__fpcmp_parts_f+0x9c>
    2152:	80 81       	ld	r24, Z
    2154:	82 30       	cpi	r24, 0x02	; 2
    2156:	08 f4       	brcc	.+2      	; 0x215a <__fpcmp_parts_f+0x16>
    2158:	43 c0       	rjmp	.+134    	; 0x21e0 <__fpcmp_parts_f+0x9c>
    215a:	94 30       	cpi	r25, 0x04	; 4
    215c:	51 f4       	brne	.+20     	; 0x2172 <__fpcmp_parts_f+0x2e>
    215e:	11 96       	adiw	r26, 0x01	; 1
    2160:	1c 91       	ld	r17, X
    2162:	84 30       	cpi	r24, 0x04	; 4
    2164:	99 f5       	brne	.+102    	; 0x21cc <__fpcmp_parts_f+0x88>
    2166:	81 81       	ldd	r24, Z+1	; 0x01
    2168:	68 2f       	mov	r22, r24
    216a:	70 e0       	ldi	r23, 0x00	; 0
    216c:	61 1b       	sub	r22, r17
    216e:	71 09       	sbc	r23, r1
    2170:	3f c0       	rjmp	.+126    	; 0x21f0 <__fpcmp_parts_f+0xac>
    2172:	84 30       	cpi	r24, 0x04	; 4
    2174:	21 f0       	breq	.+8      	; 0x217e <__fpcmp_parts_f+0x3a>
    2176:	92 30       	cpi	r25, 0x02	; 2
    2178:	31 f4       	brne	.+12     	; 0x2186 <__fpcmp_parts_f+0x42>
    217a:	82 30       	cpi	r24, 0x02	; 2
    217c:	b9 f1       	breq	.+110    	; 0x21ec <__fpcmp_parts_f+0xa8>
    217e:	81 81       	ldd	r24, Z+1	; 0x01
    2180:	88 23       	and	r24, r24
    2182:	89 f1       	breq	.+98     	; 0x21e6 <__fpcmp_parts_f+0xa2>
    2184:	2d c0       	rjmp	.+90     	; 0x21e0 <__fpcmp_parts_f+0x9c>
    2186:	11 96       	adiw	r26, 0x01	; 1
    2188:	1c 91       	ld	r17, X
    218a:	11 97       	sbiw	r26, 0x01	; 1
    218c:	82 30       	cpi	r24, 0x02	; 2
    218e:	f1 f0       	breq	.+60     	; 0x21cc <__fpcmp_parts_f+0x88>
    2190:	81 81       	ldd	r24, Z+1	; 0x01
    2192:	18 17       	cp	r17, r24
    2194:	d9 f4       	brne	.+54     	; 0x21cc <__fpcmp_parts_f+0x88>
    2196:	12 96       	adiw	r26, 0x02	; 2
    2198:	2d 91       	ld	r18, X+
    219a:	3c 91       	ld	r19, X
    219c:	13 97       	sbiw	r26, 0x03	; 3
    219e:	82 81       	ldd	r24, Z+2	; 0x02
    21a0:	93 81       	ldd	r25, Z+3	; 0x03
    21a2:	82 17       	cp	r24, r18
    21a4:	93 07       	cpc	r25, r19
    21a6:	94 f0       	brlt	.+36     	; 0x21cc <__fpcmp_parts_f+0x88>
    21a8:	28 17       	cp	r18, r24
    21aa:	39 07       	cpc	r19, r25
    21ac:	bc f0       	brlt	.+46     	; 0x21dc <__fpcmp_parts_f+0x98>
    21ae:	14 96       	adiw	r26, 0x04	; 4
    21b0:	8d 91       	ld	r24, X+
    21b2:	9d 91       	ld	r25, X+
    21b4:	0d 90       	ld	r0, X+
    21b6:	bc 91       	ld	r27, X
    21b8:	a0 2d       	mov	r26, r0
    21ba:	24 81       	ldd	r18, Z+4	; 0x04
    21bc:	35 81       	ldd	r19, Z+5	; 0x05
    21be:	46 81       	ldd	r20, Z+6	; 0x06
    21c0:	57 81       	ldd	r21, Z+7	; 0x07
    21c2:	28 17       	cp	r18, r24
    21c4:	39 07       	cpc	r19, r25
    21c6:	4a 07       	cpc	r20, r26
    21c8:	5b 07       	cpc	r21, r27
    21ca:	18 f4       	brcc	.+6      	; 0x21d2 <__fpcmp_parts_f+0x8e>
    21cc:	11 23       	and	r17, r17
    21ce:	41 f0       	breq	.+16     	; 0x21e0 <__fpcmp_parts_f+0x9c>
    21d0:	0a c0       	rjmp	.+20     	; 0x21e6 <__fpcmp_parts_f+0xa2>
    21d2:	82 17       	cp	r24, r18
    21d4:	93 07       	cpc	r25, r19
    21d6:	a4 07       	cpc	r26, r20
    21d8:	b5 07       	cpc	r27, r21
    21da:	40 f4       	brcc	.+16     	; 0x21ec <__fpcmp_parts_f+0xa8>
    21dc:	11 23       	and	r17, r17
    21de:	19 f0       	breq	.+6      	; 0x21e6 <__fpcmp_parts_f+0xa2>
    21e0:	61 e0       	ldi	r22, 0x01	; 1
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	05 c0       	rjmp	.+10     	; 0x21f0 <__fpcmp_parts_f+0xac>
    21e6:	6f ef       	ldi	r22, 0xFF	; 255
    21e8:	7f ef       	ldi	r23, 0xFF	; 255
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <__fpcmp_parts_f+0xac>
    21ec:	60 e0       	ldi	r22, 0x00	; 0
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	cb 01       	movw	r24, r22
    21f2:	1f 91       	pop	r17
    21f4:	08 95       	ret

000021f6 <__udivmodhi4>:
    21f6:	aa 1b       	sub	r26, r26
    21f8:	bb 1b       	sub	r27, r27
    21fa:	51 e1       	ldi	r21, 0x11	; 17
    21fc:	07 c0       	rjmp	.+14     	; 0x220c <__udivmodhi4_ep>

000021fe <__udivmodhi4_loop>:
    21fe:	aa 1f       	adc	r26, r26
    2200:	bb 1f       	adc	r27, r27
    2202:	a6 17       	cp	r26, r22
    2204:	b7 07       	cpc	r27, r23
    2206:	10 f0       	brcs	.+4      	; 0x220c <__udivmodhi4_ep>
    2208:	a6 1b       	sub	r26, r22
    220a:	b7 0b       	sbc	r27, r23

0000220c <__udivmodhi4_ep>:
    220c:	88 1f       	adc	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	5a 95       	dec	r21
    2212:	a9 f7       	brne	.-22     	; 0x21fe <__udivmodhi4_loop>
    2214:	80 95       	com	r24
    2216:	90 95       	com	r25
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	08 95       	ret

0000221e <__divmodhi4>:
    221e:	97 fb       	bst	r25, 7
    2220:	09 2e       	mov	r0, r25
    2222:	07 26       	eor	r0, r23
    2224:	0a d0       	rcall	.+20     	; 0x223a <__divmodhi4_neg1>
    2226:	77 fd       	sbrc	r23, 7
    2228:	04 d0       	rcall	.+8      	; 0x2232 <__divmodhi4_neg2>
    222a:	e5 df       	rcall	.-54     	; 0x21f6 <__udivmodhi4>
    222c:	06 d0       	rcall	.+12     	; 0x223a <__divmodhi4_neg1>
    222e:	00 20       	and	r0, r0
    2230:	1a f4       	brpl	.+6      	; 0x2238 <__divmodhi4_exit>

00002232 <__divmodhi4_neg2>:
    2232:	70 95       	com	r23
    2234:	61 95       	neg	r22
    2236:	7f 4f       	sbci	r23, 0xFF	; 255

00002238 <__divmodhi4_exit>:
    2238:	08 95       	ret

0000223a <__divmodhi4_neg1>:
    223a:	f6 f7       	brtc	.-4      	; 0x2238 <__divmodhi4_exit>
    223c:	90 95       	com	r25
    223e:	81 95       	neg	r24
    2240:	9f 4f       	sbci	r25, 0xFF	; 255
    2242:	08 95       	ret

00002244 <__prologue_saves__>:
    2244:	2f 92       	push	r2
    2246:	3f 92       	push	r3
    2248:	4f 92       	push	r4
    224a:	5f 92       	push	r5
    224c:	6f 92       	push	r6
    224e:	7f 92       	push	r7
    2250:	8f 92       	push	r8
    2252:	9f 92       	push	r9
    2254:	af 92       	push	r10
    2256:	bf 92       	push	r11
    2258:	cf 92       	push	r12
    225a:	df 92       	push	r13
    225c:	ef 92       	push	r14
    225e:	ff 92       	push	r15
    2260:	0f 93       	push	r16
    2262:	1f 93       	push	r17
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	ca 1b       	sub	r28, r26
    226e:	db 0b       	sbc	r29, r27
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	09 94       	ijmp

0000227c <__epilogue_restores__>:
    227c:	2a 88       	ldd	r2, Y+18	; 0x12
    227e:	39 88       	ldd	r3, Y+17	; 0x11
    2280:	48 88       	ldd	r4, Y+16	; 0x10
    2282:	5f 84       	ldd	r5, Y+15	; 0x0f
    2284:	6e 84       	ldd	r6, Y+14	; 0x0e
    2286:	7d 84       	ldd	r7, Y+13	; 0x0d
    2288:	8c 84       	ldd	r8, Y+12	; 0x0c
    228a:	9b 84       	ldd	r9, Y+11	; 0x0b
    228c:	aa 84       	ldd	r10, Y+10	; 0x0a
    228e:	b9 84       	ldd	r11, Y+9	; 0x09
    2290:	c8 84       	ldd	r12, Y+8	; 0x08
    2292:	df 80       	ldd	r13, Y+7	; 0x07
    2294:	ee 80       	ldd	r14, Y+6	; 0x06
    2296:	fd 80       	ldd	r15, Y+5	; 0x05
    2298:	0c 81       	ldd	r16, Y+4	; 0x04
    229a:	1b 81       	ldd	r17, Y+3	; 0x03
    229c:	aa 81       	ldd	r26, Y+2	; 0x02
    229e:	b9 81       	ldd	r27, Y+1	; 0x01
    22a0:	ce 0f       	add	r28, r30
    22a2:	d1 1d       	adc	r29, r1
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61
    22ae:	ed 01       	movw	r28, r26
    22b0:	08 95       	ret

000022b2 <strlen>:
    22b2:	fc 01       	movw	r30, r24
    22b4:	01 90       	ld	r0, Z+
    22b6:	00 20       	and	r0, r0
    22b8:	e9 f7       	brne	.-6      	; 0x22b4 <strlen+0x2>
    22ba:	80 95       	com	r24
    22bc:	90 95       	com	r25
    22be:	8e 0f       	add	r24, r30
    22c0:	9f 1f       	adc	r25, r31
    22c2:	08 95       	ret

000022c4 <sprintf>:
    22c4:	ae e0       	ldi	r26, 0x0E	; 14
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e8 e6       	ldi	r30, 0x68	; 104
    22ca:	f1 e1       	ldi	r31, 0x11	; 17
    22cc:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x1c>
    22d0:	0d 89       	ldd	r16, Y+21	; 0x15
    22d2:	1e 89       	ldd	r17, Y+22	; 0x16
    22d4:	86 e0       	ldi	r24, 0x06	; 6
    22d6:	8c 83       	std	Y+4, r24	; 0x04
    22d8:	1a 83       	std	Y+2, r17	; 0x02
    22da:	09 83       	std	Y+1, r16	; 0x01
    22dc:	8f ef       	ldi	r24, 0xFF	; 255
    22de:	9f e7       	ldi	r25, 0x7F	; 127
    22e0:	9e 83       	std	Y+6, r25	; 0x06
    22e2:	8d 83       	std	Y+5, r24	; 0x05
    22e4:	9e 01       	movw	r18, r28
    22e6:	27 5e       	subi	r18, 0xE7	; 231
    22e8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ea:	ce 01       	movw	r24, r28
    22ec:	01 96       	adiw	r24, 0x01	; 1
    22ee:	6f 89       	ldd	r22, Y+23	; 0x17
    22f0:	78 8d       	ldd	r23, Y+24	; 0x18
    22f2:	a9 01       	movw	r20, r18
    22f4:	0e 94 86 11 	call	0x230c	; 0x230c <vfprintf>
    22f8:	2f 81       	ldd	r18, Y+7	; 0x07
    22fa:	38 85       	ldd	r19, Y+8	; 0x08
    22fc:	02 0f       	add	r16, r18
    22fe:	13 1f       	adc	r17, r19
    2300:	f8 01       	movw	r30, r16
    2302:	10 82       	st	Z, r1
    2304:	2e 96       	adiw	r28, 0x0e	; 14
    2306:	e4 e0       	ldi	r30, 0x04	; 4
    2308:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x1c>

0000230c <vfprintf>:
    230c:	ab e0       	ldi	r26, 0x0B	; 11
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	ec e8       	ldi	r30, 0x8C	; 140
    2312:	f1 e1       	ldi	r31, 0x11	; 17
    2314:	0c 94 22 11 	jmp	0x2244	; 0x2244 <__prologue_saves__>
    2318:	3c 01       	movw	r6, r24
    231a:	2b 01       	movw	r4, r22
    231c:	5a 01       	movw	r10, r20
    231e:	fc 01       	movw	r30, r24
    2320:	17 82       	std	Z+7, r1	; 0x07
    2322:	16 82       	std	Z+6, r1	; 0x06
    2324:	83 81       	ldd	r24, Z+3	; 0x03
    2326:	81 fd       	sbrc	r24, 1
    2328:	03 c0       	rjmp	.+6      	; 0x2330 <vfprintf+0x24>
    232a:	6f ef       	ldi	r22, 0xFF	; 255
    232c:	7f ef       	ldi	r23, 0xFF	; 255
    232e:	c6 c1       	rjmp	.+908    	; 0x26bc <vfprintf+0x3b0>
    2330:	9a e0       	ldi	r25, 0x0A	; 10
    2332:	89 2e       	mov	r8, r25
    2334:	1e 01       	movw	r2, r28
    2336:	08 94       	sec
    2338:	21 1c       	adc	r2, r1
    233a:	31 1c       	adc	r3, r1
    233c:	f3 01       	movw	r30, r6
    233e:	23 81       	ldd	r18, Z+3	; 0x03
    2340:	f2 01       	movw	r30, r4
    2342:	23 fd       	sbrc	r18, 3
    2344:	85 91       	lpm	r24, Z+
    2346:	23 ff       	sbrs	r18, 3
    2348:	81 91       	ld	r24, Z+
    234a:	2f 01       	movw	r4, r30
    234c:	88 23       	and	r24, r24
    234e:	09 f4       	brne	.+2      	; 0x2352 <vfprintf+0x46>
    2350:	b2 c1       	rjmp	.+868    	; 0x26b6 <vfprintf+0x3aa>
    2352:	85 32       	cpi	r24, 0x25	; 37
    2354:	39 f4       	brne	.+14     	; 0x2364 <vfprintf+0x58>
    2356:	23 fd       	sbrc	r18, 3
    2358:	85 91       	lpm	r24, Z+
    235a:	23 ff       	sbrs	r18, 3
    235c:	81 91       	ld	r24, Z+
    235e:	2f 01       	movw	r4, r30
    2360:	85 32       	cpi	r24, 0x25	; 37
    2362:	29 f4       	brne	.+10     	; 0x236e <vfprintf+0x62>
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	b3 01       	movw	r22, r6
    2368:	0e 94 79 13 	call	0x26f2	; 0x26f2 <fputc>
    236c:	e7 cf       	rjmp	.-50     	; 0x233c <vfprintf+0x30>
    236e:	98 2f       	mov	r25, r24
    2370:	ff 24       	eor	r15, r15
    2372:	ee 24       	eor	r14, r14
    2374:	99 24       	eor	r9, r9
    2376:	ff e1       	ldi	r31, 0x1F	; 31
    2378:	ff 15       	cp	r31, r15
    237a:	d0 f0       	brcs	.+52     	; 0x23b0 <vfprintf+0xa4>
    237c:	9b 32       	cpi	r25, 0x2B	; 43
    237e:	69 f0       	breq	.+26     	; 0x239a <vfprintf+0x8e>
    2380:	9c 32       	cpi	r25, 0x2C	; 44
    2382:	28 f4       	brcc	.+10     	; 0x238e <vfprintf+0x82>
    2384:	90 32       	cpi	r25, 0x20	; 32
    2386:	59 f0       	breq	.+22     	; 0x239e <vfprintf+0x92>
    2388:	93 32       	cpi	r25, 0x23	; 35
    238a:	91 f4       	brne	.+36     	; 0x23b0 <vfprintf+0xa4>
    238c:	0e c0       	rjmp	.+28     	; 0x23aa <vfprintf+0x9e>
    238e:	9d 32       	cpi	r25, 0x2D	; 45
    2390:	49 f0       	breq	.+18     	; 0x23a4 <vfprintf+0x98>
    2392:	90 33       	cpi	r25, 0x30	; 48
    2394:	69 f4       	brne	.+26     	; 0x23b0 <vfprintf+0xa4>
    2396:	41 e0       	ldi	r20, 0x01	; 1
    2398:	24 c0       	rjmp	.+72     	; 0x23e2 <vfprintf+0xd6>
    239a:	52 e0       	ldi	r21, 0x02	; 2
    239c:	f5 2a       	or	r15, r21
    239e:	84 e0       	ldi	r24, 0x04	; 4
    23a0:	f8 2a       	or	r15, r24
    23a2:	28 c0       	rjmp	.+80     	; 0x23f4 <vfprintf+0xe8>
    23a4:	98 e0       	ldi	r25, 0x08	; 8
    23a6:	f9 2a       	or	r15, r25
    23a8:	25 c0       	rjmp	.+74     	; 0x23f4 <vfprintf+0xe8>
    23aa:	e0 e1       	ldi	r30, 0x10	; 16
    23ac:	fe 2a       	or	r15, r30
    23ae:	22 c0       	rjmp	.+68     	; 0x23f4 <vfprintf+0xe8>
    23b0:	f7 fc       	sbrc	r15, 7
    23b2:	29 c0       	rjmp	.+82     	; 0x2406 <vfprintf+0xfa>
    23b4:	89 2f       	mov	r24, r25
    23b6:	80 53       	subi	r24, 0x30	; 48
    23b8:	8a 30       	cpi	r24, 0x0A	; 10
    23ba:	70 f4       	brcc	.+28     	; 0x23d8 <vfprintf+0xcc>
    23bc:	f6 fe       	sbrs	r15, 6
    23be:	05 c0       	rjmp	.+10     	; 0x23ca <vfprintf+0xbe>
    23c0:	98 9c       	mul	r9, r8
    23c2:	90 2c       	mov	r9, r0
    23c4:	11 24       	eor	r1, r1
    23c6:	98 0e       	add	r9, r24
    23c8:	15 c0       	rjmp	.+42     	; 0x23f4 <vfprintf+0xe8>
    23ca:	e8 9c       	mul	r14, r8
    23cc:	e0 2c       	mov	r14, r0
    23ce:	11 24       	eor	r1, r1
    23d0:	e8 0e       	add	r14, r24
    23d2:	f0 e2       	ldi	r31, 0x20	; 32
    23d4:	ff 2a       	or	r15, r31
    23d6:	0e c0       	rjmp	.+28     	; 0x23f4 <vfprintf+0xe8>
    23d8:	9e 32       	cpi	r25, 0x2E	; 46
    23da:	29 f4       	brne	.+10     	; 0x23e6 <vfprintf+0xda>
    23dc:	f6 fc       	sbrc	r15, 6
    23de:	6b c1       	rjmp	.+726    	; 0x26b6 <vfprintf+0x3aa>
    23e0:	40 e4       	ldi	r20, 0x40	; 64
    23e2:	f4 2a       	or	r15, r20
    23e4:	07 c0       	rjmp	.+14     	; 0x23f4 <vfprintf+0xe8>
    23e6:	9c 36       	cpi	r25, 0x6C	; 108
    23e8:	19 f4       	brne	.+6      	; 0x23f0 <vfprintf+0xe4>
    23ea:	50 e8       	ldi	r21, 0x80	; 128
    23ec:	f5 2a       	or	r15, r21
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <vfprintf+0xe8>
    23f0:	98 36       	cpi	r25, 0x68	; 104
    23f2:	49 f4       	brne	.+18     	; 0x2406 <vfprintf+0xfa>
    23f4:	f2 01       	movw	r30, r4
    23f6:	23 fd       	sbrc	r18, 3
    23f8:	95 91       	lpm	r25, Z+
    23fa:	23 ff       	sbrs	r18, 3
    23fc:	91 91       	ld	r25, Z+
    23fe:	2f 01       	movw	r4, r30
    2400:	99 23       	and	r25, r25
    2402:	09 f0       	breq	.+2      	; 0x2406 <vfprintf+0xfa>
    2404:	b8 cf       	rjmp	.-144    	; 0x2376 <vfprintf+0x6a>
    2406:	89 2f       	mov	r24, r25
    2408:	85 54       	subi	r24, 0x45	; 69
    240a:	83 30       	cpi	r24, 0x03	; 3
    240c:	18 f0       	brcs	.+6      	; 0x2414 <vfprintf+0x108>
    240e:	80 52       	subi	r24, 0x20	; 32
    2410:	83 30       	cpi	r24, 0x03	; 3
    2412:	38 f4       	brcc	.+14     	; 0x2422 <vfprintf+0x116>
    2414:	44 e0       	ldi	r20, 0x04	; 4
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	a4 0e       	add	r10, r20
    241a:	b5 1e       	adc	r11, r21
    241c:	5f e3       	ldi	r21, 0x3F	; 63
    241e:	59 83       	std	Y+1, r21	; 0x01
    2420:	0f c0       	rjmp	.+30     	; 0x2440 <vfprintf+0x134>
    2422:	93 36       	cpi	r25, 0x63	; 99
    2424:	31 f0       	breq	.+12     	; 0x2432 <vfprintf+0x126>
    2426:	93 37       	cpi	r25, 0x73	; 115
    2428:	79 f0       	breq	.+30     	; 0x2448 <vfprintf+0x13c>
    242a:	93 35       	cpi	r25, 0x53	; 83
    242c:	09 f0       	breq	.+2      	; 0x2430 <vfprintf+0x124>
    242e:	56 c0       	rjmp	.+172    	; 0x24dc <vfprintf+0x1d0>
    2430:	20 c0       	rjmp	.+64     	; 0x2472 <vfprintf+0x166>
    2432:	f5 01       	movw	r30, r10
    2434:	80 81       	ld	r24, Z
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	42 e0       	ldi	r20, 0x02	; 2
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	a4 0e       	add	r10, r20
    243e:	b5 1e       	adc	r11, r21
    2440:	61 01       	movw	r12, r2
    2442:	01 e0       	ldi	r16, 0x01	; 1
    2444:	10 e0       	ldi	r17, 0x00	; 0
    2446:	12 c0       	rjmp	.+36     	; 0x246c <vfprintf+0x160>
    2448:	f5 01       	movw	r30, r10
    244a:	c0 80       	ld	r12, Z
    244c:	d1 80       	ldd	r13, Z+1	; 0x01
    244e:	f6 fc       	sbrc	r15, 6
    2450:	03 c0       	rjmp	.+6      	; 0x2458 <vfprintf+0x14c>
    2452:	6f ef       	ldi	r22, 0xFF	; 255
    2454:	7f ef       	ldi	r23, 0xFF	; 255
    2456:	02 c0       	rjmp	.+4      	; 0x245c <vfprintf+0x150>
    2458:	69 2d       	mov	r22, r9
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	42 e0       	ldi	r20, 0x02	; 2
    245e:	50 e0       	ldi	r21, 0x00	; 0
    2460:	a4 0e       	add	r10, r20
    2462:	b5 1e       	adc	r11, r21
    2464:	c6 01       	movw	r24, r12
    2466:	0e 94 6e 13 	call	0x26dc	; 0x26dc <strnlen>
    246a:	8c 01       	movw	r16, r24
    246c:	5f e7       	ldi	r21, 0x7F	; 127
    246e:	f5 22       	and	r15, r21
    2470:	14 c0       	rjmp	.+40     	; 0x249a <vfprintf+0x18e>
    2472:	f5 01       	movw	r30, r10
    2474:	c0 80       	ld	r12, Z
    2476:	d1 80       	ldd	r13, Z+1	; 0x01
    2478:	f6 fc       	sbrc	r15, 6
    247a:	03 c0       	rjmp	.+6      	; 0x2482 <vfprintf+0x176>
    247c:	6f ef       	ldi	r22, 0xFF	; 255
    247e:	7f ef       	ldi	r23, 0xFF	; 255
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <vfprintf+0x17a>
    2482:	69 2d       	mov	r22, r9
    2484:	70 e0       	ldi	r23, 0x00	; 0
    2486:	42 e0       	ldi	r20, 0x02	; 2
    2488:	50 e0       	ldi	r21, 0x00	; 0
    248a:	a4 0e       	add	r10, r20
    248c:	b5 1e       	adc	r11, r21
    248e:	c6 01       	movw	r24, r12
    2490:	0e 94 63 13 	call	0x26c6	; 0x26c6 <strnlen_P>
    2494:	8c 01       	movw	r16, r24
    2496:	50 e8       	ldi	r21, 0x80	; 128
    2498:	f5 2a       	or	r15, r21
    249a:	f3 fe       	sbrs	r15, 3
    249c:	07 c0       	rjmp	.+14     	; 0x24ac <vfprintf+0x1a0>
    249e:	1a c0       	rjmp	.+52     	; 0x24d4 <vfprintf+0x1c8>
    24a0:	80 e2       	ldi	r24, 0x20	; 32
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	b3 01       	movw	r22, r6
    24a6:	0e 94 79 13 	call	0x26f2	; 0x26f2 <fputc>
    24aa:	ea 94       	dec	r14
    24ac:	8e 2d       	mov	r24, r14
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	08 17       	cp	r16, r24
    24b2:	19 07       	cpc	r17, r25
    24b4:	a8 f3       	brcs	.-22     	; 0x24a0 <vfprintf+0x194>
    24b6:	0e c0       	rjmp	.+28     	; 0x24d4 <vfprintf+0x1c8>
    24b8:	f6 01       	movw	r30, r12
    24ba:	f7 fc       	sbrc	r15, 7
    24bc:	85 91       	lpm	r24, Z+
    24be:	f7 fe       	sbrs	r15, 7
    24c0:	81 91       	ld	r24, Z+
    24c2:	6f 01       	movw	r12, r30
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	b3 01       	movw	r22, r6
    24c8:	0e 94 79 13 	call	0x26f2	; 0x26f2 <fputc>
    24cc:	e1 10       	cpse	r14, r1
    24ce:	ea 94       	dec	r14
    24d0:	01 50       	subi	r16, 0x01	; 1
    24d2:	10 40       	sbci	r17, 0x00	; 0
    24d4:	01 15       	cp	r16, r1
    24d6:	11 05       	cpc	r17, r1
    24d8:	79 f7       	brne	.-34     	; 0x24b8 <vfprintf+0x1ac>
    24da:	ea c0       	rjmp	.+468    	; 0x26b0 <vfprintf+0x3a4>
    24dc:	94 36       	cpi	r25, 0x64	; 100
    24de:	11 f0       	breq	.+4      	; 0x24e4 <vfprintf+0x1d8>
    24e0:	99 36       	cpi	r25, 0x69	; 105
    24e2:	69 f5       	brne	.+90     	; 0x253e <vfprintf+0x232>
    24e4:	f7 fe       	sbrs	r15, 7
    24e6:	08 c0       	rjmp	.+16     	; 0x24f8 <vfprintf+0x1ec>
    24e8:	f5 01       	movw	r30, r10
    24ea:	20 81       	ld	r18, Z
    24ec:	31 81       	ldd	r19, Z+1	; 0x01
    24ee:	42 81       	ldd	r20, Z+2	; 0x02
    24f0:	53 81       	ldd	r21, Z+3	; 0x03
    24f2:	84 e0       	ldi	r24, 0x04	; 4
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	0a c0       	rjmp	.+20     	; 0x250c <vfprintf+0x200>
    24f8:	f5 01       	movw	r30, r10
    24fa:	80 81       	ld	r24, Z
    24fc:	91 81       	ldd	r25, Z+1	; 0x01
    24fe:	9c 01       	movw	r18, r24
    2500:	44 27       	eor	r20, r20
    2502:	37 fd       	sbrc	r19, 7
    2504:	40 95       	com	r20
    2506:	54 2f       	mov	r21, r20
    2508:	82 e0       	ldi	r24, 0x02	; 2
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	a8 0e       	add	r10, r24
    250e:	b9 1e       	adc	r11, r25
    2510:	9f e6       	ldi	r25, 0x6F	; 111
    2512:	f9 22       	and	r15, r25
    2514:	57 ff       	sbrs	r21, 7
    2516:	09 c0       	rjmp	.+18     	; 0x252a <vfprintf+0x21e>
    2518:	50 95       	com	r21
    251a:	40 95       	com	r20
    251c:	30 95       	com	r19
    251e:	21 95       	neg	r18
    2520:	3f 4f       	sbci	r19, 0xFF	; 255
    2522:	4f 4f       	sbci	r20, 0xFF	; 255
    2524:	5f 4f       	sbci	r21, 0xFF	; 255
    2526:	e0 e8       	ldi	r30, 0x80	; 128
    2528:	fe 2a       	or	r15, r30
    252a:	ca 01       	movw	r24, r20
    252c:	b9 01       	movw	r22, r18
    252e:	a1 01       	movw	r20, r2
    2530:	2a e0       	ldi	r18, 0x0A	; 10
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	0e 94 a5 13 	call	0x274a	; 0x274a <__ultoa_invert>
    2538:	d8 2e       	mov	r13, r24
    253a:	d2 18       	sub	r13, r2
    253c:	40 c0       	rjmp	.+128    	; 0x25be <vfprintf+0x2b2>
    253e:	95 37       	cpi	r25, 0x75	; 117
    2540:	29 f4       	brne	.+10     	; 0x254c <vfprintf+0x240>
    2542:	1f 2d       	mov	r17, r15
    2544:	1f 7e       	andi	r17, 0xEF	; 239
    2546:	2a e0       	ldi	r18, 0x0A	; 10
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	1d c0       	rjmp	.+58     	; 0x2586 <vfprintf+0x27a>
    254c:	1f 2d       	mov	r17, r15
    254e:	19 7f       	andi	r17, 0xF9	; 249
    2550:	9f 36       	cpi	r25, 0x6F	; 111
    2552:	61 f0       	breq	.+24     	; 0x256c <vfprintf+0x260>
    2554:	90 37       	cpi	r25, 0x70	; 112
    2556:	20 f4       	brcc	.+8      	; 0x2560 <vfprintf+0x254>
    2558:	98 35       	cpi	r25, 0x58	; 88
    255a:	09 f0       	breq	.+2      	; 0x255e <vfprintf+0x252>
    255c:	ac c0       	rjmp	.+344    	; 0x26b6 <vfprintf+0x3aa>
    255e:	0f c0       	rjmp	.+30     	; 0x257e <vfprintf+0x272>
    2560:	90 37       	cpi	r25, 0x70	; 112
    2562:	39 f0       	breq	.+14     	; 0x2572 <vfprintf+0x266>
    2564:	98 37       	cpi	r25, 0x78	; 120
    2566:	09 f0       	breq	.+2      	; 0x256a <vfprintf+0x25e>
    2568:	a6 c0       	rjmp	.+332    	; 0x26b6 <vfprintf+0x3aa>
    256a:	04 c0       	rjmp	.+8      	; 0x2574 <vfprintf+0x268>
    256c:	28 e0       	ldi	r18, 0x08	; 8
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	0a c0       	rjmp	.+20     	; 0x2586 <vfprintf+0x27a>
    2572:	10 61       	ori	r17, 0x10	; 16
    2574:	14 fd       	sbrc	r17, 4
    2576:	14 60       	ori	r17, 0x04	; 4
    2578:	20 e1       	ldi	r18, 0x10	; 16
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	04 c0       	rjmp	.+8      	; 0x2586 <vfprintf+0x27a>
    257e:	14 fd       	sbrc	r17, 4
    2580:	16 60       	ori	r17, 0x06	; 6
    2582:	20 e1       	ldi	r18, 0x10	; 16
    2584:	32 e0       	ldi	r19, 0x02	; 2
    2586:	17 ff       	sbrs	r17, 7
    2588:	08 c0       	rjmp	.+16     	; 0x259a <vfprintf+0x28e>
    258a:	f5 01       	movw	r30, r10
    258c:	60 81       	ld	r22, Z
    258e:	71 81       	ldd	r23, Z+1	; 0x01
    2590:	82 81       	ldd	r24, Z+2	; 0x02
    2592:	93 81       	ldd	r25, Z+3	; 0x03
    2594:	44 e0       	ldi	r20, 0x04	; 4
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	08 c0       	rjmp	.+16     	; 0x25aa <vfprintf+0x29e>
    259a:	f5 01       	movw	r30, r10
    259c:	80 81       	ld	r24, Z
    259e:	91 81       	ldd	r25, Z+1	; 0x01
    25a0:	bc 01       	movw	r22, r24
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	42 e0       	ldi	r20, 0x02	; 2
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	a4 0e       	add	r10, r20
    25ac:	b5 1e       	adc	r11, r21
    25ae:	a1 01       	movw	r20, r2
    25b0:	0e 94 a5 13 	call	0x274a	; 0x274a <__ultoa_invert>
    25b4:	d8 2e       	mov	r13, r24
    25b6:	d2 18       	sub	r13, r2
    25b8:	8f e7       	ldi	r24, 0x7F	; 127
    25ba:	f8 2e       	mov	r15, r24
    25bc:	f1 22       	and	r15, r17
    25be:	f6 fe       	sbrs	r15, 6
    25c0:	0b c0       	rjmp	.+22     	; 0x25d8 <vfprintf+0x2cc>
    25c2:	5e ef       	ldi	r21, 0xFE	; 254
    25c4:	f5 22       	and	r15, r21
    25c6:	d9 14       	cp	r13, r9
    25c8:	38 f4       	brcc	.+14     	; 0x25d8 <vfprintf+0x2cc>
    25ca:	f4 fe       	sbrs	r15, 4
    25cc:	07 c0       	rjmp	.+14     	; 0x25dc <vfprintf+0x2d0>
    25ce:	f2 fc       	sbrc	r15, 2
    25d0:	05 c0       	rjmp	.+10     	; 0x25dc <vfprintf+0x2d0>
    25d2:	8f ee       	ldi	r24, 0xEF	; 239
    25d4:	f8 22       	and	r15, r24
    25d6:	02 c0       	rjmp	.+4      	; 0x25dc <vfprintf+0x2d0>
    25d8:	1d 2d       	mov	r17, r13
    25da:	01 c0       	rjmp	.+2      	; 0x25de <vfprintf+0x2d2>
    25dc:	19 2d       	mov	r17, r9
    25de:	f4 fe       	sbrs	r15, 4
    25e0:	0d c0       	rjmp	.+26     	; 0x25fc <vfprintf+0x2f0>
    25e2:	fe 01       	movw	r30, r28
    25e4:	ed 0d       	add	r30, r13
    25e6:	f1 1d       	adc	r31, r1
    25e8:	80 81       	ld	r24, Z
    25ea:	80 33       	cpi	r24, 0x30	; 48
    25ec:	19 f4       	brne	.+6      	; 0x25f4 <vfprintf+0x2e8>
    25ee:	99 ee       	ldi	r25, 0xE9	; 233
    25f0:	f9 22       	and	r15, r25
    25f2:	08 c0       	rjmp	.+16     	; 0x2604 <vfprintf+0x2f8>
    25f4:	1f 5f       	subi	r17, 0xFF	; 255
    25f6:	f2 fe       	sbrs	r15, 2
    25f8:	05 c0       	rjmp	.+10     	; 0x2604 <vfprintf+0x2f8>
    25fa:	03 c0       	rjmp	.+6      	; 0x2602 <vfprintf+0x2f6>
    25fc:	8f 2d       	mov	r24, r15
    25fe:	86 78       	andi	r24, 0x86	; 134
    2600:	09 f0       	breq	.+2      	; 0x2604 <vfprintf+0x2f8>
    2602:	1f 5f       	subi	r17, 0xFF	; 255
    2604:	0f 2d       	mov	r16, r15
    2606:	f3 fc       	sbrc	r15, 3
    2608:	14 c0       	rjmp	.+40     	; 0x2632 <vfprintf+0x326>
    260a:	f0 fe       	sbrs	r15, 0
    260c:	0f c0       	rjmp	.+30     	; 0x262c <vfprintf+0x320>
    260e:	1e 15       	cp	r17, r14
    2610:	10 f0       	brcs	.+4      	; 0x2616 <vfprintf+0x30a>
    2612:	9d 2c       	mov	r9, r13
    2614:	0b c0       	rjmp	.+22     	; 0x262c <vfprintf+0x320>
    2616:	9d 2c       	mov	r9, r13
    2618:	9e 0c       	add	r9, r14
    261a:	91 1a       	sub	r9, r17
    261c:	1e 2d       	mov	r17, r14
    261e:	06 c0       	rjmp	.+12     	; 0x262c <vfprintf+0x320>
    2620:	80 e2       	ldi	r24, 0x20	; 32
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	b3 01       	movw	r22, r6
    2626:	0e 94 79 13 	call	0x26f2	; 0x26f2 <fputc>
    262a:	1f 5f       	subi	r17, 0xFF	; 255
    262c:	1e 15       	cp	r17, r14
    262e:	c0 f3       	brcs	.-16     	; 0x2620 <vfprintf+0x314>
    2630:	04 c0       	rjmp	.+8      	; 0x263a <vfprintf+0x32e>
    2632:	1e 15       	cp	r17, r14
    2634:	10 f4       	brcc	.+4      	; 0x263a <vfprintf+0x32e>
    2636:	e1 1a       	sub	r14, r17
    2638:	01 c0       	rjmp	.+2      	; 0x263c <vfprintf+0x330>
    263a:	ee 24       	eor	r14, r14
    263c:	04 ff       	sbrs	r16, 4
    263e:	0f c0       	rjmp	.+30     	; 0x265e <vfprintf+0x352>
    2640:	80 e3       	ldi	r24, 0x30	; 48
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	b3 01       	movw	r22, r6
    2646:	0e 94 79 13 	call	0x26f2	; 0x26f2 <fputc>
    264a:	02 ff       	sbrs	r16, 2
    264c:	1d c0       	rjmp	.+58     	; 0x2688 <vfprintf+0x37c>
    264e:	01 fd       	sbrc	r16, 1
    2650:	03 c0       	rjmp	.+6      	; 0x2658 <vfprintf+0x34c>
    2652:	88 e7       	ldi	r24, 0x78	; 120
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	0e c0       	rjmp	.+28     	; 0x2674 <vfprintf+0x368>
    2658:	88 e5       	ldi	r24, 0x58	; 88
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	0b c0       	rjmp	.+22     	; 0x2674 <vfprintf+0x368>
    265e:	80 2f       	mov	r24, r16
    2660:	86 78       	andi	r24, 0x86	; 134
    2662:	91 f0       	breq	.+36     	; 0x2688 <vfprintf+0x37c>
    2664:	01 ff       	sbrs	r16, 1
    2666:	02 c0       	rjmp	.+4      	; 0x266c <vfprintf+0x360>
    2668:	8b e2       	ldi	r24, 0x2B	; 43
    266a:	01 c0       	rjmp	.+2      	; 0x266e <vfprintf+0x362>
    266c:	80 e2       	ldi	r24, 0x20	; 32
    266e:	f7 fc       	sbrc	r15, 7
    2670:	8d e2       	ldi	r24, 0x2D	; 45
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	b3 01       	movw	r22, r6
    2676:	0e 94 79 13 	call	0x26f2	; 0x26f2 <fputc>
    267a:	06 c0       	rjmp	.+12     	; 0x2688 <vfprintf+0x37c>
    267c:	80 e3       	ldi	r24, 0x30	; 48
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	b3 01       	movw	r22, r6
    2682:	0e 94 79 13 	call	0x26f2	; 0x26f2 <fputc>
    2686:	9a 94       	dec	r9
    2688:	d9 14       	cp	r13, r9
    268a:	c0 f3       	brcs	.-16     	; 0x267c <vfprintf+0x370>
    268c:	da 94       	dec	r13
    268e:	f1 01       	movw	r30, r2
    2690:	ed 0d       	add	r30, r13
    2692:	f1 1d       	adc	r31, r1
    2694:	80 81       	ld	r24, Z
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	b3 01       	movw	r22, r6
    269a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <fputc>
    269e:	dd 20       	and	r13, r13
    26a0:	a9 f7       	brne	.-22     	; 0x268c <vfprintf+0x380>
    26a2:	06 c0       	rjmp	.+12     	; 0x26b0 <vfprintf+0x3a4>
    26a4:	80 e2       	ldi	r24, 0x20	; 32
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	b3 01       	movw	r22, r6
    26aa:	0e 94 79 13 	call	0x26f2	; 0x26f2 <fputc>
    26ae:	ea 94       	dec	r14
    26b0:	ee 20       	and	r14, r14
    26b2:	c1 f7       	brne	.-16     	; 0x26a4 <vfprintf+0x398>
    26b4:	43 ce       	rjmp	.-890    	; 0x233c <vfprintf+0x30>
    26b6:	f3 01       	movw	r30, r6
    26b8:	66 81       	ldd	r22, Z+6	; 0x06
    26ba:	77 81       	ldd	r23, Z+7	; 0x07
    26bc:	cb 01       	movw	r24, r22
    26be:	2b 96       	adiw	r28, 0x0b	; 11
    26c0:	e2 e1       	ldi	r30, 0x12	; 18
    26c2:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__epilogue_restores__>

000026c6 <strnlen_P>:
    26c6:	fc 01       	movw	r30, r24
    26c8:	05 90       	lpm	r0, Z+
    26ca:	61 50       	subi	r22, 0x01	; 1
    26cc:	70 40       	sbci	r23, 0x00	; 0
    26ce:	01 10       	cpse	r0, r1
    26d0:	d8 f7       	brcc	.-10     	; 0x26c8 <strnlen_P+0x2>
    26d2:	80 95       	com	r24
    26d4:	90 95       	com	r25
    26d6:	8e 0f       	add	r24, r30
    26d8:	9f 1f       	adc	r25, r31
    26da:	08 95       	ret

000026dc <strnlen>:
    26dc:	fc 01       	movw	r30, r24
    26de:	61 50       	subi	r22, 0x01	; 1
    26e0:	70 40       	sbci	r23, 0x00	; 0
    26e2:	01 90       	ld	r0, Z+
    26e4:	01 10       	cpse	r0, r1
    26e6:	d8 f7       	brcc	.-10     	; 0x26de <strnlen+0x2>
    26e8:	80 95       	com	r24
    26ea:	90 95       	com	r25
    26ec:	8e 0f       	add	r24, r30
    26ee:	9f 1f       	adc	r25, r31
    26f0:	08 95       	ret

000026f2 <fputc>:
    26f2:	0f 93       	push	r16
    26f4:	1f 93       	push	r17
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	8c 01       	movw	r16, r24
    26fc:	eb 01       	movw	r28, r22
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	81 ff       	sbrs	r24, 1
    2702:	1b c0       	rjmp	.+54     	; 0x273a <fputc+0x48>
    2704:	82 ff       	sbrs	r24, 2
    2706:	0d c0       	rjmp	.+26     	; 0x2722 <fputc+0x30>
    2708:	2e 81       	ldd	r18, Y+6	; 0x06
    270a:	3f 81       	ldd	r19, Y+7	; 0x07
    270c:	8c 81       	ldd	r24, Y+4	; 0x04
    270e:	9d 81       	ldd	r25, Y+5	; 0x05
    2710:	28 17       	cp	r18, r24
    2712:	39 07       	cpc	r19, r25
    2714:	64 f4       	brge	.+24     	; 0x272e <fputc+0x3c>
    2716:	e8 81       	ld	r30, Y
    2718:	f9 81       	ldd	r31, Y+1	; 0x01
    271a:	01 93       	st	Z+, r16
    271c:	f9 83       	std	Y+1, r31	; 0x01
    271e:	e8 83       	st	Y, r30
    2720:	06 c0       	rjmp	.+12     	; 0x272e <fputc+0x3c>
    2722:	e8 85       	ldd	r30, Y+8	; 0x08
    2724:	f9 85       	ldd	r31, Y+9	; 0x09
    2726:	80 2f       	mov	r24, r16
    2728:	09 95       	icall
    272a:	89 2b       	or	r24, r25
    272c:	31 f4       	brne	.+12     	; 0x273a <fputc+0x48>
    272e:	8e 81       	ldd	r24, Y+6	; 0x06
    2730:	9f 81       	ldd	r25, Y+7	; 0x07
    2732:	01 96       	adiw	r24, 0x01	; 1
    2734:	9f 83       	std	Y+7, r25	; 0x07
    2736:	8e 83       	std	Y+6, r24	; 0x06
    2738:	02 c0       	rjmp	.+4      	; 0x273e <fputc+0x4c>
    273a:	0f ef       	ldi	r16, 0xFF	; 255
    273c:	1f ef       	ldi	r17, 0xFF	; 255
    273e:	c8 01       	movw	r24, r16
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	1f 91       	pop	r17
    2746:	0f 91       	pop	r16
    2748:	08 95       	ret

0000274a <__ultoa_invert>:
    274a:	fa 01       	movw	r30, r20
    274c:	aa 27       	eor	r26, r26
    274e:	28 30       	cpi	r18, 0x08	; 8
    2750:	51 f1       	breq	.+84     	; 0x27a6 <__ultoa_invert+0x5c>
    2752:	20 31       	cpi	r18, 0x10	; 16
    2754:	81 f1       	breq	.+96     	; 0x27b6 <__ultoa_invert+0x6c>
    2756:	e8 94       	clt
    2758:	6f 93       	push	r22
    275a:	6e 7f       	andi	r22, 0xFE	; 254
    275c:	6e 5f       	subi	r22, 0xFE	; 254
    275e:	7f 4f       	sbci	r23, 0xFF	; 255
    2760:	8f 4f       	sbci	r24, 0xFF	; 255
    2762:	9f 4f       	sbci	r25, 0xFF	; 255
    2764:	af 4f       	sbci	r26, 0xFF	; 255
    2766:	b1 e0       	ldi	r27, 0x01	; 1
    2768:	3e d0       	rcall	.+124    	; 0x27e6 <__ultoa_invert+0x9c>
    276a:	b4 e0       	ldi	r27, 0x04	; 4
    276c:	3c d0       	rcall	.+120    	; 0x27e6 <__ultoa_invert+0x9c>
    276e:	67 0f       	add	r22, r23
    2770:	78 1f       	adc	r23, r24
    2772:	89 1f       	adc	r24, r25
    2774:	9a 1f       	adc	r25, r26
    2776:	a1 1d       	adc	r26, r1
    2778:	68 0f       	add	r22, r24
    277a:	79 1f       	adc	r23, r25
    277c:	8a 1f       	adc	r24, r26
    277e:	91 1d       	adc	r25, r1
    2780:	a1 1d       	adc	r26, r1
    2782:	6a 0f       	add	r22, r26
    2784:	71 1d       	adc	r23, r1
    2786:	81 1d       	adc	r24, r1
    2788:	91 1d       	adc	r25, r1
    278a:	a1 1d       	adc	r26, r1
    278c:	20 d0       	rcall	.+64     	; 0x27ce <__ultoa_invert+0x84>
    278e:	09 f4       	brne	.+2      	; 0x2792 <__ultoa_invert+0x48>
    2790:	68 94       	set
    2792:	3f 91       	pop	r19
    2794:	2a e0       	ldi	r18, 0x0A	; 10
    2796:	26 9f       	mul	r18, r22
    2798:	11 24       	eor	r1, r1
    279a:	30 19       	sub	r19, r0
    279c:	30 5d       	subi	r19, 0xD0	; 208
    279e:	31 93       	st	Z+, r19
    27a0:	de f6       	brtc	.-74     	; 0x2758 <__ultoa_invert+0xe>
    27a2:	cf 01       	movw	r24, r30
    27a4:	08 95       	ret
    27a6:	46 2f       	mov	r20, r22
    27a8:	47 70       	andi	r20, 0x07	; 7
    27aa:	40 5d       	subi	r20, 0xD0	; 208
    27ac:	41 93       	st	Z+, r20
    27ae:	b3 e0       	ldi	r27, 0x03	; 3
    27b0:	0f d0       	rcall	.+30     	; 0x27d0 <__ultoa_invert+0x86>
    27b2:	c9 f7       	brne	.-14     	; 0x27a6 <__ultoa_invert+0x5c>
    27b4:	f6 cf       	rjmp	.-20     	; 0x27a2 <__ultoa_invert+0x58>
    27b6:	46 2f       	mov	r20, r22
    27b8:	4f 70       	andi	r20, 0x0F	; 15
    27ba:	40 5d       	subi	r20, 0xD0	; 208
    27bc:	4a 33       	cpi	r20, 0x3A	; 58
    27be:	18 f0       	brcs	.+6      	; 0x27c6 <__ultoa_invert+0x7c>
    27c0:	49 5d       	subi	r20, 0xD9	; 217
    27c2:	31 fd       	sbrc	r19, 1
    27c4:	40 52       	subi	r20, 0x20	; 32
    27c6:	41 93       	st	Z+, r20
    27c8:	02 d0       	rcall	.+4      	; 0x27ce <__ultoa_invert+0x84>
    27ca:	a9 f7       	brne	.-22     	; 0x27b6 <__ultoa_invert+0x6c>
    27cc:	ea cf       	rjmp	.-44     	; 0x27a2 <__ultoa_invert+0x58>
    27ce:	b4 e0       	ldi	r27, 0x04	; 4
    27d0:	a6 95       	lsr	r26
    27d2:	97 95       	ror	r25
    27d4:	87 95       	ror	r24
    27d6:	77 95       	ror	r23
    27d8:	67 95       	ror	r22
    27da:	ba 95       	dec	r27
    27dc:	c9 f7       	brne	.-14     	; 0x27d0 <__ultoa_invert+0x86>
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	61 05       	cpc	r22, r1
    27e2:	71 05       	cpc	r23, r1
    27e4:	08 95       	ret
    27e6:	9b 01       	movw	r18, r22
    27e8:	ac 01       	movw	r20, r24
    27ea:	0a 2e       	mov	r0, r26
    27ec:	06 94       	lsr	r0
    27ee:	57 95       	ror	r21
    27f0:	47 95       	ror	r20
    27f2:	37 95       	ror	r19
    27f4:	27 95       	ror	r18
    27f6:	ba 95       	dec	r27
    27f8:	c9 f7       	brne	.-14     	; 0x27ec <__ultoa_invert+0xa2>
    27fa:	62 0f       	add	r22, r18
    27fc:	73 1f       	adc	r23, r19
    27fe:	84 1f       	adc	r24, r20
    2800:	95 1f       	adc	r25, r21
    2802:	a0 1d       	adc	r26, r0
    2804:	08 95       	ret

00002806 <_exit>:
    2806:	f8 94       	cli

00002808 <__stop_program>:
    2808:	ff cf       	rjmp	.-2      	; 0x2808 <__stop_program>
