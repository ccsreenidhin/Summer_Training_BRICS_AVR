
asdfghj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000022da  0000234e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002154  00000000  00000000  0000235c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dae  00000000  00000000  000044b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000525e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000539e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000550e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007157  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3f  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c6  00000000  00000000  00008ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000091aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009978  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d4 e0       	ldi	r29, 0x04	; 4
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	ea ed       	ldi	r30, 0xDA	; 218
      a8:	f2 e2       	ldi	r31, 0x22	; 34
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
      b0:	ae 36       	cpi	r26, 0x6E	; 110
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>
      b6:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
      ba:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
      ca:	2e 97       	sbiw	r28, 0x0e	; 14
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	0f be       	out	0x3f, r0	; 63
      d4:	cd bf       	out	0x3d, r28	; 61
LCDinit();
      d6:	0e 94 1a 05 	call	0xa34	; 0xa34 <LCDinit>
LCDclr();
      da:	0e 94 68 09 	call	0x12d0	; 0x12d0 <LCDclr>
while (1)
     {
      LCDGotoXY(5,0);
      de:	85 e0       	ldi	r24, 0x05	; 5
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	70 e0       	ldi	r23, 0x00	; 0
      e6:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCDGotoXY>
      LCDdisplay("BRiCS");
      ea:	80 e6       	ldi	r24, 0x60	; 96
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 94 0b 	call	0x1728	; 0x1728 <LCDdisplay>
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	a0 e2       	ldi	r26, 0x20	; 32
      f8:	b1 e4       	ldi	r27, 0x41	; 65
      fa:	8b 87       	std	Y+11, r24	; 0x0b
      fc:	9c 87       	std	Y+12, r25	; 0x0c
      fe:	ad 87       	std	Y+13, r26	; 0x0d
     100:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     102:	6b 85       	ldd	r22, Y+11	; 0x0b
     104:	7c 85       	ldd	r23, Y+12	; 0x0c
     106:	8d 85       	ldd	r24, Y+13	; 0x0d
     108:	9e 85       	ldd	r25, Y+14	; 0x0e
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	4a e7       	ldi	r20, 0x7A	; 122
     110:	54 e4       	ldi	r21, 0x44	; 68
     112:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     116:	dc 01       	movw	r26, r24
     118:	cb 01       	movw	r24, r22
     11a:	8f 83       	std	Y+7, r24	; 0x07
     11c:	98 87       	std	Y+8, r25	; 0x08
     11e:	a9 87       	std	Y+9, r26	; 0x09
     120:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     122:	6f 81       	ldd	r22, Y+7	; 0x07
     124:	78 85       	ldd	r23, Y+8	; 0x08
     126:	89 85       	ldd	r24, Y+9	; 0x09
     128:	9a 85       	ldd	r25, Y+10	; 0x0a
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	40 e8       	ldi	r20, 0x80	; 128
     130:	5f e3       	ldi	r21, 0x3F	; 63
     132:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
     136:	88 23       	and	r24, r24
     138:	2c f4       	brge	.+10     	; 0x144 <main+0x82>
		__ticks = 1;
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	9e 83       	std	Y+6, r25	; 0x06
     140:	8d 83       	std	Y+5, r24	; 0x05
     142:	3f c0       	rjmp	.+126    	; 0x1c2 <main+0x100>
	else if (__tmp > 65535)
     144:	6f 81       	ldd	r22, Y+7	; 0x07
     146:	78 85       	ldd	r23, Y+8	; 0x08
     148:	89 85       	ldd	r24, Y+9	; 0x09
     14a:	9a 85       	ldd	r25, Y+10	; 0x0a
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	3f ef       	ldi	r19, 0xFF	; 255
     150:	4f e7       	ldi	r20, 0x7F	; 127
     152:	57 e4       	ldi	r21, 0x47	; 71
     154:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
     158:	18 16       	cp	r1, r24
     15a:	4c f5       	brge	.+82     	; 0x1ae <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     15c:	6b 85       	ldd	r22, Y+11	; 0x0b
     15e:	7c 85       	ldd	r23, Y+12	; 0x0c
     160:	8d 85       	ldd	r24, Y+13	; 0x0d
     162:	9e 85       	ldd	r25, Y+14	; 0x0e
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	40 e2       	ldi	r20, 0x20	; 32
     16a:	51 e4       	ldi	r21, 0x41	; 65
     16c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     170:	dc 01       	movw	r26, r24
     172:	cb 01       	movw	r24, r22
     174:	bc 01       	movw	r22, r24
     176:	cd 01       	movw	r24, r26
     178:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     17c:	dc 01       	movw	r26, r24
     17e:	cb 01       	movw	r24, r22
     180:	9e 83       	std	Y+6, r25	; 0x06
     182:	8d 83       	std	Y+5, r24	; 0x05
     184:	0f c0       	rjmp	.+30     	; 0x1a4 <main+0xe2>
     186:	84 e6       	ldi	r24, 0x64	; 100
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	9c 83       	std	Y+4, r25	; 0x04
     18c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     18e:	8b 81       	ldd	r24, Y+3	; 0x03
     190:	9c 81       	ldd	r25, Y+4	; 0x04
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <main+0xd0>
     196:	9c 83       	std	Y+4, r25	; 0x04
     198:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19a:	8d 81       	ldd	r24, Y+5	; 0x05
     19c:	9e 81       	ldd	r25, Y+6	; 0x06
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	9e 83       	std	Y+6, r25	; 0x06
     1a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a4:	8d 81       	ldd	r24, Y+5	; 0x05
     1a6:	9e 81       	ldd	r25, Y+6	; 0x06
     1a8:	00 97       	sbiw	r24, 0x00	; 0
     1aa:	69 f7       	brne	.-38     	; 0x186 <main+0xc4>
     1ac:	98 cf       	rjmp	.-208    	; 0xde <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1ae:	6f 81       	ldd	r22, Y+7	; 0x07
     1b0:	78 85       	ldd	r23, Y+8	; 0x08
     1b2:	89 85       	ldd	r24, Y+9	; 0x09
     1b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b6:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     1ba:	dc 01       	movw	r26, r24
     1bc:	cb 01       	movw	r24, r22
     1be:	9e 83       	std	Y+6, r25	; 0x06
     1c0:	8d 83       	std	Y+5, r24	; 0x05
     1c2:	8d 81       	ldd	r24, Y+5	; 0x05
     1c4:	9e 81       	ldd	r25, Y+6	; 0x06
     1c6:	9a 83       	std	Y+2, r25	; 0x02
     1c8:	89 83       	std	Y+1, r24	; 0x01
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	9a 81       	ldd	r25, Y+2	; 0x02
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x10c>
     1d2:	9a 83       	std	Y+2, r25	; 0x02
     1d4:	89 83       	std	Y+1, r24	; 0x01
     1d6:	83 cf       	rjmp	.-250    	; 0xde <main+0x1c>

000001d8 <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
     1e0:	e9 97       	sbiw	r28, 0x39	; 57
     1e2:	0f b6       	in	r0, 0x3f	; 63
     1e4:	f8 94       	cli
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	0f be       	out	0x3f, r0	; 63
     1ea:	cd bf       	out	0x3d, r28	; 61
     1ec:	89 af       	std	Y+57, r24	; 0x39

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     1ee:	e5 e3       	ldi	r30, 0x35	; 53
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	89 ad       	ldd	r24, Y+57	; 0x39
     1f4:	80 7f       	andi	r24, 0xF0	; 240
     1f6:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     1f8:	a5 e3       	ldi	r26, 0x35	; 53
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	e5 e3       	ldi	r30, 0x35	; 53
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	81 60       	ori	r24, 0x01	; 1
     204:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     206:	a5 e3       	ldi	r26, 0x35	; 53
     208:	b0 e0       	ldi	r27, 0x00	; 0
     20a:	e5 e3       	ldi	r30, 0x35	; 53
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	84 60       	ori	r24, 0x04	; 4
     212:	8c 93       	st	X, r24
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	a0 e8       	ldi	r26, 0x80	; 128
     21a:	bf e3       	ldi	r27, 0x3F	; 63
     21c:	8d ab       	std	Y+53, r24	; 0x35
     21e:	9e ab       	std	Y+54, r25	; 0x36
     220:	af ab       	std	Y+55, r26	; 0x37
     222:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     224:	6d a9       	ldd	r22, Y+53	; 0x35
     226:	7e a9       	ldd	r23, Y+54	; 0x36
     228:	8f a9       	ldd	r24, Y+55	; 0x37
     22a:	98 ad       	ldd	r25, Y+56	; 0x38
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	4a e7       	ldi	r20, 0x7A	; 122
     232:	54 e4       	ldi	r21, 0x44	; 68
     234:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     238:	dc 01       	movw	r26, r24
     23a:	cb 01       	movw	r24, r22
     23c:	89 ab       	std	Y+49, r24	; 0x31
     23e:	9a ab       	std	Y+50, r25	; 0x32
     240:	ab ab       	std	Y+51, r26	; 0x33
     242:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     244:	69 a9       	ldd	r22, Y+49	; 0x31
     246:	7a a9       	ldd	r23, Y+50	; 0x32
     248:	8b a9       	ldd	r24, Y+51	; 0x33
     24a:	9c a9       	ldd	r25, Y+52	; 0x34
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e8       	ldi	r20, 0x80	; 128
     252:	5f e3       	ldi	r21, 0x3F	; 63
     254:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
     258:	88 23       	and	r24, r24
     25a:	2c f4       	brge	.+10     	; 0x266 <LCDsendChar+0x8e>
		__ticks = 1;
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	98 ab       	std	Y+48, r25	; 0x30
     262:	8f a7       	std	Y+47, r24	; 0x2f
     264:	3f c0       	rjmp	.+126    	; 0x2e4 <LCDsendChar+0x10c>
	else if (__tmp > 65535)
     266:	69 a9       	ldd	r22, Y+49	; 0x31
     268:	7a a9       	ldd	r23, Y+50	; 0x32
     26a:	8b a9       	ldd	r24, Y+51	; 0x33
     26c:	9c a9       	ldd	r25, Y+52	; 0x34
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	3f ef       	ldi	r19, 0xFF	; 255
     272:	4f e7       	ldi	r20, 0x7F	; 127
     274:	57 e4       	ldi	r21, 0x47	; 71
     276:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
     27a:	18 16       	cp	r1, r24
     27c:	4c f5       	brge	.+82     	; 0x2d0 <LCDsendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     27e:	6d a9       	ldd	r22, Y+53	; 0x35
     280:	7e a9       	ldd	r23, Y+54	; 0x36
     282:	8f a9       	ldd	r24, Y+55	; 0x37
     284:	98 ad       	ldd	r25, Y+56	; 0x38
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	40 e2       	ldi	r20, 0x20	; 32
     28c:	51 e4       	ldi	r21, 0x41	; 65
     28e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     292:	dc 01       	movw	r26, r24
     294:	cb 01       	movw	r24, r22
     296:	bc 01       	movw	r22, r24
     298:	cd 01       	movw	r24, r26
     29a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	98 ab       	std	Y+48, r25	; 0x30
     2a4:	8f a7       	std	Y+47, r24	; 0x2f
     2a6:	0f c0       	rjmp	.+30     	; 0x2c6 <LCDsendChar+0xee>
     2a8:	84 e6       	ldi	r24, 0x64	; 100
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	9e a7       	std	Y+46, r25	; 0x2e
     2ae:	8d a7       	std	Y+45, r24	; 0x2d
     2b0:	8d a5       	ldd	r24, Y+45	; 0x2d
     2b2:	9e a5       	ldd	r25, Y+46	; 0x2e
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCDsendChar+0xdc>
     2b8:	9e a7       	std	Y+46, r25	; 0x2e
     2ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2bc:	8f a5       	ldd	r24, Y+47	; 0x2f
     2be:	98 a9       	ldd	r25, Y+48	; 0x30
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	98 ab       	std	Y+48, r25	; 0x30
     2c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2c6:	8f a5       	ldd	r24, Y+47	; 0x2f
     2c8:	98 a9       	ldd	r25, Y+48	; 0x30
     2ca:	00 97       	sbiw	r24, 0x00	; 0
     2cc:	69 f7       	brne	.-38     	; 0x2a8 <LCDsendChar+0xd0>
     2ce:	14 c0       	rjmp	.+40     	; 0x2f8 <LCDsendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2d0:	69 a9       	ldd	r22, Y+49	; 0x31
     2d2:	7a a9       	ldd	r23, Y+50	; 0x32
     2d4:	8b a9       	ldd	r24, Y+51	; 0x33
     2d6:	9c a9       	ldd	r25, Y+52	; 0x34
     2d8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     2dc:	dc 01       	movw	r26, r24
     2de:	cb 01       	movw	r24, r22
     2e0:	98 ab       	std	Y+48, r25	; 0x30
     2e2:	8f a7       	std	Y+47, r24	; 0x2f
     2e4:	8f a5       	ldd	r24, Y+47	; 0x2f
     2e6:	98 a9       	ldd	r25, Y+48	; 0x30
     2e8:	9c a7       	std	Y+44, r25	; 0x2c
     2ea:	8b a7       	std	Y+43, r24	; 0x2b
     2ec:	8b a5       	ldd	r24, Y+43	; 0x2b
     2ee:	9c a5       	ldd	r25, Y+44	; 0x2c
     2f0:	01 97       	sbiw	r24, 0x01	; 1
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCDsendChar+0x118>
     2f4:	9c a7       	std	Y+44, r25	; 0x2c
     2f6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     2f8:	a5 e3       	ldi	r26, 0x35	; 53
     2fa:	b0 e0       	ldi	r27, 0x00	; 0
     2fc:	e5 e3       	ldi	r30, 0x35	; 53
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	80 81       	ld	r24, Z
     302:	8b 7f       	andi	r24, 0xFB	; 251
     304:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     306:	a5 e3       	ldi	r26, 0x35	; 53
     308:	b0 e0       	ldi	r27, 0x00	; 0
     30a:	e5 e3       	ldi	r30, 0x35	; 53
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	8e 7f       	andi	r24, 0xFE	; 254
     312:	8c 93       	st	X, r24
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	a0 e8       	ldi	r26, 0x80	; 128
     31a:	bf e3       	ldi	r27, 0x3F	; 63
     31c:	8f a3       	std	Y+39, r24	; 0x27
     31e:	98 a7       	std	Y+40, r25	; 0x28
     320:	a9 a7       	std	Y+41, r26	; 0x29
     322:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     324:	6f a1       	ldd	r22, Y+39	; 0x27
     326:	78 a5       	ldd	r23, Y+40	; 0x28
     328:	89 a5       	ldd	r24, Y+41	; 0x29
     32a:	9a a5       	ldd	r25, Y+42	; 0x2a
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	4a e7       	ldi	r20, 0x7A	; 122
     332:	54 e4       	ldi	r21, 0x44	; 68
     334:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     338:	dc 01       	movw	r26, r24
     33a:	cb 01       	movw	r24, r22
     33c:	8b a3       	std	Y+35, r24	; 0x23
     33e:	9c a3       	std	Y+36, r25	; 0x24
     340:	ad a3       	std	Y+37, r26	; 0x25
     342:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     344:	6b a1       	ldd	r22, Y+35	; 0x23
     346:	7c a1       	ldd	r23, Y+36	; 0x24
     348:	8d a1       	ldd	r24, Y+37	; 0x25
     34a:	9e a1       	ldd	r25, Y+38	; 0x26
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	40 e8       	ldi	r20, 0x80	; 128
     352:	5f e3       	ldi	r21, 0x3F	; 63
     354:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
     358:	88 23       	and	r24, r24
     35a:	2c f4       	brge	.+10     	; 0x366 <LCDsendChar+0x18e>
		__ticks = 1;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	9a a3       	std	Y+34, r25	; 0x22
     362:	89 a3       	std	Y+33, r24	; 0x21
     364:	3f c0       	rjmp	.+126    	; 0x3e4 <LCDsendChar+0x20c>
	else if (__tmp > 65535)
     366:	6b a1       	ldd	r22, Y+35	; 0x23
     368:	7c a1       	ldd	r23, Y+36	; 0x24
     36a:	8d a1       	ldd	r24, Y+37	; 0x25
     36c:	9e a1       	ldd	r25, Y+38	; 0x26
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	3f ef       	ldi	r19, 0xFF	; 255
     372:	4f e7       	ldi	r20, 0x7F	; 127
     374:	57 e4       	ldi	r21, 0x47	; 71
     376:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
     37a:	18 16       	cp	r1, r24
     37c:	4c f5       	brge	.+82     	; 0x3d0 <LCDsendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     37e:	6f a1       	ldd	r22, Y+39	; 0x27
     380:	78 a5       	ldd	r23, Y+40	; 0x28
     382:	89 a5       	ldd	r24, Y+41	; 0x29
     384:	9a a5       	ldd	r25, Y+42	; 0x2a
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	40 e2       	ldi	r20, 0x20	; 32
     38c:	51 e4       	ldi	r21, 0x41	; 65
     38e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     392:	dc 01       	movw	r26, r24
     394:	cb 01       	movw	r24, r22
     396:	bc 01       	movw	r22, r24
     398:	cd 01       	movw	r24, r26
     39a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     39e:	dc 01       	movw	r26, r24
     3a0:	cb 01       	movw	r24, r22
     3a2:	9a a3       	std	Y+34, r25	; 0x22
     3a4:	89 a3       	std	Y+33, r24	; 0x21
     3a6:	0f c0       	rjmp	.+30     	; 0x3c6 <LCDsendChar+0x1ee>
     3a8:	84 e6       	ldi	r24, 0x64	; 100
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	98 a3       	std	Y+32, r25	; 0x20
     3ae:	8f 8f       	std	Y+31, r24	; 0x1f
     3b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3b2:	98 a1       	ldd	r25, Y+32	; 0x20
     3b4:	01 97       	sbiw	r24, 0x01	; 1
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <LCDsendChar+0x1dc>
     3b8:	98 a3       	std	Y+32, r25	; 0x20
     3ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3bc:	89 a1       	ldd	r24, Y+33	; 0x21
     3be:	9a a1       	ldd	r25, Y+34	; 0x22
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	9a a3       	std	Y+34, r25	; 0x22
     3c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3c6:	89 a1       	ldd	r24, Y+33	; 0x21
     3c8:	9a a1       	ldd	r25, Y+34	; 0x22
     3ca:	00 97       	sbiw	r24, 0x00	; 0
     3cc:	69 f7       	brne	.-38     	; 0x3a8 <LCDsendChar+0x1d0>
     3ce:	14 c0       	rjmp	.+40     	; 0x3f8 <LCDsendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3d0:	6b a1       	ldd	r22, Y+35	; 0x23
     3d2:	7c a1       	ldd	r23, Y+36	; 0x24
     3d4:	8d a1       	ldd	r24, Y+37	; 0x25
     3d6:	9e a1       	ldd	r25, Y+38	; 0x26
     3d8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     3dc:	dc 01       	movw	r26, r24
     3de:	cb 01       	movw	r24, r22
     3e0:	9a a3       	std	Y+34, r25	; 0x22
     3e2:	89 a3       	std	Y+33, r24	; 0x21
     3e4:	89 a1       	ldd	r24, Y+33	; 0x21
     3e6:	9a a1       	ldd	r25, Y+34	; 0x22
     3e8:	9e 8f       	std	Y+30, r25	; 0x1e
     3ea:	8d 8f       	std	Y+29, r24	; 0x1d
     3ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     3ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <LCDsendChar+0x218>
     3f4:	9e 8f       	std	Y+30, r25	; 0x1e
     3f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     3f8:	e5 e3       	ldi	r30, 0x35	; 53
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	89 ad       	ldd	r24, Y+57	; 0x39
     3fe:	88 2f       	mov	r24, r24
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	82 95       	swap	r24
     404:	92 95       	swap	r25
     406:	90 7f       	andi	r25, 0xF0	; 240
     408:	98 27       	eor	r25, r24
     40a:	80 7f       	andi	r24, 0xF0	; 240
     40c:	98 27       	eor	r25, r24
     40e:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     410:	a5 e3       	ldi	r26, 0x35	; 53
     412:	b0 e0       	ldi	r27, 0x00	; 0
     414:	e5 e3       	ldi	r30, 0x35	; 53
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	81 60       	ori	r24, 0x01	; 1
     41c:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     41e:	a5 e3       	ldi	r26, 0x35	; 53
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	e5 e3       	ldi	r30, 0x35	; 53
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	84 60       	ori	r24, 0x04	; 4
     42a:	8c 93       	st	X, r24
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	a0 e8       	ldi	r26, 0x80	; 128
     432:	bf e3       	ldi	r27, 0x3F	; 63
     434:	89 8f       	std	Y+25, r24	; 0x19
     436:	9a 8f       	std	Y+26, r25	; 0x1a
     438:	ab 8f       	std	Y+27, r26	; 0x1b
     43a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     43c:	69 8d       	ldd	r22, Y+25	; 0x19
     43e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     440:	8b 8d       	ldd	r24, Y+27	; 0x1b
     442:	9c 8d       	ldd	r25, Y+28	; 0x1c
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	4a e7       	ldi	r20, 0x7A	; 122
     44a:	54 e4       	ldi	r21, 0x44	; 68
     44c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     450:	dc 01       	movw	r26, r24
     452:	cb 01       	movw	r24, r22
     454:	8d 8b       	std	Y+21, r24	; 0x15
     456:	9e 8b       	std	Y+22, r25	; 0x16
     458:	af 8b       	std	Y+23, r26	; 0x17
     45a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     45c:	6d 89       	ldd	r22, Y+21	; 0x15
     45e:	7e 89       	ldd	r23, Y+22	; 0x16
     460:	8f 89       	ldd	r24, Y+23	; 0x17
     462:	98 8d       	ldd	r25, Y+24	; 0x18
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	40 e8       	ldi	r20, 0x80	; 128
     46a:	5f e3       	ldi	r21, 0x3F	; 63
     46c:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
     470:	88 23       	and	r24, r24
     472:	2c f4       	brge	.+10     	; 0x47e <__stack+0x1f>
		__ticks = 1;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	9c 8b       	std	Y+20, r25	; 0x14
     47a:	8b 8b       	std	Y+19, r24	; 0x13
     47c:	3f c0       	rjmp	.+126    	; 0x4fc <__stack+0x9d>
	else if (__tmp > 65535)
     47e:	6d 89       	ldd	r22, Y+21	; 0x15
     480:	7e 89       	ldd	r23, Y+22	; 0x16
     482:	8f 89       	ldd	r24, Y+23	; 0x17
     484:	98 8d       	ldd	r25, Y+24	; 0x18
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	3f ef       	ldi	r19, 0xFF	; 255
     48a:	4f e7       	ldi	r20, 0x7F	; 127
     48c:	57 e4       	ldi	r21, 0x47	; 71
     48e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
     492:	18 16       	cp	r1, r24
     494:	4c f5       	brge	.+82     	; 0x4e8 <__stack+0x89>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     496:	69 8d       	ldd	r22, Y+25	; 0x19
     498:	7a 8d       	ldd	r23, Y+26	; 0x1a
     49a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     49c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	40 e2       	ldi	r20, 0x20	; 32
     4a4:	51 e4       	ldi	r21, 0x41	; 65
     4a6:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     4aa:	dc 01       	movw	r26, r24
     4ac:	cb 01       	movw	r24, r22
     4ae:	bc 01       	movw	r22, r24
     4b0:	cd 01       	movw	r24, r26
     4b2:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     4b6:	dc 01       	movw	r26, r24
     4b8:	cb 01       	movw	r24, r22
     4ba:	9c 8b       	std	Y+20, r25	; 0x14
     4bc:	8b 8b       	std	Y+19, r24	; 0x13
     4be:	0f c0       	rjmp	.+30     	; 0x4de <__stack+0x7f>
     4c0:	84 e6       	ldi	r24, 0x64	; 100
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	9a 8b       	std	Y+18, r25	; 0x12
     4c6:	89 8b       	std	Y+17, r24	; 0x11
     4c8:	89 89       	ldd	r24, Y+17	; 0x11
     4ca:	9a 89       	ldd	r25, Y+18	; 0x12
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <__stack+0x6d>
     4d0:	9a 8b       	std	Y+18, r25	; 0x12
     4d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4d4:	8b 89       	ldd	r24, Y+19	; 0x13
     4d6:	9c 89       	ldd	r25, Y+20	; 0x14
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	9c 8b       	std	Y+20, r25	; 0x14
     4dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4de:	8b 89       	ldd	r24, Y+19	; 0x13
     4e0:	9c 89       	ldd	r25, Y+20	; 0x14
     4e2:	00 97       	sbiw	r24, 0x00	; 0
     4e4:	69 f7       	brne	.-38     	; 0x4c0 <__stack+0x61>
     4e6:	14 c0       	rjmp	.+40     	; 0x510 <__stack+0xb1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4e8:	6d 89       	ldd	r22, Y+21	; 0x15
     4ea:	7e 89       	ldd	r23, Y+22	; 0x16
     4ec:	8f 89       	ldd	r24, Y+23	; 0x17
     4ee:	98 8d       	ldd	r25, Y+24	; 0x18
     4f0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     4f4:	dc 01       	movw	r26, r24
     4f6:	cb 01       	movw	r24, r22
     4f8:	9c 8b       	std	Y+20, r25	; 0x14
     4fa:	8b 8b       	std	Y+19, r24	; 0x13
     4fc:	8b 89       	ldd	r24, Y+19	; 0x13
     4fe:	9c 89       	ldd	r25, Y+20	; 0x14
     500:	98 8b       	std	Y+16, r25	; 0x10
     502:	8f 87       	std	Y+15, r24	; 0x0f
     504:	8f 85       	ldd	r24, Y+15	; 0x0f
     506:	98 89       	ldd	r25, Y+16	; 0x10
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	f1 f7       	brne	.-4      	; 0x508 <__stack+0xa9>
     50c:	98 8b       	std	Y+16, r25	; 0x10
     50e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     510:	a5 e3       	ldi	r26, 0x35	; 53
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e5 e3       	ldi	r30, 0x35	; 53
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	8b 7f       	andi	r24, 0xFB	; 251
     51c:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     51e:	a5 e3       	ldi	r26, 0x35	; 53
     520:	b0 e0       	ldi	r27, 0x00	; 0
     522:	e5 e3       	ldi	r30, 0x35	; 53
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	8e 7f       	andi	r24, 0xFE	; 254
     52a:	8c 93       	st	X, r24
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	a0 e8       	ldi	r26, 0x80	; 128
     532:	bf e3       	ldi	r27, 0x3F	; 63
     534:	8b 87       	std	Y+11, r24	; 0x0b
     536:	9c 87       	std	Y+12, r25	; 0x0c
     538:	ad 87       	std	Y+13, r26	; 0x0d
     53a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     53c:	6b 85       	ldd	r22, Y+11	; 0x0b
     53e:	7c 85       	ldd	r23, Y+12	; 0x0c
     540:	8d 85       	ldd	r24, Y+13	; 0x0d
     542:	9e 85       	ldd	r25, Y+14	; 0x0e
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	4a e7       	ldi	r20, 0x7A	; 122
     54a:	54 e4       	ldi	r21, 0x44	; 68
     54c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     550:	dc 01       	movw	r26, r24
     552:	cb 01       	movw	r24, r22
     554:	8f 83       	std	Y+7, r24	; 0x07
     556:	98 87       	std	Y+8, r25	; 0x08
     558:	a9 87       	std	Y+9, r26	; 0x09
     55a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     55c:	6f 81       	ldd	r22, Y+7	; 0x07
     55e:	78 85       	ldd	r23, Y+8	; 0x08
     560:	89 85       	ldd	r24, Y+9	; 0x09
     562:	9a 85       	ldd	r25, Y+10	; 0x0a
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e8       	ldi	r20, 0x80	; 128
     56a:	5f e3       	ldi	r21, 0x3F	; 63
     56c:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
     570:	88 23       	and	r24, r24
     572:	2c f4       	brge	.+10     	; 0x57e <__stack+0x11f>
		__ticks = 1;
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	9e 83       	std	Y+6, r25	; 0x06
     57a:	8d 83       	std	Y+5, r24	; 0x05
     57c:	3f c0       	rjmp	.+126    	; 0x5fc <__stack+0x19d>
	else if (__tmp > 65535)
     57e:	6f 81       	ldd	r22, Y+7	; 0x07
     580:	78 85       	ldd	r23, Y+8	; 0x08
     582:	89 85       	ldd	r24, Y+9	; 0x09
     584:	9a 85       	ldd	r25, Y+10	; 0x0a
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	3f ef       	ldi	r19, 0xFF	; 255
     58a:	4f e7       	ldi	r20, 0x7F	; 127
     58c:	57 e4       	ldi	r21, 0x47	; 71
     58e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
     592:	18 16       	cp	r1, r24
     594:	4c f5       	brge	.+82     	; 0x5e8 <__stack+0x189>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     596:	6b 85       	ldd	r22, Y+11	; 0x0b
     598:	7c 85       	ldd	r23, Y+12	; 0x0c
     59a:	8d 85       	ldd	r24, Y+13	; 0x0d
     59c:	9e 85       	ldd	r25, Y+14	; 0x0e
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	40 e2       	ldi	r20, 0x20	; 32
     5a4:	51 e4       	ldi	r21, 0x41	; 65
     5a6:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     5aa:	dc 01       	movw	r26, r24
     5ac:	cb 01       	movw	r24, r22
     5ae:	bc 01       	movw	r22, r24
     5b0:	cd 01       	movw	r24, r26
     5b2:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     5b6:	dc 01       	movw	r26, r24
     5b8:	cb 01       	movw	r24, r22
     5ba:	9e 83       	std	Y+6, r25	; 0x06
     5bc:	8d 83       	std	Y+5, r24	; 0x05
     5be:	0f c0       	rjmp	.+30     	; 0x5de <__stack+0x17f>
     5c0:	84 e6       	ldi	r24, 0x64	; 100
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	9c 83       	std	Y+4, r25	; 0x04
     5c6:	8b 83       	std	Y+3, r24	; 0x03
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <__stack+0x16d>
     5d0:	9c 83       	std	Y+4, r25	; 0x04
     5d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5d4:	8d 81       	ldd	r24, Y+5	; 0x05
     5d6:	9e 81       	ldd	r25, Y+6	; 0x06
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	9e 83       	std	Y+6, r25	; 0x06
     5dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5de:	8d 81       	ldd	r24, Y+5	; 0x05
     5e0:	9e 81       	ldd	r25, Y+6	; 0x06
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	69 f7       	brne	.-38     	; 0x5c0 <__stack+0x161>
     5e6:	14 c0       	rjmp	.+40     	; 0x610 <__stack+0x1b1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5e8:	6f 81       	ldd	r22, Y+7	; 0x07
     5ea:	78 85       	ldd	r23, Y+8	; 0x08
     5ec:	89 85       	ldd	r24, Y+9	; 0x09
     5ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     5f0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	9e 83       	std	Y+6, r25	; 0x06
     5fa:	8d 83       	std	Y+5, r24	; 0x05
     5fc:	8d 81       	ldd	r24, Y+5	; 0x05
     5fe:	9e 81       	ldd	r25, Y+6	; 0x06
     600:	9a 83       	std	Y+2, r25	; 0x02
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	9a 81       	ldd	r25, Y+2	; 0x02
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <__stack+0x1a9>
     60c:	9a 83       	std	Y+2, r25	; 0x02
     60e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     610:	e9 96       	adiw	r28, 0x39	; 57
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
     61c:	cf 91       	pop	r28
     61e:	df 91       	pop	r29
     620:	08 95       	ret

00000622 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	e9 97       	sbiw	r28, 0x39	; 57
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	89 af       	std	Y+57, r24	; 0x39
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     638:	e5 e3       	ldi	r30, 0x35	; 53
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	89 ad       	ldd	r24, Y+57	; 0x39
     63e:	80 7f       	andi	r24, 0xF0	; 240
     640:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     642:	a5 e3       	ldi	r26, 0x35	; 53
     644:	b0 e0       	ldi	r27, 0x00	; 0
     646:	e5 e3       	ldi	r30, 0x35	; 53
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 81       	ld	r24, Z
     64c:	84 60       	ori	r24, 0x04	; 4
     64e:	8c 93       	st	X, r24
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	a0 e8       	ldi	r26, 0x80	; 128
     656:	bf e3       	ldi	r27, 0x3F	; 63
     658:	8d ab       	std	Y+53, r24	; 0x35
     65a:	9e ab       	std	Y+54, r25	; 0x36
     65c:	af ab       	std	Y+55, r26	; 0x37
     65e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     660:	6d a9       	ldd	r22, Y+53	; 0x35
     662:	7e a9       	ldd	r23, Y+54	; 0x36
     664:	8f a9       	ldd	r24, Y+55	; 0x37
     666:	98 ad       	ldd	r25, Y+56	; 0x38
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	4a e7       	ldi	r20, 0x7A	; 122
     66e:	54 e4       	ldi	r21, 0x44	; 68
     670:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	89 ab       	std	Y+49, r24	; 0x31
     67a:	9a ab       	std	Y+50, r25	; 0x32
     67c:	ab ab       	std	Y+51, r26	; 0x33
     67e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     680:	69 a9       	ldd	r22, Y+49	; 0x31
     682:	7a a9       	ldd	r23, Y+50	; 0x32
     684:	8b a9       	ldd	r24, Y+51	; 0x33
     686:	9c a9       	ldd	r25, Y+52	; 0x34
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	40 e8       	ldi	r20, 0x80	; 128
     68e:	5f e3       	ldi	r21, 0x3F	; 63
     690:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
     694:	88 23       	and	r24, r24
     696:	2c f4       	brge	.+10     	; 0x6a2 <LCDsendCommand+0x80>
		__ticks = 1;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	98 ab       	std	Y+48, r25	; 0x30
     69e:	8f a7       	std	Y+47, r24	; 0x2f
     6a0:	3f c0       	rjmp	.+126    	; 0x720 <LCDsendCommand+0xfe>
	else if (__tmp > 65535)
     6a2:	69 a9       	ldd	r22, Y+49	; 0x31
     6a4:	7a a9       	ldd	r23, Y+50	; 0x32
     6a6:	8b a9       	ldd	r24, Y+51	; 0x33
     6a8:	9c a9       	ldd	r25, Y+52	; 0x34
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	3f ef       	ldi	r19, 0xFF	; 255
     6ae:	4f e7       	ldi	r20, 0x7F	; 127
     6b0:	57 e4       	ldi	r21, 0x47	; 71
     6b2:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
     6b6:	18 16       	cp	r1, r24
     6b8:	4c f5       	brge	.+82     	; 0x70c <LCDsendCommand+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6ba:	6d a9       	ldd	r22, Y+53	; 0x35
     6bc:	7e a9       	ldd	r23, Y+54	; 0x36
     6be:	8f a9       	ldd	r24, Y+55	; 0x37
     6c0:	98 ad       	ldd	r25, Y+56	; 0x38
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	40 e2       	ldi	r20, 0x20	; 32
     6c8:	51 e4       	ldi	r21, 0x41	; 65
     6ca:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     6ce:	dc 01       	movw	r26, r24
     6d0:	cb 01       	movw	r24, r22
     6d2:	bc 01       	movw	r22, r24
     6d4:	cd 01       	movw	r24, r26
     6d6:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     6da:	dc 01       	movw	r26, r24
     6dc:	cb 01       	movw	r24, r22
     6de:	98 ab       	std	Y+48, r25	; 0x30
     6e0:	8f a7       	std	Y+47, r24	; 0x2f
     6e2:	0f c0       	rjmp	.+30     	; 0x702 <LCDsendCommand+0xe0>
     6e4:	84 e6       	ldi	r24, 0x64	; 100
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	9e a7       	std	Y+46, r25	; 0x2e
     6ea:	8d a7       	std	Y+45, r24	; 0x2d
     6ec:	8d a5       	ldd	r24, Y+45	; 0x2d
     6ee:	9e a5       	ldd	r25, Y+46	; 0x2e
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	f1 f7       	brne	.-4      	; 0x6f0 <LCDsendCommand+0xce>
     6f4:	9e a7       	std	Y+46, r25	; 0x2e
     6f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f8:	8f a5       	ldd	r24, Y+47	; 0x2f
     6fa:	98 a9       	ldd	r25, Y+48	; 0x30
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	98 ab       	std	Y+48, r25	; 0x30
     700:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     702:	8f a5       	ldd	r24, Y+47	; 0x2f
     704:	98 a9       	ldd	r25, Y+48	; 0x30
     706:	00 97       	sbiw	r24, 0x00	; 0
     708:	69 f7       	brne	.-38     	; 0x6e4 <LCDsendCommand+0xc2>
     70a:	14 c0       	rjmp	.+40     	; 0x734 <LCDsendCommand+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     70c:	69 a9       	ldd	r22, Y+49	; 0x31
     70e:	7a a9       	ldd	r23, Y+50	; 0x32
     710:	8b a9       	ldd	r24, Y+51	; 0x33
     712:	9c a9       	ldd	r25, Y+52	; 0x34
     714:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     718:	dc 01       	movw	r26, r24
     71a:	cb 01       	movw	r24, r22
     71c:	98 ab       	std	Y+48, r25	; 0x30
     71e:	8f a7       	std	Y+47, r24	; 0x2f
     720:	8f a5       	ldd	r24, Y+47	; 0x2f
     722:	98 a9       	ldd	r25, Y+48	; 0x30
     724:	9c a7       	std	Y+44, r25	; 0x2c
     726:	8b a7       	std	Y+43, r24	; 0x2b
     728:	8b a5       	ldd	r24, Y+43	; 0x2b
     72a:	9c a5       	ldd	r25, Y+44	; 0x2c
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <LCDsendCommand+0x10a>
     730:	9c a7       	std	Y+44, r25	; 0x2c
     732:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     734:	a5 e3       	ldi	r26, 0x35	; 53
     736:	b0 e0       	ldi	r27, 0x00	; 0
     738:	e5 e3       	ldi	r30, 0x35	; 53
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	8b 7f       	andi	r24, 0xFB	; 251
     740:	8c 93       	st	X, r24
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	a0 e8       	ldi	r26, 0x80	; 128
     748:	bf e3       	ldi	r27, 0x3F	; 63
     74a:	8f a3       	std	Y+39, r24	; 0x27
     74c:	98 a7       	std	Y+40, r25	; 0x28
     74e:	a9 a7       	std	Y+41, r26	; 0x29
     750:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     752:	6f a1       	ldd	r22, Y+39	; 0x27
     754:	78 a5       	ldd	r23, Y+40	; 0x28
     756:	89 a5       	ldd	r24, Y+41	; 0x29
     758:	9a a5       	ldd	r25, Y+42	; 0x2a
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	4a e7       	ldi	r20, 0x7A	; 122
     760:	54 e4       	ldi	r21, 0x44	; 68
     762:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	8b a3       	std	Y+35, r24	; 0x23
     76c:	9c a3       	std	Y+36, r25	; 0x24
     76e:	ad a3       	std	Y+37, r26	; 0x25
     770:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     772:	6b a1       	ldd	r22, Y+35	; 0x23
     774:	7c a1       	ldd	r23, Y+36	; 0x24
     776:	8d a1       	ldd	r24, Y+37	; 0x25
     778:	9e a1       	ldd	r25, Y+38	; 0x26
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 e8       	ldi	r20, 0x80	; 128
     780:	5f e3       	ldi	r21, 0x3F	; 63
     782:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
     786:	88 23       	and	r24, r24
     788:	2c f4       	brge	.+10     	; 0x794 <LCDsendCommand+0x172>
		__ticks = 1;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	9a a3       	std	Y+34, r25	; 0x22
     790:	89 a3       	std	Y+33, r24	; 0x21
     792:	3f c0       	rjmp	.+126    	; 0x812 <LCDsendCommand+0x1f0>
	else if (__tmp > 65535)
     794:	6b a1       	ldd	r22, Y+35	; 0x23
     796:	7c a1       	ldd	r23, Y+36	; 0x24
     798:	8d a1       	ldd	r24, Y+37	; 0x25
     79a:	9e a1       	ldd	r25, Y+38	; 0x26
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	3f ef       	ldi	r19, 0xFF	; 255
     7a0:	4f e7       	ldi	r20, 0x7F	; 127
     7a2:	57 e4       	ldi	r21, 0x47	; 71
     7a4:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
     7a8:	18 16       	cp	r1, r24
     7aa:	4c f5       	brge	.+82     	; 0x7fe <LCDsendCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ac:	6f a1       	ldd	r22, Y+39	; 0x27
     7ae:	78 a5       	ldd	r23, Y+40	; 0x28
     7b0:	89 a5       	ldd	r24, Y+41	; 0x29
     7b2:	9a a5       	ldd	r25, Y+42	; 0x2a
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	40 e2       	ldi	r20, 0x20	; 32
     7ba:	51 e4       	ldi	r21, 0x41	; 65
     7bc:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     7c0:	dc 01       	movw	r26, r24
     7c2:	cb 01       	movw	r24, r22
     7c4:	bc 01       	movw	r22, r24
     7c6:	cd 01       	movw	r24, r26
     7c8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     7cc:	dc 01       	movw	r26, r24
     7ce:	cb 01       	movw	r24, r22
     7d0:	9a a3       	std	Y+34, r25	; 0x22
     7d2:	89 a3       	std	Y+33, r24	; 0x21
     7d4:	0f c0       	rjmp	.+30     	; 0x7f4 <LCDsendCommand+0x1d2>
     7d6:	84 e6       	ldi	r24, 0x64	; 100
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	98 a3       	std	Y+32, r25	; 0x20
     7dc:	8f 8f       	std	Y+31, r24	; 0x1f
     7de:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7e0:	98 a1       	ldd	r25, Y+32	; 0x20
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <LCDsendCommand+0x1c0>
     7e6:	98 a3       	std	Y+32, r25	; 0x20
     7e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ea:	89 a1       	ldd	r24, Y+33	; 0x21
     7ec:	9a a1       	ldd	r25, Y+34	; 0x22
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	9a a3       	std	Y+34, r25	; 0x22
     7f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7f4:	89 a1       	ldd	r24, Y+33	; 0x21
     7f6:	9a a1       	ldd	r25, Y+34	; 0x22
     7f8:	00 97       	sbiw	r24, 0x00	; 0
     7fa:	69 f7       	brne	.-38     	; 0x7d6 <LCDsendCommand+0x1b4>
     7fc:	14 c0       	rjmp	.+40     	; 0x826 <LCDsendCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7fe:	6b a1       	ldd	r22, Y+35	; 0x23
     800:	7c a1       	ldd	r23, Y+36	; 0x24
     802:	8d a1       	ldd	r24, Y+37	; 0x25
     804:	9e a1       	ldd	r25, Y+38	; 0x26
     806:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     80a:	dc 01       	movw	r26, r24
     80c:	cb 01       	movw	r24, r22
     80e:	9a a3       	std	Y+34, r25	; 0x22
     810:	89 a3       	std	Y+33, r24	; 0x21
     812:	89 a1       	ldd	r24, Y+33	; 0x21
     814:	9a a1       	ldd	r25, Y+34	; 0x22
     816:	9e 8f       	std	Y+30, r25	; 0x1e
     818:	8d 8f       	std	Y+29, r24	; 0x1d
     81a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     81c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     81e:	01 97       	sbiw	r24, 0x01	; 1
     820:	f1 f7       	brne	.-4      	; 0x81e <LCDsendCommand+0x1fc>
     822:	9e 8f       	std	Y+30, r25	; 0x1e
     824:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     826:	e5 e3       	ldi	r30, 0x35	; 53
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	89 ad       	ldd	r24, Y+57	; 0x39
     82c:	88 2f       	mov	r24, r24
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	82 95       	swap	r24
     832:	92 95       	swap	r25
     834:	90 7f       	andi	r25, 0xF0	; 240
     836:	98 27       	eor	r25, r24
     838:	80 7f       	andi	r24, 0xF0	; 240
     83a:	98 27       	eor	r25, r24
     83c:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     83e:	a5 e3       	ldi	r26, 0x35	; 53
     840:	b0 e0       	ldi	r27, 0x00	; 0
     842:	e5 e3       	ldi	r30, 0x35	; 53
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	84 60       	ori	r24, 0x04	; 4
     84a:	8c 93       	st	X, r24
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	a0 e8       	ldi	r26, 0x80	; 128
     852:	bf e3       	ldi	r27, 0x3F	; 63
     854:	89 8f       	std	Y+25, r24	; 0x19
     856:	9a 8f       	std	Y+26, r25	; 0x1a
     858:	ab 8f       	std	Y+27, r26	; 0x1b
     85a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     85c:	69 8d       	ldd	r22, Y+25	; 0x19
     85e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     860:	8b 8d       	ldd	r24, Y+27	; 0x1b
     862:	9c 8d       	ldd	r25, Y+28	; 0x1c
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	4a e7       	ldi	r20, 0x7A	; 122
     86a:	54 e4       	ldi	r21, 0x44	; 68
     86c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     870:	dc 01       	movw	r26, r24
     872:	cb 01       	movw	r24, r22
     874:	8d 8b       	std	Y+21, r24	; 0x15
     876:	9e 8b       	std	Y+22, r25	; 0x16
     878:	af 8b       	std	Y+23, r26	; 0x17
     87a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     87c:	6d 89       	ldd	r22, Y+21	; 0x15
     87e:	7e 89       	ldd	r23, Y+22	; 0x16
     880:	8f 89       	ldd	r24, Y+23	; 0x17
     882:	98 8d       	ldd	r25, Y+24	; 0x18
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	40 e8       	ldi	r20, 0x80	; 128
     88a:	5f e3       	ldi	r21, 0x3F	; 63
     88c:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
     890:	88 23       	and	r24, r24
     892:	2c f4       	brge	.+10     	; 0x89e <LCDsendCommand+0x27c>
		__ticks = 1;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	9c 8b       	std	Y+20, r25	; 0x14
     89a:	8b 8b       	std	Y+19, r24	; 0x13
     89c:	3f c0       	rjmp	.+126    	; 0x91c <LCDsendCommand+0x2fa>
	else if (__tmp > 65535)
     89e:	6d 89       	ldd	r22, Y+21	; 0x15
     8a0:	7e 89       	ldd	r23, Y+22	; 0x16
     8a2:	8f 89       	ldd	r24, Y+23	; 0x17
     8a4:	98 8d       	ldd	r25, Y+24	; 0x18
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	3f ef       	ldi	r19, 0xFF	; 255
     8aa:	4f e7       	ldi	r20, 0x7F	; 127
     8ac:	57 e4       	ldi	r21, 0x47	; 71
     8ae:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
     8b2:	18 16       	cp	r1, r24
     8b4:	4c f5       	brge	.+82     	; 0x908 <LCDsendCommand+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8b6:	69 8d       	ldd	r22, Y+25	; 0x19
     8b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	40 e2       	ldi	r20, 0x20	; 32
     8c4:	51 e4       	ldi	r21, 0x41	; 65
     8c6:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     8ca:	dc 01       	movw	r26, r24
     8cc:	cb 01       	movw	r24, r22
     8ce:	bc 01       	movw	r22, r24
     8d0:	cd 01       	movw	r24, r26
     8d2:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     8d6:	dc 01       	movw	r26, r24
     8d8:	cb 01       	movw	r24, r22
     8da:	9c 8b       	std	Y+20, r25	; 0x14
     8dc:	8b 8b       	std	Y+19, r24	; 0x13
     8de:	0f c0       	rjmp	.+30     	; 0x8fe <LCDsendCommand+0x2dc>
     8e0:	84 e6       	ldi	r24, 0x64	; 100
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	9a 8b       	std	Y+18, r25	; 0x12
     8e6:	89 8b       	std	Y+17, r24	; 0x11
     8e8:	89 89       	ldd	r24, Y+17	; 0x11
     8ea:	9a 89       	ldd	r25, Y+18	; 0x12
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	f1 f7       	brne	.-4      	; 0x8ec <LCDsendCommand+0x2ca>
     8f0:	9a 8b       	std	Y+18, r25	; 0x12
     8f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8f4:	8b 89       	ldd	r24, Y+19	; 0x13
     8f6:	9c 89       	ldd	r25, Y+20	; 0x14
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	9c 8b       	std	Y+20, r25	; 0x14
     8fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8fe:	8b 89       	ldd	r24, Y+19	; 0x13
     900:	9c 89       	ldd	r25, Y+20	; 0x14
     902:	00 97       	sbiw	r24, 0x00	; 0
     904:	69 f7       	brne	.-38     	; 0x8e0 <LCDsendCommand+0x2be>
     906:	14 c0       	rjmp	.+40     	; 0x930 <LCDsendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     908:	6d 89       	ldd	r22, Y+21	; 0x15
     90a:	7e 89       	ldd	r23, Y+22	; 0x16
     90c:	8f 89       	ldd	r24, Y+23	; 0x17
     90e:	98 8d       	ldd	r25, Y+24	; 0x18
     910:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     914:	dc 01       	movw	r26, r24
     916:	cb 01       	movw	r24, r22
     918:	9c 8b       	std	Y+20, r25	; 0x14
     91a:	8b 8b       	std	Y+19, r24	; 0x13
     91c:	8b 89       	ldd	r24, Y+19	; 0x13
     91e:	9c 89       	ldd	r25, Y+20	; 0x14
     920:	98 8b       	std	Y+16, r25	; 0x10
     922:	8f 87       	std	Y+15, r24	; 0x0f
     924:	8f 85       	ldd	r24, Y+15	; 0x0f
     926:	98 89       	ldd	r25, Y+16	; 0x10
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <LCDsendCommand+0x306>
     92c:	98 8b       	std	Y+16, r25	; 0x10
     92e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     930:	a5 e3       	ldi	r26, 0x35	; 53
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	e5 e3       	ldi	r30, 0x35	; 53
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	8b 7f       	andi	r24, 0xFB	; 251
     93c:	8c 93       	st	X, r24
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e8       	ldi	r26, 0x80	; 128
     944:	bf e3       	ldi	r27, 0x3F	; 63
     946:	8b 87       	std	Y+11, r24	; 0x0b
     948:	9c 87       	std	Y+12, r25	; 0x0c
     94a:	ad 87       	std	Y+13, r26	; 0x0d
     94c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     94e:	6b 85       	ldd	r22, Y+11	; 0x0b
     950:	7c 85       	ldd	r23, Y+12	; 0x0c
     952:	8d 85       	ldd	r24, Y+13	; 0x0d
     954:	9e 85       	ldd	r25, Y+14	; 0x0e
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	4a e7       	ldi	r20, 0x7A	; 122
     95c:	54 e4       	ldi	r21, 0x44	; 68
     95e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     962:	dc 01       	movw	r26, r24
     964:	cb 01       	movw	r24, r22
     966:	8f 83       	std	Y+7, r24	; 0x07
     968:	98 87       	std	Y+8, r25	; 0x08
     96a:	a9 87       	std	Y+9, r26	; 0x09
     96c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     96e:	6f 81       	ldd	r22, Y+7	; 0x07
     970:	78 85       	ldd	r23, Y+8	; 0x08
     972:	89 85       	ldd	r24, Y+9	; 0x09
     974:	9a 85       	ldd	r25, Y+10	; 0x0a
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e8       	ldi	r20, 0x80	; 128
     97c:	5f e3       	ldi	r21, 0x3F	; 63
     97e:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
     982:	88 23       	and	r24, r24
     984:	2c f4       	brge	.+10     	; 0x990 <LCDsendCommand+0x36e>
		__ticks = 1;
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	9e 83       	std	Y+6, r25	; 0x06
     98c:	8d 83       	std	Y+5, r24	; 0x05
     98e:	3f c0       	rjmp	.+126    	; 0xa0e <LCDsendCommand+0x3ec>
	else if (__tmp > 65535)
     990:	6f 81       	ldd	r22, Y+7	; 0x07
     992:	78 85       	ldd	r23, Y+8	; 0x08
     994:	89 85       	ldd	r24, Y+9	; 0x09
     996:	9a 85       	ldd	r25, Y+10	; 0x0a
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	3f ef       	ldi	r19, 0xFF	; 255
     99c:	4f e7       	ldi	r20, 0x7F	; 127
     99e:	57 e4       	ldi	r21, 0x47	; 71
     9a0:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
     9a4:	18 16       	cp	r1, r24
     9a6:	4c f5       	brge	.+82     	; 0x9fa <LCDsendCommand+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9a8:	6b 85       	ldd	r22, Y+11	; 0x0b
     9aa:	7c 85       	ldd	r23, Y+12	; 0x0c
     9ac:	8d 85       	ldd	r24, Y+13	; 0x0d
     9ae:	9e 85       	ldd	r25, Y+14	; 0x0e
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e2       	ldi	r20, 0x20	; 32
     9b6:	51 e4       	ldi	r21, 0x41	; 65
     9b8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	bc 01       	movw	r22, r24
     9c2:	cd 01       	movw	r24, r26
     9c4:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     9c8:	dc 01       	movw	r26, r24
     9ca:	cb 01       	movw	r24, r22
     9cc:	9e 83       	std	Y+6, r25	; 0x06
     9ce:	8d 83       	std	Y+5, r24	; 0x05
     9d0:	0f c0       	rjmp	.+30     	; 0x9f0 <LCDsendCommand+0x3ce>
     9d2:	84 e6       	ldi	r24, 0x64	; 100
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	9c 83       	std	Y+4, r25	; 0x04
     9d8:	8b 83       	std	Y+3, r24	; 0x03
     9da:	8b 81       	ldd	r24, Y+3	; 0x03
     9dc:	9c 81       	ldd	r25, Y+4	; 0x04
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <LCDsendCommand+0x3bc>
     9e2:	9c 83       	std	Y+4, r25	; 0x04
     9e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9e6:	8d 81       	ldd	r24, Y+5	; 0x05
     9e8:	9e 81       	ldd	r25, Y+6	; 0x06
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	9e 83       	std	Y+6, r25	; 0x06
     9ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f0:	8d 81       	ldd	r24, Y+5	; 0x05
     9f2:	9e 81       	ldd	r25, Y+6	; 0x06
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	69 f7       	brne	.-38     	; 0x9d2 <LCDsendCommand+0x3b0>
     9f8:	14 c0       	rjmp	.+40     	; 0xa22 <LCDsendCommand+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9fa:	6f 81       	ldd	r22, Y+7	; 0x07
     9fc:	78 85       	ldd	r23, Y+8	; 0x08
     9fe:	89 85       	ldd	r24, Y+9	; 0x09
     a00:	9a 85       	ldd	r25, Y+10	; 0x0a
     a02:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     a06:	dc 01       	movw	r26, r24
     a08:	cb 01       	movw	r24, r22
     a0a:	9e 83       	std	Y+6, r25	; 0x06
     a0c:	8d 83       	std	Y+5, r24	; 0x05
     a0e:	8d 81       	ldd	r24, Y+5	; 0x05
     a10:	9e 81       	ldd	r25, Y+6	; 0x06
     a12:	9a 83       	std	Y+2, r25	; 0x02
     a14:	89 83       	std	Y+1, r24	; 0x01
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	9a 81       	ldd	r25, Y+2	; 0x02
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <LCDsendCommand+0x3f8>
     a1e:	9a 83       	std	Y+2, r25	; 0x02
     a20:	89 83       	std	Y+1, r24	; 0x01
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     a22:	e9 96       	adiw	r28, 0x39	; 57
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	cd bf       	out	0x3d, r28	; 61
     a2e:	cf 91       	pop	r28
     a30:	df 91       	pop	r29
     a32:	08 95       	ret

00000a34 <LCDinit>:
void LCDinit(void)//Initializes LCD
{
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	c4 56       	subi	r28, 0x64	; 100
     a42:	d0 40       	sbci	r29, 0x00	; 0
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	de bf       	out	0x3e, r29	; 62
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	cd bf       	out	0x3d, r28	; 61
     a4e:	fe 01       	movw	r30, r28
     a50:	e1 5a       	subi	r30, 0xA1	; 161
     a52:	ff 4f       	sbci	r31, 0xFF	; 255
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	a0 e7       	ldi	r26, 0x70	; 112
     a5a:	b1 e4       	ldi	r27, 0x41	; 65
     a5c:	80 83       	st	Z, r24
     a5e:	91 83       	std	Z+1, r25	; 0x01
     a60:	a2 83       	std	Z+2, r26	; 0x02
     a62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a64:	8e 01       	movw	r16, r28
     a66:	05 5a       	subi	r16, 0xA5	; 165
     a68:	1f 4f       	sbci	r17, 0xFF	; 255
     a6a:	fe 01       	movw	r30, r28
     a6c:	e1 5a       	subi	r30, 0xA1	; 161
     a6e:	ff 4f       	sbci	r31, 0xFF	; 255
     a70:	60 81       	ld	r22, Z
     a72:	71 81       	ldd	r23, Z+1	; 0x01
     a74:	82 81       	ldd	r24, Z+2	; 0x02
     a76:	93 81       	ldd	r25, Z+3	; 0x03
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	4a e7       	ldi	r20, 0x7A	; 122
     a7e:	54 e4       	ldi	r21, 0x44	; 68
     a80:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     a84:	dc 01       	movw	r26, r24
     a86:	cb 01       	movw	r24, r22
     a88:	f8 01       	movw	r30, r16
     a8a:	80 83       	st	Z, r24
     a8c:	91 83       	std	Z+1, r25	; 0x01
     a8e:	a2 83       	std	Z+2, r26	; 0x02
     a90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a92:	fe 01       	movw	r30, r28
     a94:	e5 5a       	subi	r30, 0xA5	; 165
     a96:	ff 4f       	sbci	r31, 0xFF	; 255
     a98:	60 81       	ld	r22, Z
     a9a:	71 81       	ldd	r23, Z+1	; 0x01
     a9c:	82 81       	ldd	r24, Z+2	; 0x02
     a9e:	93 81       	ldd	r25, Z+3	; 0x03
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	40 e8       	ldi	r20, 0x80	; 128
     aa6:	5f e3       	ldi	r21, 0x3F	; 63
     aa8:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
     aac:	88 23       	and	r24, r24
     aae:	44 f4       	brge	.+16     	; 0xac0 <LCDinit+0x8c>
		__ticks = 1;
     ab0:	fe 01       	movw	r30, r28
     ab2:	e7 5a       	subi	r30, 0xA7	; 167
     ab4:	ff 4f       	sbci	r31, 0xFF	; 255
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	91 83       	std	Z+1, r25	; 0x01
     abc:	80 83       	st	Z, r24
     abe:	64 c0       	rjmp	.+200    	; 0xb88 <LCDinit+0x154>
	else if (__tmp > 65535)
     ac0:	fe 01       	movw	r30, r28
     ac2:	e5 5a       	subi	r30, 0xA5	; 165
     ac4:	ff 4f       	sbci	r31, 0xFF	; 255
     ac6:	60 81       	ld	r22, Z
     ac8:	71 81       	ldd	r23, Z+1	; 0x01
     aca:	82 81       	ldd	r24, Z+2	; 0x02
     acc:	93 81       	ldd	r25, Z+3	; 0x03
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	3f ef       	ldi	r19, 0xFF	; 255
     ad2:	4f e7       	ldi	r20, 0x7F	; 127
     ad4:	57 e4       	ldi	r21, 0x47	; 71
     ad6:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
     ada:	18 16       	cp	r1, r24
     adc:	0c f0       	brlt	.+2      	; 0xae0 <LCDinit+0xac>
     ade:	43 c0       	rjmp	.+134    	; 0xb66 <LCDinit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ae0:	fe 01       	movw	r30, r28
     ae2:	e1 5a       	subi	r30, 0xA1	; 161
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	60 81       	ld	r22, Z
     ae8:	71 81       	ldd	r23, Z+1	; 0x01
     aea:	82 81       	ldd	r24, Z+2	; 0x02
     aec:	93 81       	ldd	r25, Z+3	; 0x03
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e2       	ldi	r20, 0x20	; 32
     af4:	51 e4       	ldi	r21, 0x41	; 65
     af6:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     afa:	dc 01       	movw	r26, r24
     afc:	cb 01       	movw	r24, r22
     afe:	8e 01       	movw	r16, r28
     b00:	07 5a       	subi	r16, 0xA7	; 167
     b02:	1f 4f       	sbci	r17, 0xFF	; 255
     b04:	bc 01       	movw	r22, r24
     b06:	cd 01       	movw	r24, r26
     b08:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     b0c:	dc 01       	movw	r26, r24
     b0e:	cb 01       	movw	r24, r22
     b10:	f8 01       	movw	r30, r16
     b12:	91 83       	std	Z+1, r25	; 0x01
     b14:	80 83       	st	Z, r24
     b16:	1f c0       	rjmp	.+62     	; 0xb56 <LCDinit+0x122>
     b18:	fe 01       	movw	r30, r28
     b1a:	e9 5a       	subi	r30, 0xA9	; 169
     b1c:	ff 4f       	sbci	r31, 0xFF	; 255
     b1e:	84 e6       	ldi	r24, 0x64	; 100
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	91 83       	std	Z+1, r25	; 0x01
     b24:	80 83       	st	Z, r24
     b26:	fe 01       	movw	r30, r28
     b28:	e9 5a       	subi	r30, 0xA9	; 169
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	91 81       	ldd	r25, Z+1	; 0x01
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	f1 f7       	brne	.-4      	; 0xb30 <LCDinit+0xfc>
     b34:	fe 01       	movw	r30, r28
     b36:	e9 5a       	subi	r30, 0xA9	; 169
     b38:	ff 4f       	sbci	r31, 0xFF	; 255
     b3a:	91 83       	std	Z+1, r25	; 0x01
     b3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b3e:	de 01       	movw	r26, r28
     b40:	a7 5a       	subi	r26, 0xA7	; 167
     b42:	bf 4f       	sbci	r27, 0xFF	; 255
     b44:	fe 01       	movw	r30, r28
     b46:	e7 5a       	subi	r30, 0xA7	; 167
     b48:	ff 4f       	sbci	r31, 0xFF	; 255
     b4a:	80 81       	ld	r24, Z
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	11 96       	adiw	r26, 0x01	; 1
     b52:	9c 93       	st	X, r25
     b54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b56:	fe 01       	movw	r30, r28
     b58:	e7 5a       	subi	r30, 0xA7	; 167
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	80 81       	ld	r24, Z
     b5e:	91 81       	ldd	r25, Z+1	; 0x01
     b60:	00 97       	sbiw	r24, 0x00	; 0
     b62:	d1 f6       	brne	.-76     	; 0xb18 <LCDinit+0xe4>
     b64:	27 c0       	rjmp	.+78     	; 0xbb4 <LCDinit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b66:	8e 01       	movw	r16, r28
     b68:	07 5a       	subi	r16, 0xA7	; 167
     b6a:	1f 4f       	sbci	r17, 0xFF	; 255
     b6c:	fe 01       	movw	r30, r28
     b6e:	e5 5a       	subi	r30, 0xA5	; 165
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	60 81       	ld	r22, Z
     b74:	71 81       	ldd	r23, Z+1	; 0x01
     b76:	82 81       	ldd	r24, Z+2	; 0x02
     b78:	93 81       	ldd	r25, Z+3	; 0x03
     b7a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     b7e:	dc 01       	movw	r26, r24
     b80:	cb 01       	movw	r24, r22
     b82:	f8 01       	movw	r30, r16
     b84:	91 83       	std	Z+1, r25	; 0x01
     b86:	80 83       	st	Z, r24
     b88:	de 01       	movw	r26, r28
     b8a:	ab 5a       	subi	r26, 0xAB	; 171
     b8c:	bf 4f       	sbci	r27, 0xFF	; 255
     b8e:	fe 01       	movw	r30, r28
     b90:	e7 5a       	subi	r30, 0xA7	; 167
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	80 81       	ld	r24, Z
     b96:	91 81       	ldd	r25, Z+1	; 0x01
     b98:	8d 93       	st	X+, r24
     b9a:	9c 93       	st	X, r25
     b9c:	fe 01       	movw	r30, r28
     b9e:	eb 5a       	subi	r30, 0xAB	; 171
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	80 81       	ld	r24, Z
     ba4:	91 81       	ldd	r25, Z+1	; 0x01
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <LCDinit+0x172>
     baa:	fe 01       	movw	r30, r28
     bac:	eb 5a       	subi	r30, 0xAB	; 171
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	91 83       	std	Z+1, r25	; 0x01
     bb2:	80 83       	st	Z, r24
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     bb4:	e5 e3       	ldi	r30, 0x35	; 53
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	10 82       	st	Z, r1
	LCP=0x00;
     bba:	e5 e3       	ldi	r30, 0x35	; 53
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	10 82       	st	Z, r1
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     bc0:	a4 e3       	ldi	r26, 0x34	; 52
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e4 e3       	ldi	r30, 0x34	; 52
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	80 6f       	ori	r24, 0xF0	; 240
     bcc:	8c 93       	st	X, r24
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     bce:	a4 e3       	ldi	r26, 0x34	; 52
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e4 e3       	ldi	r30, 0x34	; 52
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	87 60       	ori	r24, 0x07	; 7
     bda:	8c 93       	st	X, r24
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     bdc:	e5 e3       	ldi	r30, 0x35	; 53
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 e3       	ldi	r24, 0x30	; 48
     be2:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     be4:	a5 e3       	ldi	r26, 0x35	; 53
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e5 e3       	ldi	r30, 0x35	; 53
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	84 60       	ori	r24, 0x04	; 4
     bf0:	8c 93       	st	X, r24
     bf2:	fe 01       	movw	r30, r28
     bf4:	ef 5a       	subi	r30, 0xAF	; 175
     bf6:	ff 4f       	sbci	r31, 0xFF	; 255
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e8       	ldi	r26, 0x80	; 128
     bfe:	bf e3       	ldi	r27, 0x3F	; 63
     c00:	80 83       	st	Z, r24
     c02:	91 83       	std	Z+1, r25	; 0x01
     c04:	a2 83       	std	Z+2, r26	; 0x02
     c06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c08:	8e 01       	movw	r16, r28
     c0a:	03 5b       	subi	r16, 0xB3	; 179
     c0c:	1f 4f       	sbci	r17, 0xFF	; 255
     c0e:	fe 01       	movw	r30, r28
     c10:	ef 5a       	subi	r30, 0xAF	; 175
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	60 81       	ld	r22, Z
     c16:	71 81       	ldd	r23, Z+1	; 0x01
     c18:	82 81       	ldd	r24, Z+2	; 0x02
     c1a:	93 81       	ldd	r25, Z+3	; 0x03
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	4a e7       	ldi	r20, 0x7A	; 122
     c22:	54 e4       	ldi	r21, 0x44	; 68
     c24:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	f8 01       	movw	r30, r16
     c2e:	80 83       	st	Z, r24
     c30:	91 83       	std	Z+1, r25	; 0x01
     c32:	a2 83       	std	Z+2, r26	; 0x02
     c34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c36:	fe 01       	movw	r30, r28
     c38:	e3 5b       	subi	r30, 0xB3	; 179
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	60 81       	ld	r22, Z
     c3e:	71 81       	ldd	r23, Z+1	; 0x01
     c40:	82 81       	ldd	r24, Z+2	; 0x02
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	40 e8       	ldi	r20, 0x80	; 128
     c4a:	5f e3       	ldi	r21, 0x3F	; 63
     c4c:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
     c50:	88 23       	and	r24, r24
     c52:	44 f4       	brge	.+16     	; 0xc64 <LCDinit+0x230>
		__ticks = 1;
     c54:	fe 01       	movw	r30, r28
     c56:	e5 5b       	subi	r30, 0xB5	; 181
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	91 83       	std	Z+1, r25	; 0x01
     c60:	80 83       	st	Z, r24
     c62:	64 c0       	rjmp	.+200    	; 0xd2c <LCDinit+0x2f8>
	else if (__tmp > 65535)
     c64:	fe 01       	movw	r30, r28
     c66:	e3 5b       	subi	r30, 0xB3	; 179
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	60 81       	ld	r22, Z
     c6c:	71 81       	ldd	r23, Z+1	; 0x01
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	3f ef       	ldi	r19, 0xFF	; 255
     c76:	4f e7       	ldi	r20, 0x7F	; 127
     c78:	57 e4       	ldi	r21, 0x47	; 71
     c7a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
     c7e:	18 16       	cp	r1, r24
     c80:	0c f0       	brlt	.+2      	; 0xc84 <LCDinit+0x250>
     c82:	43 c0       	rjmp	.+134    	; 0xd0a <LCDinit+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c84:	fe 01       	movw	r30, r28
     c86:	ef 5a       	subi	r30, 0xAF	; 175
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	60 81       	ld	r22, Z
     c8c:	71 81       	ldd	r23, Z+1	; 0x01
     c8e:	82 81       	ldd	r24, Z+2	; 0x02
     c90:	93 81       	ldd	r25, Z+3	; 0x03
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e2       	ldi	r20, 0x20	; 32
     c98:	51 e4       	ldi	r21, 0x41	; 65
     c9a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	8e 01       	movw	r16, r28
     ca4:	05 5b       	subi	r16, 0xB5	; 181
     ca6:	1f 4f       	sbci	r17, 0xFF	; 255
     ca8:	bc 01       	movw	r22, r24
     caa:	cd 01       	movw	r24, r26
     cac:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	f8 01       	movw	r30, r16
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24
     cba:	1f c0       	rjmp	.+62     	; 0xcfa <LCDinit+0x2c6>
     cbc:	fe 01       	movw	r30, r28
     cbe:	e7 5b       	subi	r30, 0xB7	; 183
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	84 e6       	ldi	r24, 0x64	; 100
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	91 83       	std	Z+1, r25	; 0x01
     cc8:	80 83       	st	Z, r24
     cca:	fe 01       	movw	r30, r28
     ccc:	e7 5b       	subi	r30, 0xB7	; 183
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <LCDinit+0x2a0>
     cd8:	fe 01       	movw	r30, r28
     cda:	e7 5b       	subi	r30, 0xB7	; 183
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	91 83       	std	Z+1, r25	; 0x01
     ce0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce2:	de 01       	movw	r26, r28
     ce4:	a5 5b       	subi	r26, 0xB5	; 181
     ce6:	bf 4f       	sbci	r27, 0xFF	; 255
     ce8:	fe 01       	movw	r30, r28
     cea:	e5 5b       	subi	r30, 0xB5	; 181
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	80 81       	ld	r24, Z
     cf0:	91 81       	ldd	r25, Z+1	; 0x01
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	11 96       	adiw	r26, 0x01	; 1
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cfa:	fe 01       	movw	r30, r28
     cfc:	e5 5b       	subi	r30, 0xB5	; 181
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	80 81       	ld	r24, Z
     d02:	91 81       	ldd	r25, Z+1	; 0x01
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	d1 f6       	brne	.-76     	; 0xcbc <LCDinit+0x288>
     d08:	27 c0       	rjmp	.+78     	; 0xd58 <LCDinit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0a:	8e 01       	movw	r16, r28
     d0c:	05 5b       	subi	r16, 0xB5	; 181
     d0e:	1f 4f       	sbci	r17, 0xFF	; 255
     d10:	fe 01       	movw	r30, r28
     d12:	e3 5b       	subi	r30, 0xB3	; 179
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	60 81       	ld	r22, Z
     d18:	71 81       	ldd	r23, Z+1	; 0x01
     d1a:	82 81       	ldd	r24, Z+2	; 0x02
     d1c:	93 81       	ldd	r25, Z+3	; 0x03
     d1e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	f8 01       	movw	r30, r16
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24
     d2c:	de 01       	movw	r26, r28
     d2e:	a9 5b       	subi	r26, 0xB9	; 185
     d30:	bf 4f       	sbci	r27, 0xFF	; 255
     d32:	fe 01       	movw	r30, r28
     d34:	e5 5b       	subi	r30, 0xB5	; 181
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	80 81       	ld	r24, Z
     d3a:	91 81       	ldd	r25, Z+1	; 0x01
     d3c:	8d 93       	st	X+, r24
     d3e:	9c 93       	st	X, r25
     d40:	fe 01       	movw	r30, r28
     d42:	e9 5b       	subi	r30, 0xB9	; 185
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	80 81       	ld	r24, Z
     d48:	91 81       	ldd	r25, Z+1	; 0x01
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <LCDinit+0x316>
     d4e:	fe 01       	movw	r30, r28
     d50:	e9 5b       	subi	r30, 0xB9	; 185
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	91 83       	std	Z+1, r25	; 0x01
     d56:	80 83       	st	Z, r24
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     d58:	a5 e3       	ldi	r26, 0x35	; 53
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e5 e3       	ldi	r30, 0x35	; 53
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	8b 7f       	andi	r24, 0xFB	; 251
     d64:	8c 93       	st	X, r24
     d66:	fe 01       	movw	r30, r28
     d68:	ed 5b       	subi	r30, 0xBD	; 189
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	a0 e8       	ldi	r26, 0x80	; 128
     d72:	bf e3       	ldi	r27, 0x3F	; 63
     d74:	80 83       	st	Z, r24
     d76:	91 83       	std	Z+1, r25	; 0x01
     d78:	a2 83       	std	Z+2, r26	; 0x02
     d7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d7c:	8e 01       	movw	r16, r28
     d7e:	01 5c       	subi	r16, 0xC1	; 193
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
     d82:	fe 01       	movw	r30, r28
     d84:	ed 5b       	subi	r30, 0xBD	; 189
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	60 81       	ld	r22, Z
     d8a:	71 81       	ldd	r23, Z+1	; 0x01
     d8c:	82 81       	ldd	r24, Z+2	; 0x02
     d8e:	93 81       	ldd	r25, Z+3	; 0x03
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	4a e7       	ldi	r20, 0x7A	; 122
     d96:	54 e4       	ldi	r21, 0x44	; 68
     d98:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	f8 01       	movw	r30, r16
     da2:	80 83       	st	Z, r24
     da4:	91 83       	std	Z+1, r25	; 0x01
     da6:	a2 83       	std	Z+2, r26	; 0x02
     da8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     daa:	fe 01       	movw	r30, r28
     dac:	ff 96       	adiw	r30, 0x3f	; 63
     dae:	60 81       	ld	r22, Z
     db0:	71 81       	ldd	r23, Z+1	; 0x01
     db2:	82 81       	ldd	r24, Z+2	; 0x02
     db4:	93 81       	ldd	r25, Z+3	; 0x03
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e8       	ldi	r20, 0x80	; 128
     dbc:	5f e3       	ldi	r21, 0x3F	; 63
     dbe:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
     dc2:	88 23       	and	r24, r24
     dc4:	2c f4       	brge	.+10     	; 0xdd0 <LCDinit+0x39c>
		__ticks = 1;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	9e af       	std	Y+62, r25	; 0x3e
     dcc:	8d af       	std	Y+61, r24	; 0x3d
     dce:	46 c0       	rjmp	.+140    	; 0xe5c <LCDinit+0x428>
	else if (__tmp > 65535)
     dd0:	fe 01       	movw	r30, r28
     dd2:	ff 96       	adiw	r30, 0x3f	; 63
     dd4:	60 81       	ld	r22, Z
     dd6:	71 81       	ldd	r23, Z+1	; 0x01
     dd8:	82 81       	ldd	r24, Z+2	; 0x02
     dda:	93 81       	ldd	r25, Z+3	; 0x03
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	3f ef       	ldi	r19, 0xFF	; 255
     de0:	4f e7       	ldi	r20, 0x7F	; 127
     de2:	57 e4       	ldi	r21, 0x47	; 71
     de4:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
     de8:	18 16       	cp	r1, r24
     dea:	64 f5       	brge	.+88     	; 0xe44 <LCDinit+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dec:	fe 01       	movw	r30, r28
     dee:	ed 5b       	subi	r30, 0xBD	; 189
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	60 81       	ld	r22, Z
     df4:	71 81       	ldd	r23, Z+1	; 0x01
     df6:	82 81       	ldd	r24, Z+2	; 0x02
     df8:	93 81       	ldd	r25, Z+3	; 0x03
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e2       	ldi	r20, 0x20	; 32
     e00:	51 e4       	ldi	r21, 0x41	; 65
     e02:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	bc 01       	movw	r22, r24
     e0c:	cd 01       	movw	r24, r26
     e0e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	9e af       	std	Y+62, r25	; 0x3e
     e18:	8d af       	std	Y+61, r24	; 0x3d
     e1a:	0f c0       	rjmp	.+30     	; 0xe3a <LCDinit+0x406>
     e1c:	84 e6       	ldi	r24, 0x64	; 100
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	9c af       	std	Y+60, r25	; 0x3c
     e22:	8b af       	std	Y+59, r24	; 0x3b
     e24:	8b ad       	ldd	r24, Y+59	; 0x3b
     e26:	9c ad       	ldd	r25, Y+60	; 0x3c
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <LCDinit+0x3f4>
     e2c:	9c af       	std	Y+60, r25	; 0x3c
     e2e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e30:	8d ad       	ldd	r24, Y+61	; 0x3d
     e32:	9e ad       	ldd	r25, Y+62	; 0x3e
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	9e af       	std	Y+62, r25	; 0x3e
     e38:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3a:	8d ad       	ldd	r24, Y+61	; 0x3d
     e3c:	9e ad       	ldd	r25, Y+62	; 0x3e
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	69 f7       	brne	.-38     	; 0xe1c <LCDinit+0x3e8>
     e42:	16 c0       	rjmp	.+44     	; 0xe70 <LCDinit+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e44:	fe 01       	movw	r30, r28
     e46:	ff 96       	adiw	r30, 0x3f	; 63
     e48:	60 81       	ld	r22, Z
     e4a:	71 81       	ldd	r23, Z+1	; 0x01
     e4c:	82 81       	ldd	r24, Z+2	; 0x02
     e4e:	93 81       	ldd	r25, Z+3	; 0x03
     e50:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	9e af       	std	Y+62, r25	; 0x3e
     e5a:	8d af       	std	Y+61, r24	; 0x3d
     e5c:	8d ad       	ldd	r24, Y+61	; 0x3d
     e5e:	9e ad       	ldd	r25, Y+62	; 0x3e
     e60:	9a af       	std	Y+58, r25	; 0x3a
     e62:	89 af       	std	Y+57, r24	; 0x39
     e64:	89 ad       	ldd	r24, Y+57	; 0x39
     e66:	9a ad       	ldd	r25, Y+58	; 0x3a
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <LCDinit+0x434>
     e6c:	9a af       	std	Y+58, r25	; 0x3a
     e6e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     e70:	e5 e3       	ldi	r30, 0x35	; 53
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 e3       	ldi	r24, 0x30	; 48
     e76:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e78:	a5 e3       	ldi	r26, 0x35	; 53
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e5 e3       	ldi	r30, 0x35	; 53
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	84 60       	ori	r24, 0x04	; 4
     e84:	8c 93       	st	X, r24
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	a0 e8       	ldi	r26, 0x80	; 128
     e8c:	bf e3       	ldi	r27, 0x3F	; 63
     e8e:	8d ab       	std	Y+53, r24	; 0x35
     e90:	9e ab       	std	Y+54, r25	; 0x36
     e92:	af ab       	std	Y+55, r26	; 0x37
     e94:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e96:	6d a9       	ldd	r22, Y+53	; 0x35
     e98:	7e a9       	ldd	r23, Y+54	; 0x36
     e9a:	8f a9       	ldd	r24, Y+55	; 0x37
     e9c:	98 ad       	ldd	r25, Y+56	; 0x38
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	4a e7       	ldi	r20, 0x7A	; 122
     ea4:	54 e4       	ldi	r21, 0x44	; 68
     ea6:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	89 ab       	std	Y+49, r24	; 0x31
     eb0:	9a ab       	std	Y+50, r25	; 0x32
     eb2:	ab ab       	std	Y+51, r26	; 0x33
     eb4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     eb6:	69 a9       	ldd	r22, Y+49	; 0x31
     eb8:	7a a9       	ldd	r23, Y+50	; 0x32
     eba:	8b a9       	ldd	r24, Y+51	; 0x33
     ebc:	9c a9       	ldd	r25, Y+52	; 0x34
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e8       	ldi	r20, 0x80	; 128
     ec4:	5f e3       	ldi	r21, 0x3F	; 63
     ec6:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
     eca:	88 23       	and	r24, r24
     ecc:	2c f4       	brge	.+10     	; 0xed8 <LCDinit+0x4a4>
		__ticks = 1;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	98 ab       	std	Y+48, r25	; 0x30
     ed4:	8f a7       	std	Y+47, r24	; 0x2f
     ed6:	3f c0       	rjmp	.+126    	; 0xf56 <LCDinit+0x522>
	else if (__tmp > 65535)
     ed8:	69 a9       	ldd	r22, Y+49	; 0x31
     eda:	7a a9       	ldd	r23, Y+50	; 0x32
     edc:	8b a9       	ldd	r24, Y+51	; 0x33
     ede:	9c a9       	ldd	r25, Y+52	; 0x34
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	3f ef       	ldi	r19, 0xFF	; 255
     ee4:	4f e7       	ldi	r20, 0x7F	; 127
     ee6:	57 e4       	ldi	r21, 0x47	; 71
     ee8:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
     eec:	18 16       	cp	r1, r24
     eee:	4c f5       	brge	.+82     	; 0xf42 <LCDinit+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef0:	6d a9       	ldd	r22, Y+53	; 0x35
     ef2:	7e a9       	ldd	r23, Y+54	; 0x36
     ef4:	8f a9       	ldd	r24, Y+55	; 0x37
     ef6:	98 ad       	ldd	r25, Y+56	; 0x38
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e2       	ldi	r20, 0x20	; 32
     efe:	51 e4       	ldi	r21, 0x41	; 65
     f00:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	bc 01       	movw	r22, r24
     f0a:	cd 01       	movw	r24, r26
     f0c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	98 ab       	std	Y+48, r25	; 0x30
     f16:	8f a7       	std	Y+47, r24	; 0x2f
     f18:	0f c0       	rjmp	.+30     	; 0xf38 <LCDinit+0x504>
     f1a:	84 e6       	ldi	r24, 0x64	; 100
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	9e a7       	std	Y+46, r25	; 0x2e
     f20:	8d a7       	std	Y+45, r24	; 0x2d
     f22:	8d a5       	ldd	r24, Y+45	; 0x2d
     f24:	9e a5       	ldd	r25, Y+46	; 0x2e
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <LCDinit+0x4f2>
     f2a:	9e a7       	std	Y+46, r25	; 0x2e
     f2c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f30:	98 a9       	ldd	r25, Y+48	; 0x30
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	98 ab       	std	Y+48, r25	; 0x30
     f36:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f38:	8f a5       	ldd	r24, Y+47	; 0x2f
     f3a:	98 a9       	ldd	r25, Y+48	; 0x30
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	69 f7       	brne	.-38     	; 0xf1a <LCDinit+0x4e6>
     f40:	14 c0       	rjmp	.+40     	; 0xf6a <LCDinit+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f42:	69 a9       	ldd	r22, Y+49	; 0x31
     f44:	7a a9       	ldd	r23, Y+50	; 0x32
     f46:	8b a9       	ldd	r24, Y+51	; 0x33
     f48:	9c a9       	ldd	r25, Y+52	; 0x34
     f4a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	98 ab       	std	Y+48, r25	; 0x30
     f54:	8f a7       	std	Y+47, r24	; 0x2f
     f56:	8f a5       	ldd	r24, Y+47	; 0x2f
     f58:	98 a9       	ldd	r25, Y+48	; 0x30
     f5a:	9c a7       	std	Y+44, r25	; 0x2c
     f5c:	8b a7       	std	Y+43, r24	; 0x2b
     f5e:	8b a5       	ldd	r24, Y+43	; 0x2b
     f60:	9c a5       	ldd	r25, Y+44	; 0x2c
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <LCDinit+0x52e>
     f66:	9c a7       	std	Y+44, r25	; 0x2c
     f68:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     f6a:	a5 e3       	ldi	r26, 0x35	; 53
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e5 e3       	ldi	r30, 0x35	; 53
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8b 7f       	andi	r24, 0xFB	; 251
     f76:	8c 93       	st	X, r24
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	a0 e8       	ldi	r26, 0x80	; 128
     f7e:	bf e3       	ldi	r27, 0x3F	; 63
     f80:	8f a3       	std	Y+39, r24	; 0x27
     f82:	98 a7       	std	Y+40, r25	; 0x28
     f84:	a9 a7       	std	Y+41, r26	; 0x29
     f86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f88:	6f a1       	ldd	r22, Y+39	; 0x27
     f8a:	78 a5       	ldd	r23, Y+40	; 0x28
     f8c:	89 a5       	ldd	r24, Y+41	; 0x29
     f8e:	9a a5       	ldd	r25, Y+42	; 0x2a
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	4a e7       	ldi	r20, 0x7A	; 122
     f96:	54 e4       	ldi	r21, 0x44	; 68
     f98:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	8b a3       	std	Y+35, r24	; 0x23
     fa2:	9c a3       	std	Y+36, r25	; 0x24
     fa4:	ad a3       	std	Y+37, r26	; 0x25
     fa6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fa8:	6b a1       	ldd	r22, Y+35	; 0x23
     faa:	7c a1       	ldd	r23, Y+36	; 0x24
     fac:	8d a1       	ldd	r24, Y+37	; 0x25
     fae:	9e a1       	ldd	r25, Y+38	; 0x26
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e8       	ldi	r20, 0x80	; 128
     fb6:	5f e3       	ldi	r21, 0x3F	; 63
     fb8:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
     fbc:	88 23       	and	r24, r24
     fbe:	2c f4       	brge	.+10     	; 0xfca <LCDinit+0x596>
		__ticks = 1;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9a a3       	std	Y+34, r25	; 0x22
     fc6:	89 a3       	std	Y+33, r24	; 0x21
     fc8:	3f c0       	rjmp	.+126    	; 0x1048 <LCDinit+0x614>
	else if (__tmp > 65535)
     fca:	6b a1       	ldd	r22, Y+35	; 0x23
     fcc:	7c a1       	ldd	r23, Y+36	; 0x24
     fce:	8d a1       	ldd	r24, Y+37	; 0x25
     fd0:	9e a1       	ldd	r25, Y+38	; 0x26
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	3f ef       	ldi	r19, 0xFF	; 255
     fd6:	4f e7       	ldi	r20, 0x7F	; 127
     fd8:	57 e4       	ldi	r21, 0x47	; 71
     fda:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
     fde:	18 16       	cp	r1, r24
     fe0:	4c f5       	brge	.+82     	; 0x1034 <LCDinit+0x600>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe2:	6f a1       	ldd	r22, Y+39	; 0x27
     fe4:	78 a5       	ldd	r23, Y+40	; 0x28
     fe6:	89 a5       	ldd	r24, Y+41	; 0x29
     fe8:	9a a5       	ldd	r25, Y+42	; 0x2a
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e2       	ldi	r20, 0x20	; 32
     ff0:	51 e4       	ldi	r21, 0x41	; 65
     ff2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	bc 01       	movw	r22, r24
     ffc:	cd 01       	movw	r24, r26
     ffe:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	9a a3       	std	Y+34, r25	; 0x22
    1008:	89 a3       	std	Y+33, r24	; 0x21
    100a:	0f c0       	rjmp	.+30     	; 0x102a <LCDinit+0x5f6>
    100c:	84 e6       	ldi	r24, 0x64	; 100
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	98 a3       	std	Y+32, r25	; 0x20
    1012:	8f 8f       	std	Y+31, r24	; 0x1f
    1014:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1016:	98 a1       	ldd	r25, Y+32	; 0x20
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <LCDinit+0x5e4>
    101c:	98 a3       	std	Y+32, r25	; 0x20
    101e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1020:	89 a1       	ldd	r24, Y+33	; 0x21
    1022:	9a a1       	ldd	r25, Y+34	; 0x22
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	9a a3       	std	Y+34, r25	; 0x22
    1028:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102a:	89 a1       	ldd	r24, Y+33	; 0x21
    102c:	9a a1       	ldd	r25, Y+34	; 0x22
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	69 f7       	brne	.-38     	; 0x100c <LCDinit+0x5d8>
    1032:	14 c0       	rjmp	.+40     	; 0x105c <LCDinit+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1034:	6b a1       	ldd	r22, Y+35	; 0x23
    1036:	7c a1       	ldd	r23, Y+36	; 0x24
    1038:	8d a1       	ldd	r24, Y+37	; 0x25
    103a:	9e a1       	ldd	r25, Y+38	; 0x26
    103c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	9a a3       	std	Y+34, r25	; 0x22
    1046:	89 a3       	std	Y+33, r24	; 0x21
    1048:	89 a1       	ldd	r24, Y+33	; 0x21
    104a:	9a a1       	ldd	r25, Y+34	; 0x22
    104c:	9e 8f       	std	Y+30, r25	; 0x1e
    104e:	8d 8f       	std	Y+29, r24	; 0x1d
    1050:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1052:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <LCDinit+0x620>
    1058:	9e 8f       	std	Y+30, r25	; 0x1e
    105a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    105c:	e5 e3       	ldi	r30, 0x35	; 53
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 e2       	ldi	r24, 0x20	; 32
    1062:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1064:	a5 e3       	ldi	r26, 0x35	; 53
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e5 e3       	ldi	r30, 0x35	; 53
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	84 60       	ori	r24, 0x04	; 4
    1070:	8c 93       	st	X, r24
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	a0 e8       	ldi	r26, 0x80	; 128
    1078:	bf e3       	ldi	r27, 0x3F	; 63
    107a:	89 8f       	std	Y+25, r24	; 0x19
    107c:	9a 8f       	std	Y+26, r25	; 0x1a
    107e:	ab 8f       	std	Y+27, r26	; 0x1b
    1080:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1082:	69 8d       	ldd	r22, Y+25	; 0x19
    1084:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1086:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1088:	9c 8d       	ldd	r25, Y+28	; 0x1c
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	4a e7       	ldi	r20, 0x7A	; 122
    1090:	54 e4       	ldi	r21, 0x44	; 68
    1092:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	8d 8b       	std	Y+21, r24	; 0x15
    109c:	9e 8b       	std	Y+22, r25	; 0x16
    109e:	af 8b       	std	Y+23, r26	; 0x17
    10a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10a2:	6d 89       	ldd	r22, Y+21	; 0x15
    10a4:	7e 89       	ldd	r23, Y+22	; 0x16
    10a6:	8f 89       	ldd	r24, Y+23	; 0x17
    10a8:	98 8d       	ldd	r25, Y+24	; 0x18
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	40 e8       	ldi	r20, 0x80	; 128
    10b0:	5f e3       	ldi	r21, 0x3F	; 63
    10b2:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
    10b6:	88 23       	and	r24, r24
    10b8:	2c f4       	brge	.+10     	; 0x10c4 <LCDinit+0x690>
		__ticks = 1;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	9c 8b       	std	Y+20, r25	; 0x14
    10c0:	8b 8b       	std	Y+19, r24	; 0x13
    10c2:	3f c0       	rjmp	.+126    	; 0x1142 <LCDinit+0x70e>
	else if (__tmp > 65535)
    10c4:	6d 89       	ldd	r22, Y+21	; 0x15
    10c6:	7e 89       	ldd	r23, Y+22	; 0x16
    10c8:	8f 89       	ldd	r24, Y+23	; 0x17
    10ca:	98 8d       	ldd	r25, Y+24	; 0x18
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	3f ef       	ldi	r19, 0xFF	; 255
    10d0:	4f e7       	ldi	r20, 0x7F	; 127
    10d2:	57 e4       	ldi	r21, 0x47	; 71
    10d4:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
    10d8:	18 16       	cp	r1, r24
    10da:	4c f5       	brge	.+82     	; 0x112e <LCDinit+0x6fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10dc:	69 8d       	ldd	r22, Y+25	; 0x19
    10de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e2       	ldi	r20, 0x20	; 32
    10ea:	51 e4       	ldi	r21, 0x41	; 65
    10ec:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	bc 01       	movw	r22, r24
    10f6:	cd 01       	movw	r24, r26
    10f8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	9c 8b       	std	Y+20, r25	; 0x14
    1102:	8b 8b       	std	Y+19, r24	; 0x13
    1104:	0f c0       	rjmp	.+30     	; 0x1124 <LCDinit+0x6f0>
    1106:	84 e6       	ldi	r24, 0x64	; 100
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	9a 8b       	std	Y+18, r25	; 0x12
    110c:	89 8b       	std	Y+17, r24	; 0x11
    110e:	89 89       	ldd	r24, Y+17	; 0x11
    1110:	9a 89       	ldd	r25, Y+18	; 0x12
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <LCDinit+0x6de>
    1116:	9a 8b       	std	Y+18, r25	; 0x12
    1118:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111a:	8b 89       	ldd	r24, Y+19	; 0x13
    111c:	9c 89       	ldd	r25, Y+20	; 0x14
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	9c 8b       	std	Y+20, r25	; 0x14
    1122:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1124:	8b 89       	ldd	r24, Y+19	; 0x13
    1126:	9c 89       	ldd	r25, Y+20	; 0x14
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	69 f7       	brne	.-38     	; 0x1106 <LCDinit+0x6d2>
    112c:	14 c0       	rjmp	.+40     	; 0x1156 <LCDinit+0x722>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    112e:	6d 89       	ldd	r22, Y+21	; 0x15
    1130:	7e 89       	ldd	r23, Y+22	; 0x16
    1132:	8f 89       	ldd	r24, Y+23	; 0x17
    1134:	98 8d       	ldd	r25, Y+24	; 0x18
    1136:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	9c 8b       	std	Y+20, r25	; 0x14
    1140:	8b 8b       	std	Y+19, r24	; 0x13
    1142:	8b 89       	ldd	r24, Y+19	; 0x13
    1144:	9c 89       	ldd	r25, Y+20	; 0x14
    1146:	98 8b       	std	Y+16, r25	; 0x10
    1148:	8f 87       	std	Y+15, r24	; 0x0f
    114a:	8f 85       	ldd	r24, Y+15	; 0x0f
    114c:	98 89       	ldd	r25, Y+16	; 0x10
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	f1 f7       	brne	.-4      	; 0x114e <LCDinit+0x71a>
    1152:	98 8b       	std	Y+16, r25	; 0x10
    1154:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1156:	a5 e3       	ldi	r26, 0x35	; 53
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e5 e3       	ldi	r30, 0x35	; 53
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	8b 7f       	andi	r24, 0xFB	; 251
    1162:	8c 93       	st	X, r24
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	a0 e8       	ldi	r26, 0x80	; 128
    116a:	bf e3       	ldi	r27, 0x3F	; 63
    116c:	8b 87       	std	Y+11, r24	; 0x0b
    116e:	9c 87       	std	Y+12, r25	; 0x0c
    1170:	ad 87       	std	Y+13, r26	; 0x0d
    1172:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1174:	6b 85       	ldd	r22, Y+11	; 0x0b
    1176:	7c 85       	ldd	r23, Y+12	; 0x0c
    1178:	8d 85       	ldd	r24, Y+13	; 0x0d
    117a:	9e 85       	ldd	r25, Y+14	; 0x0e
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	4a e7       	ldi	r20, 0x7A	; 122
    1182:	54 e4       	ldi	r21, 0x44	; 68
    1184:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	8f 83       	std	Y+7, r24	; 0x07
    118e:	98 87       	std	Y+8, r25	; 0x08
    1190:	a9 87       	std	Y+9, r26	; 0x09
    1192:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1194:	6f 81       	ldd	r22, Y+7	; 0x07
    1196:	78 85       	ldd	r23, Y+8	; 0x08
    1198:	89 85       	ldd	r24, Y+9	; 0x09
    119a:	9a 85       	ldd	r25, Y+10	; 0x0a
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e8       	ldi	r20, 0x80	; 128
    11a2:	5f e3       	ldi	r21, 0x3F	; 63
    11a4:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ltsf2>
    11a8:	88 23       	and	r24, r24
    11aa:	2c f4       	brge	.+10     	; 0x11b6 <LCDinit+0x782>
		__ticks = 1;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	9e 83       	std	Y+6, r25	; 0x06
    11b2:	8d 83       	std	Y+5, r24	; 0x05
    11b4:	3f c0       	rjmp	.+126    	; 0x1234 <LCDinit+0x800>
	else if (__tmp > 65535)
    11b6:	6f 81       	ldd	r22, Y+7	; 0x07
    11b8:	78 85       	ldd	r23, Y+8	; 0x08
    11ba:	89 85       	ldd	r24, Y+9	; 0x09
    11bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	3f ef       	ldi	r19, 0xFF	; 255
    11c2:	4f e7       	ldi	r20, 0x7F	; 127
    11c4:	57 e4       	ldi	r21, 0x47	; 71
    11c6:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__gtsf2>
    11ca:	18 16       	cp	r1, r24
    11cc:	4c f5       	brge	.+82     	; 0x1220 <LCDinit+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e2       	ldi	r20, 0x20	; 32
    11dc:	51 e4       	ldi	r21, 0x41	; 65
    11de:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	9e 83       	std	Y+6, r25	; 0x06
    11f4:	8d 83       	std	Y+5, r24	; 0x05
    11f6:	0f c0       	rjmp	.+30     	; 0x1216 <LCDinit+0x7e2>
    11f8:	84 e6       	ldi	r24, 0x64	; 100
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	9c 83       	std	Y+4, r25	; 0x04
    11fe:	8b 83       	std	Y+3, r24	; 0x03
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <LCDinit+0x7d0>
    1208:	9c 83       	std	Y+4, r25	; 0x04
    120a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	9e 83       	std	Y+6, r25	; 0x06
    1214:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	69 f7       	brne	.-38     	; 0x11f8 <LCDinit+0x7c4>
    121e:	14 c0       	rjmp	.+40     	; 0x1248 <LCDinit+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1220:	6f 81       	ldd	r22, Y+7	; 0x07
    1222:	78 85       	ldd	r23, Y+8	; 0x08
    1224:	89 85       	ldd	r24, Y+9	; 0x09
    1226:	9a 85       	ldd	r25, Y+10	; 0x0a
    1228:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fixunssfsi>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	9e 83       	std	Y+6, r25	; 0x06
    1232:	8d 83       	std	Y+5, r24	; 0x05
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	9a 83       	std	Y+2, r25	; 0x02
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	f1 f7       	brne	.-4      	; 0x1240 <LCDinit+0x80c>
    1244:	9a 83       	std	Y+2, r25	; 0x02
    1246:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1248:	88 e2       	ldi	r24, 0x28	; 40
    124a:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    124e:	8c e0       	ldi	r24, 0x0C	; 12
    1250:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
    1254:	fe 01       	movw	r30, r28
    1256:	ec 59       	subi	r30, 0x9C	; 156
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	10 82       	st	Z, r1
    125c:	fe 01       	movw	r30, r28
    125e:	ed 59       	subi	r30, 0x9D	; 157
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	10 82       	st	Z, r1
    1264:	23 c0       	rjmp	.+70     	; 0x12ac <LCDinit+0x878>
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1266:	fe 01       	movw	r30, r28
    1268:	ec 59       	subi	r30, 0x9C	; 156
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	80 81       	ld	r24, Z
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	9c 01       	movw	r18, r24
    1274:	2c 5a       	subi	r18, 0xAC	; 172
    1276:	3f 4f       	sbci	r19, 0xFF	; 255
    1278:	fe 01       	movw	r30, r28
    127a:	ed 59       	subi	r30, 0x9D	; 157
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	40 81       	ld	r20, Z
    1280:	de 01       	movw	r26, r28
    1282:	ad 59       	subi	r26, 0x9D	; 157
    1284:	bf 4f       	sbci	r27, 0xFF	; 255
    1286:	fe 01       	movw	r30, r28
    1288:	ed 59       	subi	r30, 0x9D	; 157
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	80 81       	ld	r24, Z
    128e:	8f 5f       	subi	r24, 0xFF	; 255
    1290:	8c 93       	st	X, r24
    1292:	c9 01       	movw	r24, r18
    1294:	64 2f       	mov	r22, r20
    1296:	0e 94 2c 0a 	call	0x1458	; 0x1458 <LCDdefinechar>
		ch=ch+8;
    129a:	de 01       	movw	r26, r28
    129c:	ac 59       	subi	r26, 0x9C	; 156
    129e:	bf 4f       	sbci	r27, 0xFF	; 255
    12a0:	fe 01       	movw	r30, r28
    12a2:	ec 59       	subi	r30, 0x9C	; 156
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	80 81       	ld	r24, Z
    12a8:	88 5f       	subi	r24, 0xF8	; 248
    12aa:	8c 93       	st	X, r24
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    12ac:	fe 01       	movw	r30, r28
    12ae:	ec 59       	subi	r30, 0x9C	; 156
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	80 81       	ld	r24, Z
    12b4:	80 34       	cpi	r24, 0x40	; 64
    12b6:	b8 f2       	brcs	.-82     	; 0x1266 <LCDinit+0x832>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    12b8:	cc 59       	subi	r28, 0x9C	; 156
    12ba:	df 4f       	sbci	r29, 0xFF	; 255
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	08 95       	ret

000012d0 <LCDclr>:
void LCDclr(void)				//Clears LCD
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_CLR);
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
}
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_HOME);
    12ec:	82 e0       	ldi	r24, 0x02	; 2
    12ee:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
}
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <LCDstring+0x6>
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <LCDstring+0x8>
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	9a 83       	std	Y+2, r25	; 0x02
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	6b 83       	std	Y+3, r22	; 0x03
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	a1 f0       	breq	.+40     	; 0x133a <LCDstring+0x42>

	// print data
	for(i=0; i<nBytes; i++)
    1312:	1c 82       	std	Y+4, r1	; 0x04
    1314:	0e c0       	rjmp	.+28     	; 0x1332 <LCDstring+0x3a>
	{
		LCDsendChar(data[i]);
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	fc 01       	movw	r30, r24
    1322:	e2 0f       	add	r30, r18
    1324:	f3 1f       	adc	r31, r19
    1326:	80 81       	ld	r24, Z
    1328:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    132c:	9c 81       	ldd	r25, Y+4	; 0x04
    132e:	9f 5f       	subi	r25, 0xFF	; 255
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	98 17       	cp	r25, r24
    1338:	70 f3       	brcs	.-36     	; 0x1316 <LCDstring+0x1e>
	{
		LCDsendChar(data[i]);
	}
}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	00 d0       	rcall	.+0      	; 0x134e <LCDGotoXY+0x6>
    134e:	00 d0       	rcall	.+0      	; 0x1350 <LCDGotoXY+0x8>
    1350:	0f 92       	push	r0
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	6a 83       	std	Y+2, r22	; 0x02
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	3d 83       	std	Y+5, r19	; 0x05
    1362:	2c 83       	std	Y+4, r18	; 0x04
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	91 05       	cpc	r25, r1
    136c:	c1 f0       	breq	.+48     	; 0x139e <LCDGotoXY+0x56>
    136e:	2c 81       	ldd	r18, Y+4	; 0x04
    1370:	3d 81       	ldd	r19, Y+5	; 0x05
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	2c f4       	brge	.+10     	; 0x1382 <LCDGotoXY+0x3a>
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	9d 81       	ldd	r25, Y+5	; 0x05
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	61 f0       	breq	.+24     	; 0x1398 <LCDGotoXY+0x50>
    1380:	1d c0       	rjmp	.+58     	; 0x13bc <LCDGotoXY+0x74>
    1382:	2c 81       	ldd	r18, Y+4	; 0x04
    1384:	3d 81       	ldd	r19, Y+5	; 0x05
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	71 f0       	breq	.+28     	; 0x13a8 <LCDGotoXY+0x60>
    138c:	8c 81       	ldd	r24, Y+4	; 0x04
    138e:	9d 81       	ldd	r25, Y+5	; 0x05
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	71 f0       	breq	.+28     	; 0x13b2 <LCDGotoXY+0x6a>
    1396:	12 c0       	rjmp	.+36     	; 0x13bc <LCDGotoXY+0x74>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
    1398:	99 81       	ldd	r25, Y+1	; 0x01
    139a:	9b 83       	std	Y+3, r25	; 0x03
    139c:	11 c0       	rjmp	.+34     	; 0x13c0 <LCDGotoXY+0x78>
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	28 2f       	mov	r18, r24
    13a2:	20 5c       	subi	r18, 0xC0	; 192
    13a4:	2b 83       	std	Y+3, r18	; 0x03
    13a6:	0c c0       	rjmp	.+24     	; 0x13c0 <LCDGotoXY+0x78>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	38 2f       	mov	r19, r24
    13ac:	3c 5e       	subi	r19, 0xEC	; 236
    13ae:	3b 83       	std	Y+3, r19	; 0x03
    13b0:	07 c0       	rjmp	.+14     	; 0x13c0 <LCDGotoXY+0x78>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	98 2f       	mov	r25, r24
    13b6:	9c 5a       	subi	r25, 0xAC	; 172
    13b8:	9b 83       	std	Y+3, r25	; 0x03
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <LCDGotoXY+0x78>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
    13bc:	29 81       	ldd	r18, Y+1	; 0x01
    13be:	2b 83       	std	Y+3, r18	; 0x03
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	80 68       	ori	r24, 0x80	; 128
    13c4:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
	
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	2b 97       	sbiw	r28, 0x0b	; 11
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	99 87       	std	Y+9, r25	; 0x09
    13ee:	88 87       	std	Y+8, r24	; 0x08
    13f0:	6a 87       	std	Y+10, r22	; 0x0a
    13f2:	4b 87       	std	Y+11, r20	; 0x0b
	uint8_t i;
	LCDGotoXY(x,y);
    13f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f8:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    13fc:	1f 82       	std	Y+7, r1	; 0x07
    13fe:	13 c0       	rjmp	.+38     	; 0x1426 <CopyStringtoLCD+0x4e>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1400:	8f 81       	ldd	r24, Y+7	; 0x07
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	88 85       	ldd	r24, Y+8	; 0x08
    1408:	99 85       	ldd	r25, Y+9	; 0x09
    140a:	82 0f       	add	r24, r18
    140c:	93 1f       	adc	r25, r19
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	ed 81       	ldd	r30, Y+5	; 0x05
    1414:	fe 81       	ldd	r31, Y+6	; 0x06
    1416:	84 91       	lpm	r24, Z+
    1418:	8c 83       	std	Y+4, r24	; 0x04
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1420:	8f 81       	ldd	r24, Y+7	; 0x07
    1422:	8f 5f       	subi	r24, 0xFF	; 255
    1424:	8f 83       	std	Y+7, r24	; 0x07
    1426:	8f 81       	ldd	r24, Y+7	; 0x07
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	88 85       	ldd	r24, Y+8	; 0x08
    142e:	99 85       	ldd	r25, Y+9	; 0x09
    1430:	82 0f       	add	r24, r18
    1432:	93 1f       	adc	r25, r19
    1434:	9b 83       	std	Y+3, r25	; 0x03
    1436:	8a 83       	std	Y+2, r24	; 0x02
    1438:	ea 81       	ldd	r30, Y+2	; 0x02
    143a:	fb 81       	ldd	r31, Y+3	; 0x03
    143c:	84 91       	lpm	r24, Z+
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	88 23       	and	r24, r24
    1444:	e9 f6       	brne	.-70     	; 0x1400 <CopyStringtoLCD+0x28>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1446:	2b 96       	adiw	r28, 0x0b	; 11
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	2a 97       	sbiw	r28, 0x0a	; 10
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	99 87       	std	Y+9, r25	; 0x09
    146e:	88 87       	std	Y+8, r24	; 0x08
    1470:	6a 87       	std	Y+10, r22	; 0x0a
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    1472:	8a 85       	ldd	r24, Y+10	; 0x0a
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	80 64       	ori	r24, 0x40	; 64
    1486:	8f 83       	std	Y+7, r24	; 0x07
	for (i=0; i<8; i++){
    1488:	1d 82       	std	Y+5, r1	; 0x05
    148a:	1c 82       	std	Y+4, r1	; 0x04
    148c:	1d c0       	rjmp	.+58     	; 0x14c8 <LCDdefinechar+0x70>
		pcc=pgm_read_byte(&pc[i]);
    148e:	28 85       	ldd	r18, Y+8	; 0x08
    1490:	39 85       	ldd	r19, Y+9	; 0x09
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	9d 81       	ldd	r25, Y+5	; 0x05
    1496:	82 0f       	add	r24, r18
    1498:	93 1f       	adc	r25, r19
    149a:	9b 83       	std	Y+3, r25	; 0x03
    149c:	8a 83       	std	Y+2, r24	; 0x02
    149e:	ea 81       	ldd	r30, Y+2	; 0x02
    14a0:	fb 81       	ldd	r31, Y+3	; 0x03
    14a2:	84 91       	lpm	r24, Z+
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	8e 83       	std	Y+6, r24	; 0x06
		LCDsendCommand(a++);
    14aa:	9f 81       	ldd	r25, Y+7	; 0x07
    14ac:	8f 81       	ldd	r24, Y+7	; 0x07
    14ae:	8f 5f       	subi	r24, 0xFF	; 255
    14b0:	8f 83       	std	Y+7, r24	; 0x07
    14b2:	89 2f       	mov	r24, r25
    14b4:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
		LCDsendChar(pcc);
    14b8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ba:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	9d 83       	std	Y+5, r25	; 0x05
    14c6:	8c 83       	std	Y+4, r24	; 0x04
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	9d 81       	ldd	r25, Y+5	; 0x05
    14cc:	88 30       	cpi	r24, 0x08	; 8
    14ce:	91 05       	cpc	r25, r1
    14d0:	f0 f2       	brcs	.-68     	; 0x148e <LCDdefinechar+0x36>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    14d2:	2a 96       	adiw	r28, 0x0a	; 10
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <LCDshiftLeft>:

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <LCDshiftLeft+0x6>
    14ea:	0f 92       	push	r0
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    14f2:	1a 82       	std	Y+2, r1	; 0x02
    14f4:	19 82       	std	Y+1, r1	; 0x01
    14f6:	08 c0       	rjmp	.+16     	; 0x1508 <LCDshiftLeft+0x24>
	{
		LCDsendCommand(0x1E);
    14f8:	8e e1       	ldi	r24, 0x1E	; 30
    14fa:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	9a 81       	ldd	r25, Y+2	; 0x02
    1512:	82 17       	cp	r24, r18
    1514:	93 07       	cpc	r25, r19
    1516:	84 f3       	brlt	.-32     	; 0x14f8 <LCDshiftLeft+0x14>
	{
		LCDsendCommand(0x1E);
	}
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <LCDshiftRight+0x6>
    152a:	0f 92       	push	r0
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    1532:	1a 82       	std	Y+2, r1	; 0x02
    1534:	19 82       	std	Y+1, r1	; 0x01
    1536:	08 c0       	rjmp	.+16     	; 0x1548 <LCDshiftRight+0x24>
	{
		LCDsendCommand(0x18);
    1538:	88 e1       	ldi	r24, 0x18	; 24
    153a:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	9a 83       	std	Y+2, r25	; 0x02
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	82 17       	cp	r24, r18
    1554:	93 07       	cpc	r25, r19
    1556:	84 f3       	brlt	.-32     	; 0x1538 <LCDshiftRight+0x14>
	{
		LCDsendCommand(0x18);
	}
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0E);
    156c:	8e e0       	ldi	r24, 0x0E	; 14
    156e:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
}
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0F);
    1580:	8f e0       	ldi	r24, 0x0F	; 15
    1582:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
}
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    1594:	8c e0       	ldi	r24, 0x0C	; 12
    1596:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
}
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x08);
    15a8:	88 e0       	ldi	r24, 0x08	; 8
    15aa:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
}
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    15bc:	8c e0       	ldi	r24, 0x0C	; 12
    15be:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
}
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <LCDcursorLeft+0x6>
    15ce:	0f 92       	push	r0
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    15d6:	1a 82       	std	Y+2, r1	; 0x02
    15d8:	19 82       	std	Y+1, r1	; 0x01
    15da:	08 c0       	rjmp	.+16     	; 0x15ec <LCDcursorLeft+0x24>
	{
		LCDsendCommand(0x10);
    15dc:	80 e1       	ldi	r24, 0x10	; 16
    15de:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	9a 81       	ldd	r25, Y+2	; 0x02
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	9a 81       	ldd	r25, Y+2	; 0x02
    15f6:	82 17       	cp	r24, r18
    15f8:	93 07       	cpc	r25, r19
    15fa:	84 f3       	brlt	.-32     	; 0x15dc <LCDcursorLeft+0x14>
	{
		LCDsendCommand(0x10);
	}
}
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	00 d0       	rcall	.+0      	; 0x160e <LCDcursorRight+0x6>
    160e:	0f 92       	push	r0
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	8b 83       	std	Y+3, r24	; 0x03
	for (i=0;i<n;i++)
    1616:	1a 82       	std	Y+2, r1	; 0x02
    1618:	19 82       	std	Y+1, r1	; 0x01
    161a:	08 c0       	rjmp	.+16     	; 0x162c <LCDcursorRight+0x24>
	{
		LCDsendCommand(0x14);
    161c:	84 e1       	ldi	r24, 0x14	; 20
    161e:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	9a 81       	ldd	r25, Y+2	; 0x02
    1636:	82 17       	cp	r24, r18
    1638:	93 07       	cpc	r25, r19
    163a:	84 f3       	brlt	.-32     	; 0x161c <LCDcursorRight+0x14>
	{
		LCDsendCommand(0x14);
	}
}
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	27 97       	sbiw	r28, 0x07	; 7
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	8d 83       	std	Y+5, r24	; 0x05
    165e:	6e 83       	std	Y+6, r22	; 0x06
    1660:	4f 83       	std	Y+7, r20	; 0x07
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	48 2f       	mov	r20, r24
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	8f 81       	ldd	r24, Y+7	; 0x07
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	c9 01       	movw	r24, r18
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	82 0f       	add	r24, r18
    1676:	93 1f       	adc	r25, r19
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	9a 01       	movw	r18, r20
    167e:	28 9f       	mul	r18, r24
    1680:	a0 01       	movw	r20, r0
    1682:	29 9f       	mul	r18, r25
    1684:	50 0d       	add	r21, r0
    1686:	38 9f       	mul	r19, r24
    1688:	50 0d       	add	r21, r0
    168a:	11 24       	eor	r1, r1
    168c:	8e 81       	ldd	r24, Y+6	; 0x06
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	ca 01       	movw	r24, r20
    1694:	b9 01       	movw	r22, r18
    1696:	0e 94 18 11 	call	0x2230	; 0x2230 <__divmodhi4>
    169a:	cb 01       	movw	r24, r22
    169c:	9b 83       	std	Y+3, r25	; 0x03
    169e:	8a 83       	std	Y+2, r24	; 0x02
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    16a0:	1c 82       	std	Y+4, r1	; 0x04
    16a2:	35 c0       	rjmp	.+106    	; 0x170e <LCDprogressBar+0xc6>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	c9 01       	movw	r24, r18
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	82 0f       	add	r24, r18
    16b2:	93 1f       	adc	r25, r19
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	9c 01       	movw	r18, r24
    16ba:	2b 5f       	subi	r18, 0xFB	; 251
    16bc:	3f 4f       	sbci	r19, 0xFF	; 255
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	9b 81       	ldd	r25, Y+3	; 0x03
    16c2:	82 17       	cp	r24, r18
    16c4:	93 07       	cpc	r25, r19
    16c6:	d8 f4       	brcc	.+54     	; 0x16fe <LCDprogressBar+0xb6>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	c9 01       	movw	r24, r18
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	82 0f       	add	r24, r18
    16d6:	93 1f       	adc	r25, r19
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	9c 01       	movw	r18, r24
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	9b 81       	ldd	r25, Y+3	; 0x03
    16e2:	82 17       	cp	r24, r18
    16e4:	93 07       	cpc	r25, r19
    16e6:	10 f4       	brcc	.+4      	; 0x16ec <LCDprogressBar+0xa4>
			{
				// this is an empty block
				// use space character?
				c = 0;
    16e8:	19 82       	std	Y+1, r1	; 0x01
    16ea:	0b c0       	rjmp	.+22     	; 0x1702 <LCDprogressBar+0xba>
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	9b 81       	ldd	r25, Y+3	; 0x03
    16f0:	26 e0       	ldi	r18, 0x06	; 6
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	b9 01       	movw	r22, r18
    16f6:	0e 94 04 11 	call	0x2208	; 0x2208 <__udivmodhi4>
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <LCDprogressBar+0xba>
			}
		}
		else
		{
			// this is a full block
			c = 5;
    16fe:	85 e0       	ldi	r24, 0x05	; 5
    1700:	89 83       	std	Y+1, r24	; 0x01
		}
		
		// write character to display
		LCDsendChar(c);
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1708:	8c 81       	ldd	r24, Y+4	; 0x04
    170a:	8f 5f       	subi	r24, 0xFF	; 255
    170c:	8c 83       	std	Y+4, r24	; 0x04
    170e:	9c 81       	ldd	r25, Y+4	; 0x04
    1710:	8f 81       	ldd	r24, Y+7	; 0x07
    1712:	98 17       	cp	r25, r24
    1714:	38 f2       	brcs	.-114    	; 0x16a4 <LCDprogressBar+0x5c>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1716:	27 96       	adiw	r28, 0x07	; 7
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <LCDdisplay>:

void LCDdisplay(char a[])
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	00 d0       	rcall	.+0      	; 0x172e <LCDdisplay+0x6>
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	9a 83       	std	Y+2, r25	; 0x02
    1734:	89 83       	std	Y+1, r24	; 0x01
	LCDstring(a,strlen(a));
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <strlen>
    173e:	28 2f       	mov	r18, r24
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	9a 81       	ldd	r25, Y+2	; 0x02
    1744:	62 2f       	mov	r22, r18
    1746:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <LCDstring>
}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <__fixunssfsi>:
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	7b 01       	movw	r14, r22
    175e:	8c 01       	movw	r16, r24
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e0       	ldi	r20, 0x00	; 0
    1766:	5f e4       	ldi	r21, 0x4F	; 79
    1768:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__gesf2>
    176c:	88 23       	and	r24, r24
    176e:	8c f0       	brlt	.+34     	; 0x1792 <__fixunssfsi+0x3e>
    1770:	c8 01       	movw	r24, r16
    1772:	b7 01       	movw	r22, r14
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	5f e4       	ldi	r21, 0x4F	; 79
    177c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__subsf3>
    1780:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__fixsfsi>
    1784:	9b 01       	movw	r18, r22
    1786:	ac 01       	movw	r20, r24
    1788:	20 50       	subi	r18, 0x00	; 0
    178a:	30 40       	sbci	r19, 0x00	; 0
    178c:	40 40       	sbci	r20, 0x00	; 0
    178e:	50 48       	sbci	r21, 0x80	; 128
    1790:	06 c0       	rjmp	.+12     	; 0x179e <__fixunssfsi+0x4a>
    1792:	c8 01       	movw	r24, r16
    1794:	b7 01       	movw	r22, r14
    1796:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__fixsfsi>
    179a:	9b 01       	movw	r18, r22
    179c:	ac 01       	movw	r20, r24
    179e:	b9 01       	movw	r22, r18
    17a0:	ca 01       	movw	r24, r20
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	ff 90       	pop	r15
    17a8:	ef 90       	pop	r14
    17aa:	08 95       	ret

000017ac <_fpadd_parts>:
    17ac:	a0 e0       	ldi	r26, 0x00	; 0
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	ec ed       	ldi	r30, 0xDC	; 220
    17b2:	fb e0       	ldi	r31, 0x0B	; 11
    17b4:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__prologue_saves__>
    17b8:	dc 01       	movw	r26, r24
    17ba:	2b 01       	movw	r4, r22
    17bc:	fa 01       	movw	r30, r20
    17be:	9c 91       	ld	r25, X
    17c0:	92 30       	cpi	r25, 0x02	; 2
    17c2:	08 f4       	brcc	.+2      	; 0x17c6 <_fpadd_parts+0x1a>
    17c4:	39 c1       	rjmp	.+626    	; 0x1a38 <_fpadd_parts+0x28c>
    17c6:	eb 01       	movw	r28, r22
    17c8:	88 81       	ld	r24, Y
    17ca:	82 30       	cpi	r24, 0x02	; 2
    17cc:	08 f4       	brcc	.+2      	; 0x17d0 <_fpadd_parts+0x24>
    17ce:	33 c1       	rjmp	.+614    	; 0x1a36 <_fpadd_parts+0x28a>
    17d0:	94 30       	cpi	r25, 0x04	; 4
    17d2:	69 f4       	brne	.+26     	; 0x17ee <_fpadd_parts+0x42>
    17d4:	84 30       	cpi	r24, 0x04	; 4
    17d6:	09 f0       	breq	.+2      	; 0x17da <_fpadd_parts+0x2e>
    17d8:	2f c1       	rjmp	.+606    	; 0x1a38 <_fpadd_parts+0x28c>
    17da:	11 96       	adiw	r26, 0x01	; 1
    17dc:	9c 91       	ld	r25, X
    17de:	11 97       	sbiw	r26, 0x01	; 1
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	98 17       	cp	r25, r24
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <_fpadd_parts+0x3c>
    17e6:	28 c1       	rjmp	.+592    	; 0x1a38 <_fpadd_parts+0x28c>
    17e8:	a6 e6       	ldi	r26, 0x66	; 102
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	25 c1       	rjmp	.+586    	; 0x1a38 <_fpadd_parts+0x28c>
    17ee:	84 30       	cpi	r24, 0x04	; 4
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <_fpadd_parts+0x48>
    17f2:	21 c1       	rjmp	.+578    	; 0x1a36 <_fpadd_parts+0x28a>
    17f4:	82 30       	cpi	r24, 0x02	; 2
    17f6:	a9 f4       	brne	.+42     	; 0x1822 <_fpadd_parts+0x76>
    17f8:	92 30       	cpi	r25, 0x02	; 2
    17fa:	09 f0       	breq	.+2      	; 0x17fe <_fpadd_parts+0x52>
    17fc:	1d c1       	rjmp	.+570    	; 0x1a38 <_fpadd_parts+0x28c>
    17fe:	9a 01       	movw	r18, r20
    1800:	ad 01       	movw	r20, r26
    1802:	88 e0       	ldi	r24, 0x08	; 8
    1804:	ea 01       	movw	r28, r20
    1806:	09 90       	ld	r0, Y+
    1808:	ae 01       	movw	r20, r28
    180a:	e9 01       	movw	r28, r18
    180c:	09 92       	st	Y+, r0
    180e:	9e 01       	movw	r18, r28
    1810:	81 50       	subi	r24, 0x01	; 1
    1812:	c1 f7       	brne	.-16     	; 0x1804 <_fpadd_parts+0x58>
    1814:	e2 01       	movw	r28, r4
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	11 96       	adiw	r26, 0x01	; 1
    181a:	9c 91       	ld	r25, X
    181c:	89 23       	and	r24, r25
    181e:	81 83       	std	Z+1, r24	; 0x01
    1820:	08 c1       	rjmp	.+528    	; 0x1a32 <_fpadd_parts+0x286>
    1822:	92 30       	cpi	r25, 0x02	; 2
    1824:	09 f4       	brne	.+2      	; 0x1828 <_fpadd_parts+0x7c>
    1826:	07 c1       	rjmp	.+526    	; 0x1a36 <_fpadd_parts+0x28a>
    1828:	12 96       	adiw	r26, 0x02	; 2
    182a:	2d 90       	ld	r2, X+
    182c:	3c 90       	ld	r3, X
    182e:	13 97       	sbiw	r26, 0x03	; 3
    1830:	eb 01       	movw	r28, r22
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	9b 81       	ldd	r25, Y+3	; 0x03
    1836:	14 96       	adiw	r26, 0x04	; 4
    1838:	ad 90       	ld	r10, X+
    183a:	bd 90       	ld	r11, X+
    183c:	cd 90       	ld	r12, X+
    183e:	dc 90       	ld	r13, X
    1840:	17 97       	sbiw	r26, 0x07	; 7
    1842:	ec 80       	ldd	r14, Y+4	; 0x04
    1844:	fd 80       	ldd	r15, Y+5	; 0x05
    1846:	0e 81       	ldd	r16, Y+6	; 0x06
    1848:	1f 81       	ldd	r17, Y+7	; 0x07
    184a:	91 01       	movw	r18, r2
    184c:	28 1b       	sub	r18, r24
    184e:	39 0b       	sbc	r19, r25
    1850:	b9 01       	movw	r22, r18
    1852:	37 ff       	sbrs	r19, 7
    1854:	04 c0       	rjmp	.+8      	; 0x185e <_fpadd_parts+0xb2>
    1856:	66 27       	eor	r22, r22
    1858:	77 27       	eor	r23, r23
    185a:	62 1b       	sub	r22, r18
    185c:	73 0b       	sbc	r23, r19
    185e:	60 32       	cpi	r22, 0x20	; 32
    1860:	71 05       	cpc	r23, r1
    1862:	0c f0       	brlt	.+2      	; 0x1866 <_fpadd_parts+0xba>
    1864:	61 c0       	rjmp	.+194    	; 0x1928 <_fpadd_parts+0x17c>
    1866:	12 16       	cp	r1, r18
    1868:	13 06       	cpc	r1, r19
    186a:	6c f5       	brge	.+90     	; 0x18c6 <_fpadd_parts+0x11a>
    186c:	37 01       	movw	r6, r14
    186e:	48 01       	movw	r8, r16
    1870:	06 2e       	mov	r0, r22
    1872:	04 c0       	rjmp	.+8      	; 0x187c <_fpadd_parts+0xd0>
    1874:	96 94       	lsr	r9
    1876:	87 94       	ror	r8
    1878:	77 94       	ror	r7
    187a:	67 94       	ror	r6
    187c:	0a 94       	dec	r0
    187e:	d2 f7       	brpl	.-12     	; 0x1874 <_fpadd_parts+0xc8>
    1880:	21 e0       	ldi	r18, 0x01	; 1
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	50 e0       	ldi	r21, 0x00	; 0
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <_fpadd_parts+0xe6>
    188a:	22 0f       	add	r18, r18
    188c:	33 1f       	adc	r19, r19
    188e:	44 1f       	adc	r20, r20
    1890:	55 1f       	adc	r21, r21
    1892:	6a 95       	dec	r22
    1894:	d2 f7       	brpl	.-12     	; 0x188a <_fpadd_parts+0xde>
    1896:	21 50       	subi	r18, 0x01	; 1
    1898:	30 40       	sbci	r19, 0x00	; 0
    189a:	40 40       	sbci	r20, 0x00	; 0
    189c:	50 40       	sbci	r21, 0x00	; 0
    189e:	2e 21       	and	r18, r14
    18a0:	3f 21       	and	r19, r15
    18a2:	40 23       	and	r20, r16
    18a4:	51 23       	and	r21, r17
    18a6:	21 15       	cp	r18, r1
    18a8:	31 05       	cpc	r19, r1
    18aa:	41 05       	cpc	r20, r1
    18ac:	51 05       	cpc	r21, r1
    18ae:	21 f0       	breq	.+8      	; 0x18b8 <_fpadd_parts+0x10c>
    18b0:	21 e0       	ldi	r18, 0x01	; 1
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	79 01       	movw	r14, r18
    18ba:	8a 01       	movw	r16, r20
    18bc:	e6 28       	or	r14, r6
    18be:	f7 28       	or	r15, r7
    18c0:	08 29       	or	r16, r8
    18c2:	19 29       	or	r17, r9
    18c4:	3c c0       	rjmp	.+120    	; 0x193e <_fpadd_parts+0x192>
    18c6:	23 2b       	or	r18, r19
    18c8:	d1 f1       	breq	.+116    	; 0x193e <_fpadd_parts+0x192>
    18ca:	26 0e       	add	r2, r22
    18cc:	37 1e       	adc	r3, r23
    18ce:	35 01       	movw	r6, r10
    18d0:	46 01       	movw	r8, r12
    18d2:	06 2e       	mov	r0, r22
    18d4:	04 c0       	rjmp	.+8      	; 0x18de <_fpadd_parts+0x132>
    18d6:	96 94       	lsr	r9
    18d8:	87 94       	ror	r8
    18da:	77 94       	ror	r7
    18dc:	67 94       	ror	r6
    18de:	0a 94       	dec	r0
    18e0:	d2 f7       	brpl	.-12     	; 0x18d6 <_fpadd_parts+0x12a>
    18e2:	21 e0       	ldi	r18, 0x01	; 1
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	04 c0       	rjmp	.+8      	; 0x18f4 <_fpadd_parts+0x148>
    18ec:	22 0f       	add	r18, r18
    18ee:	33 1f       	adc	r19, r19
    18f0:	44 1f       	adc	r20, r20
    18f2:	55 1f       	adc	r21, r21
    18f4:	6a 95       	dec	r22
    18f6:	d2 f7       	brpl	.-12     	; 0x18ec <_fpadd_parts+0x140>
    18f8:	21 50       	subi	r18, 0x01	; 1
    18fa:	30 40       	sbci	r19, 0x00	; 0
    18fc:	40 40       	sbci	r20, 0x00	; 0
    18fe:	50 40       	sbci	r21, 0x00	; 0
    1900:	2a 21       	and	r18, r10
    1902:	3b 21       	and	r19, r11
    1904:	4c 21       	and	r20, r12
    1906:	5d 21       	and	r21, r13
    1908:	21 15       	cp	r18, r1
    190a:	31 05       	cpc	r19, r1
    190c:	41 05       	cpc	r20, r1
    190e:	51 05       	cpc	r21, r1
    1910:	21 f0       	breq	.+8      	; 0x191a <_fpadd_parts+0x16e>
    1912:	21 e0       	ldi	r18, 0x01	; 1
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	50 e0       	ldi	r21, 0x00	; 0
    191a:	59 01       	movw	r10, r18
    191c:	6a 01       	movw	r12, r20
    191e:	a6 28       	or	r10, r6
    1920:	b7 28       	or	r11, r7
    1922:	c8 28       	or	r12, r8
    1924:	d9 28       	or	r13, r9
    1926:	0b c0       	rjmp	.+22     	; 0x193e <_fpadd_parts+0x192>
    1928:	82 15       	cp	r24, r2
    192a:	93 05       	cpc	r25, r3
    192c:	2c f0       	brlt	.+10     	; 0x1938 <_fpadd_parts+0x18c>
    192e:	1c 01       	movw	r2, r24
    1930:	aa 24       	eor	r10, r10
    1932:	bb 24       	eor	r11, r11
    1934:	65 01       	movw	r12, r10
    1936:	03 c0       	rjmp	.+6      	; 0x193e <_fpadd_parts+0x192>
    1938:	ee 24       	eor	r14, r14
    193a:	ff 24       	eor	r15, r15
    193c:	87 01       	movw	r16, r14
    193e:	11 96       	adiw	r26, 0x01	; 1
    1940:	9c 91       	ld	r25, X
    1942:	d2 01       	movw	r26, r4
    1944:	11 96       	adiw	r26, 0x01	; 1
    1946:	8c 91       	ld	r24, X
    1948:	98 17       	cp	r25, r24
    194a:	09 f4       	brne	.+2      	; 0x194e <_fpadd_parts+0x1a2>
    194c:	45 c0       	rjmp	.+138    	; 0x19d8 <_fpadd_parts+0x22c>
    194e:	99 23       	and	r25, r25
    1950:	39 f0       	breq	.+14     	; 0x1960 <_fpadd_parts+0x1b4>
    1952:	a8 01       	movw	r20, r16
    1954:	97 01       	movw	r18, r14
    1956:	2a 19       	sub	r18, r10
    1958:	3b 09       	sbc	r19, r11
    195a:	4c 09       	sbc	r20, r12
    195c:	5d 09       	sbc	r21, r13
    195e:	06 c0       	rjmp	.+12     	; 0x196c <_fpadd_parts+0x1c0>
    1960:	a6 01       	movw	r20, r12
    1962:	95 01       	movw	r18, r10
    1964:	2e 19       	sub	r18, r14
    1966:	3f 09       	sbc	r19, r15
    1968:	40 0b       	sbc	r20, r16
    196a:	51 0b       	sbc	r21, r17
    196c:	57 fd       	sbrc	r21, 7
    196e:	08 c0       	rjmp	.+16     	; 0x1980 <_fpadd_parts+0x1d4>
    1970:	11 82       	std	Z+1, r1	; 0x01
    1972:	33 82       	std	Z+3, r3	; 0x03
    1974:	22 82       	std	Z+2, r2	; 0x02
    1976:	24 83       	std	Z+4, r18	; 0x04
    1978:	35 83       	std	Z+5, r19	; 0x05
    197a:	46 83       	std	Z+6, r20	; 0x06
    197c:	57 83       	std	Z+7, r21	; 0x07
    197e:	1d c0       	rjmp	.+58     	; 0x19ba <_fpadd_parts+0x20e>
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	81 83       	std	Z+1, r24	; 0x01
    1984:	33 82       	std	Z+3, r3	; 0x03
    1986:	22 82       	std	Z+2, r2	; 0x02
    1988:	88 27       	eor	r24, r24
    198a:	99 27       	eor	r25, r25
    198c:	dc 01       	movw	r26, r24
    198e:	82 1b       	sub	r24, r18
    1990:	93 0b       	sbc	r25, r19
    1992:	a4 0b       	sbc	r26, r20
    1994:	b5 0b       	sbc	r27, r21
    1996:	84 83       	std	Z+4, r24	; 0x04
    1998:	95 83       	std	Z+5, r25	; 0x05
    199a:	a6 83       	std	Z+6, r26	; 0x06
    199c:	b7 83       	std	Z+7, r27	; 0x07
    199e:	0d c0       	rjmp	.+26     	; 0x19ba <_fpadd_parts+0x20e>
    19a0:	22 0f       	add	r18, r18
    19a2:	33 1f       	adc	r19, r19
    19a4:	44 1f       	adc	r20, r20
    19a6:	55 1f       	adc	r21, r21
    19a8:	24 83       	std	Z+4, r18	; 0x04
    19aa:	35 83       	std	Z+5, r19	; 0x05
    19ac:	46 83       	std	Z+6, r20	; 0x06
    19ae:	57 83       	std	Z+7, r21	; 0x07
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	93 83       	std	Z+3, r25	; 0x03
    19b8:	82 83       	std	Z+2, r24	; 0x02
    19ba:	24 81       	ldd	r18, Z+4	; 0x04
    19bc:	35 81       	ldd	r19, Z+5	; 0x05
    19be:	46 81       	ldd	r20, Z+6	; 0x06
    19c0:	57 81       	ldd	r21, Z+7	; 0x07
    19c2:	da 01       	movw	r26, r20
    19c4:	c9 01       	movw	r24, r18
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	a1 09       	sbc	r26, r1
    19ca:	b1 09       	sbc	r27, r1
    19cc:	8f 5f       	subi	r24, 0xFF	; 255
    19ce:	9f 4f       	sbci	r25, 0xFF	; 255
    19d0:	af 4f       	sbci	r26, 0xFF	; 255
    19d2:	bf 43       	sbci	r27, 0x3F	; 63
    19d4:	28 f3       	brcs	.-54     	; 0x19a0 <_fpadd_parts+0x1f4>
    19d6:	0b c0       	rjmp	.+22     	; 0x19ee <_fpadd_parts+0x242>
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	33 82       	std	Z+3, r3	; 0x03
    19dc:	22 82       	std	Z+2, r2	; 0x02
    19de:	ea 0c       	add	r14, r10
    19e0:	fb 1c       	adc	r15, r11
    19e2:	0c 1d       	adc	r16, r12
    19e4:	1d 1d       	adc	r17, r13
    19e6:	e4 82       	std	Z+4, r14	; 0x04
    19e8:	f5 82       	std	Z+5, r15	; 0x05
    19ea:	06 83       	std	Z+6, r16	; 0x06
    19ec:	17 83       	std	Z+7, r17	; 0x07
    19ee:	83 e0       	ldi	r24, 0x03	; 3
    19f0:	80 83       	st	Z, r24
    19f2:	24 81       	ldd	r18, Z+4	; 0x04
    19f4:	35 81       	ldd	r19, Z+5	; 0x05
    19f6:	46 81       	ldd	r20, Z+6	; 0x06
    19f8:	57 81       	ldd	r21, Z+7	; 0x07
    19fa:	57 ff       	sbrs	r21, 7
    19fc:	1a c0       	rjmp	.+52     	; 0x1a32 <_fpadd_parts+0x286>
    19fe:	c9 01       	movw	r24, r18
    1a00:	aa 27       	eor	r26, r26
    1a02:	97 fd       	sbrc	r25, 7
    1a04:	a0 95       	com	r26
    1a06:	ba 2f       	mov	r27, r26
    1a08:	81 70       	andi	r24, 0x01	; 1
    1a0a:	90 70       	andi	r25, 0x00	; 0
    1a0c:	a0 70       	andi	r26, 0x00	; 0
    1a0e:	b0 70       	andi	r27, 0x00	; 0
    1a10:	56 95       	lsr	r21
    1a12:	47 95       	ror	r20
    1a14:	37 95       	ror	r19
    1a16:	27 95       	ror	r18
    1a18:	82 2b       	or	r24, r18
    1a1a:	93 2b       	or	r25, r19
    1a1c:	a4 2b       	or	r26, r20
    1a1e:	b5 2b       	or	r27, r21
    1a20:	84 83       	std	Z+4, r24	; 0x04
    1a22:	95 83       	std	Z+5, r25	; 0x05
    1a24:	a6 83       	std	Z+6, r26	; 0x06
    1a26:	b7 83       	std	Z+7, r27	; 0x07
    1a28:	82 81       	ldd	r24, Z+2	; 0x02
    1a2a:	93 81       	ldd	r25, Z+3	; 0x03
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	93 83       	std	Z+3, r25	; 0x03
    1a30:	82 83       	std	Z+2, r24	; 0x02
    1a32:	df 01       	movw	r26, r30
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <_fpadd_parts+0x28c>
    1a36:	d2 01       	movw	r26, r4
    1a38:	cd 01       	movw	r24, r26
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	e2 e1       	ldi	r30, 0x12	; 18
    1a40:	0c 94 47 11 	jmp	0x228e	; 0x228e <__epilogue_restores__>

00001a44 <__subsf3>:
    1a44:	a0 e2       	ldi	r26, 0x20	; 32
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e8 e2       	ldi	r30, 0x28	; 40
    1a4a:	fd e0       	ldi	r31, 0x0D	; 13
    1a4c:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__+0x18>
    1a50:	69 83       	std	Y+1, r22	; 0x01
    1a52:	7a 83       	std	Y+2, r23	; 0x02
    1a54:	8b 83       	std	Y+3, r24	; 0x03
    1a56:	9c 83       	std	Y+4, r25	; 0x04
    1a58:	2d 83       	std	Y+5, r18	; 0x05
    1a5a:	3e 83       	std	Y+6, r19	; 0x06
    1a5c:	4f 83       	std	Y+7, r20	; 0x07
    1a5e:	58 87       	std	Y+8, r21	; 0x08
    1a60:	e9 e0       	ldi	r30, 0x09	; 9
    1a62:	ee 2e       	mov	r14, r30
    1a64:	f1 2c       	mov	r15, r1
    1a66:	ec 0e       	add	r14, r28
    1a68:	fd 1e       	adc	r15, r29
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	b7 01       	movw	r22, r14
    1a70:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1a74:	8e 01       	movw	r16, r28
    1a76:	0f 5e       	subi	r16, 0xEF	; 239
    1a78:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	05 96       	adiw	r24, 0x05	; 5
    1a7e:	b8 01       	movw	r22, r16
    1a80:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1a84:	8a 89       	ldd	r24, Y+18	; 0x12
    1a86:	91 e0       	ldi	r25, 0x01	; 1
    1a88:	89 27       	eor	r24, r25
    1a8a:	8a 8b       	std	Y+18, r24	; 0x12
    1a8c:	c7 01       	movw	r24, r14
    1a8e:	b8 01       	movw	r22, r16
    1a90:	ae 01       	movw	r20, r28
    1a92:	47 5e       	subi	r20, 0xE7	; 231
    1a94:	5f 4f       	sbci	r21, 0xFF	; 255
    1a96:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_fpadd_parts>
    1a9a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__pack_f>
    1a9e:	a0 96       	adiw	r28, 0x20	; 32
    1aa0:	e6 e0       	ldi	r30, 0x06	; 6
    1aa2:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__+0x18>

00001aa6 <__addsf3>:
    1aa6:	a0 e2       	ldi	r26, 0x20	; 32
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e9 e5       	ldi	r30, 0x59	; 89
    1aac:	fd e0       	ldi	r31, 0x0D	; 13
    1aae:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__+0x18>
    1ab2:	69 83       	std	Y+1, r22	; 0x01
    1ab4:	7a 83       	std	Y+2, r23	; 0x02
    1ab6:	8b 83       	std	Y+3, r24	; 0x03
    1ab8:	9c 83       	std	Y+4, r25	; 0x04
    1aba:	2d 83       	std	Y+5, r18	; 0x05
    1abc:	3e 83       	std	Y+6, r19	; 0x06
    1abe:	4f 83       	std	Y+7, r20	; 0x07
    1ac0:	58 87       	std	Y+8, r21	; 0x08
    1ac2:	f9 e0       	ldi	r31, 0x09	; 9
    1ac4:	ef 2e       	mov	r14, r31
    1ac6:	f1 2c       	mov	r15, r1
    1ac8:	ec 0e       	add	r14, r28
    1aca:	fd 1e       	adc	r15, r29
    1acc:	ce 01       	movw	r24, r28
    1ace:	01 96       	adiw	r24, 0x01	; 1
    1ad0:	b7 01       	movw	r22, r14
    1ad2:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1ad6:	8e 01       	movw	r16, r28
    1ad8:	0f 5e       	subi	r16, 0xEF	; 239
    1ada:	1f 4f       	sbci	r17, 0xFF	; 255
    1adc:	ce 01       	movw	r24, r28
    1ade:	05 96       	adiw	r24, 0x05	; 5
    1ae0:	b8 01       	movw	r22, r16
    1ae2:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1ae6:	c7 01       	movw	r24, r14
    1ae8:	b8 01       	movw	r22, r16
    1aea:	ae 01       	movw	r20, r28
    1aec:	47 5e       	subi	r20, 0xE7	; 231
    1aee:	5f 4f       	sbci	r21, 0xFF	; 255
    1af0:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_fpadd_parts>
    1af4:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__pack_f>
    1af8:	a0 96       	adiw	r28, 0x20	; 32
    1afa:	e6 e0       	ldi	r30, 0x06	; 6
    1afc:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__+0x18>

00001b00 <__mulsf3>:
    1b00:	a0 e2       	ldi	r26, 0x20	; 32
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e6 e8       	ldi	r30, 0x86	; 134
    1b06:	fd e0       	ldi	r31, 0x0D	; 13
    1b08:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__prologue_saves__>
    1b0c:	69 83       	std	Y+1, r22	; 0x01
    1b0e:	7a 83       	std	Y+2, r23	; 0x02
    1b10:	8b 83       	std	Y+3, r24	; 0x03
    1b12:	9c 83       	std	Y+4, r25	; 0x04
    1b14:	2d 83       	std	Y+5, r18	; 0x05
    1b16:	3e 83       	std	Y+6, r19	; 0x06
    1b18:	4f 83       	std	Y+7, r20	; 0x07
    1b1a:	58 87       	std	Y+8, r21	; 0x08
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	be 01       	movw	r22, r28
    1b22:	67 5f       	subi	r22, 0xF7	; 247
    1b24:	7f 4f       	sbci	r23, 0xFF	; 255
    1b26:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	05 96       	adiw	r24, 0x05	; 5
    1b2e:	be 01       	movw	r22, r28
    1b30:	6f 5e       	subi	r22, 0xEF	; 239
    1b32:	7f 4f       	sbci	r23, 0xFF	; 255
    1b34:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1b38:	99 85       	ldd	r25, Y+9	; 0x09
    1b3a:	92 30       	cpi	r25, 0x02	; 2
    1b3c:	88 f0       	brcs	.+34     	; 0x1b60 <__mulsf3+0x60>
    1b3e:	89 89       	ldd	r24, Y+17	; 0x11
    1b40:	82 30       	cpi	r24, 0x02	; 2
    1b42:	c8 f0       	brcs	.+50     	; 0x1b76 <__mulsf3+0x76>
    1b44:	94 30       	cpi	r25, 0x04	; 4
    1b46:	19 f4       	brne	.+6      	; 0x1b4e <__mulsf3+0x4e>
    1b48:	82 30       	cpi	r24, 0x02	; 2
    1b4a:	51 f4       	brne	.+20     	; 0x1b60 <__mulsf3+0x60>
    1b4c:	04 c0       	rjmp	.+8      	; 0x1b56 <__mulsf3+0x56>
    1b4e:	84 30       	cpi	r24, 0x04	; 4
    1b50:	29 f4       	brne	.+10     	; 0x1b5c <__mulsf3+0x5c>
    1b52:	92 30       	cpi	r25, 0x02	; 2
    1b54:	81 f4       	brne	.+32     	; 0x1b76 <__mulsf3+0x76>
    1b56:	86 e6       	ldi	r24, 0x66	; 102
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	c6 c0       	rjmp	.+396    	; 0x1ce8 <__mulsf3+0x1e8>
    1b5c:	92 30       	cpi	r25, 0x02	; 2
    1b5e:	49 f4       	brne	.+18     	; 0x1b72 <__mulsf3+0x72>
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	8a 89       	ldd	r24, Y+18	; 0x12
    1b66:	98 13       	cpse	r25, r24
    1b68:	21 e0       	ldi	r18, 0x01	; 1
    1b6a:	2a 87       	std	Y+10, r18	; 0x0a
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	09 96       	adiw	r24, 0x09	; 9
    1b70:	bb c0       	rjmp	.+374    	; 0x1ce8 <__mulsf3+0x1e8>
    1b72:	82 30       	cpi	r24, 0x02	; 2
    1b74:	49 f4       	brne	.+18     	; 0x1b88 <__mulsf3+0x88>
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7a:	8a 89       	ldd	r24, Y+18	; 0x12
    1b7c:	98 13       	cpse	r25, r24
    1b7e:	21 e0       	ldi	r18, 0x01	; 1
    1b80:	2a 8b       	std	Y+18, r18	; 0x12
    1b82:	ce 01       	movw	r24, r28
    1b84:	41 96       	adiw	r24, 0x11	; 17
    1b86:	b0 c0       	rjmp	.+352    	; 0x1ce8 <__mulsf3+0x1e8>
    1b88:	2d 84       	ldd	r2, Y+13	; 0x0d
    1b8a:	3e 84       	ldd	r3, Y+14	; 0x0e
    1b8c:	4f 84       	ldd	r4, Y+15	; 0x0f
    1b8e:	58 88       	ldd	r5, Y+16	; 0x10
    1b90:	6d 88       	ldd	r6, Y+21	; 0x15
    1b92:	7e 88       	ldd	r7, Y+22	; 0x16
    1b94:	8f 88       	ldd	r8, Y+23	; 0x17
    1b96:	98 8c       	ldd	r9, Y+24	; 0x18
    1b98:	ee 24       	eor	r14, r14
    1b9a:	ff 24       	eor	r15, r15
    1b9c:	87 01       	movw	r16, r14
    1b9e:	aa 24       	eor	r10, r10
    1ba0:	bb 24       	eor	r11, r11
    1ba2:	65 01       	movw	r12, r10
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	50 e0       	ldi	r21, 0x00	; 0
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	e0 e0       	ldi	r30, 0x00	; 0
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	c1 01       	movw	r24, r2
    1bb2:	81 70       	andi	r24, 0x01	; 1
    1bb4:	90 70       	andi	r25, 0x00	; 0
    1bb6:	89 2b       	or	r24, r25
    1bb8:	e9 f0       	breq	.+58     	; 0x1bf4 <__mulsf3+0xf4>
    1bba:	e6 0c       	add	r14, r6
    1bbc:	f7 1c       	adc	r15, r7
    1bbe:	08 1d       	adc	r16, r8
    1bc0:	19 1d       	adc	r17, r9
    1bc2:	9a 01       	movw	r18, r20
    1bc4:	ab 01       	movw	r20, r22
    1bc6:	2a 0d       	add	r18, r10
    1bc8:	3b 1d       	adc	r19, r11
    1bca:	4c 1d       	adc	r20, r12
    1bcc:	5d 1d       	adc	r21, r13
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	a0 e0       	ldi	r26, 0x00	; 0
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e6 14       	cp	r14, r6
    1bd8:	f7 04       	cpc	r15, r7
    1bda:	08 05       	cpc	r16, r8
    1bdc:	19 05       	cpc	r17, r9
    1bde:	20 f4       	brcc	.+8      	; 0x1be8 <__mulsf3+0xe8>
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a0 e0       	ldi	r26, 0x00	; 0
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	ba 01       	movw	r22, r20
    1bea:	a9 01       	movw	r20, r18
    1bec:	48 0f       	add	r20, r24
    1bee:	59 1f       	adc	r21, r25
    1bf0:	6a 1f       	adc	r22, r26
    1bf2:	7b 1f       	adc	r23, r27
    1bf4:	aa 0c       	add	r10, r10
    1bf6:	bb 1c       	adc	r11, r11
    1bf8:	cc 1c       	adc	r12, r12
    1bfa:	dd 1c       	adc	r13, r13
    1bfc:	97 fe       	sbrs	r9, 7
    1bfe:	08 c0       	rjmp	.+16     	; 0x1c10 <__mulsf3+0x110>
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	a0 e0       	ldi	r26, 0x00	; 0
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	a8 2a       	or	r10, r24
    1c0a:	b9 2a       	or	r11, r25
    1c0c:	ca 2a       	or	r12, r26
    1c0e:	db 2a       	or	r13, r27
    1c10:	31 96       	adiw	r30, 0x01	; 1
    1c12:	e0 32       	cpi	r30, 0x20	; 32
    1c14:	f1 05       	cpc	r31, r1
    1c16:	49 f0       	breq	.+18     	; 0x1c2a <__mulsf3+0x12a>
    1c18:	66 0c       	add	r6, r6
    1c1a:	77 1c       	adc	r7, r7
    1c1c:	88 1c       	adc	r8, r8
    1c1e:	99 1c       	adc	r9, r9
    1c20:	56 94       	lsr	r5
    1c22:	47 94       	ror	r4
    1c24:	37 94       	ror	r3
    1c26:	27 94       	ror	r2
    1c28:	c3 cf       	rjmp	.-122    	; 0x1bb0 <__mulsf3+0xb0>
    1c2a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c2c:	ea 89       	ldd	r30, Y+18	; 0x12
    1c2e:	2b 89       	ldd	r18, Y+19	; 0x13
    1c30:	3c 89       	ldd	r19, Y+20	; 0x14
    1c32:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c34:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c36:	28 0f       	add	r18, r24
    1c38:	39 1f       	adc	r19, r25
    1c3a:	2e 5f       	subi	r18, 0xFE	; 254
    1c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3e:	17 c0       	rjmp	.+46     	; 0x1c6e <__mulsf3+0x16e>
    1c40:	ca 01       	movw	r24, r20
    1c42:	81 70       	andi	r24, 0x01	; 1
    1c44:	90 70       	andi	r25, 0x00	; 0
    1c46:	89 2b       	or	r24, r25
    1c48:	61 f0       	breq	.+24     	; 0x1c62 <__mulsf3+0x162>
    1c4a:	16 95       	lsr	r17
    1c4c:	07 95       	ror	r16
    1c4e:	f7 94       	ror	r15
    1c50:	e7 94       	ror	r14
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a0 e0       	ldi	r26, 0x00	; 0
    1c58:	b0 e8       	ldi	r27, 0x80	; 128
    1c5a:	e8 2a       	or	r14, r24
    1c5c:	f9 2a       	or	r15, r25
    1c5e:	0a 2b       	or	r16, r26
    1c60:	1b 2b       	or	r17, r27
    1c62:	76 95       	lsr	r23
    1c64:	67 95       	ror	r22
    1c66:	57 95       	ror	r21
    1c68:	47 95       	ror	r20
    1c6a:	2f 5f       	subi	r18, 0xFF	; 255
    1c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6e:	77 fd       	sbrc	r23, 7
    1c70:	e7 cf       	rjmp	.-50     	; 0x1c40 <__mulsf3+0x140>
    1c72:	0c c0       	rjmp	.+24     	; 0x1c8c <__mulsf3+0x18c>
    1c74:	44 0f       	add	r20, r20
    1c76:	55 1f       	adc	r21, r21
    1c78:	66 1f       	adc	r22, r22
    1c7a:	77 1f       	adc	r23, r23
    1c7c:	17 fd       	sbrc	r17, 7
    1c7e:	41 60       	ori	r20, 0x01	; 1
    1c80:	ee 0c       	add	r14, r14
    1c82:	ff 1c       	adc	r15, r15
    1c84:	00 1f       	adc	r16, r16
    1c86:	11 1f       	adc	r17, r17
    1c88:	21 50       	subi	r18, 0x01	; 1
    1c8a:	30 40       	sbci	r19, 0x00	; 0
    1c8c:	40 30       	cpi	r20, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	59 07       	cpc	r21, r25
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	69 07       	cpc	r22, r25
    1c96:	90 e4       	ldi	r25, 0x40	; 64
    1c98:	79 07       	cpc	r23, r25
    1c9a:	60 f3       	brcs	.-40     	; 0x1c74 <__mulsf3+0x174>
    1c9c:	2b 8f       	std	Y+27, r18	; 0x1b
    1c9e:	3c 8f       	std	Y+28, r19	; 0x1c
    1ca0:	db 01       	movw	r26, r22
    1ca2:	ca 01       	movw	r24, r20
    1ca4:	8f 77       	andi	r24, 0x7F	; 127
    1ca6:	90 70       	andi	r25, 0x00	; 0
    1ca8:	a0 70       	andi	r26, 0x00	; 0
    1caa:	b0 70       	andi	r27, 0x00	; 0
    1cac:	80 34       	cpi	r24, 0x40	; 64
    1cae:	91 05       	cpc	r25, r1
    1cb0:	a1 05       	cpc	r26, r1
    1cb2:	b1 05       	cpc	r27, r1
    1cb4:	61 f4       	brne	.+24     	; 0x1cce <__mulsf3+0x1ce>
    1cb6:	47 fd       	sbrc	r20, 7
    1cb8:	0a c0       	rjmp	.+20     	; 0x1cce <__mulsf3+0x1ce>
    1cba:	e1 14       	cp	r14, r1
    1cbc:	f1 04       	cpc	r15, r1
    1cbe:	01 05       	cpc	r16, r1
    1cc0:	11 05       	cpc	r17, r1
    1cc2:	29 f0       	breq	.+10     	; 0x1cce <__mulsf3+0x1ce>
    1cc4:	40 5c       	subi	r20, 0xC0	; 192
    1cc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc8:	6f 4f       	sbci	r22, 0xFF	; 255
    1cca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ccc:	40 78       	andi	r20, 0x80	; 128
    1cce:	1a 8e       	std	Y+26, r1	; 0x1a
    1cd0:	fe 17       	cp	r31, r30
    1cd2:	11 f0       	breq	.+4      	; 0x1cd8 <__mulsf3+0x1d8>
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	8a 8f       	std	Y+26, r24	; 0x1a
    1cd8:	4d 8f       	std	Y+29, r20	; 0x1d
    1cda:	5e 8f       	std	Y+30, r21	; 0x1e
    1cdc:	6f 8f       	std	Y+31, r22	; 0x1f
    1cde:	78 a3       	std	Y+32, r23	; 0x20
    1ce0:	83 e0       	ldi	r24, 0x03	; 3
    1ce2:	89 8f       	std	Y+25, r24	; 0x19
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	49 96       	adiw	r24, 0x19	; 25
    1ce8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__pack_f>
    1cec:	a0 96       	adiw	r28, 0x20	; 32
    1cee:	e2 e1       	ldi	r30, 0x12	; 18
    1cf0:	0c 94 47 11 	jmp	0x228e	; 0x228e <__epilogue_restores__>

00001cf4 <__gtsf2>:
    1cf4:	a8 e1       	ldi	r26, 0x18	; 24
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e0 e8       	ldi	r30, 0x80	; 128
    1cfa:	fe e0       	ldi	r31, 0x0E	; 14
    1cfc:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__+0x18>
    1d00:	69 83       	std	Y+1, r22	; 0x01
    1d02:	7a 83       	std	Y+2, r23	; 0x02
    1d04:	8b 83       	std	Y+3, r24	; 0x03
    1d06:	9c 83       	std	Y+4, r25	; 0x04
    1d08:	2d 83       	std	Y+5, r18	; 0x05
    1d0a:	3e 83       	std	Y+6, r19	; 0x06
    1d0c:	4f 83       	std	Y+7, r20	; 0x07
    1d0e:	58 87       	std	Y+8, r21	; 0x08
    1d10:	89 e0       	ldi	r24, 0x09	; 9
    1d12:	e8 2e       	mov	r14, r24
    1d14:	f1 2c       	mov	r15, r1
    1d16:	ec 0e       	add	r14, r28
    1d18:	fd 1e       	adc	r15, r29
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	01 96       	adiw	r24, 0x01	; 1
    1d1e:	b7 01       	movw	r22, r14
    1d20:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1d24:	8e 01       	movw	r16, r28
    1d26:	0f 5e       	subi	r16, 0xEF	; 239
    1d28:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	05 96       	adiw	r24, 0x05	; 5
    1d2e:	b8 01       	movw	r22, r16
    1d30:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1d34:	89 85       	ldd	r24, Y+9	; 0x09
    1d36:	82 30       	cpi	r24, 0x02	; 2
    1d38:	40 f0       	brcs	.+16     	; 0x1d4a <__gtsf2+0x56>
    1d3a:	89 89       	ldd	r24, Y+17	; 0x11
    1d3c:	82 30       	cpi	r24, 0x02	; 2
    1d3e:	28 f0       	brcs	.+10     	; 0x1d4a <__gtsf2+0x56>
    1d40:	c7 01       	movw	r24, r14
    1d42:	b8 01       	movw	r22, r16
    1d44:	0e 94 ab 10 	call	0x2156	; 0x2156 <__fpcmp_parts_f>
    1d48:	01 c0       	rjmp	.+2      	; 0x1d4c <__gtsf2+0x58>
    1d4a:	8f ef       	ldi	r24, 0xFF	; 255
    1d4c:	68 96       	adiw	r28, 0x18	; 24
    1d4e:	e6 e0       	ldi	r30, 0x06	; 6
    1d50:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__+0x18>

00001d54 <__gesf2>:
    1d54:	a8 e1       	ldi	r26, 0x18	; 24
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e0 eb       	ldi	r30, 0xB0	; 176
    1d5a:	fe e0       	ldi	r31, 0x0E	; 14
    1d5c:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__+0x18>
    1d60:	69 83       	std	Y+1, r22	; 0x01
    1d62:	7a 83       	std	Y+2, r23	; 0x02
    1d64:	8b 83       	std	Y+3, r24	; 0x03
    1d66:	9c 83       	std	Y+4, r25	; 0x04
    1d68:	2d 83       	std	Y+5, r18	; 0x05
    1d6a:	3e 83       	std	Y+6, r19	; 0x06
    1d6c:	4f 83       	std	Y+7, r20	; 0x07
    1d6e:	58 87       	std	Y+8, r21	; 0x08
    1d70:	89 e0       	ldi	r24, 0x09	; 9
    1d72:	e8 2e       	mov	r14, r24
    1d74:	f1 2c       	mov	r15, r1
    1d76:	ec 0e       	add	r14, r28
    1d78:	fd 1e       	adc	r15, r29
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	01 96       	adiw	r24, 0x01	; 1
    1d7e:	b7 01       	movw	r22, r14
    1d80:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1d84:	8e 01       	movw	r16, r28
    1d86:	0f 5e       	subi	r16, 0xEF	; 239
    1d88:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	05 96       	adiw	r24, 0x05	; 5
    1d8e:	b8 01       	movw	r22, r16
    1d90:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1d94:	89 85       	ldd	r24, Y+9	; 0x09
    1d96:	82 30       	cpi	r24, 0x02	; 2
    1d98:	40 f0       	brcs	.+16     	; 0x1daa <__gesf2+0x56>
    1d9a:	89 89       	ldd	r24, Y+17	; 0x11
    1d9c:	82 30       	cpi	r24, 0x02	; 2
    1d9e:	28 f0       	brcs	.+10     	; 0x1daa <__gesf2+0x56>
    1da0:	c7 01       	movw	r24, r14
    1da2:	b8 01       	movw	r22, r16
    1da4:	0e 94 ab 10 	call	0x2156	; 0x2156 <__fpcmp_parts_f>
    1da8:	01 c0       	rjmp	.+2      	; 0x1dac <__gesf2+0x58>
    1daa:	8f ef       	ldi	r24, 0xFF	; 255
    1dac:	68 96       	adiw	r28, 0x18	; 24
    1dae:	e6 e0       	ldi	r30, 0x06	; 6
    1db0:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__+0x18>

00001db4 <__ltsf2>:
    1db4:	a8 e1       	ldi	r26, 0x18	; 24
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e0 ee       	ldi	r30, 0xE0	; 224
    1dba:	fe e0       	ldi	r31, 0x0E	; 14
    1dbc:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__+0x18>
    1dc0:	69 83       	std	Y+1, r22	; 0x01
    1dc2:	7a 83       	std	Y+2, r23	; 0x02
    1dc4:	8b 83       	std	Y+3, r24	; 0x03
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	2d 83       	std	Y+5, r18	; 0x05
    1dca:	3e 83       	std	Y+6, r19	; 0x06
    1dcc:	4f 83       	std	Y+7, r20	; 0x07
    1dce:	58 87       	std	Y+8, r21	; 0x08
    1dd0:	89 e0       	ldi	r24, 0x09	; 9
    1dd2:	e8 2e       	mov	r14, r24
    1dd4:	f1 2c       	mov	r15, r1
    1dd6:	ec 0e       	add	r14, r28
    1dd8:	fd 1e       	adc	r15, r29
    1dda:	ce 01       	movw	r24, r28
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	b7 01       	movw	r22, r14
    1de0:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1de4:	8e 01       	movw	r16, r28
    1de6:	0f 5e       	subi	r16, 0xEF	; 239
    1de8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dea:	ce 01       	movw	r24, r28
    1dec:	05 96       	adiw	r24, 0x05	; 5
    1dee:	b8 01       	movw	r22, r16
    1df0:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1df4:	89 85       	ldd	r24, Y+9	; 0x09
    1df6:	82 30       	cpi	r24, 0x02	; 2
    1df8:	40 f0       	brcs	.+16     	; 0x1e0a <__ltsf2+0x56>
    1dfa:	89 89       	ldd	r24, Y+17	; 0x11
    1dfc:	82 30       	cpi	r24, 0x02	; 2
    1dfe:	28 f0       	brcs	.+10     	; 0x1e0a <__ltsf2+0x56>
    1e00:	c7 01       	movw	r24, r14
    1e02:	b8 01       	movw	r22, r16
    1e04:	0e 94 ab 10 	call	0x2156	; 0x2156 <__fpcmp_parts_f>
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <__ltsf2+0x58>
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	68 96       	adiw	r28, 0x18	; 24
    1e0e:	e6 e0       	ldi	r30, 0x06	; 6
    1e10:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__+0x18>

00001e14 <__fixsfsi>:
    1e14:	ac e0       	ldi	r26, 0x0C	; 12
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e0 e1       	ldi	r30, 0x10	; 16
    1e1a:	ff e0       	ldi	r31, 0x0F	; 15
    1e1c:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__prologue_saves__+0x20>
    1e20:	69 83       	std	Y+1, r22	; 0x01
    1e22:	7a 83       	std	Y+2, r23	; 0x02
    1e24:	8b 83       	std	Y+3, r24	; 0x03
    1e26:	9c 83       	std	Y+4, r25	; 0x04
    1e28:	ce 01       	movw	r24, r28
    1e2a:	01 96       	adiw	r24, 0x01	; 1
    1e2c:	be 01       	movw	r22, r28
    1e2e:	6b 5f       	subi	r22, 0xFB	; 251
    1e30:	7f 4f       	sbci	r23, 0xFF	; 255
    1e32:	0e 94 33 10 	call	0x2066	; 0x2066 <__unpack_f>
    1e36:	8d 81       	ldd	r24, Y+5	; 0x05
    1e38:	82 30       	cpi	r24, 0x02	; 2
    1e3a:	61 f1       	breq	.+88     	; 0x1e94 <__fixsfsi+0x80>
    1e3c:	82 30       	cpi	r24, 0x02	; 2
    1e3e:	50 f1       	brcs	.+84     	; 0x1e94 <__fixsfsi+0x80>
    1e40:	84 30       	cpi	r24, 0x04	; 4
    1e42:	21 f4       	brne	.+8      	; 0x1e4c <__fixsfsi+0x38>
    1e44:	8e 81       	ldd	r24, Y+6	; 0x06
    1e46:	88 23       	and	r24, r24
    1e48:	51 f1       	breq	.+84     	; 0x1e9e <__fixsfsi+0x8a>
    1e4a:	2e c0       	rjmp	.+92     	; 0x1ea8 <__fixsfsi+0x94>
    1e4c:	2f 81       	ldd	r18, Y+7	; 0x07
    1e4e:	38 85       	ldd	r19, Y+8	; 0x08
    1e50:	37 fd       	sbrc	r19, 7
    1e52:	20 c0       	rjmp	.+64     	; 0x1e94 <__fixsfsi+0x80>
    1e54:	6e 81       	ldd	r22, Y+6	; 0x06
    1e56:	2f 31       	cpi	r18, 0x1F	; 31
    1e58:	31 05       	cpc	r19, r1
    1e5a:	1c f0       	brlt	.+6      	; 0x1e62 <__fixsfsi+0x4e>
    1e5c:	66 23       	and	r22, r22
    1e5e:	f9 f0       	breq	.+62     	; 0x1e9e <__fixsfsi+0x8a>
    1e60:	23 c0       	rjmp	.+70     	; 0x1ea8 <__fixsfsi+0x94>
    1e62:	8e e1       	ldi	r24, 0x1E	; 30
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	82 1b       	sub	r24, r18
    1e68:	93 0b       	sbc	r25, r19
    1e6a:	29 85       	ldd	r18, Y+9	; 0x09
    1e6c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e6e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e70:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e72:	04 c0       	rjmp	.+8      	; 0x1e7c <__fixsfsi+0x68>
    1e74:	56 95       	lsr	r21
    1e76:	47 95       	ror	r20
    1e78:	37 95       	ror	r19
    1e7a:	27 95       	ror	r18
    1e7c:	8a 95       	dec	r24
    1e7e:	d2 f7       	brpl	.-12     	; 0x1e74 <__fixsfsi+0x60>
    1e80:	66 23       	and	r22, r22
    1e82:	b1 f0       	breq	.+44     	; 0x1eb0 <__fixsfsi+0x9c>
    1e84:	50 95       	com	r21
    1e86:	40 95       	com	r20
    1e88:	30 95       	com	r19
    1e8a:	21 95       	neg	r18
    1e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8e:	4f 4f       	sbci	r20, 0xFF	; 255
    1e90:	5f 4f       	sbci	r21, 0xFF	; 255
    1e92:	0e c0       	rjmp	.+28     	; 0x1eb0 <__fixsfsi+0x9c>
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	09 c0       	rjmp	.+18     	; 0x1eb0 <__fixsfsi+0x9c>
    1e9e:	2f ef       	ldi	r18, 0xFF	; 255
    1ea0:	3f ef       	ldi	r19, 0xFF	; 255
    1ea2:	4f ef       	ldi	r20, 0xFF	; 255
    1ea4:	5f e7       	ldi	r21, 0x7F	; 127
    1ea6:	04 c0       	rjmp	.+8      	; 0x1eb0 <__fixsfsi+0x9c>
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	50 e8       	ldi	r21, 0x80	; 128
    1eb0:	b9 01       	movw	r22, r18
    1eb2:	ca 01       	movw	r24, r20
    1eb4:	2c 96       	adiw	r28, 0x0c	; 12
    1eb6:	e2 e0       	ldi	r30, 0x02	; 2
    1eb8:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__epilogue_restores__+0x20>

00001ebc <__pack_f>:
    1ebc:	df 92       	push	r13
    1ebe:	ef 92       	push	r14
    1ec0:	ff 92       	push	r15
    1ec2:	0f 93       	push	r16
    1ec4:	1f 93       	push	r17
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	e4 80       	ldd	r14, Z+4	; 0x04
    1eca:	f5 80       	ldd	r15, Z+5	; 0x05
    1ecc:	06 81       	ldd	r16, Z+6	; 0x06
    1ece:	17 81       	ldd	r17, Z+7	; 0x07
    1ed0:	d1 80       	ldd	r13, Z+1	; 0x01
    1ed2:	80 81       	ld	r24, Z
    1ed4:	82 30       	cpi	r24, 0x02	; 2
    1ed6:	48 f4       	brcc	.+18     	; 0x1eea <__pack_f+0x2e>
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	a0 e1       	ldi	r26, 0x10	; 16
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e8 2a       	or	r14, r24
    1ee2:	f9 2a       	or	r15, r25
    1ee4:	0a 2b       	or	r16, r26
    1ee6:	1b 2b       	or	r17, r27
    1ee8:	a5 c0       	rjmp	.+330    	; 0x2034 <__pack_f+0x178>
    1eea:	84 30       	cpi	r24, 0x04	; 4
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <__pack_f+0x34>
    1eee:	9f c0       	rjmp	.+318    	; 0x202e <__pack_f+0x172>
    1ef0:	82 30       	cpi	r24, 0x02	; 2
    1ef2:	21 f4       	brne	.+8      	; 0x1efc <__pack_f+0x40>
    1ef4:	ee 24       	eor	r14, r14
    1ef6:	ff 24       	eor	r15, r15
    1ef8:	87 01       	movw	r16, r14
    1efa:	05 c0       	rjmp	.+10     	; 0x1f06 <__pack_f+0x4a>
    1efc:	e1 14       	cp	r14, r1
    1efe:	f1 04       	cpc	r15, r1
    1f00:	01 05       	cpc	r16, r1
    1f02:	11 05       	cpc	r17, r1
    1f04:	19 f4       	brne	.+6      	; 0x1f0c <__pack_f+0x50>
    1f06:	e0 e0       	ldi	r30, 0x00	; 0
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	96 c0       	rjmp	.+300    	; 0x2038 <__pack_f+0x17c>
    1f0c:	62 81       	ldd	r22, Z+2	; 0x02
    1f0e:	73 81       	ldd	r23, Z+3	; 0x03
    1f10:	9f ef       	ldi	r25, 0xFF	; 255
    1f12:	62 38       	cpi	r22, 0x82	; 130
    1f14:	79 07       	cpc	r23, r25
    1f16:	0c f0       	brlt	.+2      	; 0x1f1a <__pack_f+0x5e>
    1f18:	5b c0       	rjmp	.+182    	; 0x1fd0 <__pack_f+0x114>
    1f1a:	22 e8       	ldi	r18, 0x82	; 130
    1f1c:	3f ef       	ldi	r19, 0xFF	; 255
    1f1e:	26 1b       	sub	r18, r22
    1f20:	37 0b       	sbc	r19, r23
    1f22:	2a 31       	cpi	r18, 0x1A	; 26
    1f24:	31 05       	cpc	r19, r1
    1f26:	2c f0       	brlt	.+10     	; 0x1f32 <__pack_f+0x76>
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e0       	ldi	r20, 0x00	; 0
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	2a c0       	rjmp	.+84     	; 0x1f86 <__pack_f+0xca>
    1f32:	b8 01       	movw	r22, r16
    1f34:	a7 01       	movw	r20, r14
    1f36:	02 2e       	mov	r0, r18
    1f38:	04 c0       	rjmp	.+8      	; 0x1f42 <__pack_f+0x86>
    1f3a:	76 95       	lsr	r23
    1f3c:	67 95       	ror	r22
    1f3e:	57 95       	ror	r21
    1f40:	47 95       	ror	r20
    1f42:	0a 94       	dec	r0
    1f44:	d2 f7       	brpl	.-12     	; 0x1f3a <__pack_f+0x7e>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a0 e0       	ldi	r26, 0x00	; 0
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	04 c0       	rjmp	.+8      	; 0x1f58 <__pack_f+0x9c>
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	aa 1f       	adc	r26, r26
    1f56:	bb 1f       	adc	r27, r27
    1f58:	2a 95       	dec	r18
    1f5a:	d2 f7       	brpl	.-12     	; 0x1f50 <__pack_f+0x94>
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	a1 09       	sbc	r26, r1
    1f60:	b1 09       	sbc	r27, r1
    1f62:	8e 21       	and	r24, r14
    1f64:	9f 21       	and	r25, r15
    1f66:	a0 23       	and	r26, r16
    1f68:	b1 23       	and	r27, r17
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	a1 05       	cpc	r26, r1
    1f6e:	b1 05       	cpc	r27, r1
    1f70:	21 f0       	breq	.+8      	; 0x1f7a <__pack_f+0xbe>
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	a0 e0       	ldi	r26, 0x00	; 0
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	9a 01       	movw	r18, r20
    1f7c:	ab 01       	movw	r20, r22
    1f7e:	28 2b       	or	r18, r24
    1f80:	39 2b       	or	r19, r25
    1f82:	4a 2b       	or	r20, r26
    1f84:	5b 2b       	or	r21, r27
    1f86:	da 01       	movw	r26, r20
    1f88:	c9 01       	movw	r24, r18
    1f8a:	8f 77       	andi	r24, 0x7F	; 127
    1f8c:	90 70       	andi	r25, 0x00	; 0
    1f8e:	a0 70       	andi	r26, 0x00	; 0
    1f90:	b0 70       	andi	r27, 0x00	; 0
    1f92:	80 34       	cpi	r24, 0x40	; 64
    1f94:	91 05       	cpc	r25, r1
    1f96:	a1 05       	cpc	r26, r1
    1f98:	b1 05       	cpc	r27, r1
    1f9a:	39 f4       	brne	.+14     	; 0x1faa <__pack_f+0xee>
    1f9c:	27 ff       	sbrs	r18, 7
    1f9e:	09 c0       	rjmp	.+18     	; 0x1fb2 <__pack_f+0xf6>
    1fa0:	20 5c       	subi	r18, 0xC0	; 192
    1fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa4:	4f 4f       	sbci	r20, 0xFF	; 255
    1fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa8:	04 c0       	rjmp	.+8      	; 0x1fb2 <__pack_f+0xf6>
    1faa:	21 5c       	subi	r18, 0xC1	; 193
    1fac:	3f 4f       	sbci	r19, 0xFF	; 255
    1fae:	4f 4f       	sbci	r20, 0xFF	; 255
    1fb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb2:	e0 e0       	ldi	r30, 0x00	; 0
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	20 30       	cpi	r18, 0x00	; 0
    1fb8:	a0 e0       	ldi	r26, 0x00	; 0
    1fba:	3a 07       	cpc	r19, r26
    1fbc:	a0 e0       	ldi	r26, 0x00	; 0
    1fbe:	4a 07       	cpc	r20, r26
    1fc0:	a0 e4       	ldi	r26, 0x40	; 64
    1fc2:	5a 07       	cpc	r21, r26
    1fc4:	10 f0       	brcs	.+4      	; 0x1fca <__pack_f+0x10e>
    1fc6:	e1 e0       	ldi	r30, 0x01	; 1
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	79 01       	movw	r14, r18
    1fcc:	8a 01       	movw	r16, r20
    1fce:	27 c0       	rjmp	.+78     	; 0x201e <__pack_f+0x162>
    1fd0:	60 38       	cpi	r22, 0x80	; 128
    1fd2:	71 05       	cpc	r23, r1
    1fd4:	64 f5       	brge	.+88     	; 0x202e <__pack_f+0x172>
    1fd6:	fb 01       	movw	r30, r22
    1fd8:	e1 58       	subi	r30, 0x81	; 129
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	d8 01       	movw	r26, r16
    1fde:	c7 01       	movw	r24, r14
    1fe0:	8f 77       	andi	r24, 0x7F	; 127
    1fe2:	90 70       	andi	r25, 0x00	; 0
    1fe4:	a0 70       	andi	r26, 0x00	; 0
    1fe6:	b0 70       	andi	r27, 0x00	; 0
    1fe8:	80 34       	cpi	r24, 0x40	; 64
    1fea:	91 05       	cpc	r25, r1
    1fec:	a1 05       	cpc	r26, r1
    1fee:	b1 05       	cpc	r27, r1
    1ff0:	39 f4       	brne	.+14     	; 0x2000 <__pack_f+0x144>
    1ff2:	e7 fe       	sbrs	r14, 7
    1ff4:	0d c0       	rjmp	.+26     	; 0x2010 <__pack_f+0x154>
    1ff6:	80 e4       	ldi	r24, 0x40	; 64
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	a0 e0       	ldi	r26, 0x00	; 0
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	04 c0       	rjmp	.+8      	; 0x2008 <__pack_f+0x14c>
    2000:	8f e3       	ldi	r24, 0x3F	; 63
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	a0 e0       	ldi	r26, 0x00	; 0
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e8 0e       	add	r14, r24
    200a:	f9 1e       	adc	r15, r25
    200c:	0a 1f       	adc	r16, r26
    200e:	1b 1f       	adc	r17, r27
    2010:	17 ff       	sbrs	r17, 7
    2012:	05 c0       	rjmp	.+10     	; 0x201e <__pack_f+0x162>
    2014:	16 95       	lsr	r17
    2016:	07 95       	ror	r16
    2018:	f7 94       	ror	r15
    201a:	e7 94       	ror	r14
    201c:	31 96       	adiw	r30, 0x01	; 1
    201e:	87 e0       	ldi	r24, 0x07	; 7
    2020:	16 95       	lsr	r17
    2022:	07 95       	ror	r16
    2024:	f7 94       	ror	r15
    2026:	e7 94       	ror	r14
    2028:	8a 95       	dec	r24
    202a:	d1 f7       	brne	.-12     	; 0x2020 <__pack_f+0x164>
    202c:	05 c0       	rjmp	.+10     	; 0x2038 <__pack_f+0x17c>
    202e:	ee 24       	eor	r14, r14
    2030:	ff 24       	eor	r15, r15
    2032:	87 01       	movw	r16, r14
    2034:	ef ef       	ldi	r30, 0xFF	; 255
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	6e 2f       	mov	r22, r30
    203a:	67 95       	ror	r22
    203c:	66 27       	eor	r22, r22
    203e:	67 95       	ror	r22
    2040:	90 2f       	mov	r25, r16
    2042:	9f 77       	andi	r25, 0x7F	; 127
    2044:	d7 94       	ror	r13
    2046:	dd 24       	eor	r13, r13
    2048:	d7 94       	ror	r13
    204a:	8e 2f       	mov	r24, r30
    204c:	86 95       	lsr	r24
    204e:	49 2f       	mov	r20, r25
    2050:	46 2b       	or	r20, r22
    2052:	58 2f       	mov	r21, r24
    2054:	5d 29       	or	r21, r13
    2056:	b7 01       	movw	r22, r14
    2058:	ca 01       	movw	r24, r20
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	ff 90       	pop	r15
    2060:	ef 90       	pop	r14
    2062:	df 90       	pop	r13
    2064:	08 95       	ret

00002066 <__unpack_f>:
    2066:	fc 01       	movw	r30, r24
    2068:	db 01       	movw	r26, r22
    206a:	40 81       	ld	r20, Z
    206c:	51 81       	ldd	r21, Z+1	; 0x01
    206e:	22 81       	ldd	r18, Z+2	; 0x02
    2070:	62 2f       	mov	r22, r18
    2072:	6f 77       	andi	r22, 0x7F	; 127
    2074:	70 e0       	ldi	r23, 0x00	; 0
    2076:	22 1f       	adc	r18, r18
    2078:	22 27       	eor	r18, r18
    207a:	22 1f       	adc	r18, r18
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	89 2f       	mov	r24, r25
    2080:	88 0f       	add	r24, r24
    2082:	82 2b       	or	r24, r18
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	99 1f       	adc	r25, r25
    208a:	99 27       	eor	r25, r25
    208c:	99 1f       	adc	r25, r25
    208e:	11 96       	adiw	r26, 0x01	; 1
    2090:	9c 93       	st	X, r25
    2092:	11 97       	sbiw	r26, 0x01	; 1
    2094:	21 15       	cp	r18, r1
    2096:	31 05       	cpc	r19, r1
    2098:	a9 f5       	brne	.+106    	; 0x2104 <__unpack_f+0x9e>
    209a:	41 15       	cp	r20, r1
    209c:	51 05       	cpc	r21, r1
    209e:	61 05       	cpc	r22, r1
    20a0:	71 05       	cpc	r23, r1
    20a2:	11 f4       	brne	.+4      	; 0x20a8 <__unpack_f+0x42>
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	37 c0       	rjmp	.+110    	; 0x2116 <__unpack_f+0xb0>
    20a8:	82 e8       	ldi	r24, 0x82	; 130
    20aa:	9f ef       	ldi	r25, 0xFF	; 255
    20ac:	13 96       	adiw	r26, 0x03	; 3
    20ae:	9c 93       	st	X, r25
    20b0:	8e 93       	st	-X, r24
    20b2:	12 97       	sbiw	r26, 0x02	; 2
    20b4:	9a 01       	movw	r18, r20
    20b6:	ab 01       	movw	r20, r22
    20b8:	67 e0       	ldi	r22, 0x07	; 7
    20ba:	22 0f       	add	r18, r18
    20bc:	33 1f       	adc	r19, r19
    20be:	44 1f       	adc	r20, r20
    20c0:	55 1f       	adc	r21, r21
    20c2:	6a 95       	dec	r22
    20c4:	d1 f7       	brne	.-12     	; 0x20ba <__unpack_f+0x54>
    20c6:	83 e0       	ldi	r24, 0x03	; 3
    20c8:	8c 93       	st	X, r24
    20ca:	0d c0       	rjmp	.+26     	; 0x20e6 <__unpack_f+0x80>
    20cc:	22 0f       	add	r18, r18
    20ce:	33 1f       	adc	r19, r19
    20d0:	44 1f       	adc	r20, r20
    20d2:	55 1f       	adc	r21, r21
    20d4:	12 96       	adiw	r26, 0x02	; 2
    20d6:	8d 91       	ld	r24, X+
    20d8:	9c 91       	ld	r25, X
    20da:	13 97       	sbiw	r26, 0x03	; 3
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	13 96       	adiw	r26, 0x03	; 3
    20e0:	9c 93       	st	X, r25
    20e2:	8e 93       	st	-X, r24
    20e4:	12 97       	sbiw	r26, 0x02	; 2
    20e6:	20 30       	cpi	r18, 0x00	; 0
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	38 07       	cpc	r19, r24
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	48 07       	cpc	r20, r24
    20f0:	80 e4       	ldi	r24, 0x40	; 64
    20f2:	58 07       	cpc	r21, r24
    20f4:	58 f3       	brcs	.-42     	; 0x20cc <__unpack_f+0x66>
    20f6:	14 96       	adiw	r26, 0x04	; 4
    20f8:	2d 93       	st	X+, r18
    20fa:	3d 93       	st	X+, r19
    20fc:	4d 93       	st	X+, r20
    20fe:	5c 93       	st	X, r21
    2100:	17 97       	sbiw	r26, 0x07	; 7
    2102:	08 95       	ret
    2104:	2f 3f       	cpi	r18, 0xFF	; 255
    2106:	31 05       	cpc	r19, r1
    2108:	79 f4       	brne	.+30     	; 0x2128 <__unpack_f+0xc2>
    210a:	41 15       	cp	r20, r1
    210c:	51 05       	cpc	r21, r1
    210e:	61 05       	cpc	r22, r1
    2110:	71 05       	cpc	r23, r1
    2112:	19 f4       	brne	.+6      	; 0x211a <__unpack_f+0xb4>
    2114:	84 e0       	ldi	r24, 0x04	; 4
    2116:	8c 93       	st	X, r24
    2118:	08 95       	ret
    211a:	64 ff       	sbrs	r22, 4
    211c:	03 c0       	rjmp	.+6      	; 0x2124 <__unpack_f+0xbe>
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	8c 93       	st	X, r24
    2122:	12 c0       	rjmp	.+36     	; 0x2148 <__unpack_f+0xe2>
    2124:	1c 92       	st	X, r1
    2126:	10 c0       	rjmp	.+32     	; 0x2148 <__unpack_f+0xe2>
    2128:	2f 57       	subi	r18, 0x7F	; 127
    212a:	30 40       	sbci	r19, 0x00	; 0
    212c:	13 96       	adiw	r26, 0x03	; 3
    212e:	3c 93       	st	X, r19
    2130:	2e 93       	st	-X, r18
    2132:	12 97       	sbiw	r26, 0x02	; 2
    2134:	83 e0       	ldi	r24, 0x03	; 3
    2136:	8c 93       	st	X, r24
    2138:	87 e0       	ldi	r24, 0x07	; 7
    213a:	44 0f       	add	r20, r20
    213c:	55 1f       	adc	r21, r21
    213e:	66 1f       	adc	r22, r22
    2140:	77 1f       	adc	r23, r23
    2142:	8a 95       	dec	r24
    2144:	d1 f7       	brne	.-12     	; 0x213a <__unpack_f+0xd4>
    2146:	70 64       	ori	r23, 0x40	; 64
    2148:	14 96       	adiw	r26, 0x04	; 4
    214a:	4d 93       	st	X+, r20
    214c:	5d 93       	st	X+, r21
    214e:	6d 93       	st	X+, r22
    2150:	7c 93       	st	X, r23
    2152:	17 97       	sbiw	r26, 0x07	; 7
    2154:	08 95       	ret

00002156 <__fpcmp_parts_f>:
    2156:	1f 93       	push	r17
    2158:	dc 01       	movw	r26, r24
    215a:	fb 01       	movw	r30, r22
    215c:	9c 91       	ld	r25, X
    215e:	92 30       	cpi	r25, 0x02	; 2
    2160:	08 f4       	brcc	.+2      	; 0x2164 <__fpcmp_parts_f+0xe>
    2162:	47 c0       	rjmp	.+142    	; 0x21f2 <__fpcmp_parts_f+0x9c>
    2164:	80 81       	ld	r24, Z
    2166:	82 30       	cpi	r24, 0x02	; 2
    2168:	08 f4       	brcc	.+2      	; 0x216c <__fpcmp_parts_f+0x16>
    216a:	43 c0       	rjmp	.+134    	; 0x21f2 <__fpcmp_parts_f+0x9c>
    216c:	94 30       	cpi	r25, 0x04	; 4
    216e:	51 f4       	brne	.+20     	; 0x2184 <__fpcmp_parts_f+0x2e>
    2170:	11 96       	adiw	r26, 0x01	; 1
    2172:	1c 91       	ld	r17, X
    2174:	84 30       	cpi	r24, 0x04	; 4
    2176:	99 f5       	brne	.+102    	; 0x21de <__fpcmp_parts_f+0x88>
    2178:	81 81       	ldd	r24, Z+1	; 0x01
    217a:	68 2f       	mov	r22, r24
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	61 1b       	sub	r22, r17
    2180:	71 09       	sbc	r23, r1
    2182:	3f c0       	rjmp	.+126    	; 0x2202 <__fpcmp_parts_f+0xac>
    2184:	84 30       	cpi	r24, 0x04	; 4
    2186:	21 f0       	breq	.+8      	; 0x2190 <__fpcmp_parts_f+0x3a>
    2188:	92 30       	cpi	r25, 0x02	; 2
    218a:	31 f4       	brne	.+12     	; 0x2198 <__fpcmp_parts_f+0x42>
    218c:	82 30       	cpi	r24, 0x02	; 2
    218e:	b9 f1       	breq	.+110    	; 0x21fe <__fpcmp_parts_f+0xa8>
    2190:	81 81       	ldd	r24, Z+1	; 0x01
    2192:	88 23       	and	r24, r24
    2194:	89 f1       	breq	.+98     	; 0x21f8 <__fpcmp_parts_f+0xa2>
    2196:	2d c0       	rjmp	.+90     	; 0x21f2 <__fpcmp_parts_f+0x9c>
    2198:	11 96       	adiw	r26, 0x01	; 1
    219a:	1c 91       	ld	r17, X
    219c:	11 97       	sbiw	r26, 0x01	; 1
    219e:	82 30       	cpi	r24, 0x02	; 2
    21a0:	f1 f0       	breq	.+60     	; 0x21de <__fpcmp_parts_f+0x88>
    21a2:	81 81       	ldd	r24, Z+1	; 0x01
    21a4:	18 17       	cp	r17, r24
    21a6:	d9 f4       	brne	.+54     	; 0x21de <__fpcmp_parts_f+0x88>
    21a8:	12 96       	adiw	r26, 0x02	; 2
    21aa:	2d 91       	ld	r18, X+
    21ac:	3c 91       	ld	r19, X
    21ae:	13 97       	sbiw	r26, 0x03	; 3
    21b0:	82 81       	ldd	r24, Z+2	; 0x02
    21b2:	93 81       	ldd	r25, Z+3	; 0x03
    21b4:	82 17       	cp	r24, r18
    21b6:	93 07       	cpc	r25, r19
    21b8:	94 f0       	brlt	.+36     	; 0x21de <__fpcmp_parts_f+0x88>
    21ba:	28 17       	cp	r18, r24
    21bc:	39 07       	cpc	r19, r25
    21be:	bc f0       	brlt	.+46     	; 0x21ee <__fpcmp_parts_f+0x98>
    21c0:	14 96       	adiw	r26, 0x04	; 4
    21c2:	8d 91       	ld	r24, X+
    21c4:	9d 91       	ld	r25, X+
    21c6:	0d 90       	ld	r0, X+
    21c8:	bc 91       	ld	r27, X
    21ca:	a0 2d       	mov	r26, r0
    21cc:	24 81       	ldd	r18, Z+4	; 0x04
    21ce:	35 81       	ldd	r19, Z+5	; 0x05
    21d0:	46 81       	ldd	r20, Z+6	; 0x06
    21d2:	57 81       	ldd	r21, Z+7	; 0x07
    21d4:	28 17       	cp	r18, r24
    21d6:	39 07       	cpc	r19, r25
    21d8:	4a 07       	cpc	r20, r26
    21da:	5b 07       	cpc	r21, r27
    21dc:	18 f4       	brcc	.+6      	; 0x21e4 <__fpcmp_parts_f+0x8e>
    21de:	11 23       	and	r17, r17
    21e0:	41 f0       	breq	.+16     	; 0x21f2 <__fpcmp_parts_f+0x9c>
    21e2:	0a c0       	rjmp	.+20     	; 0x21f8 <__fpcmp_parts_f+0xa2>
    21e4:	82 17       	cp	r24, r18
    21e6:	93 07       	cpc	r25, r19
    21e8:	a4 07       	cpc	r26, r20
    21ea:	b5 07       	cpc	r27, r21
    21ec:	40 f4       	brcc	.+16     	; 0x21fe <__fpcmp_parts_f+0xa8>
    21ee:	11 23       	and	r17, r17
    21f0:	19 f0       	breq	.+6      	; 0x21f8 <__fpcmp_parts_f+0xa2>
    21f2:	61 e0       	ldi	r22, 0x01	; 1
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	05 c0       	rjmp	.+10     	; 0x2202 <__fpcmp_parts_f+0xac>
    21f8:	6f ef       	ldi	r22, 0xFF	; 255
    21fa:	7f ef       	ldi	r23, 0xFF	; 255
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <__fpcmp_parts_f+0xac>
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	70 e0       	ldi	r23, 0x00	; 0
    2202:	cb 01       	movw	r24, r22
    2204:	1f 91       	pop	r17
    2206:	08 95       	ret

00002208 <__udivmodhi4>:
    2208:	aa 1b       	sub	r26, r26
    220a:	bb 1b       	sub	r27, r27
    220c:	51 e1       	ldi	r21, 0x11	; 17
    220e:	07 c0       	rjmp	.+14     	; 0x221e <__udivmodhi4_ep>

00002210 <__udivmodhi4_loop>:
    2210:	aa 1f       	adc	r26, r26
    2212:	bb 1f       	adc	r27, r27
    2214:	a6 17       	cp	r26, r22
    2216:	b7 07       	cpc	r27, r23
    2218:	10 f0       	brcs	.+4      	; 0x221e <__udivmodhi4_ep>
    221a:	a6 1b       	sub	r26, r22
    221c:	b7 0b       	sbc	r27, r23

0000221e <__udivmodhi4_ep>:
    221e:	88 1f       	adc	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	5a 95       	dec	r21
    2224:	a9 f7       	brne	.-22     	; 0x2210 <__udivmodhi4_loop>
    2226:	80 95       	com	r24
    2228:	90 95       	com	r25
    222a:	bc 01       	movw	r22, r24
    222c:	cd 01       	movw	r24, r26
    222e:	08 95       	ret

00002230 <__divmodhi4>:
    2230:	97 fb       	bst	r25, 7
    2232:	09 2e       	mov	r0, r25
    2234:	07 26       	eor	r0, r23
    2236:	0a d0       	rcall	.+20     	; 0x224c <__divmodhi4_neg1>
    2238:	77 fd       	sbrc	r23, 7
    223a:	04 d0       	rcall	.+8      	; 0x2244 <__divmodhi4_neg2>
    223c:	e5 df       	rcall	.-54     	; 0x2208 <__udivmodhi4>
    223e:	06 d0       	rcall	.+12     	; 0x224c <__divmodhi4_neg1>
    2240:	00 20       	and	r0, r0
    2242:	1a f4       	brpl	.+6      	; 0x224a <__divmodhi4_exit>

00002244 <__divmodhi4_neg2>:
    2244:	70 95       	com	r23
    2246:	61 95       	neg	r22
    2248:	7f 4f       	sbci	r23, 0xFF	; 255

0000224a <__divmodhi4_exit>:
    224a:	08 95       	ret

0000224c <__divmodhi4_neg1>:
    224c:	f6 f7       	brtc	.-4      	; 0x224a <__divmodhi4_exit>
    224e:	90 95       	com	r25
    2250:	81 95       	neg	r24
    2252:	9f 4f       	sbci	r25, 0xFF	; 255
    2254:	08 95       	ret

00002256 <__prologue_saves__>:
    2256:	2f 92       	push	r2
    2258:	3f 92       	push	r3
    225a:	4f 92       	push	r4
    225c:	5f 92       	push	r5
    225e:	6f 92       	push	r6
    2260:	7f 92       	push	r7
    2262:	8f 92       	push	r8
    2264:	9f 92       	push	r9
    2266:	af 92       	push	r10
    2268:	bf 92       	push	r11
    226a:	cf 92       	push	r12
    226c:	df 92       	push	r13
    226e:	ef 92       	push	r14
    2270:	ff 92       	push	r15
    2272:	0f 93       	push	r16
    2274:	1f 93       	push	r17
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	ca 1b       	sub	r28, r26
    2280:	db 0b       	sbc	r29, r27
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	09 94       	ijmp

0000228e <__epilogue_restores__>:
    228e:	2a 88       	ldd	r2, Y+18	; 0x12
    2290:	39 88       	ldd	r3, Y+17	; 0x11
    2292:	48 88       	ldd	r4, Y+16	; 0x10
    2294:	5f 84       	ldd	r5, Y+15	; 0x0f
    2296:	6e 84       	ldd	r6, Y+14	; 0x0e
    2298:	7d 84       	ldd	r7, Y+13	; 0x0d
    229a:	8c 84       	ldd	r8, Y+12	; 0x0c
    229c:	9b 84       	ldd	r9, Y+11	; 0x0b
    229e:	aa 84       	ldd	r10, Y+10	; 0x0a
    22a0:	b9 84       	ldd	r11, Y+9	; 0x09
    22a2:	c8 84       	ldd	r12, Y+8	; 0x08
    22a4:	df 80       	ldd	r13, Y+7	; 0x07
    22a6:	ee 80       	ldd	r14, Y+6	; 0x06
    22a8:	fd 80       	ldd	r15, Y+5	; 0x05
    22aa:	0c 81       	ldd	r16, Y+4	; 0x04
    22ac:	1b 81       	ldd	r17, Y+3	; 0x03
    22ae:	aa 81       	ldd	r26, Y+2	; 0x02
    22b0:	b9 81       	ldd	r27, Y+1	; 0x01
    22b2:	ce 0f       	add	r28, r30
    22b4:	d1 1d       	adc	r29, r1
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	ed 01       	movw	r28, r26
    22c2:	08 95       	ret

000022c4 <strlen>:
    22c4:	fc 01       	movw	r30, r24
    22c6:	01 90       	ld	r0, Z+
    22c8:	00 20       	and	r0, r0
    22ca:	e9 f7       	brne	.-6      	; 0x22c6 <strlen+0x2>
    22cc:	80 95       	com	r24
    22ce:	90 95       	com	r25
    22d0:	8e 0f       	add	r24, r30
    22d2:	9f 1f       	adc	r25, r31
    22d4:	08 95       	ret

000022d6 <_exit>:
    22d6:	f8 94       	cli

000022d8 <__stop_program>:
    22d8:	ff cf       	rjmp	.-2      	; 0x22d8 <__stop_program>
