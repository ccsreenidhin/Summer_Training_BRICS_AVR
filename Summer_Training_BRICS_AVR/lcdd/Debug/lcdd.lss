
lcdd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000028ee  00002962  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002994  00000000  00000000  00002974  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010c4  00000000  00000000  00005308  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000063cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001c9  00000000  00000000  0000656c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022af  00000000  00000000  00006735  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001267  00000000  00000000  000089e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013c7  00000000  00000000  00009c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c9d  00000000  00000000  0000b5fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000c298  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d4 e0       	ldi	r29, 0x04	; 4
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	ee ee       	ldi	r30, 0xEE	; 238
      a8:	f8 e2       	ldi	r31, 0x28	; 40
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
      b0:	a0 37       	cpi	r26, 0x70	; 112
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>
      b6:	0e 94 98 00 	call	0x130	; 0x130 <main>
      ba:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <read_adc>:

#define ADC_VREF_TYPE 0x00

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	0f 92       	push	r0
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
      cc:	89 83       	std	Y+1, r24	; 0x01
ADMUX=adc_input|ADC_VREF_TYPE;
      ce:	e7 e2       	ldi	r30, 0x27	; 39
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	89 81       	ldd	r24, Y+1	; 0x01
      d4:	80 83       	st	Z, r24
// Start the AD conversion
ADCSRA|=0x40;
      d6:	a6 e2       	ldi	r26, 0x26	; 38
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e6 e2       	ldi	r30, 0x26	; 38
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	80 64       	ori	r24, 0x40	; 64
      e2:	8c 93       	st	X, r24
// Wait for the AD conversion to complete
while ((ADCSRA & 0x10)==0);
      e4:	e6 e2       	ldi	r30, 0x26	; 38
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	88 2f       	mov	r24, r24
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	80 71       	andi	r24, 0x10	; 16
      f0:	90 70       	andi	r25, 0x00	; 0
      f2:	00 97       	sbiw	r24, 0x00	; 0
      f4:	b9 f3       	breq	.-18     	; 0xe4 <read_adc+0x22>
ADCSRA|=0x10;
      f6:	a6 e2       	ldi	r26, 0x26	; 38
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e6 e2       	ldi	r30, 0x26	; 38
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	80 81       	ld	r24, Z
     100:	80 61       	ori	r24, 0x10	; 16
     102:	8c 93       	st	X, r24
return ADCW;
     104:	e4 e2       	ldi	r30, 0x24	; 36
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	80 81       	ld	r24, Z
     10a:	91 81       	ldd	r25, Z+1	; 0x01
}
     10c:	0f 90       	pop	r0
     10e:	cf 91       	pop	r28
     110:	df 91       	pop	r29
     112:	08 95       	ret

00000114 <ADCinit>:




void ADCinit()
{
     114:	df 93       	push	r29
     116:	cf 93       	push	r28
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
ADMUX=0b00000000;
     11c:	e7 e2       	ldi	r30, 0x27	; 39
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	10 82       	st	Z, r1
ADCSRA=0x85;
     122:	e6 e2       	ldi	r30, 0x26	; 38
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	85 e8       	ldi	r24, 0x85	; 133
     128:	80 83       	st	Z, r24
}
     12a:	cf 91       	pop	r28
     12c:	df 91       	pop	r29
     12e:	08 95       	ret

00000130 <main>:

#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

main() {
     130:	df 93       	push	r29
     132:	cf 93       	push	r28
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	a4 97       	sbiw	r28, 0x24	; 36
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
	int i=0;
     144:	18 8a       	std	Y+16, r1	; 0x10
     146:	1f 86       	std	Y+15, r1	; 0x0f
	char A[20]="";
     148:	19 8a       	std	Y+17, r1	; 0x11
     14a:	1a 8a       	std	Y+18, r1	; 0x12
     14c:	1b 8a       	std	Y+19, r1	; 0x13
     14e:	1c 8a       	std	Y+20, r1	; 0x14
     150:	80 e1       	ldi	r24, 0x10	; 16
     152:	fe 01       	movw	r30, r28
     154:	75 96       	adiw	r30, 0x15	; 21
     156:	df 01       	movw	r26, r30
     158:	98 2f       	mov	r25, r24
     15a:	1d 92       	st	X+, r1
     15c:	9a 95       	dec	r25
     15e:	e9 f7       	brne	.-6      	; 0x15a <main+0x2a>
	LCDinit();
     160:	0e 94 83 05 	call	0xb06	; 0xb06 <LCDinit>
	LCDclr();
     164:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <LCDclr>
	ADCinit();
     168:	0e 94 8a 00 	call	0x114	; 0x114 <ADCinit>

	while(1){
		i=read_adc(0);
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 61 00 	call	0xc2	; 0xc2 <read_adc>
     174:	98 8b       	std	Y+16, r25	; 0x10
     176:	8f 87       	std	Y+15, r24	; 0x0f
		sprintf(A,"V= %d ",i);
     178:	00 d0       	rcall	.+0      	; 0x17a <main+0x4a>
     17a:	00 d0       	rcall	.+0      	; 0x17c <main+0x4c>
     17c:	00 d0       	rcall	.+0      	; 0x17e <main+0x4e>
     17e:	ed b7       	in	r30, 0x3d	; 61
     180:	fe b7       	in	r31, 0x3e	; 62
     182:	31 96       	adiw	r30, 0x01	; 1
     184:	ce 01       	movw	r24, r28
     186:	41 96       	adiw	r24, 0x11	; 17
     188:	91 83       	std	Z+1, r25	; 0x01
     18a:	80 83       	st	Z, r24
     18c:	80 e6       	ldi	r24, 0x60	; 96
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	93 83       	std	Z+3, r25	; 0x03
     192:	82 83       	std	Z+2, r24	; 0x02
     194:	8f 85       	ldd	r24, Y+15	; 0x0f
     196:	98 89       	ldd	r25, Y+16	; 0x10
     198:	95 83       	std	Z+5, r25	; 0x05
     19a:	84 83       	std	Z+4, r24	; 0x04
     19c:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <sprintf>
     1a0:	ad b7       	in	r26, 0x3d	; 61
     1a2:	be b7       	in	r27, 0x3e	; 62
     1a4:	16 96       	adiw	r26, 0x06	; 6
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	f8 94       	cli
     1aa:	be bf       	out	0x3e, r27	; 62
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	ad bf       	out	0x3d, r26	; 61
		LCDGotoXY(4,0);
     1b0:	84 e0       	ldi	r24, 0x04	; 4
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	0e 94 0d 0a 	call	0x141a	; 0x141a <LCDGotoXY>
			LCDdisplay(A);
     1bc:	ce 01       	movw	r24, r28
     1be:	41 96       	adiw	r24, 0x11	; 17
     1c0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <LCDdisplay>
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	a8 e4       	ldi	r26, 0x48	; 72
     1ca:	b3 e4       	ldi	r27, 0x43	; 67
     1cc:	8b 87       	std	Y+11, r24	; 0x0b
     1ce:	9c 87       	std	Y+12, r25	; 0x0c
     1d0:	ad 87       	std	Y+13, r26	; 0x0d
     1d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     1d4:	6b 85       	ldd	r22, Y+11	; 0x0b
     1d6:	7c 85       	ldd	r23, Y+12	; 0x0c
     1d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     1da:	9e 85       	ldd	r25, Y+14	; 0x0e
     1dc:	20 e0       	ldi	r18, 0x00	; 0
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	4a e7       	ldi	r20, 0x7A	; 122
     1e2:	54 e4       	ldi	r21, 0x44	; 68
     1e4:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     1e8:	dc 01       	movw	r26, r24
     1ea:	cb 01       	movw	r24, r22
     1ec:	8f 83       	std	Y+7, r24	; 0x07
     1ee:	98 87       	std	Y+8, r25	; 0x08
     1f0:	a9 87       	std	Y+9, r26	; 0x09
     1f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     1f4:	6f 81       	ldd	r22, Y+7	; 0x07
     1f6:	78 85       	ldd	r23, Y+8	; 0x08
     1f8:	89 85       	ldd	r24, Y+9	; 0x09
     1fa:	9a 85       	ldd	r25, Y+10	; 0x0a
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	40 e8       	ldi	r20, 0x80	; 128
     202:	5f e3       	ldi	r21, 0x3F	; 63
     204:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
     208:	88 23       	and	r24, r24
     20a:	2c f4       	brge	.+10     	; 0x216 <main+0xe6>
		__ticks = 1;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	9e 83       	std	Y+6, r25	; 0x06
     212:	8d 83       	std	Y+5, r24	; 0x05
     214:	3f c0       	rjmp	.+126    	; 0x294 <main+0x164>
	else if (__tmp > 65535)
     216:	6f 81       	ldd	r22, Y+7	; 0x07
     218:	78 85       	ldd	r23, Y+8	; 0x08
     21a:	89 85       	ldd	r24, Y+9	; 0x09
     21c:	9a 85       	ldd	r25, Y+10	; 0x0a
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	3f ef       	ldi	r19, 0xFF	; 255
     222:	4f e7       	ldi	r20, 0x7F	; 127
     224:	57 e4       	ldi	r21, 0x47	; 71
     226:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
     22a:	18 16       	cp	r1, r24
     22c:	4c f5       	brge	.+82     	; 0x280 <main+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     22e:	6b 85       	ldd	r22, Y+11	; 0x0b
     230:	7c 85       	ldd	r23, Y+12	; 0x0c
     232:	8d 85       	ldd	r24, Y+13	; 0x0d
     234:	9e 85       	ldd	r25, Y+14	; 0x0e
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	40 e2       	ldi	r20, 0x20	; 32
     23c:	51 e4       	ldi	r21, 0x41	; 65
     23e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     242:	dc 01       	movw	r26, r24
     244:	cb 01       	movw	r24, r22
     246:	bc 01       	movw	r22, r24
     248:	cd 01       	movw	r24, r26
     24a:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     24e:	dc 01       	movw	r26, r24
     250:	cb 01       	movw	r24, r22
     252:	9e 83       	std	Y+6, r25	; 0x06
     254:	8d 83       	std	Y+5, r24	; 0x05
     256:	0f c0       	rjmp	.+30     	; 0x276 <main+0x146>
     258:	84 e6       	ldi	r24, 0x64	; 100
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	9c 83       	std	Y+4, r25	; 0x04
     25e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     260:	8b 81       	ldd	r24, Y+3	; 0x03
     262:	9c 81       	ldd	r25, Y+4	; 0x04
     264:	01 97       	sbiw	r24, 0x01	; 1
     266:	f1 f7       	brne	.-4      	; 0x264 <main+0x134>
     268:	9c 83       	std	Y+4, r25	; 0x04
     26a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     26c:	8d 81       	ldd	r24, Y+5	; 0x05
     26e:	9e 81       	ldd	r25, Y+6	; 0x06
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	9e 83       	std	Y+6, r25	; 0x06
     274:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     276:	8d 81       	ldd	r24, Y+5	; 0x05
     278:	9e 81       	ldd	r25, Y+6	; 0x06
     27a:	00 97       	sbiw	r24, 0x00	; 0
     27c:	69 f7       	brne	.-38     	; 0x258 <main+0x128>
     27e:	76 cf       	rjmp	.-276    	; 0x16c <main+0x3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     280:	6f 81       	ldd	r22, Y+7	; 0x07
     282:	78 85       	ldd	r23, Y+8	; 0x08
     284:	89 85       	ldd	r24, Y+9	; 0x09
     286:	9a 85       	ldd	r25, Y+10	; 0x0a
     288:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     28c:	dc 01       	movw	r26, r24
     28e:	cb 01       	movw	r24, r22
     290:	9e 83       	std	Y+6, r25	; 0x06
     292:	8d 83       	std	Y+5, r24	; 0x05
     294:	8d 81       	ldd	r24, Y+5	; 0x05
     296:	9e 81       	ldd	r25, Y+6	; 0x06
     298:	9a 83       	std	Y+2, r25	; 0x02
     29a:	89 83       	std	Y+1, r24	; 0x01
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	9a 81       	ldd	r25, Y+2	; 0x02
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <main+0x170>
     2a4:	9a 83       	std	Y+2, r25	; 0x02
     2a6:	89 83       	std	Y+1, r24	; 0x01
     2a8:	61 cf       	rjmp	.-318    	; 0x16c <main+0x3c>

000002aa <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     2aa:	df 93       	push	r29
     2ac:	cf 93       	push	r28
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	e9 97       	sbiw	r28, 0x39	; 57
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
     2be:	89 af       	std	Y+57, r24	; 0x39

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     2c0:	e5 e3       	ldi	r30, 0x35	; 53
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	89 ad       	ldd	r24, Y+57	; 0x39
     2c6:	80 7f       	andi	r24, 0xF0	; 240
     2c8:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     2ca:	a5 e3       	ldi	r26, 0x35	; 53
     2cc:	b0 e0       	ldi	r27, 0x00	; 0
     2ce:	e5 e3       	ldi	r30, 0x35	; 53
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	81 60       	ori	r24, 0x01	; 1
     2d6:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     2d8:	a5 e3       	ldi	r26, 0x35	; 53
     2da:	b0 e0       	ldi	r27, 0x00	; 0
     2dc:	e5 e3       	ldi	r30, 0x35	; 53
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	80 81       	ld	r24, Z
     2e2:	84 60       	ori	r24, 0x04	; 4
     2e4:	8c 93       	st	X, r24
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	a0 e8       	ldi	r26, 0x80	; 128
     2ec:	bf e3       	ldi	r27, 0x3F	; 63
     2ee:	8d ab       	std	Y+53, r24	; 0x35
     2f0:	9e ab       	std	Y+54, r25	; 0x36
     2f2:	af ab       	std	Y+55, r26	; 0x37
     2f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f6:	6d a9       	ldd	r22, Y+53	; 0x35
     2f8:	7e a9       	ldd	r23, Y+54	; 0x36
     2fa:	8f a9       	ldd	r24, Y+55	; 0x37
     2fc:	98 ad       	ldd	r25, Y+56	; 0x38
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	4a e7       	ldi	r20, 0x7A	; 122
     304:	54 e4       	ldi	r21, 0x44	; 68
     306:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     30a:	dc 01       	movw	r26, r24
     30c:	cb 01       	movw	r24, r22
     30e:	89 ab       	std	Y+49, r24	; 0x31
     310:	9a ab       	std	Y+50, r25	; 0x32
     312:	ab ab       	std	Y+51, r26	; 0x33
     314:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     316:	69 a9       	ldd	r22, Y+49	; 0x31
     318:	7a a9       	ldd	r23, Y+50	; 0x32
     31a:	8b a9       	ldd	r24, Y+51	; 0x33
     31c:	9c a9       	ldd	r25, Y+52	; 0x34
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	40 e8       	ldi	r20, 0x80	; 128
     324:	5f e3       	ldi	r21, 0x3F	; 63
     326:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
     32a:	88 23       	and	r24, r24
     32c:	2c f4       	brge	.+10     	; 0x338 <LCDsendChar+0x8e>
		__ticks = 1;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	98 ab       	std	Y+48, r25	; 0x30
     334:	8f a7       	std	Y+47, r24	; 0x2f
     336:	3f c0       	rjmp	.+126    	; 0x3b6 <LCDsendChar+0x10c>
	else if (__tmp > 65535)
     338:	69 a9       	ldd	r22, Y+49	; 0x31
     33a:	7a a9       	ldd	r23, Y+50	; 0x32
     33c:	8b a9       	ldd	r24, Y+51	; 0x33
     33e:	9c a9       	ldd	r25, Y+52	; 0x34
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	3f ef       	ldi	r19, 0xFF	; 255
     344:	4f e7       	ldi	r20, 0x7F	; 127
     346:	57 e4       	ldi	r21, 0x47	; 71
     348:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
     34c:	18 16       	cp	r1, r24
     34e:	4c f5       	brge	.+82     	; 0x3a2 <LCDsendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     350:	6d a9       	ldd	r22, Y+53	; 0x35
     352:	7e a9       	ldd	r23, Y+54	; 0x36
     354:	8f a9       	ldd	r24, Y+55	; 0x37
     356:	98 ad       	ldd	r25, Y+56	; 0x38
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	40 e2       	ldi	r20, 0x20	; 32
     35e:	51 e4       	ldi	r21, 0x41	; 65
     360:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     364:	dc 01       	movw	r26, r24
     366:	cb 01       	movw	r24, r22
     368:	bc 01       	movw	r22, r24
     36a:	cd 01       	movw	r24, r26
     36c:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     370:	dc 01       	movw	r26, r24
     372:	cb 01       	movw	r24, r22
     374:	98 ab       	std	Y+48, r25	; 0x30
     376:	8f a7       	std	Y+47, r24	; 0x2f
     378:	0f c0       	rjmp	.+30     	; 0x398 <LCDsendChar+0xee>
     37a:	84 e6       	ldi	r24, 0x64	; 100
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	9e a7       	std	Y+46, r25	; 0x2e
     380:	8d a7       	std	Y+45, r24	; 0x2d
     382:	8d a5       	ldd	r24, Y+45	; 0x2d
     384:	9e a5       	ldd	r25, Y+46	; 0x2e
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <LCDsendChar+0xdc>
     38a:	9e a7       	std	Y+46, r25	; 0x2e
     38c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     38e:	8f a5       	ldd	r24, Y+47	; 0x2f
     390:	98 a9       	ldd	r25, Y+48	; 0x30
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	98 ab       	std	Y+48, r25	; 0x30
     396:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     398:	8f a5       	ldd	r24, Y+47	; 0x2f
     39a:	98 a9       	ldd	r25, Y+48	; 0x30
     39c:	00 97       	sbiw	r24, 0x00	; 0
     39e:	69 f7       	brne	.-38     	; 0x37a <LCDsendChar+0xd0>
     3a0:	14 c0       	rjmp	.+40     	; 0x3ca <LCDsendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3a2:	69 a9       	ldd	r22, Y+49	; 0x31
     3a4:	7a a9       	ldd	r23, Y+50	; 0x32
     3a6:	8b a9       	ldd	r24, Y+51	; 0x33
     3a8:	9c a9       	ldd	r25, Y+52	; 0x34
     3aa:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     3ae:	dc 01       	movw	r26, r24
     3b0:	cb 01       	movw	r24, r22
     3b2:	98 ab       	std	Y+48, r25	; 0x30
     3b4:	8f a7       	std	Y+47, r24	; 0x2f
     3b6:	8f a5       	ldd	r24, Y+47	; 0x2f
     3b8:	98 a9       	ldd	r25, Y+48	; 0x30
     3ba:	9c a7       	std	Y+44, r25	; 0x2c
     3bc:	8b a7       	std	Y+43, r24	; 0x2b
     3be:	8b a5       	ldd	r24, Y+43	; 0x2b
     3c0:	9c a5       	ldd	r25, Y+44	; 0x2c
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <LCDsendChar+0x118>
     3c6:	9c a7       	std	Y+44, r25	; 0x2c
     3c8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     3ca:	a5 e3       	ldi	r26, 0x35	; 53
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	e5 e3       	ldi	r30, 0x35	; 53
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	8b 7f       	andi	r24, 0xFB	; 251
     3d6:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     3d8:	a5 e3       	ldi	r26, 0x35	; 53
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	e5 e3       	ldi	r30, 0x35	; 53
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	80 81       	ld	r24, Z
     3e2:	8e 7f       	andi	r24, 0xFE	; 254
     3e4:	8c 93       	st	X, r24
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	a0 e8       	ldi	r26, 0x80	; 128
     3ec:	bf e3       	ldi	r27, 0x3F	; 63
     3ee:	8f a3       	std	Y+39, r24	; 0x27
     3f0:	98 a7       	std	Y+40, r25	; 0x28
     3f2:	a9 a7       	std	Y+41, r26	; 0x29
     3f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3f6:	6f a1       	ldd	r22, Y+39	; 0x27
     3f8:	78 a5       	ldd	r23, Y+40	; 0x28
     3fa:	89 a5       	ldd	r24, Y+41	; 0x29
     3fc:	9a a5       	ldd	r25, Y+42	; 0x2a
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	4a e7       	ldi	r20, 0x7A	; 122
     404:	54 e4       	ldi	r21, 0x44	; 68
     406:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	8b a3       	std	Y+35, r24	; 0x23
     410:	9c a3       	std	Y+36, r25	; 0x24
     412:	ad a3       	std	Y+37, r26	; 0x25
     414:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     416:	6b a1       	ldd	r22, Y+35	; 0x23
     418:	7c a1       	ldd	r23, Y+36	; 0x24
     41a:	8d a1       	ldd	r24, Y+37	; 0x25
     41c:	9e a1       	ldd	r25, Y+38	; 0x26
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	40 e8       	ldi	r20, 0x80	; 128
     424:	5f e3       	ldi	r21, 0x3F	; 63
     426:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
     42a:	88 23       	and	r24, r24
     42c:	2c f4       	brge	.+10     	; 0x438 <LCDsendChar+0x18e>
		__ticks = 1;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	9a a3       	std	Y+34, r25	; 0x22
     434:	89 a3       	std	Y+33, r24	; 0x21
     436:	3f c0       	rjmp	.+126    	; 0x4b6 <__stack+0x57>
	else if (__tmp > 65535)
     438:	6b a1       	ldd	r22, Y+35	; 0x23
     43a:	7c a1       	ldd	r23, Y+36	; 0x24
     43c:	8d a1       	ldd	r24, Y+37	; 0x25
     43e:	9e a1       	ldd	r25, Y+38	; 0x26
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	3f ef       	ldi	r19, 0xFF	; 255
     444:	4f e7       	ldi	r20, 0x7F	; 127
     446:	57 e4       	ldi	r21, 0x47	; 71
     448:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
     44c:	18 16       	cp	r1, r24
     44e:	4c f5       	brge	.+82     	; 0x4a2 <__stack+0x43>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     450:	6f a1       	ldd	r22, Y+39	; 0x27
     452:	78 a5       	ldd	r23, Y+40	; 0x28
     454:	89 a5       	ldd	r24, Y+41	; 0x29
     456:	9a a5       	ldd	r25, Y+42	; 0x2a
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e2       	ldi	r20, 0x20	; 32
     45e:	51 e4       	ldi	r21, 0x41	; 65
     460:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     464:	dc 01       	movw	r26, r24
     466:	cb 01       	movw	r24, r22
     468:	bc 01       	movw	r22, r24
     46a:	cd 01       	movw	r24, r26
     46c:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	9a a3       	std	Y+34, r25	; 0x22
     476:	89 a3       	std	Y+33, r24	; 0x21
     478:	0f c0       	rjmp	.+30     	; 0x498 <__stack+0x39>
     47a:	84 e6       	ldi	r24, 0x64	; 100
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	98 a3       	std	Y+32, r25	; 0x20
     480:	8f 8f       	std	Y+31, r24	; 0x1f
     482:	8f 8d       	ldd	r24, Y+31	; 0x1f
     484:	98 a1       	ldd	r25, Y+32	; 0x20
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <__stack+0x27>
     48a:	98 a3       	std	Y+32, r25	; 0x20
     48c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     48e:	89 a1       	ldd	r24, Y+33	; 0x21
     490:	9a a1       	ldd	r25, Y+34	; 0x22
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	9a a3       	std	Y+34, r25	; 0x22
     496:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     498:	89 a1       	ldd	r24, Y+33	; 0x21
     49a:	9a a1       	ldd	r25, Y+34	; 0x22
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	69 f7       	brne	.-38     	; 0x47a <__stack+0x1b>
     4a0:	14 c0       	rjmp	.+40     	; 0x4ca <__stack+0x6b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4a2:	6b a1       	ldd	r22, Y+35	; 0x23
     4a4:	7c a1       	ldd	r23, Y+36	; 0x24
     4a6:	8d a1       	ldd	r24, Y+37	; 0x25
     4a8:	9e a1       	ldd	r25, Y+38	; 0x26
     4aa:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     4ae:	dc 01       	movw	r26, r24
     4b0:	cb 01       	movw	r24, r22
     4b2:	9a a3       	std	Y+34, r25	; 0x22
     4b4:	89 a3       	std	Y+33, r24	; 0x21
     4b6:	89 a1       	ldd	r24, Y+33	; 0x21
     4b8:	9a a1       	ldd	r25, Y+34	; 0x22
     4ba:	9e 8f       	std	Y+30, r25	; 0x1e
     4bc:	8d 8f       	std	Y+29, r24	; 0x1d
     4be:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <__stack+0x63>
     4c6:	9e 8f       	std	Y+30, r25	; 0x1e
     4c8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     4ca:	e5 e3       	ldi	r30, 0x35	; 53
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	89 ad       	ldd	r24, Y+57	; 0x39
     4d0:	88 2f       	mov	r24, r24
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	82 95       	swap	r24
     4d6:	92 95       	swap	r25
     4d8:	90 7f       	andi	r25, 0xF0	; 240
     4da:	98 27       	eor	r25, r24
     4dc:	80 7f       	andi	r24, 0xF0	; 240
     4de:	98 27       	eor	r25, r24
     4e0:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     4e2:	a5 e3       	ldi	r26, 0x35	; 53
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	e5 e3       	ldi	r30, 0x35	; 53
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	81 60       	ori	r24, 0x01	; 1
     4ee:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     4f0:	a5 e3       	ldi	r26, 0x35	; 53
     4f2:	b0 e0       	ldi	r27, 0x00	; 0
     4f4:	e5 e3       	ldi	r30, 0x35	; 53
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	84 60       	ori	r24, 0x04	; 4
     4fc:	8c 93       	st	X, r24
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	a0 e8       	ldi	r26, 0x80	; 128
     504:	bf e3       	ldi	r27, 0x3F	; 63
     506:	89 8f       	std	Y+25, r24	; 0x19
     508:	9a 8f       	std	Y+26, r25	; 0x1a
     50a:	ab 8f       	std	Y+27, r26	; 0x1b
     50c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     50e:	69 8d       	ldd	r22, Y+25	; 0x19
     510:	7a 8d       	ldd	r23, Y+26	; 0x1a
     512:	8b 8d       	ldd	r24, Y+27	; 0x1b
     514:	9c 8d       	ldd	r25, Y+28	; 0x1c
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	4a e7       	ldi	r20, 0x7A	; 122
     51c:	54 e4       	ldi	r21, 0x44	; 68
     51e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     522:	dc 01       	movw	r26, r24
     524:	cb 01       	movw	r24, r22
     526:	8d 8b       	std	Y+21, r24	; 0x15
     528:	9e 8b       	std	Y+22, r25	; 0x16
     52a:	af 8b       	std	Y+23, r26	; 0x17
     52c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     52e:	6d 89       	ldd	r22, Y+21	; 0x15
     530:	7e 89       	ldd	r23, Y+22	; 0x16
     532:	8f 89       	ldd	r24, Y+23	; 0x17
     534:	98 8d       	ldd	r25, Y+24	; 0x18
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	40 e8       	ldi	r20, 0x80	; 128
     53c:	5f e3       	ldi	r21, 0x3F	; 63
     53e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
     542:	88 23       	and	r24, r24
     544:	2c f4       	brge	.+10     	; 0x550 <__stack+0xf1>
		__ticks = 1;
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	9c 8b       	std	Y+20, r25	; 0x14
     54c:	8b 8b       	std	Y+19, r24	; 0x13
     54e:	3f c0       	rjmp	.+126    	; 0x5ce <__stack+0x16f>
	else if (__tmp > 65535)
     550:	6d 89       	ldd	r22, Y+21	; 0x15
     552:	7e 89       	ldd	r23, Y+22	; 0x16
     554:	8f 89       	ldd	r24, Y+23	; 0x17
     556:	98 8d       	ldd	r25, Y+24	; 0x18
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	3f ef       	ldi	r19, 0xFF	; 255
     55c:	4f e7       	ldi	r20, 0x7F	; 127
     55e:	57 e4       	ldi	r21, 0x47	; 71
     560:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
     564:	18 16       	cp	r1, r24
     566:	4c f5       	brge	.+82     	; 0x5ba <__stack+0x15b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     568:	69 8d       	ldd	r22, Y+25	; 0x19
     56a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     56c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     56e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e2       	ldi	r20, 0x20	; 32
     576:	51 e4       	ldi	r21, 0x41	; 65
     578:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	9c 8b       	std	Y+20, r25	; 0x14
     58e:	8b 8b       	std	Y+19, r24	; 0x13
     590:	0f c0       	rjmp	.+30     	; 0x5b0 <__stack+0x151>
     592:	84 e6       	ldi	r24, 0x64	; 100
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	9a 8b       	std	Y+18, r25	; 0x12
     598:	89 8b       	std	Y+17, r24	; 0x11
     59a:	89 89       	ldd	r24, Y+17	; 0x11
     59c:	9a 89       	ldd	r25, Y+18	; 0x12
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	f1 f7       	brne	.-4      	; 0x59e <__stack+0x13f>
     5a2:	9a 8b       	std	Y+18, r25	; 0x12
     5a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a6:	8b 89       	ldd	r24, Y+19	; 0x13
     5a8:	9c 89       	ldd	r25, Y+20	; 0x14
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	9c 8b       	std	Y+20, r25	; 0x14
     5ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5b0:	8b 89       	ldd	r24, Y+19	; 0x13
     5b2:	9c 89       	ldd	r25, Y+20	; 0x14
     5b4:	00 97       	sbiw	r24, 0x00	; 0
     5b6:	69 f7       	brne	.-38     	; 0x592 <__stack+0x133>
     5b8:	14 c0       	rjmp	.+40     	; 0x5e2 <__stack+0x183>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ba:	6d 89       	ldd	r22, Y+21	; 0x15
     5bc:	7e 89       	ldd	r23, Y+22	; 0x16
     5be:	8f 89       	ldd	r24, Y+23	; 0x17
     5c0:	98 8d       	ldd	r25, Y+24	; 0x18
     5c2:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     5c6:	dc 01       	movw	r26, r24
     5c8:	cb 01       	movw	r24, r22
     5ca:	9c 8b       	std	Y+20, r25	; 0x14
     5cc:	8b 8b       	std	Y+19, r24	; 0x13
     5ce:	8b 89       	ldd	r24, Y+19	; 0x13
     5d0:	9c 89       	ldd	r25, Y+20	; 0x14
     5d2:	98 8b       	std	Y+16, r25	; 0x10
     5d4:	8f 87       	std	Y+15, r24	; 0x0f
     5d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     5d8:	98 89       	ldd	r25, Y+16	; 0x10
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	f1 f7       	brne	.-4      	; 0x5da <__stack+0x17b>
     5de:	98 8b       	std	Y+16, r25	; 0x10
     5e0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     5e2:	a5 e3       	ldi	r26, 0x35	; 53
     5e4:	b0 e0       	ldi	r27, 0x00	; 0
     5e6:	e5 e3       	ldi	r30, 0x35	; 53
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	80 81       	ld	r24, Z
     5ec:	8b 7f       	andi	r24, 0xFB	; 251
     5ee:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     5f0:	a5 e3       	ldi	r26, 0x35	; 53
     5f2:	b0 e0       	ldi	r27, 0x00	; 0
     5f4:	e5 e3       	ldi	r30, 0x35	; 53
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	80 81       	ld	r24, Z
     5fa:	8e 7f       	andi	r24, 0xFE	; 254
     5fc:	8c 93       	st	X, r24
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	a0 e8       	ldi	r26, 0x80	; 128
     604:	bf e3       	ldi	r27, 0x3F	; 63
     606:	8b 87       	std	Y+11, r24	; 0x0b
     608:	9c 87       	std	Y+12, r25	; 0x0c
     60a:	ad 87       	std	Y+13, r26	; 0x0d
     60c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     60e:	6b 85       	ldd	r22, Y+11	; 0x0b
     610:	7c 85       	ldd	r23, Y+12	; 0x0c
     612:	8d 85       	ldd	r24, Y+13	; 0x0d
     614:	9e 85       	ldd	r25, Y+14	; 0x0e
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	4a e7       	ldi	r20, 0x7A	; 122
     61c:	54 e4       	ldi	r21, 0x44	; 68
     61e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     622:	dc 01       	movw	r26, r24
     624:	cb 01       	movw	r24, r22
     626:	8f 83       	std	Y+7, r24	; 0x07
     628:	98 87       	std	Y+8, r25	; 0x08
     62a:	a9 87       	std	Y+9, r26	; 0x09
     62c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     62e:	6f 81       	ldd	r22, Y+7	; 0x07
     630:	78 85       	ldd	r23, Y+8	; 0x08
     632:	89 85       	ldd	r24, Y+9	; 0x09
     634:	9a 85       	ldd	r25, Y+10	; 0x0a
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 e8       	ldi	r20, 0x80	; 128
     63c:	5f e3       	ldi	r21, 0x3F	; 63
     63e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
     642:	88 23       	and	r24, r24
     644:	2c f4       	brge	.+10     	; 0x650 <__stack+0x1f1>
		__ticks = 1;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	9e 83       	std	Y+6, r25	; 0x06
     64c:	8d 83       	std	Y+5, r24	; 0x05
     64e:	3f c0       	rjmp	.+126    	; 0x6ce <__stack+0x26f>
	else if (__tmp > 65535)
     650:	6f 81       	ldd	r22, Y+7	; 0x07
     652:	78 85       	ldd	r23, Y+8	; 0x08
     654:	89 85       	ldd	r24, Y+9	; 0x09
     656:	9a 85       	ldd	r25, Y+10	; 0x0a
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	3f ef       	ldi	r19, 0xFF	; 255
     65c:	4f e7       	ldi	r20, 0x7F	; 127
     65e:	57 e4       	ldi	r21, 0x47	; 71
     660:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
     664:	18 16       	cp	r1, r24
     666:	4c f5       	brge	.+82     	; 0x6ba <__stack+0x25b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     668:	6b 85       	ldd	r22, Y+11	; 0x0b
     66a:	7c 85       	ldd	r23, Y+12	; 0x0c
     66c:	8d 85       	ldd	r24, Y+13	; 0x0d
     66e:	9e 85       	ldd	r25, Y+14	; 0x0e
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	40 e2       	ldi	r20, 0x20	; 32
     676:	51 e4       	ldi	r21, 0x41	; 65
     678:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     67c:	dc 01       	movw	r26, r24
     67e:	cb 01       	movw	r24, r22
     680:	bc 01       	movw	r22, r24
     682:	cd 01       	movw	r24, r26
     684:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	9e 83       	std	Y+6, r25	; 0x06
     68e:	8d 83       	std	Y+5, r24	; 0x05
     690:	0f c0       	rjmp	.+30     	; 0x6b0 <__stack+0x251>
     692:	84 e6       	ldi	r24, 0x64	; 100
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	9c 83       	std	Y+4, r25	; 0x04
     698:	8b 83       	std	Y+3, r24	; 0x03
     69a:	8b 81       	ldd	r24, Y+3	; 0x03
     69c:	9c 81       	ldd	r25, Y+4	; 0x04
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <__stack+0x23f>
     6a2:	9c 83       	std	Y+4, r25	; 0x04
     6a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6a6:	8d 81       	ldd	r24, Y+5	; 0x05
     6a8:	9e 81       	ldd	r25, Y+6	; 0x06
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	9e 83       	std	Y+6, r25	; 0x06
     6ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b0:	8d 81       	ldd	r24, Y+5	; 0x05
     6b2:	9e 81       	ldd	r25, Y+6	; 0x06
     6b4:	00 97       	sbiw	r24, 0x00	; 0
     6b6:	69 f7       	brne	.-38     	; 0x692 <__stack+0x233>
     6b8:	14 c0       	rjmp	.+40     	; 0x6e2 <__stack+0x283>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6ba:	6f 81       	ldd	r22, Y+7	; 0x07
     6bc:	78 85       	ldd	r23, Y+8	; 0x08
     6be:	89 85       	ldd	r24, Y+9	; 0x09
     6c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6c2:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	9e 83       	std	Y+6, r25	; 0x06
     6cc:	8d 83       	std	Y+5, r24	; 0x05
     6ce:	8d 81       	ldd	r24, Y+5	; 0x05
     6d0:	9e 81       	ldd	r25, Y+6	; 0x06
     6d2:	9a 83       	std	Y+2, r25	; 0x02
     6d4:	89 83       	std	Y+1, r24	; 0x01
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	9a 81       	ldd	r25, Y+2	; 0x02
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	f1 f7       	brne	.-4      	; 0x6da <__stack+0x27b>
     6de:	9a 83       	std	Y+2, r25	; 0x02
     6e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     6e2:	e9 96       	adiw	r28, 0x39	; 57
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	cf 91       	pop	r28
     6f0:	df 91       	pop	r29
     6f2:	08 95       	ret

000006f4 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     6f4:	df 93       	push	r29
     6f6:	cf 93       	push	r28
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	e9 97       	sbiw	r28, 0x39	; 57
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	89 af       	std	Y+57, r24	; 0x39
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     70a:	e5 e3       	ldi	r30, 0x35	; 53
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	89 ad       	ldd	r24, Y+57	; 0x39
     710:	80 7f       	andi	r24, 0xF0	; 240
     712:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     714:	a5 e3       	ldi	r26, 0x35	; 53
     716:	b0 e0       	ldi	r27, 0x00	; 0
     718:	e5 e3       	ldi	r30, 0x35	; 53
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	80 81       	ld	r24, Z
     71e:	84 60       	ori	r24, 0x04	; 4
     720:	8c 93       	st	X, r24
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	a0 e8       	ldi	r26, 0x80	; 128
     728:	bf e3       	ldi	r27, 0x3F	; 63
     72a:	8d ab       	std	Y+53, r24	; 0x35
     72c:	9e ab       	std	Y+54, r25	; 0x36
     72e:	af ab       	std	Y+55, r26	; 0x37
     730:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     732:	6d a9       	ldd	r22, Y+53	; 0x35
     734:	7e a9       	ldd	r23, Y+54	; 0x36
     736:	8f a9       	ldd	r24, Y+55	; 0x37
     738:	98 ad       	ldd	r25, Y+56	; 0x38
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	4a e7       	ldi	r20, 0x7A	; 122
     740:	54 e4       	ldi	r21, 0x44	; 68
     742:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     746:	dc 01       	movw	r26, r24
     748:	cb 01       	movw	r24, r22
     74a:	89 ab       	std	Y+49, r24	; 0x31
     74c:	9a ab       	std	Y+50, r25	; 0x32
     74e:	ab ab       	std	Y+51, r26	; 0x33
     750:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	40 e8       	ldi	r20, 0x80	; 128
     760:	5f e3       	ldi	r21, 0x3F	; 63
     762:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
     766:	88 23       	and	r24, r24
     768:	2c f4       	brge	.+10     	; 0x774 <LCDsendCommand+0x80>
		__ticks = 1;
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	98 ab       	std	Y+48, r25	; 0x30
     770:	8f a7       	std	Y+47, r24	; 0x2f
     772:	3f c0       	rjmp	.+126    	; 0x7f2 <LCDsendCommand+0xfe>
	else if (__tmp > 65535)
     774:	69 a9       	ldd	r22, Y+49	; 0x31
     776:	7a a9       	ldd	r23, Y+50	; 0x32
     778:	8b a9       	ldd	r24, Y+51	; 0x33
     77a:	9c a9       	ldd	r25, Y+52	; 0x34
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	3f ef       	ldi	r19, 0xFF	; 255
     780:	4f e7       	ldi	r20, 0x7F	; 127
     782:	57 e4       	ldi	r21, 0x47	; 71
     784:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
     788:	18 16       	cp	r1, r24
     78a:	4c f5       	brge	.+82     	; 0x7de <LCDsendCommand+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     78c:	6d a9       	ldd	r22, Y+53	; 0x35
     78e:	7e a9       	ldd	r23, Y+54	; 0x36
     790:	8f a9       	ldd	r24, Y+55	; 0x37
     792:	98 ad       	ldd	r25, Y+56	; 0x38
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e2       	ldi	r20, 0x20	; 32
     79a:	51 e4       	ldi	r21, 0x41	; 65
     79c:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     7a0:	dc 01       	movw	r26, r24
     7a2:	cb 01       	movw	r24, r22
     7a4:	bc 01       	movw	r22, r24
     7a6:	cd 01       	movw	r24, r26
     7a8:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     7ac:	dc 01       	movw	r26, r24
     7ae:	cb 01       	movw	r24, r22
     7b0:	98 ab       	std	Y+48, r25	; 0x30
     7b2:	8f a7       	std	Y+47, r24	; 0x2f
     7b4:	0f c0       	rjmp	.+30     	; 0x7d4 <LCDsendCommand+0xe0>
     7b6:	84 e6       	ldi	r24, 0x64	; 100
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	9e a7       	std	Y+46, r25	; 0x2e
     7bc:	8d a7       	std	Y+45, r24	; 0x2d
     7be:	8d a5       	ldd	r24, Y+45	; 0x2d
     7c0:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <LCDsendCommand+0xce>
     7c6:	9e a7       	std	Y+46, r25	; 0x2e
     7c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ca:	8f a5       	ldd	r24, Y+47	; 0x2f
     7cc:	98 a9       	ldd	r25, Y+48	; 0x30
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	98 ab       	std	Y+48, r25	; 0x30
     7d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7d4:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d6:	98 a9       	ldd	r25, Y+48	; 0x30
     7d8:	00 97       	sbiw	r24, 0x00	; 0
     7da:	69 f7       	brne	.-38     	; 0x7b6 <LCDsendCommand+0xc2>
     7dc:	14 c0       	rjmp	.+40     	; 0x806 <LCDsendCommand+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7de:	69 a9       	ldd	r22, Y+49	; 0x31
     7e0:	7a a9       	ldd	r23, Y+50	; 0x32
     7e2:	8b a9       	ldd	r24, Y+51	; 0x33
     7e4:	9c a9       	ldd	r25, Y+52	; 0x34
     7e6:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     7ea:	dc 01       	movw	r26, r24
     7ec:	cb 01       	movw	r24, r22
     7ee:	98 ab       	std	Y+48, r25	; 0x30
     7f0:	8f a7       	std	Y+47, r24	; 0x2f
     7f2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7f4:	98 a9       	ldd	r25, Y+48	; 0x30
     7f6:	9c a7       	std	Y+44, r25	; 0x2c
     7f8:	8b a7       	std	Y+43, r24	; 0x2b
     7fa:	8b a5       	ldd	r24, Y+43	; 0x2b
     7fc:	9c a5       	ldd	r25, Y+44	; 0x2c
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <LCDsendCommand+0x10a>
     802:	9c a7       	std	Y+44, r25	; 0x2c
     804:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     806:	a5 e3       	ldi	r26, 0x35	; 53
     808:	b0 e0       	ldi	r27, 0x00	; 0
     80a:	e5 e3       	ldi	r30, 0x35	; 53
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	80 81       	ld	r24, Z
     810:	8b 7f       	andi	r24, 0xFB	; 251
     812:	8c 93       	st	X, r24
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	a0 e8       	ldi	r26, 0x80	; 128
     81a:	bf e3       	ldi	r27, 0x3F	; 63
     81c:	8f a3       	std	Y+39, r24	; 0x27
     81e:	98 a7       	std	Y+40, r25	; 0x28
     820:	a9 a7       	std	Y+41, r26	; 0x29
     822:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     824:	6f a1       	ldd	r22, Y+39	; 0x27
     826:	78 a5       	ldd	r23, Y+40	; 0x28
     828:	89 a5       	ldd	r24, Y+41	; 0x29
     82a:	9a a5       	ldd	r25, Y+42	; 0x2a
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	4a e7       	ldi	r20, 0x7A	; 122
     832:	54 e4       	ldi	r21, 0x44	; 68
     834:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	8b a3       	std	Y+35, r24	; 0x23
     83e:	9c a3       	std	Y+36, r25	; 0x24
     840:	ad a3       	std	Y+37, r26	; 0x25
     842:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     844:	6b a1       	ldd	r22, Y+35	; 0x23
     846:	7c a1       	ldd	r23, Y+36	; 0x24
     848:	8d a1       	ldd	r24, Y+37	; 0x25
     84a:	9e a1       	ldd	r25, Y+38	; 0x26
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	40 e8       	ldi	r20, 0x80	; 128
     852:	5f e3       	ldi	r21, 0x3F	; 63
     854:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
     858:	88 23       	and	r24, r24
     85a:	2c f4       	brge	.+10     	; 0x866 <LCDsendCommand+0x172>
		__ticks = 1;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	9a a3       	std	Y+34, r25	; 0x22
     862:	89 a3       	std	Y+33, r24	; 0x21
     864:	3f c0       	rjmp	.+126    	; 0x8e4 <LCDsendCommand+0x1f0>
	else if (__tmp > 65535)
     866:	6b a1       	ldd	r22, Y+35	; 0x23
     868:	7c a1       	ldd	r23, Y+36	; 0x24
     86a:	8d a1       	ldd	r24, Y+37	; 0x25
     86c:	9e a1       	ldd	r25, Y+38	; 0x26
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	3f ef       	ldi	r19, 0xFF	; 255
     872:	4f e7       	ldi	r20, 0x7F	; 127
     874:	57 e4       	ldi	r21, 0x47	; 71
     876:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
     87a:	18 16       	cp	r1, r24
     87c:	4c f5       	brge	.+82     	; 0x8d0 <LCDsendCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     87e:	6f a1       	ldd	r22, Y+39	; 0x27
     880:	78 a5       	ldd	r23, Y+40	; 0x28
     882:	89 a5       	ldd	r24, Y+41	; 0x29
     884:	9a a5       	ldd	r25, Y+42	; 0x2a
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 e2       	ldi	r20, 0x20	; 32
     88c:	51 e4       	ldi	r21, 0x41	; 65
     88e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     892:	dc 01       	movw	r26, r24
     894:	cb 01       	movw	r24, r22
     896:	bc 01       	movw	r22, r24
     898:	cd 01       	movw	r24, r26
     89a:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     89e:	dc 01       	movw	r26, r24
     8a0:	cb 01       	movw	r24, r22
     8a2:	9a a3       	std	Y+34, r25	; 0x22
     8a4:	89 a3       	std	Y+33, r24	; 0x21
     8a6:	0f c0       	rjmp	.+30     	; 0x8c6 <LCDsendCommand+0x1d2>
     8a8:	84 e6       	ldi	r24, 0x64	; 100
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	98 a3       	std	Y+32, r25	; 0x20
     8ae:	8f 8f       	std	Y+31, r24	; 0x1f
     8b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b2:	98 a1       	ldd	r25, Y+32	; 0x20
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <LCDsendCommand+0x1c0>
     8b8:	98 a3       	std	Y+32, r25	; 0x20
     8ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8bc:	89 a1       	ldd	r24, Y+33	; 0x21
     8be:	9a a1       	ldd	r25, Y+34	; 0x22
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	9a a3       	std	Y+34, r25	; 0x22
     8c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c6:	89 a1       	ldd	r24, Y+33	; 0x21
     8c8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ca:	00 97       	sbiw	r24, 0x00	; 0
     8cc:	69 f7       	brne	.-38     	; 0x8a8 <LCDsendCommand+0x1b4>
     8ce:	14 c0       	rjmp	.+40     	; 0x8f8 <LCDsendCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d0:	6b a1       	ldd	r22, Y+35	; 0x23
     8d2:	7c a1       	ldd	r23, Y+36	; 0x24
     8d4:	8d a1       	ldd	r24, Y+37	; 0x25
     8d6:	9e a1       	ldd	r25, Y+38	; 0x26
     8d8:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     8dc:	dc 01       	movw	r26, r24
     8de:	cb 01       	movw	r24, r22
     8e0:	9a a3       	std	Y+34, r25	; 0x22
     8e2:	89 a3       	std	Y+33, r24	; 0x21
     8e4:	89 a1       	ldd	r24, Y+33	; 0x21
     8e6:	9a a1       	ldd	r25, Y+34	; 0x22
     8e8:	9e 8f       	std	Y+30, r25	; 0x1e
     8ea:	8d 8f       	std	Y+29, r24	; 0x1d
     8ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <LCDsendCommand+0x1fc>
     8f4:	9e 8f       	std	Y+30, r25	; 0x1e
     8f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     8f8:	e5 e3       	ldi	r30, 0x35	; 53
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	89 ad       	ldd	r24, Y+57	; 0x39
     8fe:	88 2f       	mov	r24, r24
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	82 95       	swap	r24
     904:	92 95       	swap	r25
     906:	90 7f       	andi	r25, 0xF0	; 240
     908:	98 27       	eor	r25, r24
     90a:	80 7f       	andi	r24, 0xF0	; 240
     90c:	98 27       	eor	r25, r24
     90e:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     910:	a5 e3       	ldi	r26, 0x35	; 53
     912:	b0 e0       	ldi	r27, 0x00	; 0
     914:	e5 e3       	ldi	r30, 0x35	; 53
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	84 60       	ori	r24, 0x04	; 4
     91c:	8c 93       	st	X, r24
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	a0 e8       	ldi	r26, 0x80	; 128
     924:	bf e3       	ldi	r27, 0x3F	; 63
     926:	89 8f       	std	Y+25, r24	; 0x19
     928:	9a 8f       	std	Y+26, r25	; 0x1a
     92a:	ab 8f       	std	Y+27, r26	; 0x1b
     92c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     92e:	69 8d       	ldd	r22, Y+25	; 0x19
     930:	7a 8d       	ldd	r23, Y+26	; 0x1a
     932:	8b 8d       	ldd	r24, Y+27	; 0x1b
     934:	9c 8d       	ldd	r25, Y+28	; 0x1c
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	4a e7       	ldi	r20, 0x7A	; 122
     93c:	54 e4       	ldi	r21, 0x44	; 68
     93e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     942:	dc 01       	movw	r26, r24
     944:	cb 01       	movw	r24, r22
     946:	8d 8b       	std	Y+21, r24	; 0x15
     948:	9e 8b       	std	Y+22, r25	; 0x16
     94a:	af 8b       	std	Y+23, r26	; 0x17
     94c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     94e:	6d 89       	ldd	r22, Y+21	; 0x15
     950:	7e 89       	ldd	r23, Y+22	; 0x16
     952:	8f 89       	ldd	r24, Y+23	; 0x17
     954:	98 8d       	ldd	r25, Y+24	; 0x18
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	40 e8       	ldi	r20, 0x80	; 128
     95c:	5f e3       	ldi	r21, 0x3F	; 63
     95e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
     962:	88 23       	and	r24, r24
     964:	2c f4       	brge	.+10     	; 0x970 <LCDsendCommand+0x27c>
		__ticks = 1;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	9c 8b       	std	Y+20, r25	; 0x14
     96c:	8b 8b       	std	Y+19, r24	; 0x13
     96e:	3f c0       	rjmp	.+126    	; 0x9ee <LCDsendCommand+0x2fa>
	else if (__tmp > 65535)
     970:	6d 89       	ldd	r22, Y+21	; 0x15
     972:	7e 89       	ldd	r23, Y+22	; 0x16
     974:	8f 89       	ldd	r24, Y+23	; 0x17
     976:	98 8d       	ldd	r25, Y+24	; 0x18
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	3f ef       	ldi	r19, 0xFF	; 255
     97c:	4f e7       	ldi	r20, 0x7F	; 127
     97e:	57 e4       	ldi	r21, 0x47	; 71
     980:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
     984:	18 16       	cp	r1, r24
     986:	4c f5       	brge	.+82     	; 0x9da <LCDsendCommand+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     988:	69 8d       	ldd	r22, Y+25	; 0x19
     98a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     98c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     98e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	40 e2       	ldi	r20, 0x20	; 32
     996:	51 e4       	ldi	r21, 0x41	; 65
     998:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     99c:	dc 01       	movw	r26, r24
     99e:	cb 01       	movw	r24, r22
     9a0:	bc 01       	movw	r22, r24
     9a2:	cd 01       	movw	r24, r26
     9a4:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     9a8:	dc 01       	movw	r26, r24
     9aa:	cb 01       	movw	r24, r22
     9ac:	9c 8b       	std	Y+20, r25	; 0x14
     9ae:	8b 8b       	std	Y+19, r24	; 0x13
     9b0:	0f c0       	rjmp	.+30     	; 0x9d0 <LCDsendCommand+0x2dc>
     9b2:	84 e6       	ldi	r24, 0x64	; 100
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	9a 8b       	std	Y+18, r25	; 0x12
     9b8:	89 8b       	std	Y+17, r24	; 0x11
     9ba:	89 89       	ldd	r24, Y+17	; 0x11
     9bc:	9a 89       	ldd	r25, Y+18	; 0x12
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <LCDsendCommand+0x2ca>
     9c2:	9a 8b       	std	Y+18, r25	; 0x12
     9c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c6:	8b 89       	ldd	r24, Y+19	; 0x13
     9c8:	9c 89       	ldd	r25, Y+20	; 0x14
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	9c 8b       	std	Y+20, r25	; 0x14
     9ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9d0:	8b 89       	ldd	r24, Y+19	; 0x13
     9d2:	9c 89       	ldd	r25, Y+20	; 0x14
     9d4:	00 97       	sbiw	r24, 0x00	; 0
     9d6:	69 f7       	brne	.-38     	; 0x9b2 <LCDsendCommand+0x2be>
     9d8:	14 c0       	rjmp	.+40     	; 0xa02 <LCDsendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9da:	6d 89       	ldd	r22, Y+21	; 0x15
     9dc:	7e 89       	ldd	r23, Y+22	; 0x16
     9de:	8f 89       	ldd	r24, Y+23	; 0x17
     9e0:	98 8d       	ldd	r25, Y+24	; 0x18
     9e2:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     9e6:	dc 01       	movw	r26, r24
     9e8:	cb 01       	movw	r24, r22
     9ea:	9c 8b       	std	Y+20, r25	; 0x14
     9ec:	8b 8b       	std	Y+19, r24	; 0x13
     9ee:	8b 89       	ldd	r24, Y+19	; 0x13
     9f0:	9c 89       	ldd	r25, Y+20	; 0x14
     9f2:	98 8b       	std	Y+16, r25	; 0x10
     9f4:	8f 87       	std	Y+15, r24	; 0x0f
     9f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     9f8:	98 89       	ldd	r25, Y+16	; 0x10
     9fa:	01 97       	sbiw	r24, 0x01	; 1
     9fc:	f1 f7       	brne	.-4      	; 0x9fa <LCDsendCommand+0x306>
     9fe:	98 8b       	std	Y+16, r25	; 0x10
     a00:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     a02:	a5 e3       	ldi	r26, 0x35	; 53
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e5 e3       	ldi	r30, 0x35	; 53
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	8b 7f       	andi	r24, 0xFB	; 251
     a0e:	8c 93       	st	X, r24
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	a0 e8       	ldi	r26, 0x80	; 128
     a16:	bf e3       	ldi	r27, 0x3F	; 63
     a18:	8b 87       	std	Y+11, r24	; 0x0b
     a1a:	9c 87       	std	Y+12, r25	; 0x0c
     a1c:	ad 87       	std	Y+13, r26	; 0x0d
     a1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a20:	6b 85       	ldd	r22, Y+11	; 0x0b
     a22:	7c 85       	ldd	r23, Y+12	; 0x0c
     a24:	8d 85       	ldd	r24, Y+13	; 0x0d
     a26:	9e 85       	ldd	r25, Y+14	; 0x0e
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	4a e7       	ldi	r20, 0x7A	; 122
     a2e:	54 e4       	ldi	r21, 0x44	; 68
     a30:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     a34:	dc 01       	movw	r26, r24
     a36:	cb 01       	movw	r24, r22
     a38:	8f 83       	std	Y+7, r24	; 0x07
     a3a:	98 87       	std	Y+8, r25	; 0x08
     a3c:	a9 87       	std	Y+9, r26	; 0x09
     a3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a40:	6f 81       	ldd	r22, Y+7	; 0x07
     a42:	78 85       	ldd	r23, Y+8	; 0x08
     a44:	89 85       	ldd	r24, Y+9	; 0x09
     a46:	9a 85       	ldd	r25, Y+10	; 0x0a
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e8       	ldi	r20, 0x80	; 128
     a4e:	5f e3       	ldi	r21, 0x3F	; 63
     a50:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
     a54:	88 23       	and	r24, r24
     a56:	2c f4       	brge	.+10     	; 0xa62 <LCDsendCommand+0x36e>
		__ticks = 1;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	9e 83       	std	Y+6, r25	; 0x06
     a5e:	8d 83       	std	Y+5, r24	; 0x05
     a60:	3f c0       	rjmp	.+126    	; 0xae0 <LCDsendCommand+0x3ec>
	else if (__tmp > 65535)
     a62:	6f 81       	ldd	r22, Y+7	; 0x07
     a64:	78 85       	ldd	r23, Y+8	; 0x08
     a66:	89 85       	ldd	r24, Y+9	; 0x09
     a68:	9a 85       	ldd	r25, Y+10	; 0x0a
     a6a:	20 e0       	ldi	r18, 0x00	; 0
     a6c:	3f ef       	ldi	r19, 0xFF	; 255
     a6e:	4f e7       	ldi	r20, 0x7F	; 127
     a70:	57 e4       	ldi	r21, 0x47	; 71
     a72:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
     a76:	18 16       	cp	r1, r24
     a78:	4c f5       	brge	.+82     	; 0xacc <LCDsendCommand+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     a7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a80:	9e 85       	ldd	r25, Y+14	; 0x0e
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	40 e2       	ldi	r20, 0x20	; 32
     a88:	51 e4       	ldi	r21, 0x41	; 65
     a8a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
     a92:	bc 01       	movw	r22, r24
     a94:	cd 01       	movw	r24, r26
     a96:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     a9a:	dc 01       	movw	r26, r24
     a9c:	cb 01       	movw	r24, r22
     a9e:	9e 83       	std	Y+6, r25	; 0x06
     aa0:	8d 83       	std	Y+5, r24	; 0x05
     aa2:	0f c0       	rjmp	.+30     	; 0xac2 <LCDsendCommand+0x3ce>
     aa4:	84 e6       	ldi	r24, 0x64	; 100
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	9c 83       	std	Y+4, r25	; 0x04
     aaa:	8b 83       	std	Y+3, r24	; 0x03
     aac:	8b 81       	ldd	r24, Y+3	; 0x03
     aae:	9c 81       	ldd	r25, Y+4	; 0x04
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <LCDsendCommand+0x3bc>
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ab8:	8d 81       	ldd	r24, Y+5	; 0x05
     aba:	9e 81       	ldd	r25, Y+6	; 0x06
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	9e 83       	std	Y+6, r25	; 0x06
     ac0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ac2:	8d 81       	ldd	r24, Y+5	; 0x05
     ac4:	9e 81       	ldd	r25, Y+6	; 0x06
     ac6:	00 97       	sbiw	r24, 0x00	; 0
     ac8:	69 f7       	brne	.-38     	; 0xaa4 <LCDsendCommand+0x3b0>
     aca:	14 c0       	rjmp	.+40     	; 0xaf4 <LCDsendCommand+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     acc:	6f 81       	ldd	r22, Y+7	; 0x07
     ace:	78 85       	ldd	r23, Y+8	; 0x08
     ad0:	89 85       	ldd	r24, Y+9	; 0x09
     ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad4:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     ad8:	dc 01       	movw	r26, r24
     ada:	cb 01       	movw	r24, r22
     adc:	9e 83       	std	Y+6, r25	; 0x06
     ade:	8d 83       	std	Y+5, r24	; 0x05
     ae0:	8d 81       	ldd	r24, Y+5	; 0x05
     ae2:	9e 81       	ldd	r25, Y+6	; 0x06
     ae4:	9a 83       	std	Y+2, r25	; 0x02
     ae6:	89 83       	std	Y+1, r24	; 0x01
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	9a 81       	ldd	r25, Y+2	; 0x02
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	f1 f7       	brne	.-4      	; 0xaec <LCDsendCommand+0x3f8>
     af0:	9a 83       	std	Y+2, r25	; 0x02
     af2:	89 83       	std	Y+1, r24	; 0x01
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     af4:	e9 96       	adiw	r28, 0x39	; 57
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	cf 91       	pop	r28
     b02:	df 91       	pop	r29
     b04:	08 95       	ret

00000b06 <LCDinit>:
void LCDinit(void)//Initializes LCD
{
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	df 93       	push	r29
     b0c:	cf 93       	push	r28
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	c4 56       	subi	r28, 0x64	; 100
     b14:	d0 40       	sbci	r29, 0x00	; 0
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	fe 01       	movw	r30, r28
     b22:	e1 5a       	subi	r30, 0xA1	; 161
     b24:	ff 4f       	sbci	r31, 0xFF	; 255
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e7       	ldi	r26, 0x70	; 112
     b2c:	b1 e4       	ldi	r27, 0x41	; 65
     b2e:	80 83       	st	Z, r24
     b30:	91 83       	std	Z+1, r25	; 0x01
     b32:	a2 83       	std	Z+2, r26	; 0x02
     b34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b36:	8e 01       	movw	r16, r28
     b38:	05 5a       	subi	r16, 0xA5	; 165
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
     b3c:	fe 01       	movw	r30, r28
     b3e:	e1 5a       	subi	r30, 0xA1	; 161
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	60 81       	ld	r22, Z
     b44:	71 81       	ldd	r23, Z+1	; 0x01
     b46:	82 81       	ldd	r24, Z+2	; 0x02
     b48:	93 81       	ldd	r25, Z+3	; 0x03
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	4a e7       	ldi	r20, 0x7A	; 122
     b50:	54 e4       	ldi	r21, 0x44	; 68
     b52:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     b56:	dc 01       	movw	r26, r24
     b58:	cb 01       	movw	r24, r22
     b5a:	f8 01       	movw	r30, r16
     b5c:	80 83       	st	Z, r24
     b5e:	91 83       	std	Z+1, r25	; 0x01
     b60:	a2 83       	std	Z+2, r26	; 0x02
     b62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b64:	fe 01       	movw	r30, r28
     b66:	e5 5a       	subi	r30, 0xA5	; 165
     b68:	ff 4f       	sbci	r31, 0xFF	; 255
     b6a:	60 81       	ld	r22, Z
     b6c:	71 81       	ldd	r23, Z+1	; 0x01
     b6e:	82 81       	ldd	r24, Z+2	; 0x02
     b70:	93 81       	ldd	r25, Z+3	; 0x03
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	40 e8       	ldi	r20, 0x80	; 128
     b78:	5f e3       	ldi	r21, 0x3F	; 63
     b7a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
     b7e:	88 23       	and	r24, r24
     b80:	44 f4       	brge	.+16     	; 0xb92 <LCDinit+0x8c>
		__ticks = 1;
     b82:	fe 01       	movw	r30, r28
     b84:	e7 5a       	subi	r30, 0xA7	; 167
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	91 83       	std	Z+1, r25	; 0x01
     b8e:	80 83       	st	Z, r24
     b90:	64 c0       	rjmp	.+200    	; 0xc5a <LCDinit+0x154>
	else if (__tmp > 65535)
     b92:	fe 01       	movw	r30, r28
     b94:	e5 5a       	subi	r30, 0xA5	; 165
     b96:	ff 4f       	sbci	r31, 0xFF	; 255
     b98:	60 81       	ld	r22, Z
     b9a:	71 81       	ldd	r23, Z+1	; 0x01
     b9c:	82 81       	ldd	r24, Z+2	; 0x02
     b9e:	93 81       	ldd	r25, Z+3	; 0x03
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	4f e7       	ldi	r20, 0x7F	; 127
     ba6:	57 e4       	ldi	r21, 0x47	; 71
     ba8:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
     bac:	18 16       	cp	r1, r24
     bae:	0c f0       	brlt	.+2      	; 0xbb2 <LCDinit+0xac>
     bb0:	43 c0       	rjmp	.+134    	; 0xc38 <LCDinit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bb2:	fe 01       	movw	r30, r28
     bb4:	e1 5a       	subi	r30, 0xA1	; 161
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	60 81       	ld	r22, Z
     bba:	71 81       	ldd	r23, Z+1	; 0x01
     bbc:	82 81       	ldd	r24, Z+2	; 0x02
     bbe:	93 81       	ldd	r25, Z+3	; 0x03
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	40 e2       	ldi	r20, 0x20	; 32
     bc6:	51 e4       	ldi	r21, 0x41	; 65
     bc8:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     bcc:	dc 01       	movw	r26, r24
     bce:	cb 01       	movw	r24, r22
     bd0:	8e 01       	movw	r16, r28
     bd2:	07 5a       	subi	r16, 0xA7	; 167
     bd4:	1f 4f       	sbci	r17, 0xFF	; 255
     bd6:	bc 01       	movw	r22, r24
     bd8:	cd 01       	movw	r24, r26
     bda:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	f8 01       	movw	r30, r16
     be4:	91 83       	std	Z+1, r25	; 0x01
     be6:	80 83       	st	Z, r24
     be8:	1f c0       	rjmp	.+62     	; 0xc28 <LCDinit+0x122>
     bea:	fe 01       	movw	r30, r28
     bec:	e9 5a       	subi	r30, 0xA9	; 169
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	84 e6       	ldi	r24, 0x64	; 100
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	80 83       	st	Z, r24
     bf8:	fe 01       	movw	r30, r28
     bfa:	e9 5a       	subi	r30, 0xA9	; 169
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	80 81       	ld	r24, Z
     c00:	91 81       	ldd	r25, Z+1	; 0x01
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	f1 f7       	brne	.-4      	; 0xc02 <LCDinit+0xfc>
     c06:	fe 01       	movw	r30, r28
     c08:	e9 5a       	subi	r30, 0xA9	; 169
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	91 83       	std	Z+1, r25	; 0x01
     c0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c10:	de 01       	movw	r26, r28
     c12:	a7 5a       	subi	r26, 0xA7	; 167
     c14:	bf 4f       	sbci	r27, 0xFF	; 255
     c16:	fe 01       	movw	r30, r28
     c18:	e7 5a       	subi	r30, 0xA7	; 167
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	80 81       	ld	r24, Z
     c1e:	91 81       	ldd	r25, Z+1	; 0x01
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	11 96       	adiw	r26, 0x01	; 1
     c24:	9c 93       	st	X, r25
     c26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c28:	fe 01       	movw	r30, r28
     c2a:	e7 5a       	subi	r30, 0xA7	; 167
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	d1 f6       	brne	.-76     	; 0xbea <LCDinit+0xe4>
     c36:	27 c0       	rjmp	.+78     	; 0xc86 <LCDinit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c38:	8e 01       	movw	r16, r28
     c3a:	07 5a       	subi	r16, 0xA7	; 167
     c3c:	1f 4f       	sbci	r17, 0xFF	; 255
     c3e:	fe 01       	movw	r30, r28
     c40:	e5 5a       	subi	r30, 0xA5	; 165
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	60 81       	ld	r22, Z
     c46:	71 81       	ldd	r23, Z+1	; 0x01
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	f8 01       	movw	r30, r16
     c56:	91 83       	std	Z+1, r25	; 0x01
     c58:	80 83       	st	Z, r24
     c5a:	de 01       	movw	r26, r28
     c5c:	ab 5a       	subi	r26, 0xAB	; 171
     c5e:	bf 4f       	sbci	r27, 0xFF	; 255
     c60:	fe 01       	movw	r30, r28
     c62:	e7 5a       	subi	r30, 0xA7	; 167
     c64:	ff 4f       	sbci	r31, 0xFF	; 255
     c66:	80 81       	ld	r24, Z
     c68:	91 81       	ldd	r25, Z+1	; 0x01
     c6a:	8d 93       	st	X+, r24
     c6c:	9c 93       	st	X, r25
     c6e:	fe 01       	movw	r30, r28
     c70:	eb 5a       	subi	r30, 0xAB	; 171
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <LCDinit+0x172>
     c7c:	fe 01       	movw	r30, r28
     c7e:	eb 5a       	subi	r30, 0xAB	; 171
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	91 83       	std	Z+1, r25	; 0x01
     c84:	80 83       	st	Z, r24
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     c86:	e5 e3       	ldi	r30, 0x35	; 53
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	10 82       	st	Z, r1
	LCP=0x00;
     c8c:	e5 e3       	ldi	r30, 0x35	; 53
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	10 82       	st	Z, r1
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     c92:	a4 e3       	ldi	r26, 0x34	; 52
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e4 e3       	ldi	r30, 0x34	; 52
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 6f       	ori	r24, 0xF0	; 240
     c9e:	8c 93       	st	X, r24
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     ca0:	a4 e3       	ldi	r26, 0x34	; 52
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e4 e3       	ldi	r30, 0x34	; 52
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	87 60       	ori	r24, 0x07	; 7
     cac:	8c 93       	st	X, r24
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     cae:	e5 e3       	ldi	r30, 0x35	; 53
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 e3       	ldi	r24, 0x30	; 48
     cb4:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     cb6:	a5 e3       	ldi	r26, 0x35	; 53
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e5 e3       	ldi	r30, 0x35	; 53
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	84 60       	ori	r24, 0x04	; 4
     cc2:	8c 93       	st	X, r24
     cc4:	fe 01       	movw	r30, r28
     cc6:	ef 5a       	subi	r30, 0xAF	; 175
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	a0 e8       	ldi	r26, 0x80	; 128
     cd0:	bf e3       	ldi	r27, 0x3F	; 63
     cd2:	80 83       	st	Z, r24
     cd4:	91 83       	std	Z+1, r25	; 0x01
     cd6:	a2 83       	std	Z+2, r26	; 0x02
     cd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cda:	8e 01       	movw	r16, r28
     cdc:	03 5b       	subi	r16, 0xB3	; 179
     cde:	1f 4f       	sbci	r17, 0xFF	; 255
     ce0:	fe 01       	movw	r30, r28
     ce2:	ef 5a       	subi	r30, 0xAF	; 175
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	60 81       	ld	r22, Z
     ce8:	71 81       	ldd	r23, Z+1	; 0x01
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	93 81       	ldd	r25, Z+3	; 0x03
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	4a e7       	ldi	r20, 0x7A	; 122
     cf4:	54 e4       	ldi	r21, 0x44	; 68
     cf6:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	f8 01       	movw	r30, r16
     d00:	80 83       	st	Z, r24
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	a2 83       	std	Z+2, r26	; 0x02
     d06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d08:	fe 01       	movw	r30, r28
     d0a:	e3 5b       	subi	r30, 0xB3	; 179
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	60 81       	ld	r22, Z
     d10:	71 81       	ldd	r23, Z+1	; 0x01
     d12:	82 81       	ldd	r24, Z+2	; 0x02
     d14:	93 81       	ldd	r25, Z+3	; 0x03
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e8       	ldi	r20, 0x80	; 128
     d1c:	5f e3       	ldi	r21, 0x3F	; 63
     d1e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
     d22:	88 23       	and	r24, r24
     d24:	44 f4       	brge	.+16     	; 0xd36 <LCDinit+0x230>
		__ticks = 1;
     d26:	fe 01       	movw	r30, r28
     d28:	e5 5b       	subi	r30, 0xB5	; 181
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	91 83       	std	Z+1, r25	; 0x01
     d32:	80 83       	st	Z, r24
     d34:	64 c0       	rjmp	.+200    	; 0xdfe <LCDinit+0x2f8>
	else if (__tmp > 65535)
     d36:	fe 01       	movw	r30, r28
     d38:	e3 5b       	subi	r30, 0xB3	; 179
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	60 81       	ld	r22, Z
     d3e:	71 81       	ldd	r23, Z+1	; 0x01
     d40:	82 81       	ldd	r24, Z+2	; 0x02
     d42:	93 81       	ldd	r25, Z+3	; 0x03
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	3f ef       	ldi	r19, 0xFF	; 255
     d48:	4f e7       	ldi	r20, 0x7F	; 127
     d4a:	57 e4       	ldi	r21, 0x47	; 71
     d4c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
     d50:	18 16       	cp	r1, r24
     d52:	0c f0       	brlt	.+2      	; 0xd56 <LCDinit+0x250>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <LCDinit+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d56:	fe 01       	movw	r30, r28
     d58:	ef 5a       	subi	r30, 0xAF	; 175
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	60 81       	ld	r22, Z
     d5e:	71 81       	ldd	r23, Z+1	; 0x01
     d60:	82 81       	ldd	r24, Z+2	; 0x02
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	40 e2       	ldi	r20, 0x20	; 32
     d6a:	51 e4       	ldi	r21, 0x41	; 65
     d6c:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	8e 01       	movw	r16, r28
     d76:	05 5b       	subi	r16, 0xB5	; 181
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
     d7a:	bc 01       	movw	r22, r24
     d7c:	cd 01       	movw	r24, r26
     d7e:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	f8 01       	movw	r30, r16
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	80 83       	st	Z, r24
     d8c:	1f c0       	rjmp	.+62     	; 0xdcc <LCDinit+0x2c6>
     d8e:	fe 01       	movw	r30, r28
     d90:	e7 5b       	subi	r30, 0xB7	; 183
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	84 e6       	ldi	r24, 0x64	; 100
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	91 83       	std	Z+1, r25	; 0x01
     d9a:	80 83       	st	Z, r24
     d9c:	fe 01       	movw	r30, r28
     d9e:	e7 5b       	subi	r30, 0xB7	; 183
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	80 81       	ld	r24, Z
     da4:	91 81       	ldd	r25, Z+1	; 0x01
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <LCDinit+0x2a0>
     daa:	fe 01       	movw	r30, r28
     dac:	e7 5b       	subi	r30, 0xB7	; 183
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	91 83       	std	Z+1, r25	; 0x01
     db2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db4:	de 01       	movw	r26, r28
     db6:	a5 5b       	subi	r26, 0xB5	; 181
     db8:	bf 4f       	sbci	r27, 0xFF	; 255
     dba:	fe 01       	movw	r30, r28
     dbc:	e5 5b       	subi	r30, 0xB5	; 181
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	80 81       	ld	r24, Z
     dc2:	91 81       	ldd	r25, Z+1	; 0x01
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	11 96       	adiw	r26, 0x01	; 1
     dc8:	9c 93       	st	X, r25
     dca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dcc:	fe 01       	movw	r30, r28
     dce:	e5 5b       	subi	r30, 0xB5	; 181
     dd0:	ff 4f       	sbci	r31, 0xFF	; 255
     dd2:	80 81       	ld	r24, Z
     dd4:	91 81       	ldd	r25, Z+1	; 0x01
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	d1 f6       	brne	.-76     	; 0xd8e <LCDinit+0x288>
     dda:	27 c0       	rjmp	.+78     	; 0xe2a <LCDinit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ddc:	8e 01       	movw	r16, r28
     dde:	05 5b       	subi	r16, 0xB5	; 181
     de0:	1f 4f       	sbci	r17, 0xFF	; 255
     de2:	fe 01       	movw	r30, r28
     de4:	e3 5b       	subi	r30, 0xB3	; 179
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	60 81       	ld	r22, Z
     dea:	71 81       	ldd	r23, Z+1	; 0x01
     dec:	82 81       	ldd	r24, Z+2	; 0x02
     dee:	93 81       	ldd	r25, Z+3	; 0x03
     df0:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	f8 01       	movw	r30, r16
     dfa:	91 83       	std	Z+1, r25	; 0x01
     dfc:	80 83       	st	Z, r24
     dfe:	de 01       	movw	r26, r28
     e00:	a9 5b       	subi	r26, 0xB9	; 185
     e02:	bf 4f       	sbci	r27, 0xFF	; 255
     e04:	fe 01       	movw	r30, r28
     e06:	e5 5b       	subi	r30, 0xB5	; 181
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	8d 93       	st	X+, r24
     e10:	9c 93       	st	X, r25
     e12:	fe 01       	movw	r30, r28
     e14:	e9 5b       	subi	r30, 0xB9	; 185
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <LCDinit+0x316>
     e20:	fe 01       	movw	r30, r28
     e22:	e9 5b       	subi	r30, 0xB9	; 185
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	91 83       	std	Z+1, r25	; 0x01
     e28:	80 83       	st	Z, r24
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e2a:	a5 e3       	ldi	r26, 0x35	; 53
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e3       	ldi	r30, 0x35	; 53
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8b 7f       	andi	r24, 0xFB	; 251
     e36:	8c 93       	st	X, r24
     e38:	fe 01       	movw	r30, r28
     e3a:	ed 5b       	subi	r30, 0xBD	; 189
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	a0 e8       	ldi	r26, 0x80	; 128
     e44:	bf e3       	ldi	r27, 0x3F	; 63
     e46:	80 83       	st	Z, r24
     e48:	91 83       	std	Z+1, r25	; 0x01
     e4a:	a2 83       	std	Z+2, r26	; 0x02
     e4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e4e:	8e 01       	movw	r16, r28
     e50:	01 5c       	subi	r16, 0xC1	; 193
     e52:	1f 4f       	sbci	r17, 0xFF	; 255
     e54:	fe 01       	movw	r30, r28
     e56:	ed 5b       	subi	r30, 0xBD	; 189
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	82 81       	ldd	r24, Z+2	; 0x02
     e60:	93 81       	ldd	r25, Z+3	; 0x03
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	4a e7       	ldi	r20, 0x7A	; 122
     e68:	54 e4       	ldi	r21, 0x44	; 68
     e6a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	f8 01       	movw	r30, r16
     e74:	80 83       	st	Z, r24
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	a2 83       	std	Z+2, r26	; 0x02
     e7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e7c:	fe 01       	movw	r30, r28
     e7e:	ff 96       	adiw	r30, 0x3f	; 63
     e80:	60 81       	ld	r22, Z
     e82:	71 81       	ldd	r23, Z+1	; 0x01
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e8       	ldi	r20, 0x80	; 128
     e8e:	5f e3       	ldi	r21, 0x3F	; 63
     e90:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
     e94:	88 23       	and	r24, r24
     e96:	2c f4       	brge	.+10     	; 0xea2 <LCDinit+0x39c>
		__ticks = 1;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9e af       	std	Y+62, r25	; 0x3e
     e9e:	8d af       	std	Y+61, r24	; 0x3d
     ea0:	46 c0       	rjmp	.+140    	; 0xf2e <LCDinit+0x428>
	else if (__tmp > 65535)
     ea2:	fe 01       	movw	r30, r28
     ea4:	ff 96       	adiw	r30, 0x3f	; 63
     ea6:	60 81       	ld	r22, Z
     ea8:	71 81       	ldd	r23, Z+1	; 0x01
     eaa:	82 81       	ldd	r24, Z+2	; 0x02
     eac:	93 81       	ldd	r25, Z+3	; 0x03
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	3f ef       	ldi	r19, 0xFF	; 255
     eb2:	4f e7       	ldi	r20, 0x7F	; 127
     eb4:	57 e4       	ldi	r21, 0x47	; 71
     eb6:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
     eba:	18 16       	cp	r1, r24
     ebc:	64 f5       	brge	.+88     	; 0xf16 <LCDinit+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ebe:	fe 01       	movw	r30, r28
     ec0:	ed 5b       	subi	r30, 0xBD	; 189
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	60 81       	ld	r22, Z
     ec6:	71 81       	ldd	r23, Z+1	; 0x01
     ec8:	82 81       	ldd	r24, Z+2	; 0x02
     eca:	93 81       	ldd	r25, Z+3	; 0x03
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e2       	ldi	r20, 0x20	; 32
     ed2:	51 e4       	ldi	r21, 0x41	; 65
     ed4:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	9e af       	std	Y+62, r25	; 0x3e
     eea:	8d af       	std	Y+61, r24	; 0x3d
     eec:	0f c0       	rjmp	.+30     	; 0xf0c <LCDinit+0x406>
     eee:	84 e6       	ldi	r24, 0x64	; 100
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	9c af       	std	Y+60, r25	; 0x3c
     ef4:	8b af       	std	Y+59, r24	; 0x3b
     ef6:	8b ad       	ldd	r24, Y+59	; 0x3b
     ef8:	9c ad       	ldd	r25, Y+60	; 0x3c
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <LCDinit+0x3f4>
     efe:	9c af       	std	Y+60, r25	; 0x3c
     f00:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f02:	8d ad       	ldd	r24, Y+61	; 0x3d
     f04:	9e ad       	ldd	r25, Y+62	; 0x3e
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	9e af       	std	Y+62, r25	; 0x3e
     f0a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0c:	8d ad       	ldd	r24, Y+61	; 0x3d
     f0e:	9e ad       	ldd	r25, Y+62	; 0x3e
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	69 f7       	brne	.-38     	; 0xeee <LCDinit+0x3e8>
     f14:	16 c0       	rjmp	.+44     	; 0xf42 <LCDinit+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f16:	fe 01       	movw	r30, r28
     f18:	ff 96       	adiw	r30, 0x3f	; 63
     f1a:	60 81       	ld	r22, Z
     f1c:	71 81       	ldd	r23, Z+1	; 0x01
     f1e:	82 81       	ldd	r24, Z+2	; 0x02
     f20:	93 81       	ldd	r25, Z+3	; 0x03
     f22:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	9e af       	std	Y+62, r25	; 0x3e
     f2c:	8d af       	std	Y+61, r24	; 0x3d
     f2e:	8d ad       	ldd	r24, Y+61	; 0x3d
     f30:	9e ad       	ldd	r25, Y+62	; 0x3e
     f32:	9a af       	std	Y+58, r25	; 0x3a
     f34:	89 af       	std	Y+57, r24	; 0x39
     f36:	89 ad       	ldd	r24, Y+57	; 0x39
     f38:	9a ad       	ldd	r25, Y+58	; 0x3a
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <LCDinit+0x434>
     f3e:	9a af       	std	Y+58, r25	; 0x3a
     f40:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     f42:	e5 e3       	ldi	r30, 0x35	; 53
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 e3       	ldi	r24, 0x30	; 48
     f48:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     f4a:	a5 e3       	ldi	r26, 0x35	; 53
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e5 e3       	ldi	r30, 0x35	; 53
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	84 60       	ori	r24, 0x04	; 4
     f56:	8c 93       	st	X, r24
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	a0 e8       	ldi	r26, 0x80	; 128
     f5e:	bf e3       	ldi	r27, 0x3F	; 63
     f60:	8d ab       	std	Y+53, r24	; 0x35
     f62:	9e ab       	std	Y+54, r25	; 0x36
     f64:	af ab       	std	Y+55, r26	; 0x37
     f66:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f68:	6d a9       	ldd	r22, Y+53	; 0x35
     f6a:	7e a9       	ldd	r23, Y+54	; 0x36
     f6c:	8f a9       	ldd	r24, Y+55	; 0x37
     f6e:	98 ad       	ldd	r25, Y+56	; 0x38
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4a e7       	ldi	r20, 0x7A	; 122
     f76:	54 e4       	ldi	r21, 0x44	; 68
     f78:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	89 ab       	std	Y+49, r24	; 0x31
     f82:	9a ab       	std	Y+50, r25	; 0x32
     f84:	ab ab       	std	Y+51, r26	; 0x33
     f86:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f88:	69 a9       	ldd	r22, Y+49	; 0x31
     f8a:	7a a9       	ldd	r23, Y+50	; 0x32
     f8c:	8b a9       	ldd	r24, Y+51	; 0x33
     f8e:	9c a9       	ldd	r25, Y+52	; 0x34
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e8       	ldi	r20, 0x80	; 128
     f96:	5f e3       	ldi	r21, 0x3F	; 63
     f98:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
     f9c:	88 23       	and	r24, r24
     f9e:	2c f4       	brge	.+10     	; 0xfaa <LCDinit+0x4a4>
		__ticks = 1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	98 ab       	std	Y+48, r25	; 0x30
     fa6:	8f a7       	std	Y+47, r24	; 0x2f
     fa8:	3f c0       	rjmp	.+126    	; 0x1028 <LCDinit+0x522>
	else if (__tmp > 65535)
     faa:	69 a9       	ldd	r22, Y+49	; 0x31
     fac:	7a a9       	ldd	r23, Y+50	; 0x32
     fae:	8b a9       	ldd	r24, Y+51	; 0x33
     fb0:	9c a9       	ldd	r25, Y+52	; 0x34
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	3f ef       	ldi	r19, 0xFF	; 255
     fb6:	4f e7       	ldi	r20, 0x7F	; 127
     fb8:	57 e4       	ldi	r21, 0x47	; 71
     fba:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
     fbe:	18 16       	cp	r1, r24
     fc0:	4c f5       	brge	.+82     	; 0x1014 <LCDinit+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc2:	6d a9       	ldd	r22, Y+53	; 0x35
     fc4:	7e a9       	ldd	r23, Y+54	; 0x36
     fc6:	8f a9       	ldd	r24, Y+55	; 0x37
     fc8:	98 ad       	ldd	r25, Y+56	; 0x38
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	40 e2       	ldi	r20, 0x20	; 32
     fd0:	51 e4       	ldi	r21, 0x41	; 65
     fd2:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	bc 01       	movw	r22, r24
     fdc:	cd 01       	movw	r24, r26
     fde:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	98 ab       	std	Y+48, r25	; 0x30
     fe8:	8f a7       	std	Y+47, r24	; 0x2f
     fea:	0f c0       	rjmp	.+30     	; 0x100a <LCDinit+0x504>
     fec:	84 e6       	ldi	r24, 0x64	; 100
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9e a7       	std	Y+46, r25	; 0x2e
     ff2:	8d a7       	std	Y+45, r24	; 0x2d
     ff4:	8d a5       	ldd	r24, Y+45	; 0x2d
     ff6:	9e a5       	ldd	r25, Y+46	; 0x2e
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <LCDinit+0x4f2>
     ffc:	9e a7       	std	Y+46, r25	; 0x2e
     ffe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1000:	8f a5       	ldd	r24, Y+47	; 0x2f
    1002:	98 a9       	ldd	r25, Y+48	; 0x30
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	98 ab       	std	Y+48, r25	; 0x30
    1008:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100a:	8f a5       	ldd	r24, Y+47	; 0x2f
    100c:	98 a9       	ldd	r25, Y+48	; 0x30
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	69 f7       	brne	.-38     	; 0xfec <LCDinit+0x4e6>
    1012:	14 c0       	rjmp	.+40     	; 0x103c <LCDinit+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1014:	69 a9       	ldd	r22, Y+49	; 0x31
    1016:	7a a9       	ldd	r23, Y+50	; 0x32
    1018:	8b a9       	ldd	r24, Y+51	; 0x33
    101a:	9c a9       	ldd	r25, Y+52	; 0x34
    101c:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	98 ab       	std	Y+48, r25	; 0x30
    1026:	8f a7       	std	Y+47, r24	; 0x2f
    1028:	8f a5       	ldd	r24, Y+47	; 0x2f
    102a:	98 a9       	ldd	r25, Y+48	; 0x30
    102c:	9c a7       	std	Y+44, r25	; 0x2c
    102e:	8b a7       	std	Y+43, r24	; 0x2b
    1030:	8b a5       	ldd	r24, Y+43	; 0x2b
    1032:	9c a5       	ldd	r25, Y+44	; 0x2c
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <LCDinit+0x52e>
    1038:	9c a7       	std	Y+44, r25	; 0x2c
    103a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    103c:	a5 e3       	ldi	r26, 0x35	; 53
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e5 e3       	ldi	r30, 0x35	; 53
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	8b 7f       	andi	r24, 0xFB	; 251
    1048:	8c 93       	st	X, r24
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a0 e8       	ldi	r26, 0x80	; 128
    1050:	bf e3       	ldi	r27, 0x3F	; 63
    1052:	8f a3       	std	Y+39, r24	; 0x27
    1054:	98 a7       	std	Y+40, r25	; 0x28
    1056:	a9 a7       	std	Y+41, r26	; 0x29
    1058:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105a:	6f a1       	ldd	r22, Y+39	; 0x27
    105c:	78 a5       	ldd	r23, Y+40	; 0x28
    105e:	89 a5       	ldd	r24, Y+41	; 0x29
    1060:	9a a5       	ldd	r25, Y+42	; 0x2a
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	4a e7       	ldi	r20, 0x7A	; 122
    1068:	54 e4       	ldi	r21, 0x44	; 68
    106a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	8b a3       	std	Y+35, r24	; 0x23
    1074:	9c a3       	std	Y+36, r25	; 0x24
    1076:	ad a3       	std	Y+37, r26	; 0x25
    1078:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    107a:	6b a1       	ldd	r22, Y+35	; 0x23
    107c:	7c a1       	ldd	r23, Y+36	; 0x24
    107e:	8d a1       	ldd	r24, Y+37	; 0x25
    1080:	9e a1       	ldd	r25, Y+38	; 0x26
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e8       	ldi	r20, 0x80	; 128
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
    108e:	88 23       	and	r24, r24
    1090:	2c f4       	brge	.+10     	; 0x109c <LCDinit+0x596>
		__ticks = 1;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	9a a3       	std	Y+34, r25	; 0x22
    1098:	89 a3       	std	Y+33, r24	; 0x21
    109a:	3f c0       	rjmp	.+126    	; 0x111a <LCDinit+0x614>
	else if (__tmp > 65535)
    109c:	6b a1       	ldd	r22, Y+35	; 0x23
    109e:	7c a1       	ldd	r23, Y+36	; 0x24
    10a0:	8d a1       	ldd	r24, Y+37	; 0x25
    10a2:	9e a1       	ldd	r25, Y+38	; 0x26
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	3f ef       	ldi	r19, 0xFF	; 255
    10a8:	4f e7       	ldi	r20, 0x7F	; 127
    10aa:	57 e4       	ldi	r21, 0x47	; 71
    10ac:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
    10b0:	18 16       	cp	r1, r24
    10b2:	4c f5       	brge	.+82     	; 0x1106 <LCDinit+0x600>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b4:	6f a1       	ldd	r22, Y+39	; 0x27
    10b6:	78 a5       	ldd	r23, Y+40	; 0x28
    10b8:	89 a5       	ldd	r24, Y+41	; 0x29
    10ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e2       	ldi	r20, 0x20	; 32
    10c2:	51 e4       	ldi	r21, 0x41	; 65
    10c4:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	9a a3       	std	Y+34, r25	; 0x22
    10da:	89 a3       	std	Y+33, r24	; 0x21
    10dc:	0f c0       	rjmp	.+30     	; 0x10fc <LCDinit+0x5f6>
    10de:	84 e6       	ldi	r24, 0x64	; 100
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	98 a3       	std	Y+32, r25	; 0x20
    10e4:	8f 8f       	std	Y+31, r24	; 0x1f
    10e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10e8:	98 a1       	ldd	r25, Y+32	; 0x20
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <LCDinit+0x5e4>
    10ee:	98 a3       	std	Y+32, r25	; 0x20
    10f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f2:	89 a1       	ldd	r24, Y+33	; 0x21
    10f4:	9a a1       	ldd	r25, Y+34	; 0x22
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	9a a3       	std	Y+34, r25	; 0x22
    10fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10fc:	89 a1       	ldd	r24, Y+33	; 0x21
    10fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	69 f7       	brne	.-38     	; 0x10de <LCDinit+0x5d8>
    1104:	14 c0       	rjmp	.+40     	; 0x112e <LCDinit+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1106:	6b a1       	ldd	r22, Y+35	; 0x23
    1108:	7c a1       	ldd	r23, Y+36	; 0x24
    110a:	8d a1       	ldd	r24, Y+37	; 0x25
    110c:	9e a1       	ldd	r25, Y+38	; 0x26
    110e:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	9a a3       	std	Y+34, r25	; 0x22
    1118:	89 a3       	std	Y+33, r24	; 0x21
    111a:	89 a1       	ldd	r24, Y+33	; 0x21
    111c:	9a a1       	ldd	r25, Y+34	; 0x22
    111e:	9e 8f       	std	Y+30, r25	; 0x1e
    1120:	8d 8f       	std	Y+29, r24	; 0x1d
    1122:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1124:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <LCDinit+0x620>
    112a:	9e 8f       	std	Y+30, r25	; 0x1e
    112c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    112e:	e5 e3       	ldi	r30, 0x35	; 53
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 e2       	ldi	r24, 0x20	; 32
    1134:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1136:	a5 e3       	ldi	r26, 0x35	; 53
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e5 e3       	ldi	r30, 0x35	; 53
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	84 60       	ori	r24, 0x04	; 4
    1142:	8c 93       	st	X, r24
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	a0 e8       	ldi	r26, 0x80	; 128
    114a:	bf e3       	ldi	r27, 0x3F	; 63
    114c:	89 8f       	std	Y+25, r24	; 0x19
    114e:	9a 8f       	std	Y+26, r25	; 0x1a
    1150:	ab 8f       	std	Y+27, r26	; 0x1b
    1152:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1154:	69 8d       	ldd	r22, Y+25	; 0x19
    1156:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1158:	8b 8d       	ldd	r24, Y+27	; 0x1b
    115a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	4a e7       	ldi	r20, 0x7A	; 122
    1162:	54 e4       	ldi	r21, 0x44	; 68
    1164:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	8d 8b       	std	Y+21, r24	; 0x15
    116e:	9e 8b       	std	Y+22, r25	; 0x16
    1170:	af 8b       	std	Y+23, r26	; 0x17
    1172:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1174:	6d 89       	ldd	r22, Y+21	; 0x15
    1176:	7e 89       	ldd	r23, Y+22	; 0x16
    1178:	8f 89       	ldd	r24, Y+23	; 0x17
    117a:	98 8d       	ldd	r25, Y+24	; 0x18
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e8       	ldi	r20, 0x80	; 128
    1182:	5f e3       	ldi	r21, 0x3F	; 63
    1184:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
    1188:	88 23       	and	r24, r24
    118a:	2c f4       	brge	.+10     	; 0x1196 <LCDinit+0x690>
		__ticks = 1;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	9c 8b       	std	Y+20, r25	; 0x14
    1192:	8b 8b       	std	Y+19, r24	; 0x13
    1194:	3f c0       	rjmp	.+126    	; 0x1214 <LCDinit+0x70e>
	else if (__tmp > 65535)
    1196:	6d 89       	ldd	r22, Y+21	; 0x15
    1198:	7e 89       	ldd	r23, Y+22	; 0x16
    119a:	8f 89       	ldd	r24, Y+23	; 0x17
    119c:	98 8d       	ldd	r25, Y+24	; 0x18
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	3f ef       	ldi	r19, 0xFF	; 255
    11a2:	4f e7       	ldi	r20, 0x7F	; 127
    11a4:	57 e4       	ldi	r21, 0x47	; 71
    11a6:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
    11aa:	18 16       	cp	r1, r24
    11ac:	4c f5       	brge	.+82     	; 0x1200 <LCDinit+0x6fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ae:	69 8d       	ldd	r22, Y+25	; 0x19
    11b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e2       	ldi	r20, 0x20	; 32
    11bc:	51 e4       	ldi	r21, 0x41	; 65
    11be:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	bc 01       	movw	r22, r24
    11c8:	cd 01       	movw	r24, r26
    11ca:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9c 8b       	std	Y+20, r25	; 0x14
    11d4:	8b 8b       	std	Y+19, r24	; 0x13
    11d6:	0f c0       	rjmp	.+30     	; 0x11f6 <LCDinit+0x6f0>
    11d8:	84 e6       	ldi	r24, 0x64	; 100
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	9a 8b       	std	Y+18, r25	; 0x12
    11de:	89 8b       	std	Y+17, r24	; 0x11
    11e0:	89 89       	ldd	r24, Y+17	; 0x11
    11e2:	9a 89       	ldd	r25, Y+18	; 0x12
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <LCDinit+0x6de>
    11e8:	9a 8b       	std	Y+18, r25	; 0x12
    11ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ec:	8b 89       	ldd	r24, Y+19	; 0x13
    11ee:	9c 89       	ldd	r25, Y+20	; 0x14
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	9c 8b       	std	Y+20, r25	; 0x14
    11f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f6:	8b 89       	ldd	r24, Y+19	; 0x13
    11f8:	9c 89       	ldd	r25, Y+20	; 0x14
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	69 f7       	brne	.-38     	; 0x11d8 <LCDinit+0x6d2>
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <LCDinit+0x722>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1200:	6d 89       	ldd	r22, Y+21	; 0x15
    1202:	7e 89       	ldd	r23, Y+22	; 0x16
    1204:	8f 89       	ldd	r24, Y+23	; 0x17
    1206:	98 8d       	ldd	r25, Y+24	; 0x18
    1208:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	9c 8b       	std	Y+20, r25	; 0x14
    1212:	8b 8b       	std	Y+19, r24	; 0x13
    1214:	8b 89       	ldd	r24, Y+19	; 0x13
    1216:	9c 89       	ldd	r25, Y+20	; 0x14
    1218:	98 8b       	std	Y+16, r25	; 0x10
    121a:	8f 87       	std	Y+15, r24	; 0x0f
    121c:	8f 85       	ldd	r24, Y+15	; 0x0f
    121e:	98 89       	ldd	r25, Y+16	; 0x10
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <LCDinit+0x71a>
    1224:	98 8b       	std	Y+16, r25	; 0x10
    1226:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1228:	a5 e3       	ldi	r26, 0x35	; 53
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e5 e3       	ldi	r30, 0x35	; 53
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	8b 7f       	andi	r24, 0xFB	; 251
    1234:	8c 93       	st	X, r24
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a0 e8       	ldi	r26, 0x80	; 128
    123c:	bf e3       	ldi	r27, 0x3F	; 63
    123e:	8b 87       	std	Y+11, r24	; 0x0b
    1240:	9c 87       	std	Y+12, r25	; 0x0c
    1242:	ad 87       	std	Y+13, r26	; 0x0d
    1244:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1246:	6b 85       	ldd	r22, Y+11	; 0x0b
    1248:	7c 85       	ldd	r23, Y+12	; 0x0c
    124a:	8d 85       	ldd	r24, Y+13	; 0x0d
    124c:	9e 85       	ldd	r25, Y+14	; 0x0e
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	4a e7       	ldi	r20, 0x7A	; 122
    1254:	54 e4       	ldi	r21, 0x44	; 68
    1256:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	8f 83       	std	Y+7, r24	; 0x07
    1260:	98 87       	std	Y+8, r25	; 0x08
    1262:	a9 87       	std	Y+9, r26	; 0x09
    1264:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1266:	6f 81       	ldd	r22, Y+7	; 0x07
    1268:	78 85       	ldd	r23, Y+8	; 0x08
    126a:	89 85       	ldd	r24, Y+9	; 0x09
    126c:	9a 85       	ldd	r25, Y+10	; 0x0a
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e8       	ldi	r20, 0x80	; 128
    1274:	5f e3       	ldi	r21, 0x3F	; 63
    1276:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ltsf2>
    127a:	88 23       	and	r24, r24
    127c:	2c f4       	brge	.+10     	; 0x1288 <LCDinit+0x782>
		__ticks = 1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9e 83       	std	Y+6, r25	; 0x06
    1284:	8d 83       	std	Y+5, r24	; 0x05
    1286:	3f c0       	rjmp	.+126    	; 0x1306 <LCDinit+0x800>
	else if (__tmp > 65535)
    1288:	6f 81       	ldd	r22, Y+7	; 0x07
    128a:	78 85       	ldd	r23, Y+8	; 0x08
    128c:	89 85       	ldd	r24, Y+9	; 0x09
    128e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	3f ef       	ldi	r19, 0xFF	; 255
    1294:	4f e7       	ldi	r20, 0x7F	; 127
    1296:	57 e4       	ldi	r21, 0x47	; 71
    1298:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__gtsf2>
    129c:	18 16       	cp	r1, r24
    129e:	4c f5       	brge	.+82     	; 0x12f2 <LCDinit+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e2       	ldi	r20, 0x20	; 32
    12ae:	51 e4       	ldi	r21, 0x41	; 65
    12b0:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	bc 01       	movw	r22, r24
    12ba:	cd 01       	movw	r24, r26
    12bc:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	9e 83       	std	Y+6, r25	; 0x06
    12c6:	8d 83       	std	Y+5, r24	; 0x05
    12c8:	0f c0       	rjmp	.+30     	; 0x12e8 <LCDinit+0x7e2>
    12ca:	84 e6       	ldi	r24, 0x64	; 100
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	9c 83       	std	Y+4, r25	; 0x04
    12d0:	8b 83       	std	Y+3, r24	; 0x03
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <LCDinit+0x7d0>
    12da:	9c 83       	std	Y+4, r25	; 0x04
    12dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ea:	9e 81       	ldd	r25, Y+6	; 0x06
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	69 f7       	brne	.-38     	; 0x12ca <LCDinit+0x7c4>
    12f0:	14 c0       	rjmp	.+40     	; 0x131a <LCDinit+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f2:	6f 81       	ldd	r22, Y+7	; 0x07
    12f4:	78 85       	ldd	r23, Y+8	; 0x08
    12f6:	89 85       	ldd	r24, Y+9	; 0x09
    12f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fa:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	8d 83       	std	Y+5, r24	; 0x05
    1306:	8d 81       	ldd	r24, Y+5	; 0x05
    1308:	9e 81       	ldd	r25, Y+6	; 0x06
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	9a 81       	ldd	r25, Y+2	; 0x02
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	f1 f7       	brne	.-4      	; 0x1312 <LCDinit+0x80c>
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    131a:	88 e2       	ldi	r24, 0x28	; 40
    131c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    1320:	8c e0       	ldi	r24, 0x0C	; 12
    1322:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
    1326:	fe 01       	movw	r30, r28
    1328:	ec 59       	subi	r30, 0x9C	; 156
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	10 82       	st	Z, r1
    132e:	fe 01       	movw	r30, r28
    1330:	ed 59       	subi	r30, 0x9D	; 157
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	10 82       	st	Z, r1
    1336:	23 c0       	rjmp	.+70     	; 0x137e <LCDinit+0x878>
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1338:	fe 01       	movw	r30, r28
    133a:	ec 59       	subi	r30, 0x9C	; 156
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	80 81       	ld	r24, Z
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9c 01       	movw	r18, r24
    1346:	2c 5a       	subi	r18, 0xAC	; 172
    1348:	3f 4f       	sbci	r19, 0xFF	; 255
    134a:	fe 01       	movw	r30, r28
    134c:	ed 59       	subi	r30, 0x9D	; 157
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	40 81       	ld	r20, Z
    1352:	de 01       	movw	r26, r28
    1354:	ad 59       	subi	r26, 0x9D	; 157
    1356:	bf 4f       	sbci	r27, 0xFF	; 255
    1358:	fe 01       	movw	r30, r28
    135a:	ed 59       	subi	r30, 0x9D	; 157
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	80 81       	ld	r24, Z
    1360:	8f 5f       	subi	r24, 0xFF	; 255
    1362:	8c 93       	st	X, r24
    1364:	c9 01       	movw	r24, r18
    1366:	64 2f       	mov	r22, r20
    1368:	0e 94 95 0a 	call	0x152a	; 0x152a <LCDdefinechar>
		ch=ch+8;
    136c:	de 01       	movw	r26, r28
    136e:	ac 59       	subi	r26, 0x9C	; 156
    1370:	bf 4f       	sbci	r27, 0xFF	; 255
    1372:	fe 01       	movw	r30, r28
    1374:	ec 59       	subi	r30, 0x9C	; 156
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	80 81       	ld	r24, Z
    137a:	88 5f       	subi	r24, 0xF8	; 248
    137c:	8c 93       	st	X, r24
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    137e:	fe 01       	movw	r30, r28
    1380:	ec 59       	subi	r30, 0x9C	; 156
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	80 81       	ld	r24, Z
    1386:	80 34       	cpi	r24, 0x40	; 64
    1388:	b8 f2       	brcs	.-82     	; 0x1338 <LCDinit+0x832>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    138a:	cc 59       	subi	r28, 0x9C	; 156
    138c:	df 4f       	sbci	r29, 0xFF	; 255
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <LCDclr>:
void LCDclr(void)				//Clears LCD
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_CLR);
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCDsendCommand>
}
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_HOME);
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCDsendCommand>
}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <LCDstring+0x6>
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <LCDstring+0x8>
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	9a 83       	std	Y+2, r25	; 0x02
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	6b 83       	std	Y+3, r22	; 0x03
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	a1 f0       	breq	.+40     	; 0x140c <LCDstring+0x42>

	// print data
	for(i=0; i<nBytes; i++)
    13e4:	1c 82       	std	Y+4, r1	; 0x04
    13e6:	0e c0       	rjmp	.+28     	; 0x1404 <LCDstring+0x3a>
	{
		LCDsendChar(data[i]);
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	fc 01       	movw	r30, r24
    13f4:	e2 0f       	add	r30, r18
    13f6:	f3 1f       	adc	r31, r19
    13f8:	80 81       	ld	r24, Z
    13fa:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    13fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1400:	9f 5f       	subi	r25, 0xFF	; 255
    1402:	9c 83       	std	Y+4, r25	; 0x04
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	98 17       	cp	r25, r24
    140a:	70 f3       	brcs	.-36     	; 0x13e8 <LCDstring+0x1e>
	{
		LCDsendChar(data[i]);
	}
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <LCDGotoXY+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <LCDGotoXY+0x8>
    1422:	0f 92       	push	r0
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	6a 83       	std	Y+2, r22	; 0x02
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	3d 83       	std	Y+5, r19	; 0x05
    1434:	2c 83       	std	Y+4, r18	; 0x04
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	9d 81       	ldd	r25, Y+5	; 0x05
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	91 05       	cpc	r25, r1
    143e:	c1 f0       	breq	.+48     	; 0x1470 <LCDGotoXY+0x56>
    1440:	2c 81       	ldd	r18, Y+4	; 0x04
    1442:	3d 81       	ldd	r19, Y+5	; 0x05
    1444:	22 30       	cpi	r18, 0x02	; 2
    1446:	31 05       	cpc	r19, r1
    1448:	2c f4       	brge	.+10     	; 0x1454 <LCDGotoXY+0x3a>
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	9d 81       	ldd	r25, Y+5	; 0x05
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	61 f0       	breq	.+24     	; 0x146a <LCDGotoXY+0x50>
    1452:	1d c0       	rjmp	.+58     	; 0x148e <LCDGotoXY+0x74>
    1454:	2c 81       	ldd	r18, Y+4	; 0x04
    1456:	3d 81       	ldd	r19, Y+5	; 0x05
    1458:	22 30       	cpi	r18, 0x02	; 2
    145a:	31 05       	cpc	r19, r1
    145c:	71 f0       	breq	.+28     	; 0x147a <LCDGotoXY+0x60>
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	83 30       	cpi	r24, 0x03	; 3
    1464:	91 05       	cpc	r25, r1
    1466:	71 f0       	breq	.+28     	; 0x1484 <LCDGotoXY+0x6a>
    1468:	12 c0       	rjmp	.+36     	; 0x148e <LCDGotoXY+0x74>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
    146a:	99 81       	ldd	r25, Y+1	; 0x01
    146c:	9b 83       	std	Y+3, r25	; 0x03
    146e:	11 c0       	rjmp	.+34     	; 0x1492 <LCDGotoXY+0x78>
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	28 2f       	mov	r18, r24
    1474:	20 5c       	subi	r18, 0xC0	; 192
    1476:	2b 83       	std	Y+3, r18	; 0x03
    1478:	0c c0       	rjmp	.+24     	; 0x1492 <LCDGotoXY+0x78>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	38 2f       	mov	r19, r24
    147e:	3c 5e       	subi	r19, 0xEC	; 236
    1480:	3b 83       	std	Y+3, r19	; 0x03
    1482:	07 c0       	rjmp	.+14     	; 0x1492 <LCDGotoXY+0x78>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	98 2f       	mov	r25, r24
    1488:	9c 5a       	subi	r25, 0xAC	; 172
    148a:	9b 83       	std	Y+3, r25	; 0x03
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <LCDGotoXY+0x78>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
    148e:	29 81       	ldd	r18, Y+1	; 0x01
    1490:	2b 83       	std	Y+3, r18	; 0x03
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	80 68       	ori	r24, 0x80	; 128
    1496:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCDsendCommand>
	
}
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	2b 97       	sbiw	r28, 0x0b	; 11
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	99 87       	std	Y+9, r25	; 0x09
    14c0:	88 87       	std	Y+8, r24	; 0x08
    14c2:	6a 87       	std	Y+10, r22	; 0x0a
    14c4:	4b 87       	std	Y+11, r20	; 0x0b
	uint8_t i;
	LCDGotoXY(x,y);
    14c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    14c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ca:	0e 94 0d 0a 	call	0x141a	; 0x141a <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    14ce:	1f 82       	std	Y+7, r1	; 0x07
    14d0:	13 c0       	rjmp	.+38     	; 0x14f8 <CopyStringtoLCD+0x4e>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    14d2:	8f 81       	ldd	r24, Y+7	; 0x07
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	88 85       	ldd	r24, Y+8	; 0x08
    14da:	99 85       	ldd	r25, Y+9	; 0x09
    14dc:	82 0f       	add	r24, r18
    14de:	93 1f       	adc	r25, r19
    14e0:	9e 83       	std	Y+6, r25	; 0x06
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	ed 81       	ldd	r30, Y+5	; 0x05
    14e6:	fe 81       	ldd	r31, Y+6	; 0x06
    14e8:	84 91       	lpm	r24, Z+
    14ea:	8c 83       	std	Y+4, r24	; 0x04
    14ec:	8c 81       	ldd	r24, Y+4	; 0x04
    14ee:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    14f2:	8f 81       	ldd	r24, Y+7	; 0x07
    14f4:	8f 5f       	subi	r24, 0xFF	; 255
    14f6:	8f 83       	std	Y+7, r24	; 0x07
    14f8:	8f 81       	ldd	r24, Y+7	; 0x07
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	88 85       	ldd	r24, Y+8	; 0x08
    1500:	99 85       	ldd	r25, Y+9	; 0x09
    1502:	82 0f       	add	r24, r18
    1504:	93 1f       	adc	r25, r19
    1506:	9b 83       	std	Y+3, r25	; 0x03
    1508:	8a 83       	std	Y+2, r24	; 0x02
    150a:	ea 81       	ldd	r30, Y+2	; 0x02
    150c:	fb 81       	ldd	r31, Y+3	; 0x03
    150e:	84 91       	lpm	r24, Z+
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	88 23       	and	r24, r24
    1516:	e9 f6       	brne	.-70     	; 0x14d2 <CopyStringtoLCD+0x28>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1518:	2b 96       	adiw	r28, 0x0b	; 11
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	2a 97       	sbiw	r28, 0x0a	; 10
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	99 87       	std	Y+9, r25	; 0x09
    1540:	88 87       	std	Y+8, r24	; 0x08
    1542:	6a 87       	std	Y+10, r22	; 0x0a
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    1544:	8a 85       	ldd	r24, Y+10	; 0x0a
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	80 64       	ori	r24, 0x40	; 64
    1558:	8f 83       	std	Y+7, r24	; 0x07
	for (i=0; i<8; i++){
    155a:	1d 82       	std	Y+5, r1	; 0x05
    155c:	1c 82       	std	Y+4, r1	; 0x04
    155e:	1d c0       	rjmp	.+58     	; 0x159a <LCDdefinechar+0x70>
		pcc=pgm_read_byte(&pc[i]);
    1560:	28 85       	ldd	r18, Y+8	; 0x08
    1562:	39 85       	ldd	r19, Y+9	; 0x09
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	9d 81       	ldd	r25, Y+5	; 0x05
    1568:	82 0f       	add	r24, r18
    156a:	93 1f       	adc	r25, r19
    156c:	9b 83       	std	Y+3, r25	; 0x03
    156e:	8a 83       	std	Y+2, r24	; 0x02
    1570:	ea 81       	ldd	r30, Y+2	; 0x02
    1572:	fb 81       	ldd	r31, Y+3	; 0x03
    1574:	84 91       	lpm	r24, Z+
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	8e 83       	std	Y+6, r24	; 0x06
		LCDsendCommand(a++);
    157c:	9f 81       	ldd	r25, Y+7	; 0x07
    157e:	8f 81       	ldd	r24, Y+7	; 0x07
    1580:	8f 5f       	subi	r24, 0xFF	; 255
    1582:	8f 83       	std	Y+7, r24	; 0x07
    1584:	89 2f       	mov	r24, r25
    1586:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCDsendCommand>
		LCDsendChar(pcc);
    158a:	8e 81       	ldd	r24, Y+6	; 0x06
    158c:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    1590:	8c 81       	ldd	r24, Y+4	; 0x04
    1592:	9d 81       	ldd	r25, Y+5	; 0x05
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	9d 83       	std	Y+5, r25	; 0x05
    1598:	8c 83       	std	Y+4, r24	; 0x04
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	9d 81       	ldd	r25, Y+5	; 0x05
    159e:	88 30       	cpi	r24, 0x08	; 8
    15a0:	91 05       	cpc	r25, r1
    15a2:	f0 f2       	brcs	.-68     	; 0x1560 <LCDdefinechar+0x36>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    15a4:	2a 96       	adiw	r28, 0x0a	; 10
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <LCDshiftLeft>:

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <LCDshiftLeft+0x6>
    15bc:	0f 92       	push	r0
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    15c4:	1a 82       	std	Y+2, r1	; 0x02
    15c6:	19 82       	std	Y+1, r1	; 0x01
    15c8:	08 c0       	rjmp	.+16     	; 0x15da <LCDshiftLeft+0x24>
	{
		LCDsendCommand(0x1E);
    15ca:	8e e1       	ldi	r24, 0x1E	; 30
    15cc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	9a 81       	ldd	r25, Y+2	; 0x02
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	82 17       	cp	r24, r18
    15e6:	93 07       	cpc	r25, r19
    15e8:	84 f3       	brlt	.-32     	; 0x15ca <LCDshiftLeft+0x14>
	{
		LCDsendCommand(0x1E);
	}
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <LCDshiftRight+0x6>
    15fc:	0f 92       	push	r0
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    1604:	1a 82       	std	Y+2, r1	; 0x02
    1606:	19 82       	std	Y+1, r1	; 0x01
    1608:	08 c0       	rjmp	.+16     	; 0x161a <LCDshiftRight+0x24>
	{
		LCDsendCommand(0x18);
    160a:	88 e1       	ldi	r24, 0x18	; 24
    160c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	01 96       	adiw	r24, 0x01	; 1
    1616:	9a 83       	std	Y+2, r25	; 0x02
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	82 17       	cp	r24, r18
    1626:	93 07       	cpc	r25, r19
    1628:	84 f3       	brlt	.-32     	; 0x160a <LCDshiftRight+0x14>
	{
		LCDsendCommand(0x18);
	}
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0E);
    163e:	8e e0       	ldi	r24, 0x0E	; 14
    1640:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCDsendCommand>
}
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0F);
    1652:	8f e0       	ldi	r24, 0x0F	; 15
    1654:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCDsendCommand>
}
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    1666:	8c e0       	ldi	r24, 0x0C	; 12
    1668:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCDsendCommand>
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x08);
    167a:	88 e0       	ldi	r24, 0x08	; 8
    167c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCDsendCommand>
}
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    168e:	8c e0       	ldi	r24, 0x0C	; 12
    1690:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCDsendCommand>
}
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <LCDcursorLeft+0x6>
    16a0:	0f 92       	push	r0
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    16a8:	1a 82       	std	Y+2, r1	; 0x02
    16aa:	19 82       	std	Y+1, r1	; 0x01
    16ac:	08 c0       	rjmp	.+16     	; 0x16be <LCDcursorLeft+0x24>
	{
		LCDsendCommand(0x10);
    16ae:	80 e1       	ldi	r24, 0x10	; 16
    16b0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	9a 81       	ldd	r25, Y+2	; 0x02
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	9a 83       	std	Y+2, r25	; 0x02
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	82 17       	cp	r24, r18
    16ca:	93 07       	cpc	r25, r19
    16cc:	84 f3       	brlt	.-32     	; 0x16ae <LCDcursorLeft+0x14>
	{
		LCDsendCommand(0x10);
	}
}
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <LCDcursorRight+0x6>
    16e0:	0f 92       	push	r0
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	8b 83       	std	Y+3, r24	; 0x03
	for (i=0;i<n;i++)
    16e8:	1a 82       	std	Y+2, r1	; 0x02
    16ea:	19 82       	std	Y+1, r1	; 0x01
    16ec:	08 c0       	rjmp	.+16     	; 0x16fe <LCDcursorRight+0x24>
	{
		LCDsendCommand(0x14);
    16ee:	84 e1       	ldi	r24, 0x14	; 20
    16f0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	9a 81       	ldd	r25, Y+2	; 0x02
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	9a 83       	std	Y+2, r25	; 0x02
    16fc:	89 83       	std	Y+1, r24	; 0x01
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	82 17       	cp	r24, r18
    170a:	93 07       	cpc	r25, r19
    170c:	84 f3       	brlt	.-32     	; 0x16ee <LCDcursorRight+0x14>
	{
		LCDsendCommand(0x14);
	}
}
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	27 97       	sbiw	r28, 0x07	; 7
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	8d 83       	std	Y+5, r24	; 0x05
    1730:	6e 83       	std	Y+6, r22	; 0x06
    1732:	4f 83       	std	Y+7, r20	; 0x07
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	48 2f       	mov	r20, r24
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	8f 81       	ldd	r24, Y+7	; 0x07
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	c9 01       	movw	r24, r18
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	82 0f       	add	r24, r18
    1748:	93 1f       	adc	r25, r19
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	9a 01       	movw	r18, r20
    1750:	28 9f       	mul	r18, r24
    1752:	a0 01       	movw	r20, r0
    1754:	29 9f       	mul	r18, r25
    1756:	50 0d       	add	r21, r0
    1758:	38 9f       	mul	r19, r24
    175a:	50 0d       	add	r21, r0
    175c:	11 24       	eor	r1, r1
    175e:	8e 81       	ldd	r24, Y+6	; 0x06
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	ca 01       	movw	r24, r20
    1766:	b9 01       	movw	r22, r18
    1768:	0e 94 81 11 	call	0x2302	; 0x2302 <__divmodhi4>
    176c:	cb 01       	movw	r24, r22
    176e:	9b 83       	std	Y+3, r25	; 0x03
    1770:	8a 83       	std	Y+2, r24	; 0x02
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1772:	1c 82       	std	Y+4, r1	; 0x04
    1774:	35 c0       	rjmp	.+106    	; 0x17e0 <LCDprogressBar+0xc6>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1776:	8c 81       	ldd	r24, Y+4	; 0x04
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	c9 01       	movw	r24, r18
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	82 0f       	add	r24, r18
    1784:	93 1f       	adc	r25, r19
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	9c 01       	movw	r18, r24
    178c:	2b 5f       	subi	r18, 0xFB	; 251
    178e:	3f 4f       	sbci	r19, 0xFF	; 255
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	9b 81       	ldd	r25, Y+3	; 0x03
    1794:	82 17       	cp	r24, r18
    1796:	93 07       	cpc	r25, r19
    1798:	d8 f4       	brcc	.+54     	; 0x17d0 <LCDprogressBar+0xb6>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    179a:	8c 81       	ldd	r24, Y+4	; 0x04
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	c9 01       	movw	r24, r18
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	82 0f       	add	r24, r18
    17a8:	93 1f       	adc	r25, r19
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	9c 01       	movw	r18, r24
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	9b 81       	ldd	r25, Y+3	; 0x03
    17b4:	82 17       	cp	r24, r18
    17b6:	93 07       	cpc	r25, r19
    17b8:	10 f4       	brcc	.+4      	; 0x17be <LCDprogressBar+0xa4>
			{
				// this is an empty block
				// use space character?
				c = 0;
    17ba:	19 82       	std	Y+1, r1	; 0x01
    17bc:	0b c0       	rjmp	.+22     	; 0x17d4 <LCDprogressBar+0xba>
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	9b 81       	ldd	r25, Y+3	; 0x03
    17c2:	26 e0       	ldi	r18, 0x06	; 6
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	b9 01       	movw	r22, r18
    17c8:	0e 94 6d 11 	call	0x22da	; 0x22da <__udivmodhi4>
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <LCDprogressBar+0xba>
			}
		}
		else
		{
			// this is a full block
			c = 5;
    17d0:	85 e0       	ldi	r24, 0x05	; 5
    17d2:	89 83       	std	Y+1, r24	; 0x01
		}
		
		// write character to display
		LCDsendChar(c);
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	8f 5f       	subi	r24, 0xFF	; 255
    17de:	8c 83       	std	Y+4, r24	; 0x04
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	8f 81       	ldd	r24, Y+7	; 0x07
    17e4:	98 17       	cp	r25, r24
    17e6:	38 f2       	brcs	.-114    	; 0x1776 <LCDprogressBar+0x5c>
		
		// write character to display
		LCDsendChar(c);
	}

}
    17e8:	27 96       	adiw	r28, 0x07	; 7
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <LCDdisplay>:

void LCDdisplay(char a[])
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <LCDdisplay+0x6>
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	89 83       	std	Y+1, r24	; 0x01
	LCDstring(a,strlen(a));
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	9a 81       	ldd	r25, Y+2	; 0x02
    180c:	0e 94 cb 11 	call	0x2396	; 0x2396 <strlen>
    1810:	28 2f       	mov	r18, r24
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a 81       	ldd	r25, Y+2	; 0x02
    1816:	62 2f       	mov	r22, r18
    1818:	0e 94 e5 09 	call	0x13ca	; 0x13ca <LCDstring>
}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <__fixunssfsi>:
    1826:	ef 92       	push	r14
    1828:	ff 92       	push	r15
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	7b 01       	movw	r14, r22
    1830:	8c 01       	movw	r16, r24
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e0       	ldi	r20, 0x00	; 0
    1838:	5f e4       	ldi	r21, 0x4F	; 79
    183a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__gesf2>
    183e:	88 23       	and	r24, r24
    1840:	8c f0       	brlt	.+34     	; 0x1864 <__fixunssfsi+0x3e>
    1842:	c8 01       	movw	r24, r16
    1844:	b7 01       	movw	r22, r14
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	5f e4       	ldi	r21, 0x4F	; 79
    184e:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__subsf3>
    1852:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__fixsfsi>
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	20 50       	subi	r18, 0x00	; 0
    185c:	30 40       	sbci	r19, 0x00	; 0
    185e:	40 40       	sbci	r20, 0x00	; 0
    1860:	50 48       	sbci	r21, 0x80	; 128
    1862:	06 c0       	rjmp	.+12     	; 0x1870 <__fixunssfsi+0x4a>
    1864:	c8 01       	movw	r24, r16
    1866:	b7 01       	movw	r22, r14
    1868:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__fixsfsi>
    186c:	9b 01       	movw	r18, r22
    186e:	ac 01       	movw	r20, r24
    1870:	b9 01       	movw	r22, r18
    1872:	ca 01       	movw	r24, r20
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	ff 90       	pop	r15
    187a:	ef 90       	pop	r14
    187c:	08 95       	ret

0000187e <_fpadd_parts>:
    187e:	a0 e0       	ldi	r26, 0x00	; 0
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e5 e4       	ldi	r30, 0x45	; 69
    1884:	fc e0       	ldi	r31, 0x0C	; 12
    1886:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__prologue_saves__>
    188a:	dc 01       	movw	r26, r24
    188c:	2b 01       	movw	r4, r22
    188e:	fa 01       	movw	r30, r20
    1890:	9c 91       	ld	r25, X
    1892:	92 30       	cpi	r25, 0x02	; 2
    1894:	08 f4       	brcc	.+2      	; 0x1898 <_fpadd_parts+0x1a>
    1896:	39 c1       	rjmp	.+626    	; 0x1b0a <_fpadd_parts+0x28c>
    1898:	eb 01       	movw	r28, r22
    189a:	88 81       	ld	r24, Y
    189c:	82 30       	cpi	r24, 0x02	; 2
    189e:	08 f4       	brcc	.+2      	; 0x18a2 <_fpadd_parts+0x24>
    18a0:	33 c1       	rjmp	.+614    	; 0x1b08 <_fpadd_parts+0x28a>
    18a2:	94 30       	cpi	r25, 0x04	; 4
    18a4:	69 f4       	brne	.+26     	; 0x18c0 <_fpadd_parts+0x42>
    18a6:	84 30       	cpi	r24, 0x04	; 4
    18a8:	09 f0       	breq	.+2      	; 0x18ac <_fpadd_parts+0x2e>
    18aa:	2f c1       	rjmp	.+606    	; 0x1b0a <_fpadd_parts+0x28c>
    18ac:	11 96       	adiw	r26, 0x01	; 1
    18ae:	9c 91       	ld	r25, X
    18b0:	11 97       	sbiw	r26, 0x01	; 1
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	98 17       	cp	r25, r24
    18b6:	09 f4       	brne	.+2      	; 0x18ba <_fpadd_parts+0x3c>
    18b8:	28 c1       	rjmp	.+592    	; 0x1b0a <_fpadd_parts+0x28c>
    18ba:	a7 e6       	ldi	r26, 0x67	; 103
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	25 c1       	rjmp	.+586    	; 0x1b0a <_fpadd_parts+0x28c>
    18c0:	84 30       	cpi	r24, 0x04	; 4
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <_fpadd_parts+0x48>
    18c4:	21 c1       	rjmp	.+578    	; 0x1b08 <_fpadd_parts+0x28a>
    18c6:	82 30       	cpi	r24, 0x02	; 2
    18c8:	a9 f4       	brne	.+42     	; 0x18f4 <_fpadd_parts+0x76>
    18ca:	92 30       	cpi	r25, 0x02	; 2
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <_fpadd_parts+0x52>
    18ce:	1d c1       	rjmp	.+570    	; 0x1b0a <_fpadd_parts+0x28c>
    18d0:	9a 01       	movw	r18, r20
    18d2:	ad 01       	movw	r20, r26
    18d4:	88 e0       	ldi	r24, 0x08	; 8
    18d6:	ea 01       	movw	r28, r20
    18d8:	09 90       	ld	r0, Y+
    18da:	ae 01       	movw	r20, r28
    18dc:	e9 01       	movw	r28, r18
    18de:	09 92       	st	Y+, r0
    18e0:	9e 01       	movw	r18, r28
    18e2:	81 50       	subi	r24, 0x01	; 1
    18e4:	c1 f7       	brne	.-16     	; 0x18d6 <_fpadd_parts+0x58>
    18e6:	e2 01       	movw	r28, r4
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	11 96       	adiw	r26, 0x01	; 1
    18ec:	9c 91       	ld	r25, X
    18ee:	89 23       	and	r24, r25
    18f0:	81 83       	std	Z+1, r24	; 0x01
    18f2:	08 c1       	rjmp	.+528    	; 0x1b04 <_fpadd_parts+0x286>
    18f4:	92 30       	cpi	r25, 0x02	; 2
    18f6:	09 f4       	brne	.+2      	; 0x18fa <_fpadd_parts+0x7c>
    18f8:	07 c1       	rjmp	.+526    	; 0x1b08 <_fpadd_parts+0x28a>
    18fa:	12 96       	adiw	r26, 0x02	; 2
    18fc:	2d 90       	ld	r2, X+
    18fe:	3c 90       	ld	r3, X
    1900:	13 97       	sbiw	r26, 0x03	; 3
    1902:	eb 01       	movw	r28, r22
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	9b 81       	ldd	r25, Y+3	; 0x03
    1908:	14 96       	adiw	r26, 0x04	; 4
    190a:	ad 90       	ld	r10, X+
    190c:	bd 90       	ld	r11, X+
    190e:	cd 90       	ld	r12, X+
    1910:	dc 90       	ld	r13, X
    1912:	17 97       	sbiw	r26, 0x07	; 7
    1914:	ec 80       	ldd	r14, Y+4	; 0x04
    1916:	fd 80       	ldd	r15, Y+5	; 0x05
    1918:	0e 81       	ldd	r16, Y+6	; 0x06
    191a:	1f 81       	ldd	r17, Y+7	; 0x07
    191c:	91 01       	movw	r18, r2
    191e:	28 1b       	sub	r18, r24
    1920:	39 0b       	sbc	r19, r25
    1922:	b9 01       	movw	r22, r18
    1924:	37 ff       	sbrs	r19, 7
    1926:	04 c0       	rjmp	.+8      	; 0x1930 <_fpadd_parts+0xb2>
    1928:	66 27       	eor	r22, r22
    192a:	77 27       	eor	r23, r23
    192c:	62 1b       	sub	r22, r18
    192e:	73 0b       	sbc	r23, r19
    1930:	60 32       	cpi	r22, 0x20	; 32
    1932:	71 05       	cpc	r23, r1
    1934:	0c f0       	brlt	.+2      	; 0x1938 <_fpadd_parts+0xba>
    1936:	61 c0       	rjmp	.+194    	; 0x19fa <_fpadd_parts+0x17c>
    1938:	12 16       	cp	r1, r18
    193a:	13 06       	cpc	r1, r19
    193c:	6c f5       	brge	.+90     	; 0x1998 <_fpadd_parts+0x11a>
    193e:	37 01       	movw	r6, r14
    1940:	48 01       	movw	r8, r16
    1942:	06 2e       	mov	r0, r22
    1944:	04 c0       	rjmp	.+8      	; 0x194e <_fpadd_parts+0xd0>
    1946:	96 94       	lsr	r9
    1948:	87 94       	ror	r8
    194a:	77 94       	ror	r7
    194c:	67 94       	ror	r6
    194e:	0a 94       	dec	r0
    1950:	d2 f7       	brpl	.-12     	; 0x1946 <_fpadd_parts+0xc8>
    1952:	21 e0       	ldi	r18, 0x01	; 1
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	50 e0       	ldi	r21, 0x00	; 0
    195a:	04 c0       	rjmp	.+8      	; 0x1964 <_fpadd_parts+0xe6>
    195c:	22 0f       	add	r18, r18
    195e:	33 1f       	adc	r19, r19
    1960:	44 1f       	adc	r20, r20
    1962:	55 1f       	adc	r21, r21
    1964:	6a 95       	dec	r22
    1966:	d2 f7       	brpl	.-12     	; 0x195c <_fpadd_parts+0xde>
    1968:	21 50       	subi	r18, 0x01	; 1
    196a:	30 40       	sbci	r19, 0x00	; 0
    196c:	40 40       	sbci	r20, 0x00	; 0
    196e:	50 40       	sbci	r21, 0x00	; 0
    1970:	2e 21       	and	r18, r14
    1972:	3f 21       	and	r19, r15
    1974:	40 23       	and	r20, r16
    1976:	51 23       	and	r21, r17
    1978:	21 15       	cp	r18, r1
    197a:	31 05       	cpc	r19, r1
    197c:	41 05       	cpc	r20, r1
    197e:	51 05       	cpc	r21, r1
    1980:	21 f0       	breq	.+8      	; 0x198a <_fpadd_parts+0x10c>
    1982:	21 e0       	ldi	r18, 0x01	; 1
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	79 01       	movw	r14, r18
    198c:	8a 01       	movw	r16, r20
    198e:	e6 28       	or	r14, r6
    1990:	f7 28       	or	r15, r7
    1992:	08 29       	or	r16, r8
    1994:	19 29       	or	r17, r9
    1996:	3c c0       	rjmp	.+120    	; 0x1a10 <_fpadd_parts+0x192>
    1998:	23 2b       	or	r18, r19
    199a:	d1 f1       	breq	.+116    	; 0x1a10 <_fpadd_parts+0x192>
    199c:	26 0e       	add	r2, r22
    199e:	37 1e       	adc	r3, r23
    19a0:	35 01       	movw	r6, r10
    19a2:	46 01       	movw	r8, r12
    19a4:	06 2e       	mov	r0, r22
    19a6:	04 c0       	rjmp	.+8      	; 0x19b0 <_fpadd_parts+0x132>
    19a8:	96 94       	lsr	r9
    19aa:	87 94       	ror	r8
    19ac:	77 94       	ror	r7
    19ae:	67 94       	ror	r6
    19b0:	0a 94       	dec	r0
    19b2:	d2 f7       	brpl	.-12     	; 0x19a8 <_fpadd_parts+0x12a>
    19b4:	21 e0       	ldi	r18, 0x01	; 1
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	04 c0       	rjmp	.+8      	; 0x19c6 <_fpadd_parts+0x148>
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	44 1f       	adc	r20, r20
    19c4:	55 1f       	adc	r21, r21
    19c6:	6a 95       	dec	r22
    19c8:	d2 f7       	brpl	.-12     	; 0x19be <_fpadd_parts+0x140>
    19ca:	21 50       	subi	r18, 0x01	; 1
    19cc:	30 40       	sbci	r19, 0x00	; 0
    19ce:	40 40       	sbci	r20, 0x00	; 0
    19d0:	50 40       	sbci	r21, 0x00	; 0
    19d2:	2a 21       	and	r18, r10
    19d4:	3b 21       	and	r19, r11
    19d6:	4c 21       	and	r20, r12
    19d8:	5d 21       	and	r21, r13
    19da:	21 15       	cp	r18, r1
    19dc:	31 05       	cpc	r19, r1
    19de:	41 05       	cpc	r20, r1
    19e0:	51 05       	cpc	r21, r1
    19e2:	21 f0       	breq	.+8      	; 0x19ec <_fpadd_parts+0x16e>
    19e4:	21 e0       	ldi	r18, 0x01	; 1
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	59 01       	movw	r10, r18
    19ee:	6a 01       	movw	r12, r20
    19f0:	a6 28       	or	r10, r6
    19f2:	b7 28       	or	r11, r7
    19f4:	c8 28       	or	r12, r8
    19f6:	d9 28       	or	r13, r9
    19f8:	0b c0       	rjmp	.+22     	; 0x1a10 <_fpadd_parts+0x192>
    19fa:	82 15       	cp	r24, r2
    19fc:	93 05       	cpc	r25, r3
    19fe:	2c f0       	brlt	.+10     	; 0x1a0a <_fpadd_parts+0x18c>
    1a00:	1c 01       	movw	r2, r24
    1a02:	aa 24       	eor	r10, r10
    1a04:	bb 24       	eor	r11, r11
    1a06:	65 01       	movw	r12, r10
    1a08:	03 c0       	rjmp	.+6      	; 0x1a10 <_fpadd_parts+0x192>
    1a0a:	ee 24       	eor	r14, r14
    1a0c:	ff 24       	eor	r15, r15
    1a0e:	87 01       	movw	r16, r14
    1a10:	11 96       	adiw	r26, 0x01	; 1
    1a12:	9c 91       	ld	r25, X
    1a14:	d2 01       	movw	r26, r4
    1a16:	11 96       	adiw	r26, 0x01	; 1
    1a18:	8c 91       	ld	r24, X
    1a1a:	98 17       	cp	r25, r24
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <_fpadd_parts+0x1a2>
    1a1e:	45 c0       	rjmp	.+138    	; 0x1aaa <_fpadd_parts+0x22c>
    1a20:	99 23       	and	r25, r25
    1a22:	39 f0       	breq	.+14     	; 0x1a32 <_fpadd_parts+0x1b4>
    1a24:	a8 01       	movw	r20, r16
    1a26:	97 01       	movw	r18, r14
    1a28:	2a 19       	sub	r18, r10
    1a2a:	3b 09       	sbc	r19, r11
    1a2c:	4c 09       	sbc	r20, r12
    1a2e:	5d 09       	sbc	r21, r13
    1a30:	06 c0       	rjmp	.+12     	; 0x1a3e <_fpadd_parts+0x1c0>
    1a32:	a6 01       	movw	r20, r12
    1a34:	95 01       	movw	r18, r10
    1a36:	2e 19       	sub	r18, r14
    1a38:	3f 09       	sbc	r19, r15
    1a3a:	40 0b       	sbc	r20, r16
    1a3c:	51 0b       	sbc	r21, r17
    1a3e:	57 fd       	sbrc	r21, 7
    1a40:	08 c0       	rjmp	.+16     	; 0x1a52 <_fpadd_parts+0x1d4>
    1a42:	11 82       	std	Z+1, r1	; 0x01
    1a44:	33 82       	std	Z+3, r3	; 0x03
    1a46:	22 82       	std	Z+2, r2	; 0x02
    1a48:	24 83       	std	Z+4, r18	; 0x04
    1a4a:	35 83       	std	Z+5, r19	; 0x05
    1a4c:	46 83       	std	Z+6, r20	; 0x06
    1a4e:	57 83       	std	Z+7, r21	; 0x07
    1a50:	1d c0       	rjmp	.+58     	; 0x1a8c <_fpadd_parts+0x20e>
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	81 83       	std	Z+1, r24	; 0x01
    1a56:	33 82       	std	Z+3, r3	; 0x03
    1a58:	22 82       	std	Z+2, r2	; 0x02
    1a5a:	88 27       	eor	r24, r24
    1a5c:	99 27       	eor	r25, r25
    1a5e:	dc 01       	movw	r26, r24
    1a60:	82 1b       	sub	r24, r18
    1a62:	93 0b       	sbc	r25, r19
    1a64:	a4 0b       	sbc	r26, r20
    1a66:	b5 0b       	sbc	r27, r21
    1a68:	84 83       	std	Z+4, r24	; 0x04
    1a6a:	95 83       	std	Z+5, r25	; 0x05
    1a6c:	a6 83       	std	Z+6, r26	; 0x06
    1a6e:	b7 83       	std	Z+7, r27	; 0x07
    1a70:	0d c0       	rjmp	.+26     	; 0x1a8c <_fpadd_parts+0x20e>
    1a72:	22 0f       	add	r18, r18
    1a74:	33 1f       	adc	r19, r19
    1a76:	44 1f       	adc	r20, r20
    1a78:	55 1f       	adc	r21, r21
    1a7a:	24 83       	std	Z+4, r18	; 0x04
    1a7c:	35 83       	std	Z+5, r19	; 0x05
    1a7e:	46 83       	std	Z+6, r20	; 0x06
    1a80:	57 83       	std	Z+7, r21	; 0x07
    1a82:	82 81       	ldd	r24, Z+2	; 0x02
    1a84:	93 81       	ldd	r25, Z+3	; 0x03
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	93 83       	std	Z+3, r25	; 0x03
    1a8a:	82 83       	std	Z+2, r24	; 0x02
    1a8c:	24 81       	ldd	r18, Z+4	; 0x04
    1a8e:	35 81       	ldd	r19, Z+5	; 0x05
    1a90:	46 81       	ldd	r20, Z+6	; 0x06
    1a92:	57 81       	ldd	r21, Z+7	; 0x07
    1a94:	da 01       	movw	r26, r20
    1a96:	c9 01       	movw	r24, r18
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	a1 09       	sbc	r26, r1
    1a9c:	b1 09       	sbc	r27, r1
    1a9e:	8f 5f       	subi	r24, 0xFF	; 255
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	af 4f       	sbci	r26, 0xFF	; 255
    1aa4:	bf 43       	sbci	r27, 0x3F	; 63
    1aa6:	28 f3       	brcs	.-54     	; 0x1a72 <_fpadd_parts+0x1f4>
    1aa8:	0b c0       	rjmp	.+22     	; 0x1ac0 <_fpadd_parts+0x242>
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	33 82       	std	Z+3, r3	; 0x03
    1aae:	22 82       	std	Z+2, r2	; 0x02
    1ab0:	ea 0c       	add	r14, r10
    1ab2:	fb 1c       	adc	r15, r11
    1ab4:	0c 1d       	adc	r16, r12
    1ab6:	1d 1d       	adc	r17, r13
    1ab8:	e4 82       	std	Z+4, r14	; 0x04
    1aba:	f5 82       	std	Z+5, r15	; 0x05
    1abc:	06 83       	std	Z+6, r16	; 0x06
    1abe:	17 83       	std	Z+7, r17	; 0x07
    1ac0:	83 e0       	ldi	r24, 0x03	; 3
    1ac2:	80 83       	st	Z, r24
    1ac4:	24 81       	ldd	r18, Z+4	; 0x04
    1ac6:	35 81       	ldd	r19, Z+5	; 0x05
    1ac8:	46 81       	ldd	r20, Z+6	; 0x06
    1aca:	57 81       	ldd	r21, Z+7	; 0x07
    1acc:	57 ff       	sbrs	r21, 7
    1ace:	1a c0       	rjmp	.+52     	; 0x1b04 <_fpadd_parts+0x286>
    1ad0:	c9 01       	movw	r24, r18
    1ad2:	aa 27       	eor	r26, r26
    1ad4:	97 fd       	sbrc	r25, 7
    1ad6:	a0 95       	com	r26
    1ad8:	ba 2f       	mov	r27, r26
    1ada:	81 70       	andi	r24, 0x01	; 1
    1adc:	90 70       	andi	r25, 0x00	; 0
    1ade:	a0 70       	andi	r26, 0x00	; 0
    1ae0:	b0 70       	andi	r27, 0x00	; 0
    1ae2:	56 95       	lsr	r21
    1ae4:	47 95       	ror	r20
    1ae6:	37 95       	ror	r19
    1ae8:	27 95       	ror	r18
    1aea:	82 2b       	or	r24, r18
    1aec:	93 2b       	or	r25, r19
    1aee:	a4 2b       	or	r26, r20
    1af0:	b5 2b       	or	r27, r21
    1af2:	84 83       	std	Z+4, r24	; 0x04
    1af4:	95 83       	std	Z+5, r25	; 0x05
    1af6:	a6 83       	std	Z+6, r26	; 0x06
    1af8:	b7 83       	std	Z+7, r27	; 0x07
    1afa:	82 81       	ldd	r24, Z+2	; 0x02
    1afc:	93 81       	ldd	r25, Z+3	; 0x03
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	93 83       	std	Z+3, r25	; 0x03
    1b02:	82 83       	std	Z+2, r24	; 0x02
    1b04:	df 01       	movw	r26, r30
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <_fpadd_parts+0x28c>
    1b08:	d2 01       	movw	r26, r4
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	e2 e1       	ldi	r30, 0x12	; 18
    1b12:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__epilogue_restores__>

00001b16 <__subsf3>:
    1b16:	a0 e2       	ldi	r26, 0x20	; 32
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e1 e9       	ldi	r30, 0x91	; 145
    1b1c:	fd e0       	ldi	r31, 0x0D	; 13
    1b1e:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x18>
    1b22:	69 83       	std	Y+1, r22	; 0x01
    1b24:	7a 83       	std	Y+2, r23	; 0x02
    1b26:	8b 83       	std	Y+3, r24	; 0x03
    1b28:	9c 83       	std	Y+4, r25	; 0x04
    1b2a:	2d 83       	std	Y+5, r18	; 0x05
    1b2c:	3e 83       	std	Y+6, r19	; 0x06
    1b2e:	4f 83       	std	Y+7, r20	; 0x07
    1b30:	58 87       	std	Y+8, r21	; 0x08
    1b32:	e9 e0       	ldi	r30, 0x09	; 9
    1b34:	ee 2e       	mov	r14, r30
    1b36:	f1 2c       	mov	r15, r1
    1b38:	ec 0e       	add	r14, r28
    1b3a:	fd 1e       	adc	r15, r29
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	01 96       	adiw	r24, 0x01	; 1
    1b40:	b7 01       	movw	r22, r14
    1b42:	0e 94 9c 10 	call	0x2138	; 0x2138 <__unpack_f>
    1b46:	8e 01       	movw	r16, r28
    1b48:	0f 5e       	subi	r16, 0xEF	; 239
    1b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	05 96       	adiw	r24, 0x05	; 5
    1b50:	b8 01       	movw	r22, r16
    1b52:	0e 94 9c 10 	call	0x2138	; 0x2138 <__unpack_f>
    1b56:	8a 89       	ldd	r24, Y+18	; 0x12
    1b58:	91 e0       	ldi	r25, 0x01	; 1
    1b5a:	89 27       	eor	r24, r25
    1b5c:	8a 8b       	std	Y+18, r24	; 0x12
    1b5e:	c7 01       	movw	r24, r14
    1b60:	b8 01       	movw	r22, r16
    1b62:	ae 01       	movw	r20, r28
    1b64:	47 5e       	subi	r20, 0xE7	; 231
    1b66:	5f 4f       	sbci	r21, 0xFF	; 255
    1b68:	0e 94 3f 0c 	call	0x187e	; 0x187e <_fpadd_parts>
    1b6c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__pack_f>
    1b70:	a0 96       	adiw	r28, 0x20	; 32
    1b72:	e6 e0       	ldi	r30, 0x06	; 6
    1b74:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x18>

00001b78 <__addsf3>:
    1b78:	a0 e2       	ldi	r26, 0x20	; 32
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e2 ec       	ldi	r30, 0xC2	; 194
    1b7e:	fd e0       	ldi	r31, 0x0D	; 13
    1b80:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x18>
    1b84:	69 83       	std	Y+1, r22	; 0x01
    1b86:	7a 83       	std	Y+2, r23	; 0x02
    1b88:	8b 83       	std	Y+3, r24	; 0x03
    1b8a:	9c 83       	std	Y+4, r25	; 0x04
    1b8c:	2d 83       	std	Y+5, r18	; 0x05
    1b8e:	3e 83       	std	Y+6, r19	; 0x06
    1b90:	4f 83       	std	Y+7, r20	; 0x07
    1b92:	58 87       	std	Y+8, r21	; 0x08
    1b94:	f9 e0       	ldi	r31, 0x09	; 9
    1b96:	ef 2e       	mov	r14, r31
    1b98:	f1 2c       	mov	r15, r1
    1b9a:	ec 0e       	add	r14, r28
    1b9c:	fd 1e       	adc	r15, r29
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	b7 01       	movw	r22, r14
    1ba4:	0e 94 9c 10 	call	0x2138	; 0x2138 <__unpack_f>
    1ba8:	8e 01       	movw	r16, r28
    1baa:	0f 5e       	subi	r16, 0xEF	; 239
    1bac:	1f 4f       	sbci	r17, 0xFF	; 255
    1bae:	ce 01       	movw	r24, r28
    1bb0:	05 96       	adiw	r24, 0x05	; 5
    1bb2:	b8 01       	movw	r22, r16
    1bb4:	0e 94 9c 10 	call	0x2138	; 0x2138 <__unpack_f>
    1bb8:	c7 01       	movw	r24, r14
    1bba:	b8 01       	movw	r22, r16
    1bbc:	ae 01       	movw	r20, r28
    1bbe:	47 5e       	subi	r20, 0xE7	; 231
    1bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc2:	0e 94 3f 0c 	call	0x187e	; 0x187e <_fpadd_parts>
    1bc6:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__pack_f>
    1bca:	a0 96       	adiw	r28, 0x20	; 32
    1bcc:	e6 e0       	ldi	r30, 0x06	; 6
    1bce:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x18>

00001bd2 <__mulsf3>:
    1bd2:	a0 e2       	ldi	r26, 0x20	; 32
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	ef ee       	ldi	r30, 0xEF	; 239
    1bd8:	fd e0       	ldi	r31, 0x0D	; 13
    1bda:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__prologue_saves__>
    1bde:	69 83       	std	Y+1, r22	; 0x01
    1be0:	7a 83       	std	Y+2, r23	; 0x02
    1be2:	8b 83       	std	Y+3, r24	; 0x03
    1be4:	9c 83       	std	Y+4, r25	; 0x04
    1be6:	2d 83       	std	Y+5, r18	; 0x05
    1be8:	3e 83       	std	Y+6, r19	; 0x06
    1bea:	4f 83       	std	Y+7, r20	; 0x07
    1bec:	58 87       	std	Y+8, r21	; 0x08
    1bee:	ce 01       	movw	r24, r28
    1bf0:	01 96       	adiw	r24, 0x01	; 1
    1bf2:	be 01       	movw	r22, r28
    1bf4:	67 5f       	subi	r22, 0xF7	; 247
    1bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf8:	0e 94 9c 10 	call	0x2138	; 0x2138 <__unpack_f>
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	05 96       	adiw	r24, 0x05	; 5
    1c00:	be 01       	movw	r22, r28
    1c02:	6f 5e       	subi	r22, 0xEF	; 239
    1c04:	7f 4f       	sbci	r23, 0xFF	; 255
    1c06:	0e 94 9c 10 	call	0x2138	; 0x2138 <__unpack_f>
    1c0a:	99 85       	ldd	r25, Y+9	; 0x09
    1c0c:	92 30       	cpi	r25, 0x02	; 2
    1c0e:	88 f0       	brcs	.+34     	; 0x1c32 <__mulsf3+0x60>
    1c10:	89 89       	ldd	r24, Y+17	; 0x11
    1c12:	82 30       	cpi	r24, 0x02	; 2
    1c14:	c8 f0       	brcs	.+50     	; 0x1c48 <__mulsf3+0x76>
    1c16:	94 30       	cpi	r25, 0x04	; 4
    1c18:	19 f4       	brne	.+6      	; 0x1c20 <__mulsf3+0x4e>
    1c1a:	82 30       	cpi	r24, 0x02	; 2
    1c1c:	51 f4       	brne	.+20     	; 0x1c32 <__mulsf3+0x60>
    1c1e:	04 c0       	rjmp	.+8      	; 0x1c28 <__mulsf3+0x56>
    1c20:	84 30       	cpi	r24, 0x04	; 4
    1c22:	29 f4       	brne	.+10     	; 0x1c2e <__mulsf3+0x5c>
    1c24:	92 30       	cpi	r25, 0x02	; 2
    1c26:	81 f4       	brne	.+32     	; 0x1c48 <__mulsf3+0x76>
    1c28:	87 e6       	ldi	r24, 0x67	; 103
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	c6 c0       	rjmp	.+396    	; 0x1dba <__mulsf3+0x1e8>
    1c2e:	92 30       	cpi	r25, 0x02	; 2
    1c30:	49 f4       	brne	.+18     	; 0x1c44 <__mulsf3+0x72>
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c36:	8a 89       	ldd	r24, Y+18	; 0x12
    1c38:	98 13       	cpse	r25, r24
    1c3a:	21 e0       	ldi	r18, 0x01	; 1
    1c3c:	2a 87       	std	Y+10, r18	; 0x0a
    1c3e:	ce 01       	movw	r24, r28
    1c40:	09 96       	adiw	r24, 0x09	; 9
    1c42:	bb c0       	rjmp	.+374    	; 0x1dba <__mulsf3+0x1e8>
    1c44:	82 30       	cpi	r24, 0x02	; 2
    1c46:	49 f4       	brne	.+18     	; 0x1c5a <__mulsf3+0x88>
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c4e:	98 13       	cpse	r25, r24
    1c50:	21 e0       	ldi	r18, 0x01	; 1
    1c52:	2a 8b       	std	Y+18, r18	; 0x12
    1c54:	ce 01       	movw	r24, r28
    1c56:	41 96       	adiw	r24, 0x11	; 17
    1c58:	b0 c0       	rjmp	.+352    	; 0x1dba <__mulsf3+0x1e8>
    1c5a:	2d 84       	ldd	r2, Y+13	; 0x0d
    1c5c:	3e 84       	ldd	r3, Y+14	; 0x0e
    1c5e:	4f 84       	ldd	r4, Y+15	; 0x0f
    1c60:	58 88       	ldd	r5, Y+16	; 0x10
    1c62:	6d 88       	ldd	r6, Y+21	; 0x15
    1c64:	7e 88       	ldd	r7, Y+22	; 0x16
    1c66:	8f 88       	ldd	r8, Y+23	; 0x17
    1c68:	98 8c       	ldd	r9, Y+24	; 0x18
    1c6a:	ee 24       	eor	r14, r14
    1c6c:	ff 24       	eor	r15, r15
    1c6e:	87 01       	movw	r16, r14
    1c70:	aa 24       	eor	r10, r10
    1c72:	bb 24       	eor	r11, r11
    1c74:	65 01       	movw	r12, r10
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	70 e0       	ldi	r23, 0x00	; 0
    1c7e:	e0 e0       	ldi	r30, 0x00	; 0
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	c1 01       	movw	r24, r2
    1c84:	81 70       	andi	r24, 0x01	; 1
    1c86:	90 70       	andi	r25, 0x00	; 0
    1c88:	89 2b       	or	r24, r25
    1c8a:	e9 f0       	breq	.+58     	; 0x1cc6 <__mulsf3+0xf4>
    1c8c:	e6 0c       	add	r14, r6
    1c8e:	f7 1c       	adc	r15, r7
    1c90:	08 1d       	adc	r16, r8
    1c92:	19 1d       	adc	r17, r9
    1c94:	9a 01       	movw	r18, r20
    1c96:	ab 01       	movw	r20, r22
    1c98:	2a 0d       	add	r18, r10
    1c9a:	3b 1d       	adc	r19, r11
    1c9c:	4c 1d       	adc	r20, r12
    1c9e:	5d 1d       	adc	r21, r13
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	a0 e0       	ldi	r26, 0x00	; 0
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e6 14       	cp	r14, r6
    1caa:	f7 04       	cpc	r15, r7
    1cac:	08 05       	cpc	r16, r8
    1cae:	19 05       	cpc	r17, r9
    1cb0:	20 f4       	brcc	.+8      	; 0x1cba <__mulsf3+0xe8>
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	a0 e0       	ldi	r26, 0x00	; 0
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	ba 01       	movw	r22, r20
    1cbc:	a9 01       	movw	r20, r18
    1cbe:	48 0f       	add	r20, r24
    1cc0:	59 1f       	adc	r21, r25
    1cc2:	6a 1f       	adc	r22, r26
    1cc4:	7b 1f       	adc	r23, r27
    1cc6:	aa 0c       	add	r10, r10
    1cc8:	bb 1c       	adc	r11, r11
    1cca:	cc 1c       	adc	r12, r12
    1ccc:	dd 1c       	adc	r13, r13
    1cce:	97 fe       	sbrs	r9, 7
    1cd0:	08 c0       	rjmp	.+16     	; 0x1ce2 <__mulsf3+0x110>
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	a0 e0       	ldi	r26, 0x00	; 0
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	a8 2a       	or	r10, r24
    1cdc:	b9 2a       	or	r11, r25
    1cde:	ca 2a       	or	r12, r26
    1ce0:	db 2a       	or	r13, r27
    1ce2:	31 96       	adiw	r30, 0x01	; 1
    1ce4:	e0 32       	cpi	r30, 0x20	; 32
    1ce6:	f1 05       	cpc	r31, r1
    1ce8:	49 f0       	breq	.+18     	; 0x1cfc <__mulsf3+0x12a>
    1cea:	66 0c       	add	r6, r6
    1cec:	77 1c       	adc	r7, r7
    1cee:	88 1c       	adc	r8, r8
    1cf0:	99 1c       	adc	r9, r9
    1cf2:	56 94       	lsr	r5
    1cf4:	47 94       	ror	r4
    1cf6:	37 94       	ror	r3
    1cf8:	27 94       	ror	r2
    1cfa:	c3 cf       	rjmp	.-122    	; 0x1c82 <__mulsf3+0xb0>
    1cfc:	fa 85       	ldd	r31, Y+10	; 0x0a
    1cfe:	ea 89       	ldd	r30, Y+18	; 0x12
    1d00:	2b 89       	ldd	r18, Y+19	; 0x13
    1d02:	3c 89       	ldd	r19, Y+20	; 0x14
    1d04:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d06:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d08:	28 0f       	add	r18, r24
    1d0a:	39 1f       	adc	r19, r25
    1d0c:	2e 5f       	subi	r18, 0xFE	; 254
    1d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d10:	17 c0       	rjmp	.+46     	; 0x1d40 <__mulsf3+0x16e>
    1d12:	ca 01       	movw	r24, r20
    1d14:	81 70       	andi	r24, 0x01	; 1
    1d16:	90 70       	andi	r25, 0x00	; 0
    1d18:	89 2b       	or	r24, r25
    1d1a:	61 f0       	breq	.+24     	; 0x1d34 <__mulsf3+0x162>
    1d1c:	16 95       	lsr	r17
    1d1e:	07 95       	ror	r16
    1d20:	f7 94       	ror	r15
    1d22:	e7 94       	ror	r14
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	a0 e0       	ldi	r26, 0x00	; 0
    1d2a:	b0 e8       	ldi	r27, 0x80	; 128
    1d2c:	e8 2a       	or	r14, r24
    1d2e:	f9 2a       	or	r15, r25
    1d30:	0a 2b       	or	r16, r26
    1d32:	1b 2b       	or	r17, r27
    1d34:	76 95       	lsr	r23
    1d36:	67 95       	ror	r22
    1d38:	57 95       	ror	r21
    1d3a:	47 95       	ror	r20
    1d3c:	2f 5f       	subi	r18, 0xFF	; 255
    1d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d40:	77 fd       	sbrc	r23, 7
    1d42:	e7 cf       	rjmp	.-50     	; 0x1d12 <__mulsf3+0x140>
    1d44:	0c c0       	rjmp	.+24     	; 0x1d5e <__mulsf3+0x18c>
    1d46:	44 0f       	add	r20, r20
    1d48:	55 1f       	adc	r21, r21
    1d4a:	66 1f       	adc	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	17 fd       	sbrc	r17, 7
    1d50:	41 60       	ori	r20, 0x01	; 1
    1d52:	ee 0c       	add	r14, r14
    1d54:	ff 1c       	adc	r15, r15
    1d56:	00 1f       	adc	r16, r16
    1d58:	11 1f       	adc	r17, r17
    1d5a:	21 50       	subi	r18, 0x01	; 1
    1d5c:	30 40       	sbci	r19, 0x00	; 0
    1d5e:	40 30       	cpi	r20, 0x00	; 0
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	59 07       	cpc	r21, r25
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	69 07       	cpc	r22, r25
    1d68:	90 e4       	ldi	r25, 0x40	; 64
    1d6a:	79 07       	cpc	r23, r25
    1d6c:	60 f3       	brcs	.-40     	; 0x1d46 <__mulsf3+0x174>
    1d6e:	2b 8f       	std	Y+27, r18	; 0x1b
    1d70:	3c 8f       	std	Y+28, r19	; 0x1c
    1d72:	db 01       	movw	r26, r22
    1d74:	ca 01       	movw	r24, r20
    1d76:	8f 77       	andi	r24, 0x7F	; 127
    1d78:	90 70       	andi	r25, 0x00	; 0
    1d7a:	a0 70       	andi	r26, 0x00	; 0
    1d7c:	b0 70       	andi	r27, 0x00	; 0
    1d7e:	80 34       	cpi	r24, 0x40	; 64
    1d80:	91 05       	cpc	r25, r1
    1d82:	a1 05       	cpc	r26, r1
    1d84:	b1 05       	cpc	r27, r1
    1d86:	61 f4       	brne	.+24     	; 0x1da0 <__mulsf3+0x1ce>
    1d88:	47 fd       	sbrc	r20, 7
    1d8a:	0a c0       	rjmp	.+20     	; 0x1da0 <__mulsf3+0x1ce>
    1d8c:	e1 14       	cp	r14, r1
    1d8e:	f1 04       	cpc	r15, r1
    1d90:	01 05       	cpc	r16, r1
    1d92:	11 05       	cpc	r17, r1
    1d94:	29 f0       	breq	.+10     	; 0x1da0 <__mulsf3+0x1ce>
    1d96:	40 5c       	subi	r20, 0xC0	; 192
    1d98:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9a:	6f 4f       	sbci	r22, 0xFF	; 255
    1d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9e:	40 78       	andi	r20, 0x80	; 128
    1da0:	1a 8e       	std	Y+26, r1	; 0x1a
    1da2:	fe 17       	cp	r31, r30
    1da4:	11 f0       	breq	.+4      	; 0x1daa <__mulsf3+0x1d8>
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	8a 8f       	std	Y+26, r24	; 0x1a
    1daa:	4d 8f       	std	Y+29, r20	; 0x1d
    1dac:	5e 8f       	std	Y+30, r21	; 0x1e
    1dae:	6f 8f       	std	Y+31, r22	; 0x1f
    1db0:	78 a3       	std	Y+32, r23	; 0x20
    1db2:	83 e0       	ldi	r24, 0x03	; 3
    1db4:	89 8f       	std	Y+25, r24	; 0x19
    1db6:	ce 01       	movw	r24, r28
    1db8:	49 96       	adiw	r24, 0x19	; 25
    1dba:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__pack_f>
    1dbe:	a0 96       	adiw	r28, 0x20	; 32
    1dc0:	e2 e1       	ldi	r30, 0x12	; 18
    1dc2:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__epilogue_restores__>

00001dc6 <__gtsf2>:
    1dc6:	a8 e1       	ldi	r26, 0x18	; 24
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e9 ee       	ldi	r30, 0xE9	; 233
    1dcc:	fe e0       	ldi	r31, 0x0E	; 14
    1dce:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x18>
    1dd2:	69 83       	std	Y+1, r22	; 0x01
    1dd4:	7a 83       	std	Y+2, r23	; 0x02
    1dd6:	8b 83       	std	Y+3, r24	; 0x03
    1dd8:	9c 83       	std	Y+4, r25	; 0x04
    1dda:	2d 83       	std	Y+5, r18	; 0x05
    1ddc:	3e 83       	std	Y+6, r19	; 0x06
    1dde:	4f 83       	std	Y+7, r20	; 0x07
    1de0:	58 87       	std	Y+8, r21	; 0x08
    1de2:	89 e0       	ldi	r24, 0x09	; 9
    1de4:	e8 2e       	mov	r14, r24
    1de6:	f1 2c       	mov	r15, r1
    1de8:	ec 0e       	add	r14, r28
    1dea:	fd 1e       	adc	r15, r29
    1dec:	ce 01       	movw	r24, r28
    1dee:	01 96       	adiw	r24, 0x01	; 1
    1df0:	b7 01       	movw	r22, r14
    1df2:	0e 94 9c 10 	call	0x2138	; 0x2138 <__unpack_f>
    1df6:	8e 01       	movw	r16, r28
    1df8:	0f 5e       	subi	r16, 0xEF	; 239
    1dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfc:	ce 01       	movw	r24, r28
    1dfe:	05 96       	adiw	r24, 0x05	; 5
    1e00:	b8 01       	movw	r22, r16
    1e02:	0e 94 9c 10 	call	0x2138	; 0x2138 <__unpack_f>
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	82 30       	cpi	r24, 0x02	; 2
    1e0a:	40 f0       	brcs	.+16     	; 0x1e1c <__gtsf2+0x56>
    1e0c:	89 89       	ldd	r24, Y+17	; 0x11
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	28 f0       	brcs	.+10     	; 0x1e1c <__gtsf2+0x56>
    1e12:	c7 01       	movw	r24, r14
    1e14:	b8 01       	movw	r22, r16
    1e16:	0e 94 14 11 	call	0x2228	; 0x2228 <__fpcmp_parts_f>
    1e1a:	01 c0       	rjmp	.+2      	; 0x1e1e <__gtsf2+0x58>
    1e1c:	8f ef       	ldi	r24, 0xFF	; 255
    1e1e:	68 96       	adiw	r28, 0x18	; 24
    1e20:	e6 e0       	ldi	r30, 0x06	; 6
    1e22:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x18>

00001e26 <__gesf2>:
    1e26:	a8 e1       	ldi	r26, 0x18	; 24
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e9 e1       	ldi	r30, 0x19	; 25
    1e2c:	ff e0       	ldi	r31, 0x0F	; 15
    1e2e:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x18>
    1e32:	69 83       	std	Y+1, r22	; 0x01
    1e34:	7a 83       	std	Y+2, r23	; 0x02
    1e36:	8b 83       	std	Y+3, r24	; 0x03
    1e38:	9c 83       	std	Y+4, r25	; 0x04
    1e3a:	2d 83       	std	Y+5, r18	; 0x05
    1e3c:	3e 83       	std	Y+6, r19	; 0x06
    1e3e:	4f 83       	std	Y+7, r20	; 0x07
    1e40:	58 87       	std	Y+8, r21	; 0x08
    1e42:	89 e0       	ldi	r24, 0x09	; 9
    1e44:	e8 2e       	mov	r14, r24
    1e46:	f1 2c       	mov	r15, r1
    1e48:	ec 0e       	add	r14, r28
    1e4a:	fd 1e       	adc	r15, r29
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	b7 01       	movw	r22, r14
    1e52:	0e 94 9c 10 	call	0x2138	; 0x2138 <__unpack_f>
    1e56:	8e 01       	movw	r16, r28
    1e58:	0f 5e       	subi	r16, 0xEF	; 239
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	05 96       	adiw	r24, 0x05	; 5
    1e60:	b8 01       	movw	r22, r16
    1e62:	0e 94 9c 10 	call	0x2138	; 0x2138 <__unpack_f>
    1e66:	89 85       	ldd	r24, Y+9	; 0x09
    1e68:	82 30       	cpi	r24, 0x02	; 2
    1e6a:	40 f0       	brcs	.+16     	; 0x1e7c <__gesf2+0x56>
    1e6c:	89 89       	ldd	r24, Y+17	; 0x11
    1e6e:	82 30       	cpi	r24, 0x02	; 2
    1e70:	28 f0       	brcs	.+10     	; 0x1e7c <__gesf2+0x56>
    1e72:	c7 01       	movw	r24, r14
    1e74:	b8 01       	movw	r22, r16
    1e76:	0e 94 14 11 	call	0x2228	; 0x2228 <__fpcmp_parts_f>
    1e7a:	01 c0       	rjmp	.+2      	; 0x1e7e <__gesf2+0x58>
    1e7c:	8f ef       	ldi	r24, 0xFF	; 255
    1e7e:	68 96       	adiw	r28, 0x18	; 24
    1e80:	e6 e0       	ldi	r30, 0x06	; 6
    1e82:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x18>

00001e86 <__ltsf2>:
    1e86:	a8 e1       	ldi	r26, 0x18	; 24
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e9 e4       	ldi	r30, 0x49	; 73
    1e8c:	ff e0       	ldi	r31, 0x0F	; 15
    1e8e:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x18>
    1e92:	69 83       	std	Y+1, r22	; 0x01
    1e94:	7a 83       	std	Y+2, r23	; 0x02
    1e96:	8b 83       	std	Y+3, r24	; 0x03
    1e98:	9c 83       	std	Y+4, r25	; 0x04
    1e9a:	2d 83       	std	Y+5, r18	; 0x05
    1e9c:	3e 83       	std	Y+6, r19	; 0x06
    1e9e:	4f 83       	std	Y+7, r20	; 0x07
    1ea0:	58 87       	std	Y+8, r21	; 0x08
    1ea2:	89 e0       	ldi	r24, 0x09	; 9
    1ea4:	e8 2e       	mov	r14, r24
    1ea6:	f1 2c       	mov	r15, r1
    1ea8:	ec 0e       	add	r14, r28
    1eaa:	fd 1e       	adc	r15, r29
    1eac:	ce 01       	movw	r24, r28
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	b7 01       	movw	r22, r14
    1eb2:	0e 94 9c 10 	call	0x2138	; 0x2138 <__unpack_f>
    1eb6:	8e 01       	movw	r16, r28
    1eb8:	0f 5e       	subi	r16, 0xEF	; 239
    1eba:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	05 96       	adiw	r24, 0x05	; 5
    1ec0:	b8 01       	movw	r22, r16
    1ec2:	0e 94 9c 10 	call	0x2138	; 0x2138 <__unpack_f>
    1ec6:	89 85       	ldd	r24, Y+9	; 0x09
    1ec8:	82 30       	cpi	r24, 0x02	; 2
    1eca:	40 f0       	brcs	.+16     	; 0x1edc <__ltsf2+0x56>
    1ecc:	89 89       	ldd	r24, Y+17	; 0x11
    1ece:	82 30       	cpi	r24, 0x02	; 2
    1ed0:	28 f0       	brcs	.+10     	; 0x1edc <__ltsf2+0x56>
    1ed2:	c7 01       	movw	r24, r14
    1ed4:	b8 01       	movw	r22, r16
    1ed6:	0e 94 14 11 	call	0x2228	; 0x2228 <__fpcmp_parts_f>
    1eda:	01 c0       	rjmp	.+2      	; 0x1ede <__ltsf2+0x58>
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	68 96       	adiw	r28, 0x18	; 24
    1ee0:	e6 e0       	ldi	r30, 0x06	; 6
    1ee2:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x18>

00001ee6 <__fixsfsi>:
    1ee6:	ac e0       	ldi	r26, 0x0C	; 12
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e9 e7       	ldi	r30, 0x79	; 121
    1eec:	ff e0       	ldi	r31, 0x0F	; 15
    1eee:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__prologue_saves__+0x20>
    1ef2:	69 83       	std	Y+1, r22	; 0x01
    1ef4:	7a 83       	std	Y+2, r23	; 0x02
    1ef6:	8b 83       	std	Y+3, r24	; 0x03
    1ef8:	9c 83       	std	Y+4, r25	; 0x04
    1efa:	ce 01       	movw	r24, r28
    1efc:	01 96       	adiw	r24, 0x01	; 1
    1efe:	be 01       	movw	r22, r28
    1f00:	6b 5f       	subi	r22, 0xFB	; 251
    1f02:	7f 4f       	sbci	r23, 0xFF	; 255
    1f04:	0e 94 9c 10 	call	0x2138	; 0x2138 <__unpack_f>
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	82 30       	cpi	r24, 0x02	; 2
    1f0c:	61 f1       	breq	.+88     	; 0x1f66 <__fixsfsi+0x80>
    1f0e:	82 30       	cpi	r24, 0x02	; 2
    1f10:	50 f1       	brcs	.+84     	; 0x1f66 <__fixsfsi+0x80>
    1f12:	84 30       	cpi	r24, 0x04	; 4
    1f14:	21 f4       	brne	.+8      	; 0x1f1e <__fixsfsi+0x38>
    1f16:	8e 81       	ldd	r24, Y+6	; 0x06
    1f18:	88 23       	and	r24, r24
    1f1a:	51 f1       	breq	.+84     	; 0x1f70 <__fixsfsi+0x8a>
    1f1c:	2e c0       	rjmp	.+92     	; 0x1f7a <__fixsfsi+0x94>
    1f1e:	2f 81       	ldd	r18, Y+7	; 0x07
    1f20:	38 85       	ldd	r19, Y+8	; 0x08
    1f22:	37 fd       	sbrc	r19, 7
    1f24:	20 c0       	rjmp	.+64     	; 0x1f66 <__fixsfsi+0x80>
    1f26:	6e 81       	ldd	r22, Y+6	; 0x06
    1f28:	2f 31       	cpi	r18, 0x1F	; 31
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	1c f0       	brlt	.+6      	; 0x1f34 <__fixsfsi+0x4e>
    1f2e:	66 23       	and	r22, r22
    1f30:	f9 f0       	breq	.+62     	; 0x1f70 <__fixsfsi+0x8a>
    1f32:	23 c0       	rjmp	.+70     	; 0x1f7a <__fixsfsi+0x94>
    1f34:	8e e1       	ldi	r24, 0x1E	; 30
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	82 1b       	sub	r24, r18
    1f3a:	93 0b       	sbc	r25, r19
    1f3c:	29 85       	ldd	r18, Y+9	; 0x09
    1f3e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f40:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f42:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <__fixsfsi+0x68>
    1f46:	56 95       	lsr	r21
    1f48:	47 95       	ror	r20
    1f4a:	37 95       	ror	r19
    1f4c:	27 95       	ror	r18
    1f4e:	8a 95       	dec	r24
    1f50:	d2 f7       	brpl	.-12     	; 0x1f46 <__fixsfsi+0x60>
    1f52:	66 23       	and	r22, r22
    1f54:	b1 f0       	breq	.+44     	; 0x1f82 <__fixsfsi+0x9c>
    1f56:	50 95       	com	r21
    1f58:	40 95       	com	r20
    1f5a:	30 95       	com	r19
    1f5c:	21 95       	neg	r18
    1f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f60:	4f 4f       	sbci	r20, 0xFF	; 255
    1f62:	5f 4f       	sbci	r21, 0xFF	; 255
    1f64:	0e c0       	rjmp	.+28     	; 0x1f82 <__fixsfsi+0x9c>
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	09 c0       	rjmp	.+18     	; 0x1f82 <__fixsfsi+0x9c>
    1f70:	2f ef       	ldi	r18, 0xFF	; 255
    1f72:	3f ef       	ldi	r19, 0xFF	; 255
    1f74:	4f ef       	ldi	r20, 0xFF	; 255
    1f76:	5f e7       	ldi	r21, 0x7F	; 127
    1f78:	04 c0       	rjmp	.+8      	; 0x1f82 <__fixsfsi+0x9c>
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	50 e8       	ldi	r21, 0x80	; 128
    1f82:	b9 01       	movw	r22, r18
    1f84:	ca 01       	movw	r24, r20
    1f86:	2c 96       	adiw	r28, 0x0c	; 12
    1f88:	e2 e0       	ldi	r30, 0x02	; 2
    1f8a:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__epilogue_restores__+0x20>

00001f8e <__pack_f>:
    1f8e:	df 92       	push	r13
    1f90:	ef 92       	push	r14
    1f92:	ff 92       	push	r15
    1f94:	0f 93       	push	r16
    1f96:	1f 93       	push	r17
    1f98:	fc 01       	movw	r30, r24
    1f9a:	e4 80       	ldd	r14, Z+4	; 0x04
    1f9c:	f5 80       	ldd	r15, Z+5	; 0x05
    1f9e:	06 81       	ldd	r16, Z+6	; 0x06
    1fa0:	17 81       	ldd	r17, Z+7	; 0x07
    1fa2:	d1 80       	ldd	r13, Z+1	; 0x01
    1fa4:	80 81       	ld	r24, Z
    1fa6:	82 30       	cpi	r24, 0x02	; 2
    1fa8:	48 f4       	brcc	.+18     	; 0x1fbc <__pack_f+0x2e>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a0 e1       	ldi	r26, 0x10	; 16
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e8 2a       	or	r14, r24
    1fb4:	f9 2a       	or	r15, r25
    1fb6:	0a 2b       	or	r16, r26
    1fb8:	1b 2b       	or	r17, r27
    1fba:	a5 c0       	rjmp	.+330    	; 0x2106 <__pack_f+0x178>
    1fbc:	84 30       	cpi	r24, 0x04	; 4
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <__pack_f+0x34>
    1fc0:	9f c0       	rjmp	.+318    	; 0x2100 <__pack_f+0x172>
    1fc2:	82 30       	cpi	r24, 0x02	; 2
    1fc4:	21 f4       	brne	.+8      	; 0x1fce <__pack_f+0x40>
    1fc6:	ee 24       	eor	r14, r14
    1fc8:	ff 24       	eor	r15, r15
    1fca:	87 01       	movw	r16, r14
    1fcc:	05 c0       	rjmp	.+10     	; 0x1fd8 <__pack_f+0x4a>
    1fce:	e1 14       	cp	r14, r1
    1fd0:	f1 04       	cpc	r15, r1
    1fd2:	01 05       	cpc	r16, r1
    1fd4:	11 05       	cpc	r17, r1
    1fd6:	19 f4       	brne	.+6      	; 0x1fde <__pack_f+0x50>
    1fd8:	e0 e0       	ldi	r30, 0x00	; 0
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	96 c0       	rjmp	.+300    	; 0x210a <__pack_f+0x17c>
    1fde:	62 81       	ldd	r22, Z+2	; 0x02
    1fe0:	73 81       	ldd	r23, Z+3	; 0x03
    1fe2:	9f ef       	ldi	r25, 0xFF	; 255
    1fe4:	62 38       	cpi	r22, 0x82	; 130
    1fe6:	79 07       	cpc	r23, r25
    1fe8:	0c f0       	brlt	.+2      	; 0x1fec <__pack_f+0x5e>
    1fea:	5b c0       	rjmp	.+182    	; 0x20a2 <__pack_f+0x114>
    1fec:	22 e8       	ldi	r18, 0x82	; 130
    1fee:	3f ef       	ldi	r19, 0xFF	; 255
    1ff0:	26 1b       	sub	r18, r22
    1ff2:	37 0b       	sbc	r19, r23
    1ff4:	2a 31       	cpi	r18, 0x1A	; 26
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	2c f0       	brlt	.+10     	; 0x2004 <__pack_f+0x76>
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e0       	ldi	r20, 0x00	; 0
    2000:	50 e0       	ldi	r21, 0x00	; 0
    2002:	2a c0       	rjmp	.+84     	; 0x2058 <__pack_f+0xca>
    2004:	b8 01       	movw	r22, r16
    2006:	a7 01       	movw	r20, r14
    2008:	02 2e       	mov	r0, r18
    200a:	04 c0       	rjmp	.+8      	; 0x2014 <__pack_f+0x86>
    200c:	76 95       	lsr	r23
    200e:	67 95       	ror	r22
    2010:	57 95       	ror	r21
    2012:	47 95       	ror	r20
    2014:	0a 94       	dec	r0
    2016:	d2 f7       	brpl	.-12     	; 0x200c <__pack_f+0x7e>
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 e0       	ldi	r26, 0x00	; 0
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	04 c0       	rjmp	.+8      	; 0x202a <__pack_f+0x9c>
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	aa 1f       	adc	r26, r26
    2028:	bb 1f       	adc	r27, r27
    202a:	2a 95       	dec	r18
    202c:	d2 f7       	brpl	.-12     	; 0x2022 <__pack_f+0x94>
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	a1 09       	sbc	r26, r1
    2032:	b1 09       	sbc	r27, r1
    2034:	8e 21       	and	r24, r14
    2036:	9f 21       	and	r25, r15
    2038:	a0 23       	and	r26, r16
    203a:	b1 23       	and	r27, r17
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	a1 05       	cpc	r26, r1
    2040:	b1 05       	cpc	r27, r1
    2042:	21 f0       	breq	.+8      	; 0x204c <__pack_f+0xbe>
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	a0 e0       	ldi	r26, 0x00	; 0
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	9a 01       	movw	r18, r20
    204e:	ab 01       	movw	r20, r22
    2050:	28 2b       	or	r18, r24
    2052:	39 2b       	or	r19, r25
    2054:	4a 2b       	or	r20, r26
    2056:	5b 2b       	or	r21, r27
    2058:	da 01       	movw	r26, r20
    205a:	c9 01       	movw	r24, r18
    205c:	8f 77       	andi	r24, 0x7F	; 127
    205e:	90 70       	andi	r25, 0x00	; 0
    2060:	a0 70       	andi	r26, 0x00	; 0
    2062:	b0 70       	andi	r27, 0x00	; 0
    2064:	80 34       	cpi	r24, 0x40	; 64
    2066:	91 05       	cpc	r25, r1
    2068:	a1 05       	cpc	r26, r1
    206a:	b1 05       	cpc	r27, r1
    206c:	39 f4       	brne	.+14     	; 0x207c <__pack_f+0xee>
    206e:	27 ff       	sbrs	r18, 7
    2070:	09 c0       	rjmp	.+18     	; 0x2084 <__pack_f+0xf6>
    2072:	20 5c       	subi	r18, 0xC0	; 192
    2074:	3f 4f       	sbci	r19, 0xFF	; 255
    2076:	4f 4f       	sbci	r20, 0xFF	; 255
    2078:	5f 4f       	sbci	r21, 0xFF	; 255
    207a:	04 c0       	rjmp	.+8      	; 0x2084 <__pack_f+0xf6>
    207c:	21 5c       	subi	r18, 0xC1	; 193
    207e:	3f 4f       	sbci	r19, 0xFF	; 255
    2080:	4f 4f       	sbci	r20, 0xFF	; 255
    2082:	5f 4f       	sbci	r21, 0xFF	; 255
    2084:	e0 e0       	ldi	r30, 0x00	; 0
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	20 30       	cpi	r18, 0x00	; 0
    208a:	a0 e0       	ldi	r26, 0x00	; 0
    208c:	3a 07       	cpc	r19, r26
    208e:	a0 e0       	ldi	r26, 0x00	; 0
    2090:	4a 07       	cpc	r20, r26
    2092:	a0 e4       	ldi	r26, 0x40	; 64
    2094:	5a 07       	cpc	r21, r26
    2096:	10 f0       	brcs	.+4      	; 0x209c <__pack_f+0x10e>
    2098:	e1 e0       	ldi	r30, 0x01	; 1
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	79 01       	movw	r14, r18
    209e:	8a 01       	movw	r16, r20
    20a0:	27 c0       	rjmp	.+78     	; 0x20f0 <__pack_f+0x162>
    20a2:	60 38       	cpi	r22, 0x80	; 128
    20a4:	71 05       	cpc	r23, r1
    20a6:	64 f5       	brge	.+88     	; 0x2100 <__pack_f+0x172>
    20a8:	fb 01       	movw	r30, r22
    20aa:	e1 58       	subi	r30, 0x81	; 129
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	d8 01       	movw	r26, r16
    20b0:	c7 01       	movw	r24, r14
    20b2:	8f 77       	andi	r24, 0x7F	; 127
    20b4:	90 70       	andi	r25, 0x00	; 0
    20b6:	a0 70       	andi	r26, 0x00	; 0
    20b8:	b0 70       	andi	r27, 0x00	; 0
    20ba:	80 34       	cpi	r24, 0x40	; 64
    20bc:	91 05       	cpc	r25, r1
    20be:	a1 05       	cpc	r26, r1
    20c0:	b1 05       	cpc	r27, r1
    20c2:	39 f4       	brne	.+14     	; 0x20d2 <__pack_f+0x144>
    20c4:	e7 fe       	sbrs	r14, 7
    20c6:	0d c0       	rjmp	.+26     	; 0x20e2 <__pack_f+0x154>
    20c8:	80 e4       	ldi	r24, 0x40	; 64
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	a0 e0       	ldi	r26, 0x00	; 0
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	04 c0       	rjmp	.+8      	; 0x20da <__pack_f+0x14c>
    20d2:	8f e3       	ldi	r24, 0x3F	; 63
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a0 e0       	ldi	r26, 0x00	; 0
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e8 0e       	add	r14, r24
    20dc:	f9 1e       	adc	r15, r25
    20de:	0a 1f       	adc	r16, r26
    20e0:	1b 1f       	adc	r17, r27
    20e2:	17 ff       	sbrs	r17, 7
    20e4:	05 c0       	rjmp	.+10     	; 0x20f0 <__pack_f+0x162>
    20e6:	16 95       	lsr	r17
    20e8:	07 95       	ror	r16
    20ea:	f7 94       	ror	r15
    20ec:	e7 94       	ror	r14
    20ee:	31 96       	adiw	r30, 0x01	; 1
    20f0:	87 e0       	ldi	r24, 0x07	; 7
    20f2:	16 95       	lsr	r17
    20f4:	07 95       	ror	r16
    20f6:	f7 94       	ror	r15
    20f8:	e7 94       	ror	r14
    20fa:	8a 95       	dec	r24
    20fc:	d1 f7       	brne	.-12     	; 0x20f2 <__pack_f+0x164>
    20fe:	05 c0       	rjmp	.+10     	; 0x210a <__pack_f+0x17c>
    2100:	ee 24       	eor	r14, r14
    2102:	ff 24       	eor	r15, r15
    2104:	87 01       	movw	r16, r14
    2106:	ef ef       	ldi	r30, 0xFF	; 255
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	6e 2f       	mov	r22, r30
    210c:	67 95       	ror	r22
    210e:	66 27       	eor	r22, r22
    2110:	67 95       	ror	r22
    2112:	90 2f       	mov	r25, r16
    2114:	9f 77       	andi	r25, 0x7F	; 127
    2116:	d7 94       	ror	r13
    2118:	dd 24       	eor	r13, r13
    211a:	d7 94       	ror	r13
    211c:	8e 2f       	mov	r24, r30
    211e:	86 95       	lsr	r24
    2120:	49 2f       	mov	r20, r25
    2122:	46 2b       	or	r20, r22
    2124:	58 2f       	mov	r21, r24
    2126:	5d 29       	or	r21, r13
    2128:	b7 01       	movw	r22, r14
    212a:	ca 01       	movw	r24, r20
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	ff 90       	pop	r15
    2132:	ef 90       	pop	r14
    2134:	df 90       	pop	r13
    2136:	08 95       	ret

00002138 <__unpack_f>:
    2138:	fc 01       	movw	r30, r24
    213a:	db 01       	movw	r26, r22
    213c:	40 81       	ld	r20, Z
    213e:	51 81       	ldd	r21, Z+1	; 0x01
    2140:	22 81       	ldd	r18, Z+2	; 0x02
    2142:	62 2f       	mov	r22, r18
    2144:	6f 77       	andi	r22, 0x7F	; 127
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	22 1f       	adc	r18, r18
    214a:	22 27       	eor	r18, r18
    214c:	22 1f       	adc	r18, r18
    214e:	93 81       	ldd	r25, Z+3	; 0x03
    2150:	89 2f       	mov	r24, r25
    2152:	88 0f       	add	r24, r24
    2154:	82 2b       	or	r24, r18
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	99 1f       	adc	r25, r25
    215c:	99 27       	eor	r25, r25
    215e:	99 1f       	adc	r25, r25
    2160:	11 96       	adiw	r26, 0x01	; 1
    2162:	9c 93       	st	X, r25
    2164:	11 97       	sbiw	r26, 0x01	; 1
    2166:	21 15       	cp	r18, r1
    2168:	31 05       	cpc	r19, r1
    216a:	a9 f5       	brne	.+106    	; 0x21d6 <__unpack_f+0x9e>
    216c:	41 15       	cp	r20, r1
    216e:	51 05       	cpc	r21, r1
    2170:	61 05       	cpc	r22, r1
    2172:	71 05       	cpc	r23, r1
    2174:	11 f4       	brne	.+4      	; 0x217a <__unpack_f+0x42>
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	37 c0       	rjmp	.+110    	; 0x21e8 <__unpack_f+0xb0>
    217a:	82 e8       	ldi	r24, 0x82	; 130
    217c:	9f ef       	ldi	r25, 0xFF	; 255
    217e:	13 96       	adiw	r26, 0x03	; 3
    2180:	9c 93       	st	X, r25
    2182:	8e 93       	st	-X, r24
    2184:	12 97       	sbiw	r26, 0x02	; 2
    2186:	9a 01       	movw	r18, r20
    2188:	ab 01       	movw	r20, r22
    218a:	67 e0       	ldi	r22, 0x07	; 7
    218c:	22 0f       	add	r18, r18
    218e:	33 1f       	adc	r19, r19
    2190:	44 1f       	adc	r20, r20
    2192:	55 1f       	adc	r21, r21
    2194:	6a 95       	dec	r22
    2196:	d1 f7       	brne	.-12     	; 0x218c <__unpack_f+0x54>
    2198:	83 e0       	ldi	r24, 0x03	; 3
    219a:	8c 93       	st	X, r24
    219c:	0d c0       	rjmp	.+26     	; 0x21b8 <__unpack_f+0x80>
    219e:	22 0f       	add	r18, r18
    21a0:	33 1f       	adc	r19, r19
    21a2:	44 1f       	adc	r20, r20
    21a4:	55 1f       	adc	r21, r21
    21a6:	12 96       	adiw	r26, 0x02	; 2
    21a8:	8d 91       	ld	r24, X+
    21aa:	9c 91       	ld	r25, X
    21ac:	13 97       	sbiw	r26, 0x03	; 3
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	13 96       	adiw	r26, 0x03	; 3
    21b2:	9c 93       	st	X, r25
    21b4:	8e 93       	st	-X, r24
    21b6:	12 97       	sbiw	r26, 0x02	; 2
    21b8:	20 30       	cpi	r18, 0x00	; 0
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	38 07       	cpc	r19, r24
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	48 07       	cpc	r20, r24
    21c2:	80 e4       	ldi	r24, 0x40	; 64
    21c4:	58 07       	cpc	r21, r24
    21c6:	58 f3       	brcs	.-42     	; 0x219e <__unpack_f+0x66>
    21c8:	14 96       	adiw	r26, 0x04	; 4
    21ca:	2d 93       	st	X+, r18
    21cc:	3d 93       	st	X+, r19
    21ce:	4d 93       	st	X+, r20
    21d0:	5c 93       	st	X, r21
    21d2:	17 97       	sbiw	r26, 0x07	; 7
    21d4:	08 95       	ret
    21d6:	2f 3f       	cpi	r18, 0xFF	; 255
    21d8:	31 05       	cpc	r19, r1
    21da:	79 f4       	brne	.+30     	; 0x21fa <__unpack_f+0xc2>
    21dc:	41 15       	cp	r20, r1
    21de:	51 05       	cpc	r21, r1
    21e0:	61 05       	cpc	r22, r1
    21e2:	71 05       	cpc	r23, r1
    21e4:	19 f4       	brne	.+6      	; 0x21ec <__unpack_f+0xb4>
    21e6:	84 e0       	ldi	r24, 0x04	; 4
    21e8:	8c 93       	st	X, r24
    21ea:	08 95       	ret
    21ec:	64 ff       	sbrs	r22, 4
    21ee:	03 c0       	rjmp	.+6      	; 0x21f6 <__unpack_f+0xbe>
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	8c 93       	st	X, r24
    21f4:	12 c0       	rjmp	.+36     	; 0x221a <__unpack_f+0xe2>
    21f6:	1c 92       	st	X, r1
    21f8:	10 c0       	rjmp	.+32     	; 0x221a <__unpack_f+0xe2>
    21fa:	2f 57       	subi	r18, 0x7F	; 127
    21fc:	30 40       	sbci	r19, 0x00	; 0
    21fe:	13 96       	adiw	r26, 0x03	; 3
    2200:	3c 93       	st	X, r19
    2202:	2e 93       	st	-X, r18
    2204:	12 97       	sbiw	r26, 0x02	; 2
    2206:	83 e0       	ldi	r24, 0x03	; 3
    2208:	8c 93       	st	X, r24
    220a:	87 e0       	ldi	r24, 0x07	; 7
    220c:	44 0f       	add	r20, r20
    220e:	55 1f       	adc	r21, r21
    2210:	66 1f       	adc	r22, r22
    2212:	77 1f       	adc	r23, r23
    2214:	8a 95       	dec	r24
    2216:	d1 f7       	brne	.-12     	; 0x220c <__unpack_f+0xd4>
    2218:	70 64       	ori	r23, 0x40	; 64
    221a:	14 96       	adiw	r26, 0x04	; 4
    221c:	4d 93       	st	X+, r20
    221e:	5d 93       	st	X+, r21
    2220:	6d 93       	st	X+, r22
    2222:	7c 93       	st	X, r23
    2224:	17 97       	sbiw	r26, 0x07	; 7
    2226:	08 95       	ret

00002228 <__fpcmp_parts_f>:
    2228:	1f 93       	push	r17
    222a:	dc 01       	movw	r26, r24
    222c:	fb 01       	movw	r30, r22
    222e:	9c 91       	ld	r25, X
    2230:	92 30       	cpi	r25, 0x02	; 2
    2232:	08 f4       	brcc	.+2      	; 0x2236 <__fpcmp_parts_f+0xe>
    2234:	47 c0       	rjmp	.+142    	; 0x22c4 <__fpcmp_parts_f+0x9c>
    2236:	80 81       	ld	r24, Z
    2238:	82 30       	cpi	r24, 0x02	; 2
    223a:	08 f4       	brcc	.+2      	; 0x223e <__fpcmp_parts_f+0x16>
    223c:	43 c0       	rjmp	.+134    	; 0x22c4 <__fpcmp_parts_f+0x9c>
    223e:	94 30       	cpi	r25, 0x04	; 4
    2240:	51 f4       	brne	.+20     	; 0x2256 <__fpcmp_parts_f+0x2e>
    2242:	11 96       	adiw	r26, 0x01	; 1
    2244:	1c 91       	ld	r17, X
    2246:	84 30       	cpi	r24, 0x04	; 4
    2248:	99 f5       	brne	.+102    	; 0x22b0 <__fpcmp_parts_f+0x88>
    224a:	81 81       	ldd	r24, Z+1	; 0x01
    224c:	68 2f       	mov	r22, r24
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	61 1b       	sub	r22, r17
    2252:	71 09       	sbc	r23, r1
    2254:	3f c0       	rjmp	.+126    	; 0x22d4 <__fpcmp_parts_f+0xac>
    2256:	84 30       	cpi	r24, 0x04	; 4
    2258:	21 f0       	breq	.+8      	; 0x2262 <__fpcmp_parts_f+0x3a>
    225a:	92 30       	cpi	r25, 0x02	; 2
    225c:	31 f4       	brne	.+12     	; 0x226a <__fpcmp_parts_f+0x42>
    225e:	82 30       	cpi	r24, 0x02	; 2
    2260:	b9 f1       	breq	.+110    	; 0x22d0 <__fpcmp_parts_f+0xa8>
    2262:	81 81       	ldd	r24, Z+1	; 0x01
    2264:	88 23       	and	r24, r24
    2266:	89 f1       	breq	.+98     	; 0x22ca <__fpcmp_parts_f+0xa2>
    2268:	2d c0       	rjmp	.+90     	; 0x22c4 <__fpcmp_parts_f+0x9c>
    226a:	11 96       	adiw	r26, 0x01	; 1
    226c:	1c 91       	ld	r17, X
    226e:	11 97       	sbiw	r26, 0x01	; 1
    2270:	82 30       	cpi	r24, 0x02	; 2
    2272:	f1 f0       	breq	.+60     	; 0x22b0 <__fpcmp_parts_f+0x88>
    2274:	81 81       	ldd	r24, Z+1	; 0x01
    2276:	18 17       	cp	r17, r24
    2278:	d9 f4       	brne	.+54     	; 0x22b0 <__fpcmp_parts_f+0x88>
    227a:	12 96       	adiw	r26, 0x02	; 2
    227c:	2d 91       	ld	r18, X+
    227e:	3c 91       	ld	r19, X
    2280:	13 97       	sbiw	r26, 0x03	; 3
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	82 17       	cp	r24, r18
    2288:	93 07       	cpc	r25, r19
    228a:	94 f0       	brlt	.+36     	; 0x22b0 <__fpcmp_parts_f+0x88>
    228c:	28 17       	cp	r18, r24
    228e:	39 07       	cpc	r19, r25
    2290:	bc f0       	brlt	.+46     	; 0x22c0 <__fpcmp_parts_f+0x98>
    2292:	14 96       	adiw	r26, 0x04	; 4
    2294:	8d 91       	ld	r24, X+
    2296:	9d 91       	ld	r25, X+
    2298:	0d 90       	ld	r0, X+
    229a:	bc 91       	ld	r27, X
    229c:	a0 2d       	mov	r26, r0
    229e:	24 81       	ldd	r18, Z+4	; 0x04
    22a0:	35 81       	ldd	r19, Z+5	; 0x05
    22a2:	46 81       	ldd	r20, Z+6	; 0x06
    22a4:	57 81       	ldd	r21, Z+7	; 0x07
    22a6:	28 17       	cp	r18, r24
    22a8:	39 07       	cpc	r19, r25
    22aa:	4a 07       	cpc	r20, r26
    22ac:	5b 07       	cpc	r21, r27
    22ae:	18 f4       	brcc	.+6      	; 0x22b6 <__fpcmp_parts_f+0x8e>
    22b0:	11 23       	and	r17, r17
    22b2:	41 f0       	breq	.+16     	; 0x22c4 <__fpcmp_parts_f+0x9c>
    22b4:	0a c0       	rjmp	.+20     	; 0x22ca <__fpcmp_parts_f+0xa2>
    22b6:	82 17       	cp	r24, r18
    22b8:	93 07       	cpc	r25, r19
    22ba:	a4 07       	cpc	r26, r20
    22bc:	b5 07       	cpc	r27, r21
    22be:	40 f4       	brcc	.+16     	; 0x22d0 <__fpcmp_parts_f+0xa8>
    22c0:	11 23       	and	r17, r17
    22c2:	19 f0       	breq	.+6      	; 0x22ca <__fpcmp_parts_f+0xa2>
    22c4:	61 e0       	ldi	r22, 0x01	; 1
    22c6:	70 e0       	ldi	r23, 0x00	; 0
    22c8:	05 c0       	rjmp	.+10     	; 0x22d4 <__fpcmp_parts_f+0xac>
    22ca:	6f ef       	ldi	r22, 0xFF	; 255
    22cc:	7f ef       	ldi	r23, 0xFF	; 255
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <__fpcmp_parts_f+0xac>
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	70 e0       	ldi	r23, 0x00	; 0
    22d4:	cb 01       	movw	r24, r22
    22d6:	1f 91       	pop	r17
    22d8:	08 95       	ret

000022da <__udivmodhi4>:
    22da:	aa 1b       	sub	r26, r26
    22dc:	bb 1b       	sub	r27, r27
    22de:	51 e1       	ldi	r21, 0x11	; 17
    22e0:	07 c0       	rjmp	.+14     	; 0x22f0 <__udivmodhi4_ep>

000022e2 <__udivmodhi4_loop>:
    22e2:	aa 1f       	adc	r26, r26
    22e4:	bb 1f       	adc	r27, r27
    22e6:	a6 17       	cp	r26, r22
    22e8:	b7 07       	cpc	r27, r23
    22ea:	10 f0       	brcs	.+4      	; 0x22f0 <__udivmodhi4_ep>
    22ec:	a6 1b       	sub	r26, r22
    22ee:	b7 0b       	sbc	r27, r23

000022f0 <__udivmodhi4_ep>:
    22f0:	88 1f       	adc	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	5a 95       	dec	r21
    22f6:	a9 f7       	brne	.-22     	; 0x22e2 <__udivmodhi4_loop>
    22f8:	80 95       	com	r24
    22fa:	90 95       	com	r25
    22fc:	bc 01       	movw	r22, r24
    22fe:	cd 01       	movw	r24, r26
    2300:	08 95       	ret

00002302 <__divmodhi4>:
    2302:	97 fb       	bst	r25, 7
    2304:	09 2e       	mov	r0, r25
    2306:	07 26       	eor	r0, r23
    2308:	0a d0       	rcall	.+20     	; 0x231e <__divmodhi4_neg1>
    230a:	77 fd       	sbrc	r23, 7
    230c:	04 d0       	rcall	.+8      	; 0x2316 <__divmodhi4_neg2>
    230e:	e5 df       	rcall	.-54     	; 0x22da <__udivmodhi4>
    2310:	06 d0       	rcall	.+12     	; 0x231e <__divmodhi4_neg1>
    2312:	00 20       	and	r0, r0
    2314:	1a f4       	brpl	.+6      	; 0x231c <__divmodhi4_exit>

00002316 <__divmodhi4_neg2>:
    2316:	70 95       	com	r23
    2318:	61 95       	neg	r22
    231a:	7f 4f       	sbci	r23, 0xFF	; 255

0000231c <__divmodhi4_exit>:
    231c:	08 95       	ret

0000231e <__divmodhi4_neg1>:
    231e:	f6 f7       	brtc	.-4      	; 0x231c <__divmodhi4_exit>
    2320:	90 95       	com	r25
    2322:	81 95       	neg	r24
    2324:	9f 4f       	sbci	r25, 0xFF	; 255
    2326:	08 95       	ret

00002328 <__prologue_saves__>:
    2328:	2f 92       	push	r2
    232a:	3f 92       	push	r3
    232c:	4f 92       	push	r4
    232e:	5f 92       	push	r5
    2330:	6f 92       	push	r6
    2332:	7f 92       	push	r7
    2334:	8f 92       	push	r8
    2336:	9f 92       	push	r9
    2338:	af 92       	push	r10
    233a:	bf 92       	push	r11
    233c:	cf 92       	push	r12
    233e:	df 92       	push	r13
    2340:	ef 92       	push	r14
    2342:	ff 92       	push	r15
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	ca 1b       	sub	r28, r26
    2352:	db 0b       	sbc	r29, r27
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	09 94       	ijmp

00002360 <__epilogue_restores__>:
    2360:	2a 88       	ldd	r2, Y+18	; 0x12
    2362:	39 88       	ldd	r3, Y+17	; 0x11
    2364:	48 88       	ldd	r4, Y+16	; 0x10
    2366:	5f 84       	ldd	r5, Y+15	; 0x0f
    2368:	6e 84       	ldd	r6, Y+14	; 0x0e
    236a:	7d 84       	ldd	r7, Y+13	; 0x0d
    236c:	8c 84       	ldd	r8, Y+12	; 0x0c
    236e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2370:	aa 84       	ldd	r10, Y+10	; 0x0a
    2372:	b9 84       	ldd	r11, Y+9	; 0x09
    2374:	c8 84       	ldd	r12, Y+8	; 0x08
    2376:	df 80       	ldd	r13, Y+7	; 0x07
    2378:	ee 80       	ldd	r14, Y+6	; 0x06
    237a:	fd 80       	ldd	r15, Y+5	; 0x05
    237c:	0c 81       	ldd	r16, Y+4	; 0x04
    237e:	1b 81       	ldd	r17, Y+3	; 0x03
    2380:	aa 81       	ldd	r26, Y+2	; 0x02
    2382:	b9 81       	ldd	r27, Y+1	; 0x01
    2384:	ce 0f       	add	r28, r30
    2386:	d1 1d       	adc	r29, r1
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	ed 01       	movw	r28, r26
    2394:	08 95       	ret

00002396 <strlen>:
    2396:	fc 01       	movw	r30, r24
    2398:	01 90       	ld	r0, Z+
    239a:	00 20       	and	r0, r0
    239c:	e9 f7       	brne	.-6      	; 0x2398 <strlen+0x2>
    239e:	80 95       	com	r24
    23a0:	90 95       	com	r25
    23a2:	8e 0f       	add	r24, r30
    23a4:	9f 1f       	adc	r25, r31
    23a6:	08 95       	ret

000023a8 <sprintf>:
    23a8:	ae e0       	ldi	r26, 0x0E	; 14
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	ea ed       	ldi	r30, 0xDA	; 218
    23ae:	f1 e1       	ldi	r31, 0x11	; 17
    23b0:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__prologue_saves__+0x1c>
    23b4:	0d 89       	ldd	r16, Y+21	; 0x15
    23b6:	1e 89       	ldd	r17, Y+22	; 0x16
    23b8:	86 e0       	ldi	r24, 0x06	; 6
    23ba:	8c 83       	std	Y+4, r24	; 0x04
    23bc:	1a 83       	std	Y+2, r17	; 0x02
    23be:	09 83       	std	Y+1, r16	; 0x01
    23c0:	8f ef       	ldi	r24, 0xFF	; 255
    23c2:	9f e7       	ldi	r25, 0x7F	; 127
    23c4:	9e 83       	std	Y+6, r25	; 0x06
    23c6:	8d 83       	std	Y+5, r24	; 0x05
    23c8:	9e 01       	movw	r18, r28
    23ca:	27 5e       	subi	r18, 0xE7	; 231
    23cc:	3f 4f       	sbci	r19, 0xFF	; 255
    23ce:	ce 01       	movw	r24, r28
    23d0:	01 96       	adiw	r24, 0x01	; 1
    23d2:	6f 89       	ldd	r22, Y+23	; 0x17
    23d4:	78 8d       	ldd	r23, Y+24	; 0x18
    23d6:	a9 01       	movw	r20, r18
    23d8:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <vfprintf>
    23dc:	2f 81       	ldd	r18, Y+7	; 0x07
    23de:	38 85       	ldd	r19, Y+8	; 0x08
    23e0:	02 0f       	add	r16, r18
    23e2:	13 1f       	adc	r17, r19
    23e4:	f8 01       	movw	r30, r16
    23e6:	10 82       	st	Z, r1
    23e8:	2e 96       	adiw	r28, 0x0e	; 14
    23ea:	e4 e0       	ldi	r30, 0x04	; 4
    23ec:	0c 94 be 11 	jmp	0x237c	; 0x237c <__epilogue_restores__+0x1c>

000023f0 <vfprintf>:
    23f0:	ab e0       	ldi	r26, 0x0B	; 11
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	ee ef       	ldi	r30, 0xFE	; 254
    23f6:	f1 e1       	ldi	r31, 0x11	; 17
    23f8:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__prologue_saves__>
    23fc:	3c 01       	movw	r6, r24
    23fe:	2b 01       	movw	r4, r22
    2400:	5a 01       	movw	r10, r20
    2402:	fc 01       	movw	r30, r24
    2404:	17 82       	std	Z+7, r1	; 0x07
    2406:	16 82       	std	Z+6, r1	; 0x06
    2408:	83 81       	ldd	r24, Z+3	; 0x03
    240a:	81 fd       	sbrc	r24, 1
    240c:	03 c0       	rjmp	.+6      	; 0x2414 <vfprintf+0x24>
    240e:	6f ef       	ldi	r22, 0xFF	; 255
    2410:	7f ef       	ldi	r23, 0xFF	; 255
    2412:	c6 c1       	rjmp	.+908    	; 0x27a0 <vfprintf+0x3b0>
    2414:	9a e0       	ldi	r25, 0x0A	; 10
    2416:	89 2e       	mov	r8, r25
    2418:	1e 01       	movw	r2, r28
    241a:	08 94       	sec
    241c:	21 1c       	adc	r2, r1
    241e:	31 1c       	adc	r3, r1
    2420:	f3 01       	movw	r30, r6
    2422:	23 81       	ldd	r18, Z+3	; 0x03
    2424:	f2 01       	movw	r30, r4
    2426:	23 fd       	sbrc	r18, 3
    2428:	85 91       	lpm	r24, Z+
    242a:	23 ff       	sbrs	r18, 3
    242c:	81 91       	ld	r24, Z+
    242e:	2f 01       	movw	r4, r30
    2430:	88 23       	and	r24, r24
    2432:	09 f4       	brne	.+2      	; 0x2436 <vfprintf+0x46>
    2434:	b2 c1       	rjmp	.+868    	; 0x279a <vfprintf+0x3aa>
    2436:	85 32       	cpi	r24, 0x25	; 37
    2438:	39 f4       	brne	.+14     	; 0x2448 <vfprintf+0x58>
    243a:	23 fd       	sbrc	r18, 3
    243c:	85 91       	lpm	r24, Z+
    243e:	23 ff       	sbrs	r18, 3
    2440:	81 91       	ld	r24, Z+
    2442:	2f 01       	movw	r4, r30
    2444:	85 32       	cpi	r24, 0x25	; 37
    2446:	29 f4       	brne	.+10     	; 0x2452 <vfprintf+0x62>
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	b3 01       	movw	r22, r6
    244c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <fputc>
    2450:	e7 cf       	rjmp	.-50     	; 0x2420 <vfprintf+0x30>
    2452:	98 2f       	mov	r25, r24
    2454:	ff 24       	eor	r15, r15
    2456:	ee 24       	eor	r14, r14
    2458:	99 24       	eor	r9, r9
    245a:	ff e1       	ldi	r31, 0x1F	; 31
    245c:	ff 15       	cp	r31, r15
    245e:	d0 f0       	brcs	.+52     	; 0x2494 <vfprintf+0xa4>
    2460:	9b 32       	cpi	r25, 0x2B	; 43
    2462:	69 f0       	breq	.+26     	; 0x247e <vfprintf+0x8e>
    2464:	9c 32       	cpi	r25, 0x2C	; 44
    2466:	28 f4       	brcc	.+10     	; 0x2472 <vfprintf+0x82>
    2468:	90 32       	cpi	r25, 0x20	; 32
    246a:	59 f0       	breq	.+22     	; 0x2482 <vfprintf+0x92>
    246c:	93 32       	cpi	r25, 0x23	; 35
    246e:	91 f4       	brne	.+36     	; 0x2494 <vfprintf+0xa4>
    2470:	0e c0       	rjmp	.+28     	; 0x248e <vfprintf+0x9e>
    2472:	9d 32       	cpi	r25, 0x2D	; 45
    2474:	49 f0       	breq	.+18     	; 0x2488 <vfprintf+0x98>
    2476:	90 33       	cpi	r25, 0x30	; 48
    2478:	69 f4       	brne	.+26     	; 0x2494 <vfprintf+0xa4>
    247a:	41 e0       	ldi	r20, 0x01	; 1
    247c:	24 c0       	rjmp	.+72     	; 0x24c6 <vfprintf+0xd6>
    247e:	52 e0       	ldi	r21, 0x02	; 2
    2480:	f5 2a       	or	r15, r21
    2482:	84 e0       	ldi	r24, 0x04	; 4
    2484:	f8 2a       	or	r15, r24
    2486:	28 c0       	rjmp	.+80     	; 0x24d8 <vfprintf+0xe8>
    2488:	98 e0       	ldi	r25, 0x08	; 8
    248a:	f9 2a       	or	r15, r25
    248c:	25 c0       	rjmp	.+74     	; 0x24d8 <vfprintf+0xe8>
    248e:	e0 e1       	ldi	r30, 0x10	; 16
    2490:	fe 2a       	or	r15, r30
    2492:	22 c0       	rjmp	.+68     	; 0x24d8 <vfprintf+0xe8>
    2494:	f7 fc       	sbrc	r15, 7
    2496:	29 c0       	rjmp	.+82     	; 0x24ea <vfprintf+0xfa>
    2498:	89 2f       	mov	r24, r25
    249a:	80 53       	subi	r24, 0x30	; 48
    249c:	8a 30       	cpi	r24, 0x0A	; 10
    249e:	70 f4       	brcc	.+28     	; 0x24bc <vfprintf+0xcc>
    24a0:	f6 fe       	sbrs	r15, 6
    24a2:	05 c0       	rjmp	.+10     	; 0x24ae <vfprintf+0xbe>
    24a4:	98 9c       	mul	r9, r8
    24a6:	90 2c       	mov	r9, r0
    24a8:	11 24       	eor	r1, r1
    24aa:	98 0e       	add	r9, r24
    24ac:	15 c0       	rjmp	.+42     	; 0x24d8 <vfprintf+0xe8>
    24ae:	e8 9c       	mul	r14, r8
    24b0:	e0 2c       	mov	r14, r0
    24b2:	11 24       	eor	r1, r1
    24b4:	e8 0e       	add	r14, r24
    24b6:	f0 e2       	ldi	r31, 0x20	; 32
    24b8:	ff 2a       	or	r15, r31
    24ba:	0e c0       	rjmp	.+28     	; 0x24d8 <vfprintf+0xe8>
    24bc:	9e 32       	cpi	r25, 0x2E	; 46
    24be:	29 f4       	brne	.+10     	; 0x24ca <vfprintf+0xda>
    24c0:	f6 fc       	sbrc	r15, 6
    24c2:	6b c1       	rjmp	.+726    	; 0x279a <vfprintf+0x3aa>
    24c4:	40 e4       	ldi	r20, 0x40	; 64
    24c6:	f4 2a       	or	r15, r20
    24c8:	07 c0       	rjmp	.+14     	; 0x24d8 <vfprintf+0xe8>
    24ca:	9c 36       	cpi	r25, 0x6C	; 108
    24cc:	19 f4       	brne	.+6      	; 0x24d4 <vfprintf+0xe4>
    24ce:	50 e8       	ldi	r21, 0x80	; 128
    24d0:	f5 2a       	or	r15, r21
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <vfprintf+0xe8>
    24d4:	98 36       	cpi	r25, 0x68	; 104
    24d6:	49 f4       	brne	.+18     	; 0x24ea <vfprintf+0xfa>
    24d8:	f2 01       	movw	r30, r4
    24da:	23 fd       	sbrc	r18, 3
    24dc:	95 91       	lpm	r25, Z+
    24de:	23 ff       	sbrs	r18, 3
    24e0:	91 91       	ld	r25, Z+
    24e2:	2f 01       	movw	r4, r30
    24e4:	99 23       	and	r25, r25
    24e6:	09 f0       	breq	.+2      	; 0x24ea <vfprintf+0xfa>
    24e8:	b8 cf       	rjmp	.-144    	; 0x245a <vfprintf+0x6a>
    24ea:	89 2f       	mov	r24, r25
    24ec:	85 54       	subi	r24, 0x45	; 69
    24ee:	83 30       	cpi	r24, 0x03	; 3
    24f0:	18 f0       	brcs	.+6      	; 0x24f8 <vfprintf+0x108>
    24f2:	80 52       	subi	r24, 0x20	; 32
    24f4:	83 30       	cpi	r24, 0x03	; 3
    24f6:	38 f4       	brcc	.+14     	; 0x2506 <vfprintf+0x116>
    24f8:	44 e0       	ldi	r20, 0x04	; 4
    24fa:	50 e0       	ldi	r21, 0x00	; 0
    24fc:	a4 0e       	add	r10, r20
    24fe:	b5 1e       	adc	r11, r21
    2500:	5f e3       	ldi	r21, 0x3F	; 63
    2502:	59 83       	std	Y+1, r21	; 0x01
    2504:	0f c0       	rjmp	.+30     	; 0x2524 <vfprintf+0x134>
    2506:	93 36       	cpi	r25, 0x63	; 99
    2508:	31 f0       	breq	.+12     	; 0x2516 <vfprintf+0x126>
    250a:	93 37       	cpi	r25, 0x73	; 115
    250c:	79 f0       	breq	.+30     	; 0x252c <vfprintf+0x13c>
    250e:	93 35       	cpi	r25, 0x53	; 83
    2510:	09 f0       	breq	.+2      	; 0x2514 <vfprintf+0x124>
    2512:	56 c0       	rjmp	.+172    	; 0x25c0 <vfprintf+0x1d0>
    2514:	20 c0       	rjmp	.+64     	; 0x2556 <vfprintf+0x166>
    2516:	f5 01       	movw	r30, r10
    2518:	80 81       	ld	r24, Z
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	42 e0       	ldi	r20, 0x02	; 2
    251e:	50 e0       	ldi	r21, 0x00	; 0
    2520:	a4 0e       	add	r10, r20
    2522:	b5 1e       	adc	r11, r21
    2524:	61 01       	movw	r12, r2
    2526:	01 e0       	ldi	r16, 0x01	; 1
    2528:	10 e0       	ldi	r17, 0x00	; 0
    252a:	12 c0       	rjmp	.+36     	; 0x2550 <vfprintf+0x160>
    252c:	f5 01       	movw	r30, r10
    252e:	c0 80       	ld	r12, Z
    2530:	d1 80       	ldd	r13, Z+1	; 0x01
    2532:	f6 fc       	sbrc	r15, 6
    2534:	03 c0       	rjmp	.+6      	; 0x253c <vfprintf+0x14c>
    2536:	6f ef       	ldi	r22, 0xFF	; 255
    2538:	7f ef       	ldi	r23, 0xFF	; 255
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <vfprintf+0x150>
    253c:	69 2d       	mov	r22, r9
    253e:	70 e0       	ldi	r23, 0x00	; 0
    2540:	42 e0       	ldi	r20, 0x02	; 2
    2542:	50 e0       	ldi	r21, 0x00	; 0
    2544:	a4 0e       	add	r10, r20
    2546:	b5 1e       	adc	r11, r21
    2548:	c6 01       	movw	r24, r12
    254a:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <strnlen>
    254e:	8c 01       	movw	r16, r24
    2550:	5f e7       	ldi	r21, 0x7F	; 127
    2552:	f5 22       	and	r15, r21
    2554:	14 c0       	rjmp	.+40     	; 0x257e <vfprintf+0x18e>
    2556:	f5 01       	movw	r30, r10
    2558:	c0 80       	ld	r12, Z
    255a:	d1 80       	ldd	r13, Z+1	; 0x01
    255c:	f6 fc       	sbrc	r15, 6
    255e:	03 c0       	rjmp	.+6      	; 0x2566 <vfprintf+0x176>
    2560:	6f ef       	ldi	r22, 0xFF	; 255
    2562:	7f ef       	ldi	r23, 0xFF	; 255
    2564:	02 c0       	rjmp	.+4      	; 0x256a <vfprintf+0x17a>
    2566:	69 2d       	mov	r22, r9
    2568:	70 e0       	ldi	r23, 0x00	; 0
    256a:	42 e0       	ldi	r20, 0x02	; 2
    256c:	50 e0       	ldi	r21, 0x00	; 0
    256e:	a4 0e       	add	r10, r20
    2570:	b5 1e       	adc	r11, r21
    2572:	c6 01       	movw	r24, r12
    2574:	0e 94 d5 13 	call	0x27aa	; 0x27aa <strnlen_P>
    2578:	8c 01       	movw	r16, r24
    257a:	50 e8       	ldi	r21, 0x80	; 128
    257c:	f5 2a       	or	r15, r21
    257e:	f3 fe       	sbrs	r15, 3
    2580:	07 c0       	rjmp	.+14     	; 0x2590 <vfprintf+0x1a0>
    2582:	1a c0       	rjmp	.+52     	; 0x25b8 <vfprintf+0x1c8>
    2584:	80 e2       	ldi	r24, 0x20	; 32
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	b3 01       	movw	r22, r6
    258a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <fputc>
    258e:	ea 94       	dec	r14
    2590:	8e 2d       	mov	r24, r14
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	08 17       	cp	r16, r24
    2596:	19 07       	cpc	r17, r25
    2598:	a8 f3       	brcs	.-22     	; 0x2584 <vfprintf+0x194>
    259a:	0e c0       	rjmp	.+28     	; 0x25b8 <vfprintf+0x1c8>
    259c:	f6 01       	movw	r30, r12
    259e:	f7 fc       	sbrc	r15, 7
    25a0:	85 91       	lpm	r24, Z+
    25a2:	f7 fe       	sbrs	r15, 7
    25a4:	81 91       	ld	r24, Z+
    25a6:	6f 01       	movw	r12, r30
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	b3 01       	movw	r22, r6
    25ac:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <fputc>
    25b0:	e1 10       	cpse	r14, r1
    25b2:	ea 94       	dec	r14
    25b4:	01 50       	subi	r16, 0x01	; 1
    25b6:	10 40       	sbci	r17, 0x00	; 0
    25b8:	01 15       	cp	r16, r1
    25ba:	11 05       	cpc	r17, r1
    25bc:	79 f7       	brne	.-34     	; 0x259c <vfprintf+0x1ac>
    25be:	ea c0       	rjmp	.+468    	; 0x2794 <vfprintf+0x3a4>
    25c0:	94 36       	cpi	r25, 0x64	; 100
    25c2:	11 f0       	breq	.+4      	; 0x25c8 <vfprintf+0x1d8>
    25c4:	99 36       	cpi	r25, 0x69	; 105
    25c6:	69 f5       	brne	.+90     	; 0x2622 <vfprintf+0x232>
    25c8:	f7 fe       	sbrs	r15, 7
    25ca:	08 c0       	rjmp	.+16     	; 0x25dc <vfprintf+0x1ec>
    25cc:	f5 01       	movw	r30, r10
    25ce:	20 81       	ld	r18, Z
    25d0:	31 81       	ldd	r19, Z+1	; 0x01
    25d2:	42 81       	ldd	r20, Z+2	; 0x02
    25d4:	53 81       	ldd	r21, Z+3	; 0x03
    25d6:	84 e0       	ldi	r24, 0x04	; 4
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0a c0       	rjmp	.+20     	; 0x25f0 <vfprintf+0x200>
    25dc:	f5 01       	movw	r30, r10
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	9c 01       	movw	r18, r24
    25e4:	44 27       	eor	r20, r20
    25e6:	37 fd       	sbrc	r19, 7
    25e8:	40 95       	com	r20
    25ea:	54 2f       	mov	r21, r20
    25ec:	82 e0       	ldi	r24, 0x02	; 2
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	a8 0e       	add	r10, r24
    25f2:	b9 1e       	adc	r11, r25
    25f4:	9f e6       	ldi	r25, 0x6F	; 111
    25f6:	f9 22       	and	r15, r25
    25f8:	57 ff       	sbrs	r21, 7
    25fa:	09 c0       	rjmp	.+18     	; 0x260e <vfprintf+0x21e>
    25fc:	50 95       	com	r21
    25fe:	40 95       	com	r20
    2600:	30 95       	com	r19
    2602:	21 95       	neg	r18
    2604:	3f 4f       	sbci	r19, 0xFF	; 255
    2606:	4f 4f       	sbci	r20, 0xFF	; 255
    2608:	5f 4f       	sbci	r21, 0xFF	; 255
    260a:	e0 e8       	ldi	r30, 0x80	; 128
    260c:	fe 2a       	or	r15, r30
    260e:	ca 01       	movw	r24, r20
    2610:	b9 01       	movw	r22, r18
    2612:	a1 01       	movw	r20, r2
    2614:	2a e0       	ldi	r18, 0x0A	; 10
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	0e 94 17 14 	call	0x282e	; 0x282e <__ultoa_invert>
    261c:	d8 2e       	mov	r13, r24
    261e:	d2 18       	sub	r13, r2
    2620:	40 c0       	rjmp	.+128    	; 0x26a2 <vfprintf+0x2b2>
    2622:	95 37       	cpi	r25, 0x75	; 117
    2624:	29 f4       	brne	.+10     	; 0x2630 <vfprintf+0x240>
    2626:	1f 2d       	mov	r17, r15
    2628:	1f 7e       	andi	r17, 0xEF	; 239
    262a:	2a e0       	ldi	r18, 0x0A	; 10
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	1d c0       	rjmp	.+58     	; 0x266a <vfprintf+0x27a>
    2630:	1f 2d       	mov	r17, r15
    2632:	19 7f       	andi	r17, 0xF9	; 249
    2634:	9f 36       	cpi	r25, 0x6F	; 111
    2636:	61 f0       	breq	.+24     	; 0x2650 <vfprintf+0x260>
    2638:	90 37       	cpi	r25, 0x70	; 112
    263a:	20 f4       	brcc	.+8      	; 0x2644 <vfprintf+0x254>
    263c:	98 35       	cpi	r25, 0x58	; 88
    263e:	09 f0       	breq	.+2      	; 0x2642 <vfprintf+0x252>
    2640:	ac c0       	rjmp	.+344    	; 0x279a <vfprintf+0x3aa>
    2642:	0f c0       	rjmp	.+30     	; 0x2662 <vfprintf+0x272>
    2644:	90 37       	cpi	r25, 0x70	; 112
    2646:	39 f0       	breq	.+14     	; 0x2656 <vfprintf+0x266>
    2648:	98 37       	cpi	r25, 0x78	; 120
    264a:	09 f0       	breq	.+2      	; 0x264e <vfprintf+0x25e>
    264c:	a6 c0       	rjmp	.+332    	; 0x279a <vfprintf+0x3aa>
    264e:	04 c0       	rjmp	.+8      	; 0x2658 <vfprintf+0x268>
    2650:	28 e0       	ldi	r18, 0x08	; 8
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	0a c0       	rjmp	.+20     	; 0x266a <vfprintf+0x27a>
    2656:	10 61       	ori	r17, 0x10	; 16
    2658:	14 fd       	sbrc	r17, 4
    265a:	14 60       	ori	r17, 0x04	; 4
    265c:	20 e1       	ldi	r18, 0x10	; 16
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	04 c0       	rjmp	.+8      	; 0x266a <vfprintf+0x27a>
    2662:	14 fd       	sbrc	r17, 4
    2664:	16 60       	ori	r17, 0x06	; 6
    2666:	20 e1       	ldi	r18, 0x10	; 16
    2668:	32 e0       	ldi	r19, 0x02	; 2
    266a:	17 ff       	sbrs	r17, 7
    266c:	08 c0       	rjmp	.+16     	; 0x267e <vfprintf+0x28e>
    266e:	f5 01       	movw	r30, r10
    2670:	60 81       	ld	r22, Z
    2672:	71 81       	ldd	r23, Z+1	; 0x01
    2674:	82 81       	ldd	r24, Z+2	; 0x02
    2676:	93 81       	ldd	r25, Z+3	; 0x03
    2678:	44 e0       	ldi	r20, 0x04	; 4
    267a:	50 e0       	ldi	r21, 0x00	; 0
    267c:	08 c0       	rjmp	.+16     	; 0x268e <vfprintf+0x29e>
    267e:	f5 01       	movw	r30, r10
    2680:	80 81       	ld	r24, Z
    2682:	91 81       	ldd	r25, Z+1	; 0x01
    2684:	bc 01       	movw	r22, r24
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	42 e0       	ldi	r20, 0x02	; 2
    268c:	50 e0       	ldi	r21, 0x00	; 0
    268e:	a4 0e       	add	r10, r20
    2690:	b5 1e       	adc	r11, r21
    2692:	a1 01       	movw	r20, r2
    2694:	0e 94 17 14 	call	0x282e	; 0x282e <__ultoa_invert>
    2698:	d8 2e       	mov	r13, r24
    269a:	d2 18       	sub	r13, r2
    269c:	8f e7       	ldi	r24, 0x7F	; 127
    269e:	f8 2e       	mov	r15, r24
    26a0:	f1 22       	and	r15, r17
    26a2:	f6 fe       	sbrs	r15, 6
    26a4:	0b c0       	rjmp	.+22     	; 0x26bc <vfprintf+0x2cc>
    26a6:	5e ef       	ldi	r21, 0xFE	; 254
    26a8:	f5 22       	and	r15, r21
    26aa:	d9 14       	cp	r13, r9
    26ac:	38 f4       	brcc	.+14     	; 0x26bc <vfprintf+0x2cc>
    26ae:	f4 fe       	sbrs	r15, 4
    26b0:	07 c0       	rjmp	.+14     	; 0x26c0 <vfprintf+0x2d0>
    26b2:	f2 fc       	sbrc	r15, 2
    26b4:	05 c0       	rjmp	.+10     	; 0x26c0 <vfprintf+0x2d0>
    26b6:	8f ee       	ldi	r24, 0xEF	; 239
    26b8:	f8 22       	and	r15, r24
    26ba:	02 c0       	rjmp	.+4      	; 0x26c0 <vfprintf+0x2d0>
    26bc:	1d 2d       	mov	r17, r13
    26be:	01 c0       	rjmp	.+2      	; 0x26c2 <vfprintf+0x2d2>
    26c0:	19 2d       	mov	r17, r9
    26c2:	f4 fe       	sbrs	r15, 4
    26c4:	0d c0       	rjmp	.+26     	; 0x26e0 <vfprintf+0x2f0>
    26c6:	fe 01       	movw	r30, r28
    26c8:	ed 0d       	add	r30, r13
    26ca:	f1 1d       	adc	r31, r1
    26cc:	80 81       	ld	r24, Z
    26ce:	80 33       	cpi	r24, 0x30	; 48
    26d0:	19 f4       	brne	.+6      	; 0x26d8 <vfprintf+0x2e8>
    26d2:	99 ee       	ldi	r25, 0xE9	; 233
    26d4:	f9 22       	and	r15, r25
    26d6:	08 c0       	rjmp	.+16     	; 0x26e8 <vfprintf+0x2f8>
    26d8:	1f 5f       	subi	r17, 0xFF	; 255
    26da:	f2 fe       	sbrs	r15, 2
    26dc:	05 c0       	rjmp	.+10     	; 0x26e8 <vfprintf+0x2f8>
    26de:	03 c0       	rjmp	.+6      	; 0x26e6 <vfprintf+0x2f6>
    26e0:	8f 2d       	mov	r24, r15
    26e2:	86 78       	andi	r24, 0x86	; 134
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <vfprintf+0x2f8>
    26e6:	1f 5f       	subi	r17, 0xFF	; 255
    26e8:	0f 2d       	mov	r16, r15
    26ea:	f3 fc       	sbrc	r15, 3
    26ec:	14 c0       	rjmp	.+40     	; 0x2716 <vfprintf+0x326>
    26ee:	f0 fe       	sbrs	r15, 0
    26f0:	0f c0       	rjmp	.+30     	; 0x2710 <vfprintf+0x320>
    26f2:	1e 15       	cp	r17, r14
    26f4:	10 f0       	brcs	.+4      	; 0x26fa <vfprintf+0x30a>
    26f6:	9d 2c       	mov	r9, r13
    26f8:	0b c0       	rjmp	.+22     	; 0x2710 <vfprintf+0x320>
    26fa:	9d 2c       	mov	r9, r13
    26fc:	9e 0c       	add	r9, r14
    26fe:	91 1a       	sub	r9, r17
    2700:	1e 2d       	mov	r17, r14
    2702:	06 c0       	rjmp	.+12     	; 0x2710 <vfprintf+0x320>
    2704:	80 e2       	ldi	r24, 0x20	; 32
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	b3 01       	movw	r22, r6
    270a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <fputc>
    270e:	1f 5f       	subi	r17, 0xFF	; 255
    2710:	1e 15       	cp	r17, r14
    2712:	c0 f3       	brcs	.-16     	; 0x2704 <vfprintf+0x314>
    2714:	04 c0       	rjmp	.+8      	; 0x271e <vfprintf+0x32e>
    2716:	1e 15       	cp	r17, r14
    2718:	10 f4       	brcc	.+4      	; 0x271e <vfprintf+0x32e>
    271a:	e1 1a       	sub	r14, r17
    271c:	01 c0       	rjmp	.+2      	; 0x2720 <vfprintf+0x330>
    271e:	ee 24       	eor	r14, r14
    2720:	04 ff       	sbrs	r16, 4
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <vfprintf+0x352>
    2724:	80 e3       	ldi	r24, 0x30	; 48
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	b3 01       	movw	r22, r6
    272a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <fputc>
    272e:	02 ff       	sbrs	r16, 2
    2730:	1d c0       	rjmp	.+58     	; 0x276c <vfprintf+0x37c>
    2732:	01 fd       	sbrc	r16, 1
    2734:	03 c0       	rjmp	.+6      	; 0x273c <vfprintf+0x34c>
    2736:	88 e7       	ldi	r24, 0x78	; 120
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	0e c0       	rjmp	.+28     	; 0x2758 <vfprintf+0x368>
    273c:	88 e5       	ldi	r24, 0x58	; 88
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0b c0       	rjmp	.+22     	; 0x2758 <vfprintf+0x368>
    2742:	80 2f       	mov	r24, r16
    2744:	86 78       	andi	r24, 0x86	; 134
    2746:	91 f0       	breq	.+36     	; 0x276c <vfprintf+0x37c>
    2748:	01 ff       	sbrs	r16, 1
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <vfprintf+0x360>
    274c:	8b e2       	ldi	r24, 0x2B	; 43
    274e:	01 c0       	rjmp	.+2      	; 0x2752 <vfprintf+0x362>
    2750:	80 e2       	ldi	r24, 0x20	; 32
    2752:	f7 fc       	sbrc	r15, 7
    2754:	8d e2       	ldi	r24, 0x2D	; 45
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	b3 01       	movw	r22, r6
    275a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <fputc>
    275e:	06 c0       	rjmp	.+12     	; 0x276c <vfprintf+0x37c>
    2760:	80 e3       	ldi	r24, 0x30	; 48
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	b3 01       	movw	r22, r6
    2766:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <fputc>
    276a:	9a 94       	dec	r9
    276c:	d9 14       	cp	r13, r9
    276e:	c0 f3       	brcs	.-16     	; 0x2760 <vfprintf+0x370>
    2770:	da 94       	dec	r13
    2772:	f1 01       	movw	r30, r2
    2774:	ed 0d       	add	r30, r13
    2776:	f1 1d       	adc	r31, r1
    2778:	80 81       	ld	r24, Z
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	b3 01       	movw	r22, r6
    277e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <fputc>
    2782:	dd 20       	and	r13, r13
    2784:	a9 f7       	brne	.-22     	; 0x2770 <vfprintf+0x380>
    2786:	06 c0       	rjmp	.+12     	; 0x2794 <vfprintf+0x3a4>
    2788:	80 e2       	ldi	r24, 0x20	; 32
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	b3 01       	movw	r22, r6
    278e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <fputc>
    2792:	ea 94       	dec	r14
    2794:	ee 20       	and	r14, r14
    2796:	c1 f7       	brne	.-16     	; 0x2788 <vfprintf+0x398>
    2798:	43 ce       	rjmp	.-890    	; 0x2420 <vfprintf+0x30>
    279a:	f3 01       	movw	r30, r6
    279c:	66 81       	ldd	r22, Z+6	; 0x06
    279e:	77 81       	ldd	r23, Z+7	; 0x07
    27a0:	cb 01       	movw	r24, r22
    27a2:	2b 96       	adiw	r28, 0x0b	; 11
    27a4:	e2 e1       	ldi	r30, 0x12	; 18
    27a6:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__epilogue_restores__>

000027aa <strnlen_P>:
    27aa:	fc 01       	movw	r30, r24
    27ac:	05 90       	lpm	r0, Z+
    27ae:	61 50       	subi	r22, 0x01	; 1
    27b0:	70 40       	sbci	r23, 0x00	; 0
    27b2:	01 10       	cpse	r0, r1
    27b4:	d8 f7       	brcc	.-10     	; 0x27ac <strnlen_P+0x2>
    27b6:	80 95       	com	r24
    27b8:	90 95       	com	r25
    27ba:	8e 0f       	add	r24, r30
    27bc:	9f 1f       	adc	r25, r31
    27be:	08 95       	ret

000027c0 <strnlen>:
    27c0:	fc 01       	movw	r30, r24
    27c2:	61 50       	subi	r22, 0x01	; 1
    27c4:	70 40       	sbci	r23, 0x00	; 0
    27c6:	01 90       	ld	r0, Z+
    27c8:	01 10       	cpse	r0, r1
    27ca:	d8 f7       	brcc	.-10     	; 0x27c2 <strnlen+0x2>
    27cc:	80 95       	com	r24
    27ce:	90 95       	com	r25
    27d0:	8e 0f       	add	r24, r30
    27d2:	9f 1f       	adc	r25, r31
    27d4:	08 95       	ret

000027d6 <fputc>:
    27d6:	0f 93       	push	r16
    27d8:	1f 93       	push	r17
    27da:	cf 93       	push	r28
    27dc:	df 93       	push	r29
    27de:	8c 01       	movw	r16, r24
    27e0:	eb 01       	movw	r28, r22
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	81 ff       	sbrs	r24, 1
    27e6:	1b c0       	rjmp	.+54     	; 0x281e <fputc+0x48>
    27e8:	82 ff       	sbrs	r24, 2
    27ea:	0d c0       	rjmp	.+26     	; 0x2806 <fputc+0x30>
    27ec:	2e 81       	ldd	r18, Y+6	; 0x06
    27ee:	3f 81       	ldd	r19, Y+7	; 0x07
    27f0:	8c 81       	ldd	r24, Y+4	; 0x04
    27f2:	9d 81       	ldd	r25, Y+5	; 0x05
    27f4:	28 17       	cp	r18, r24
    27f6:	39 07       	cpc	r19, r25
    27f8:	64 f4       	brge	.+24     	; 0x2812 <fputc+0x3c>
    27fa:	e8 81       	ld	r30, Y
    27fc:	f9 81       	ldd	r31, Y+1	; 0x01
    27fe:	01 93       	st	Z+, r16
    2800:	f9 83       	std	Y+1, r31	; 0x01
    2802:	e8 83       	st	Y, r30
    2804:	06 c0       	rjmp	.+12     	; 0x2812 <fputc+0x3c>
    2806:	e8 85       	ldd	r30, Y+8	; 0x08
    2808:	f9 85       	ldd	r31, Y+9	; 0x09
    280a:	80 2f       	mov	r24, r16
    280c:	09 95       	icall
    280e:	89 2b       	or	r24, r25
    2810:	31 f4       	brne	.+12     	; 0x281e <fputc+0x48>
    2812:	8e 81       	ldd	r24, Y+6	; 0x06
    2814:	9f 81       	ldd	r25, Y+7	; 0x07
    2816:	01 96       	adiw	r24, 0x01	; 1
    2818:	9f 83       	std	Y+7, r25	; 0x07
    281a:	8e 83       	std	Y+6, r24	; 0x06
    281c:	02 c0       	rjmp	.+4      	; 0x2822 <fputc+0x4c>
    281e:	0f ef       	ldi	r16, 0xFF	; 255
    2820:	1f ef       	ldi	r17, 0xFF	; 255
    2822:	c8 01       	movw	r24, r16
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	08 95       	ret

0000282e <__ultoa_invert>:
    282e:	fa 01       	movw	r30, r20
    2830:	aa 27       	eor	r26, r26
    2832:	28 30       	cpi	r18, 0x08	; 8
    2834:	51 f1       	breq	.+84     	; 0x288a <__ultoa_invert+0x5c>
    2836:	20 31       	cpi	r18, 0x10	; 16
    2838:	81 f1       	breq	.+96     	; 0x289a <__ultoa_invert+0x6c>
    283a:	e8 94       	clt
    283c:	6f 93       	push	r22
    283e:	6e 7f       	andi	r22, 0xFE	; 254
    2840:	6e 5f       	subi	r22, 0xFE	; 254
    2842:	7f 4f       	sbci	r23, 0xFF	; 255
    2844:	8f 4f       	sbci	r24, 0xFF	; 255
    2846:	9f 4f       	sbci	r25, 0xFF	; 255
    2848:	af 4f       	sbci	r26, 0xFF	; 255
    284a:	b1 e0       	ldi	r27, 0x01	; 1
    284c:	3e d0       	rcall	.+124    	; 0x28ca <__ultoa_invert+0x9c>
    284e:	b4 e0       	ldi	r27, 0x04	; 4
    2850:	3c d0       	rcall	.+120    	; 0x28ca <__ultoa_invert+0x9c>
    2852:	67 0f       	add	r22, r23
    2854:	78 1f       	adc	r23, r24
    2856:	89 1f       	adc	r24, r25
    2858:	9a 1f       	adc	r25, r26
    285a:	a1 1d       	adc	r26, r1
    285c:	68 0f       	add	r22, r24
    285e:	79 1f       	adc	r23, r25
    2860:	8a 1f       	adc	r24, r26
    2862:	91 1d       	adc	r25, r1
    2864:	a1 1d       	adc	r26, r1
    2866:	6a 0f       	add	r22, r26
    2868:	71 1d       	adc	r23, r1
    286a:	81 1d       	adc	r24, r1
    286c:	91 1d       	adc	r25, r1
    286e:	a1 1d       	adc	r26, r1
    2870:	20 d0       	rcall	.+64     	; 0x28b2 <__ultoa_invert+0x84>
    2872:	09 f4       	brne	.+2      	; 0x2876 <__ultoa_invert+0x48>
    2874:	68 94       	set
    2876:	3f 91       	pop	r19
    2878:	2a e0       	ldi	r18, 0x0A	; 10
    287a:	26 9f       	mul	r18, r22
    287c:	11 24       	eor	r1, r1
    287e:	30 19       	sub	r19, r0
    2880:	30 5d       	subi	r19, 0xD0	; 208
    2882:	31 93       	st	Z+, r19
    2884:	de f6       	brtc	.-74     	; 0x283c <__ultoa_invert+0xe>
    2886:	cf 01       	movw	r24, r30
    2888:	08 95       	ret
    288a:	46 2f       	mov	r20, r22
    288c:	47 70       	andi	r20, 0x07	; 7
    288e:	40 5d       	subi	r20, 0xD0	; 208
    2890:	41 93       	st	Z+, r20
    2892:	b3 e0       	ldi	r27, 0x03	; 3
    2894:	0f d0       	rcall	.+30     	; 0x28b4 <__ultoa_invert+0x86>
    2896:	c9 f7       	brne	.-14     	; 0x288a <__ultoa_invert+0x5c>
    2898:	f6 cf       	rjmp	.-20     	; 0x2886 <__ultoa_invert+0x58>
    289a:	46 2f       	mov	r20, r22
    289c:	4f 70       	andi	r20, 0x0F	; 15
    289e:	40 5d       	subi	r20, 0xD0	; 208
    28a0:	4a 33       	cpi	r20, 0x3A	; 58
    28a2:	18 f0       	brcs	.+6      	; 0x28aa <__ultoa_invert+0x7c>
    28a4:	49 5d       	subi	r20, 0xD9	; 217
    28a6:	31 fd       	sbrc	r19, 1
    28a8:	40 52       	subi	r20, 0x20	; 32
    28aa:	41 93       	st	Z+, r20
    28ac:	02 d0       	rcall	.+4      	; 0x28b2 <__ultoa_invert+0x84>
    28ae:	a9 f7       	brne	.-22     	; 0x289a <__ultoa_invert+0x6c>
    28b0:	ea cf       	rjmp	.-44     	; 0x2886 <__ultoa_invert+0x58>
    28b2:	b4 e0       	ldi	r27, 0x04	; 4
    28b4:	a6 95       	lsr	r26
    28b6:	97 95       	ror	r25
    28b8:	87 95       	ror	r24
    28ba:	77 95       	ror	r23
    28bc:	67 95       	ror	r22
    28be:	ba 95       	dec	r27
    28c0:	c9 f7       	brne	.-14     	; 0x28b4 <__ultoa_invert+0x86>
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	61 05       	cpc	r22, r1
    28c6:	71 05       	cpc	r23, r1
    28c8:	08 95       	ret
    28ca:	9b 01       	movw	r18, r22
    28cc:	ac 01       	movw	r20, r24
    28ce:	0a 2e       	mov	r0, r26
    28d0:	06 94       	lsr	r0
    28d2:	57 95       	ror	r21
    28d4:	47 95       	ror	r20
    28d6:	37 95       	ror	r19
    28d8:	27 95       	ror	r18
    28da:	ba 95       	dec	r27
    28dc:	c9 f7       	brne	.-14     	; 0x28d0 <__ultoa_invert+0xa2>
    28de:	62 0f       	add	r22, r18
    28e0:	73 1f       	adc	r23, r19
    28e2:	84 1f       	adc	r24, r20
    28e4:	95 1f       	adc	r25, r21
    28e6:	a0 1d       	adc	r26, r0
    28e8:	08 95       	ret

000028ea <_exit>:
    28ea:	f8 94       	cli

000028ec <__stop_program>:
    28ec:	ff cf       	rjmp	.-2      	; 0x28ec <__stop_program>
