
xyz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b62  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002b62  00002bd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002838  00000000  00000000  00002be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ded  00000000  00000000  00005418  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006205  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006345  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000064b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3f  00000000  00000000  00008fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c6  00000000  00000000  00009e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a14e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a91c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d4 e0       	ldi	r29, 0x04	; 4
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	e2 e6       	ldi	r30, 0x62	; 98
      a8:	fb e2       	ldi	r31, 0x2B	; 43
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
      b0:	a8 36       	cpi	r26, 0x68	; 104
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>
      b6:	0e 94 98 00 	call	0x130	; 0x130 <main>
      ba:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <read_adc>:

#define ADC_VREF_TYPE 0x00

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	0f 92       	push	r0
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
      cc:	89 83       	std	Y+1, r24	; 0x01
ADMUX=adc_input|ADC_VREF_TYPE;
      ce:	e7 e2       	ldi	r30, 0x27	; 39
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	89 81       	ldd	r24, Y+1	; 0x01
      d4:	80 83       	st	Z, r24
// Start the AD conversion
ADCSRA|=0x40;
      d6:	a6 e2       	ldi	r26, 0x26	; 38
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e6 e2       	ldi	r30, 0x26	; 38
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	80 64       	ori	r24, 0x40	; 64
      e2:	8c 93       	st	X, r24
// Wait for the AD conversion to complete
while ((ADCSRA & 0x10)==0);
      e4:	e6 e2       	ldi	r30, 0x26	; 38
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	88 2f       	mov	r24, r24
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	80 71       	andi	r24, 0x10	; 16
      f0:	90 70       	andi	r25, 0x00	; 0
      f2:	00 97       	sbiw	r24, 0x00	; 0
      f4:	b9 f3       	breq	.-18     	; 0xe4 <read_adc+0x22>
ADCSRA|=0x10;
      f6:	a6 e2       	ldi	r26, 0x26	; 38
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e6 e2       	ldi	r30, 0x26	; 38
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	80 81       	ld	r24, Z
     100:	80 61       	ori	r24, 0x10	; 16
     102:	8c 93       	st	X, r24
return ADCW;
     104:	e4 e2       	ldi	r30, 0x24	; 36
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	80 81       	ld	r24, Z
     10a:	91 81       	ldd	r25, Z+1	; 0x01
}
     10c:	0f 90       	pop	r0
     10e:	cf 91       	pop	r28
     110:	df 91       	pop	r29
     112:	08 95       	ret

00000114 <ADCinit>:




void ADCinit()
{
     114:	df 93       	push	r29
     116:	cf 93       	push	r28
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
ADMUX=0b00000000;
     11c:	e7 e2       	ldi	r30, 0x27	; 39
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	10 82       	st	Z, r1
ADCSRA=0x85;
     122:	e6 e2       	ldi	r30, 0x26	; 38
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	85 e8       	ldi	r24, 0x85	; 133
     128:	80 83       	st	Z, r24
}
     12a:	cf 91       	pop	r28
     12c:	df 91       	pop	r29
     12e:	08 95       	ret

00000130 <main>:
#include <avr/io.h>
#include <util/delay.h>

main() {
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	df 93       	push	r29
     136:	cf 93       	push	r28
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
     13c:	c0 57       	subi	r28, 0x70	; 112
     13e:	d0 40       	sbci	r29, 0x00	; 0
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
	DDRB=255;
     14a:	e7 e3       	ldi	r30, 0x37	; 55
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	8f ef       	ldi	r24, 0xFF	; 255
     150:	80 83       	st	Z, r24

	while(1){
	PORTB=1;_delay_ms(100);
     152:	e8 e3       	ldi	r30, 0x38	; 56
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	80 83       	st	Z, r24
     15a:	fe 01       	movw	r30, r28
     15c:	e3 59       	subi	r30, 0x93	; 147
     15e:	ff 4f       	sbci	r31, 0xFF	; 255
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	a8 ec       	ldi	r26, 0xC8	; 200
     166:	b2 e4       	ldi	r27, 0x42	; 66
     168:	80 83       	st	Z, r24
     16a:	91 83       	std	Z+1, r25	; 0x01
     16c:	a2 83       	std	Z+2, r26	; 0x02
     16e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     170:	8e 01       	movw	r16, r28
     172:	07 59       	subi	r16, 0x97	; 151
     174:	1f 4f       	sbci	r17, 0xFF	; 255
     176:	fe 01       	movw	r30, r28
     178:	e3 59       	subi	r30, 0x93	; 147
     17a:	ff 4f       	sbci	r31, 0xFF	; 255
     17c:	60 81       	ld	r22, Z
     17e:	71 81       	ldd	r23, Z+1	; 0x01
     180:	82 81       	ldd	r24, Z+2	; 0x02
     182:	93 81       	ldd	r25, Z+3	; 0x03
     184:	20 e0       	ldi	r18, 0x00	; 0
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	4a e7       	ldi	r20, 0x7A	; 122
     18a:	54 e4       	ldi	r21, 0x44	; 68
     18c:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     190:	dc 01       	movw	r26, r24
     192:	cb 01       	movw	r24, r22
     194:	f8 01       	movw	r30, r16
     196:	80 83       	st	Z, r24
     198:	91 83       	std	Z+1, r25	; 0x01
     19a:	a2 83       	std	Z+2, r26	; 0x02
     19c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     19e:	fe 01       	movw	r30, r28
     1a0:	e7 59       	subi	r30, 0x97	; 151
     1a2:	ff 4f       	sbci	r31, 0xFF	; 255
     1a4:	60 81       	ld	r22, Z
     1a6:	71 81       	ldd	r23, Z+1	; 0x01
     1a8:	82 81       	ldd	r24, Z+2	; 0x02
     1aa:	93 81       	ldd	r25, Z+3	; 0x03
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e8       	ldi	r20, 0x80	; 128
     1b2:	5f e3       	ldi	r21, 0x3F	; 63
     1b4:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
     1b8:	88 23       	and	r24, r24
     1ba:	44 f4       	brge	.+16     	; 0x1cc <main+0x9c>
		__ticks = 1;
     1bc:	fe 01       	movw	r30, r28
     1be:	e9 59       	subi	r30, 0x99	; 153
     1c0:	ff 4f       	sbci	r31, 0xFF	; 255
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	91 83       	std	Z+1, r25	; 0x01
     1c8:	80 83       	st	Z, r24
     1ca:	64 c0       	rjmp	.+200    	; 0x294 <main+0x164>
	else if (__tmp > 65535)
     1cc:	fe 01       	movw	r30, r28
     1ce:	e7 59       	subi	r30, 0x97	; 151
     1d0:	ff 4f       	sbci	r31, 0xFF	; 255
     1d2:	60 81       	ld	r22, Z
     1d4:	71 81       	ldd	r23, Z+1	; 0x01
     1d6:	82 81       	ldd	r24, Z+2	; 0x02
     1d8:	93 81       	ldd	r25, Z+3	; 0x03
     1da:	20 e0       	ldi	r18, 0x00	; 0
     1dc:	3f ef       	ldi	r19, 0xFF	; 255
     1de:	4f e7       	ldi	r20, 0x7F	; 127
     1e0:	57 e4       	ldi	r21, 0x47	; 71
     1e2:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
     1e6:	18 16       	cp	r1, r24
     1e8:	0c f0       	brlt	.+2      	; 0x1ec <main+0xbc>
     1ea:	43 c0       	rjmp	.+134    	; 0x272 <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1ec:	fe 01       	movw	r30, r28
     1ee:	e3 59       	subi	r30, 0x93	; 147
     1f0:	ff 4f       	sbci	r31, 0xFF	; 255
     1f2:	60 81       	ld	r22, Z
     1f4:	71 81       	ldd	r23, Z+1	; 0x01
     1f6:	82 81       	ldd	r24, Z+2	; 0x02
     1f8:	93 81       	ldd	r25, Z+3	; 0x03
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e2       	ldi	r20, 0x20	; 32
     200:	51 e4       	ldi	r21, 0x41	; 65
     202:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     206:	dc 01       	movw	r26, r24
     208:	cb 01       	movw	r24, r22
     20a:	8e 01       	movw	r16, r28
     20c:	09 59       	subi	r16, 0x99	; 153
     20e:	1f 4f       	sbci	r17, 0xFF	; 255
     210:	bc 01       	movw	r22, r24
     212:	cd 01       	movw	r24, r26
     214:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     218:	dc 01       	movw	r26, r24
     21a:	cb 01       	movw	r24, r22
     21c:	f8 01       	movw	r30, r16
     21e:	91 83       	std	Z+1, r25	; 0x01
     220:	80 83       	st	Z, r24
     222:	1f c0       	rjmp	.+62     	; 0x262 <main+0x132>
     224:	fe 01       	movw	r30, r28
     226:	eb 59       	subi	r30, 0x9B	; 155
     228:	ff 4f       	sbci	r31, 0xFF	; 255
     22a:	84 e6       	ldi	r24, 0x64	; 100
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	91 83       	std	Z+1, r25	; 0x01
     230:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     232:	fe 01       	movw	r30, r28
     234:	eb 59       	subi	r30, 0x9B	; 155
     236:	ff 4f       	sbci	r31, 0xFF	; 255
     238:	80 81       	ld	r24, Z
     23a:	91 81       	ldd	r25, Z+1	; 0x01
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	f1 f7       	brne	.-4      	; 0x23c <main+0x10c>
     240:	fe 01       	movw	r30, r28
     242:	eb 59       	subi	r30, 0x9B	; 155
     244:	ff 4f       	sbci	r31, 0xFF	; 255
     246:	91 83       	std	Z+1, r25	; 0x01
     248:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     24a:	de 01       	movw	r26, r28
     24c:	a9 59       	subi	r26, 0x99	; 153
     24e:	bf 4f       	sbci	r27, 0xFF	; 255
     250:	fe 01       	movw	r30, r28
     252:	e9 59       	subi	r30, 0x99	; 153
     254:	ff 4f       	sbci	r31, 0xFF	; 255
     256:	80 81       	ld	r24, Z
     258:	91 81       	ldd	r25, Z+1	; 0x01
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	11 96       	adiw	r26, 0x01	; 1
     25e:	9c 93       	st	X, r25
     260:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     262:	fe 01       	movw	r30, r28
     264:	e9 59       	subi	r30, 0x99	; 153
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	80 81       	ld	r24, Z
     26a:	91 81       	ldd	r25, Z+1	; 0x01
     26c:	00 97       	sbiw	r24, 0x00	; 0
     26e:	d1 f6       	brne	.-76     	; 0x224 <main+0xf4>
     270:	27 c0       	rjmp	.+78     	; 0x2c0 <main+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     272:	8e 01       	movw	r16, r28
     274:	09 59       	subi	r16, 0x99	; 153
     276:	1f 4f       	sbci	r17, 0xFF	; 255
     278:	fe 01       	movw	r30, r28
     27a:	e7 59       	subi	r30, 0x97	; 151
     27c:	ff 4f       	sbci	r31, 0xFF	; 255
     27e:	60 81       	ld	r22, Z
     280:	71 81       	ldd	r23, Z+1	; 0x01
     282:	82 81       	ldd	r24, Z+2	; 0x02
     284:	93 81       	ldd	r25, Z+3	; 0x03
     286:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     28a:	dc 01       	movw	r26, r24
     28c:	cb 01       	movw	r24, r22
     28e:	f8 01       	movw	r30, r16
     290:	91 83       	std	Z+1, r25	; 0x01
     292:	80 83       	st	Z, r24
     294:	de 01       	movw	r26, r28
     296:	ad 59       	subi	r26, 0x9D	; 157
     298:	bf 4f       	sbci	r27, 0xFF	; 255
     29a:	fe 01       	movw	r30, r28
     29c:	e9 59       	subi	r30, 0x99	; 153
     29e:	ff 4f       	sbci	r31, 0xFF	; 255
     2a0:	80 81       	ld	r24, Z
     2a2:	91 81       	ldd	r25, Z+1	; 0x01
     2a4:	8d 93       	st	X+, r24
     2a6:	9c 93       	st	X, r25
     2a8:	fe 01       	movw	r30, r28
     2aa:	ed 59       	subi	r30, 0x9D	; 157
     2ac:	ff 4f       	sbci	r31, 0xFF	; 255
     2ae:	80 81       	ld	r24, Z
     2b0:	91 81       	ldd	r25, Z+1	; 0x01
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <main+0x182>
     2b6:	fe 01       	movw	r30, r28
     2b8:	ed 59       	subi	r30, 0x9D	; 157
     2ba:	ff 4f       	sbci	r31, 0xFF	; 255
     2bc:	91 83       	std	Z+1, r25	; 0x01
     2be:	80 83       	st	Z, r24
	PORTB=2;_delay_ms(100);
     2c0:	e8 e3       	ldi	r30, 0x38	; 56
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	82 e0       	ldi	r24, 0x02	; 2
     2c6:	80 83       	st	Z, r24
     2c8:	fe 01       	movw	r30, r28
     2ca:	e1 5a       	subi	r30, 0xA1	; 161
     2cc:	ff 4f       	sbci	r31, 0xFF	; 255
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	a8 ec       	ldi	r26, 0xC8	; 200
     2d4:	b2 e4       	ldi	r27, 0x42	; 66
     2d6:	80 83       	st	Z, r24
     2d8:	91 83       	std	Z+1, r25	; 0x01
     2da:	a2 83       	std	Z+2, r26	; 0x02
     2dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2de:	8e 01       	movw	r16, r28
     2e0:	05 5a       	subi	r16, 0xA5	; 165
     2e2:	1f 4f       	sbci	r17, 0xFF	; 255
     2e4:	fe 01       	movw	r30, r28
     2e6:	e1 5a       	subi	r30, 0xA1	; 161
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	60 81       	ld	r22, Z
     2ec:	71 81       	ldd	r23, Z+1	; 0x01
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	4a e7       	ldi	r20, 0x7A	; 122
     2f8:	54 e4       	ldi	r21, 0x44	; 68
     2fa:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     2fe:	dc 01       	movw	r26, r24
     300:	cb 01       	movw	r24, r22
     302:	f8 01       	movw	r30, r16
     304:	80 83       	st	Z, r24
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	a2 83       	std	Z+2, r26	; 0x02
     30a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     30c:	fe 01       	movw	r30, r28
     30e:	e5 5a       	subi	r30, 0xA5	; 165
     310:	ff 4f       	sbci	r31, 0xFF	; 255
     312:	60 81       	ld	r22, Z
     314:	71 81       	ldd	r23, Z+1	; 0x01
     316:	82 81       	ldd	r24, Z+2	; 0x02
     318:	93 81       	ldd	r25, Z+3	; 0x03
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e8       	ldi	r20, 0x80	; 128
     320:	5f e3       	ldi	r21, 0x3F	; 63
     322:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
     326:	88 23       	and	r24, r24
     328:	44 f4       	brge	.+16     	; 0x33a <main+0x20a>
		__ticks = 1;
     32a:	fe 01       	movw	r30, r28
     32c:	e7 5a       	subi	r30, 0xA7	; 167
     32e:	ff 4f       	sbci	r31, 0xFF	; 255
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	91 83       	std	Z+1, r25	; 0x01
     336:	80 83       	st	Z, r24
     338:	64 c0       	rjmp	.+200    	; 0x402 <main+0x2d2>
	else if (__tmp > 65535)
     33a:	fe 01       	movw	r30, r28
     33c:	e5 5a       	subi	r30, 0xA5	; 165
     33e:	ff 4f       	sbci	r31, 0xFF	; 255
     340:	60 81       	ld	r22, Z
     342:	71 81       	ldd	r23, Z+1	; 0x01
     344:	82 81       	ldd	r24, Z+2	; 0x02
     346:	93 81       	ldd	r25, Z+3	; 0x03
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	3f ef       	ldi	r19, 0xFF	; 255
     34c:	4f e7       	ldi	r20, 0x7F	; 127
     34e:	57 e4       	ldi	r21, 0x47	; 71
     350:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
     354:	18 16       	cp	r1, r24
     356:	0c f0       	brlt	.+2      	; 0x35a <main+0x22a>
     358:	43 c0       	rjmp	.+134    	; 0x3e0 <main+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     35a:	fe 01       	movw	r30, r28
     35c:	e1 5a       	subi	r30, 0xA1	; 161
     35e:	ff 4f       	sbci	r31, 0xFF	; 255
     360:	60 81       	ld	r22, Z
     362:	71 81       	ldd	r23, Z+1	; 0x01
     364:	82 81       	ldd	r24, Z+2	; 0x02
     366:	93 81       	ldd	r25, Z+3	; 0x03
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	40 e2       	ldi	r20, 0x20	; 32
     36e:	51 e4       	ldi	r21, 0x41	; 65
     370:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     374:	dc 01       	movw	r26, r24
     376:	cb 01       	movw	r24, r22
     378:	8e 01       	movw	r16, r28
     37a:	07 5a       	subi	r16, 0xA7	; 167
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
     37e:	bc 01       	movw	r22, r24
     380:	cd 01       	movw	r24, r26
     382:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     386:	dc 01       	movw	r26, r24
     388:	cb 01       	movw	r24, r22
     38a:	f8 01       	movw	r30, r16
     38c:	91 83       	std	Z+1, r25	; 0x01
     38e:	80 83       	st	Z, r24
     390:	1f c0       	rjmp	.+62     	; 0x3d0 <main+0x2a0>
     392:	fe 01       	movw	r30, r28
     394:	e9 5a       	subi	r30, 0xA9	; 169
     396:	ff 4f       	sbci	r31, 0xFF	; 255
     398:	84 e6       	ldi	r24, 0x64	; 100
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	80 83       	st	Z, r24
     3a0:	fe 01       	movw	r30, r28
     3a2:	e9 5a       	subi	r30, 0xA9	; 169
     3a4:	ff 4f       	sbci	r31, 0xFF	; 255
     3a6:	80 81       	ld	r24, Z
     3a8:	91 81       	ldd	r25, Z+1	; 0x01
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <main+0x27a>
     3ae:	fe 01       	movw	r30, r28
     3b0:	e9 5a       	subi	r30, 0xA9	; 169
     3b2:	ff 4f       	sbci	r31, 0xFF	; 255
     3b4:	91 83       	std	Z+1, r25	; 0x01
     3b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3b8:	de 01       	movw	r26, r28
     3ba:	a7 5a       	subi	r26, 0xA7	; 167
     3bc:	bf 4f       	sbci	r27, 0xFF	; 255
     3be:	fe 01       	movw	r30, r28
     3c0:	e7 5a       	subi	r30, 0xA7	; 167
     3c2:	ff 4f       	sbci	r31, 0xFF	; 255
     3c4:	80 81       	ld	r24, Z
     3c6:	91 81       	ldd	r25, Z+1	; 0x01
     3c8:	01 97       	sbiw	r24, 0x01	; 1
     3ca:	11 96       	adiw	r26, 0x01	; 1
     3cc:	9c 93       	st	X, r25
     3ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3d0:	fe 01       	movw	r30, r28
     3d2:	e7 5a       	subi	r30, 0xA7	; 167
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	80 81       	ld	r24, Z
     3d8:	91 81       	ldd	r25, Z+1	; 0x01
     3da:	00 97       	sbiw	r24, 0x00	; 0
     3dc:	d1 f6       	brne	.-76     	; 0x392 <main+0x262>
     3de:	27 c0       	rjmp	.+78     	; 0x42e <main+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3e0:	8e 01       	movw	r16, r28
     3e2:	07 5a       	subi	r16, 0xA7	; 167
     3e4:	1f 4f       	sbci	r17, 0xFF	; 255
     3e6:	fe 01       	movw	r30, r28
     3e8:	e5 5a       	subi	r30, 0xA5	; 165
     3ea:	ff 4f       	sbci	r31, 0xFF	; 255
     3ec:	60 81       	ld	r22, Z
     3ee:	71 81       	ldd	r23, Z+1	; 0x01
     3f0:	82 81       	ldd	r24, Z+2	; 0x02
     3f2:	93 81       	ldd	r25, Z+3	; 0x03
     3f4:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	f8 01       	movw	r30, r16
     3fe:	91 83       	std	Z+1, r25	; 0x01
     400:	80 83       	st	Z, r24
     402:	de 01       	movw	r26, r28
     404:	ab 5a       	subi	r26, 0xAB	; 171
     406:	bf 4f       	sbci	r27, 0xFF	; 255
     408:	fe 01       	movw	r30, r28
     40a:	e7 5a       	subi	r30, 0xA7	; 167
     40c:	ff 4f       	sbci	r31, 0xFF	; 255
     40e:	80 81       	ld	r24, Z
     410:	91 81       	ldd	r25, Z+1	; 0x01
     412:	8d 93       	st	X+, r24
     414:	9c 93       	st	X, r25
     416:	fe 01       	movw	r30, r28
     418:	eb 5a       	subi	r30, 0xAB	; 171
     41a:	ff 4f       	sbci	r31, 0xFF	; 255
     41c:	80 81       	ld	r24, Z
     41e:	91 81       	ldd	r25, Z+1	; 0x01
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	f1 f7       	brne	.-4      	; 0x420 <main+0x2f0>
     424:	fe 01       	movw	r30, r28
     426:	eb 5a       	subi	r30, 0xAB	; 171
     428:	ff 4f       	sbci	r31, 0xFF	; 255
     42a:	91 83       	std	Z+1, r25	; 0x01
     42c:	80 83       	st	Z, r24
	PORTB=4;_delay_ms(100);
     42e:	e8 e3       	ldi	r30, 0x38	; 56
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	84 e0       	ldi	r24, 0x04	; 4
     434:	80 83       	st	Z, r24
     436:	fe 01       	movw	r30, r28
     438:	ef 5a       	subi	r30, 0xAF	; 175
     43a:	ff 4f       	sbci	r31, 0xFF	; 255
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	a8 ec       	ldi	r26, 0xC8	; 200
     442:	b2 e4       	ldi	r27, 0x42	; 66
     444:	80 83       	st	Z, r24
     446:	91 83       	std	Z+1, r25	; 0x01
     448:	a2 83       	std	Z+2, r26	; 0x02
     44a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     44c:	8e 01       	movw	r16, r28
     44e:	03 5b       	subi	r16, 0xB3	; 179
     450:	1f 4f       	sbci	r17, 0xFF	; 255
     452:	fe 01       	movw	r30, r28
     454:	ef 5a       	subi	r30, 0xAF	; 175
     456:	ff 4f       	sbci	r31, 0xFF	; 255
     458:	60 81       	ld	r22, Z
     45a:	71 81       	ldd	r23, Z+1	; 0x01
     45c:	82 81       	ldd	r24, Z+2	; 0x02
     45e:	93 81       	ldd	r25, Z+3	; 0x03
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	4a e7       	ldi	r20, 0x7A	; 122
     466:	54 e4       	ldi	r21, 0x44	; 68
     468:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     46c:	dc 01       	movw	r26, r24
     46e:	cb 01       	movw	r24, r22
     470:	f8 01       	movw	r30, r16
     472:	80 83       	st	Z, r24
     474:	91 83       	std	Z+1, r25	; 0x01
     476:	a2 83       	std	Z+2, r26	; 0x02
     478:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     47a:	fe 01       	movw	r30, r28
     47c:	e3 5b       	subi	r30, 0xB3	; 179
     47e:	ff 4f       	sbci	r31, 0xFF	; 255
     480:	60 81       	ld	r22, Z
     482:	71 81       	ldd	r23, Z+1	; 0x01
     484:	82 81       	ldd	r24, Z+2	; 0x02
     486:	93 81       	ldd	r25, Z+3	; 0x03
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e8       	ldi	r20, 0x80	; 128
     48e:	5f e3       	ldi	r21, 0x3F	; 63
     490:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
     494:	88 23       	and	r24, r24
     496:	44 f4       	brge	.+16     	; 0x4a8 <__stack+0x49>
		__ticks = 1;
     498:	fe 01       	movw	r30, r28
     49a:	e5 5b       	subi	r30, 0xB5	; 181
     49c:	ff 4f       	sbci	r31, 0xFF	; 255
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	91 83       	std	Z+1, r25	; 0x01
     4a4:	80 83       	st	Z, r24
     4a6:	64 c0       	rjmp	.+200    	; 0x570 <__stack+0x111>
	else if (__tmp > 65535)
     4a8:	fe 01       	movw	r30, r28
     4aa:	e3 5b       	subi	r30, 0xB3	; 179
     4ac:	ff 4f       	sbci	r31, 0xFF	; 255
     4ae:	60 81       	ld	r22, Z
     4b0:	71 81       	ldd	r23, Z+1	; 0x01
     4b2:	82 81       	ldd	r24, Z+2	; 0x02
     4b4:	93 81       	ldd	r25, Z+3	; 0x03
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	3f ef       	ldi	r19, 0xFF	; 255
     4ba:	4f e7       	ldi	r20, 0x7F	; 127
     4bc:	57 e4       	ldi	r21, 0x47	; 71
     4be:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
     4c2:	18 16       	cp	r1, r24
     4c4:	0c f0       	brlt	.+2      	; 0x4c8 <__stack+0x69>
     4c6:	43 c0       	rjmp	.+134    	; 0x54e <__stack+0xef>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4c8:	fe 01       	movw	r30, r28
     4ca:	ef 5a       	subi	r30, 0xAF	; 175
     4cc:	ff 4f       	sbci	r31, 0xFF	; 255
     4ce:	60 81       	ld	r22, Z
     4d0:	71 81       	ldd	r23, Z+1	; 0x01
     4d2:	82 81       	ldd	r24, Z+2	; 0x02
     4d4:	93 81       	ldd	r25, Z+3	; 0x03
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	40 e2       	ldi	r20, 0x20	; 32
     4dc:	51 e4       	ldi	r21, 0x41	; 65
     4de:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     4e2:	dc 01       	movw	r26, r24
     4e4:	cb 01       	movw	r24, r22
     4e6:	8e 01       	movw	r16, r28
     4e8:	05 5b       	subi	r16, 0xB5	; 181
     4ea:	1f 4f       	sbci	r17, 0xFF	; 255
     4ec:	bc 01       	movw	r22, r24
     4ee:	cd 01       	movw	r24, r26
     4f0:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     4f4:	dc 01       	movw	r26, r24
     4f6:	cb 01       	movw	r24, r22
     4f8:	f8 01       	movw	r30, r16
     4fa:	91 83       	std	Z+1, r25	; 0x01
     4fc:	80 83       	st	Z, r24
     4fe:	1f c0       	rjmp	.+62     	; 0x53e <__stack+0xdf>
     500:	fe 01       	movw	r30, r28
     502:	e7 5b       	subi	r30, 0xB7	; 183
     504:	ff 4f       	sbci	r31, 0xFF	; 255
     506:	84 e6       	ldi	r24, 0x64	; 100
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	91 83       	std	Z+1, r25	; 0x01
     50c:	80 83       	st	Z, r24
     50e:	fe 01       	movw	r30, r28
     510:	e7 5b       	subi	r30, 0xB7	; 183
     512:	ff 4f       	sbci	r31, 0xFF	; 255
     514:	80 81       	ld	r24, Z
     516:	91 81       	ldd	r25, Z+1	; 0x01
     518:	01 97       	sbiw	r24, 0x01	; 1
     51a:	f1 f7       	brne	.-4      	; 0x518 <__stack+0xb9>
     51c:	fe 01       	movw	r30, r28
     51e:	e7 5b       	subi	r30, 0xB7	; 183
     520:	ff 4f       	sbci	r31, 0xFF	; 255
     522:	91 83       	std	Z+1, r25	; 0x01
     524:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     526:	de 01       	movw	r26, r28
     528:	a5 5b       	subi	r26, 0xB5	; 181
     52a:	bf 4f       	sbci	r27, 0xFF	; 255
     52c:	fe 01       	movw	r30, r28
     52e:	e5 5b       	subi	r30, 0xB5	; 181
     530:	ff 4f       	sbci	r31, 0xFF	; 255
     532:	80 81       	ld	r24, Z
     534:	91 81       	ldd	r25, Z+1	; 0x01
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	11 96       	adiw	r26, 0x01	; 1
     53a:	9c 93       	st	X, r25
     53c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     53e:	fe 01       	movw	r30, r28
     540:	e5 5b       	subi	r30, 0xB5	; 181
     542:	ff 4f       	sbci	r31, 0xFF	; 255
     544:	80 81       	ld	r24, Z
     546:	91 81       	ldd	r25, Z+1	; 0x01
     548:	00 97       	sbiw	r24, 0x00	; 0
     54a:	d1 f6       	brne	.-76     	; 0x500 <__stack+0xa1>
     54c:	27 c0       	rjmp	.+78     	; 0x59c <__stack+0x13d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     54e:	8e 01       	movw	r16, r28
     550:	05 5b       	subi	r16, 0xB5	; 181
     552:	1f 4f       	sbci	r17, 0xFF	; 255
     554:	fe 01       	movw	r30, r28
     556:	e3 5b       	subi	r30, 0xB3	; 179
     558:	ff 4f       	sbci	r31, 0xFF	; 255
     55a:	60 81       	ld	r22, Z
     55c:	71 81       	ldd	r23, Z+1	; 0x01
     55e:	82 81       	ldd	r24, Z+2	; 0x02
     560:	93 81       	ldd	r25, Z+3	; 0x03
     562:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     566:	dc 01       	movw	r26, r24
     568:	cb 01       	movw	r24, r22
     56a:	f8 01       	movw	r30, r16
     56c:	91 83       	std	Z+1, r25	; 0x01
     56e:	80 83       	st	Z, r24
     570:	de 01       	movw	r26, r28
     572:	a9 5b       	subi	r26, 0xB9	; 185
     574:	bf 4f       	sbci	r27, 0xFF	; 255
     576:	fe 01       	movw	r30, r28
     578:	e5 5b       	subi	r30, 0xB5	; 181
     57a:	ff 4f       	sbci	r31, 0xFF	; 255
     57c:	80 81       	ld	r24, Z
     57e:	91 81       	ldd	r25, Z+1	; 0x01
     580:	8d 93       	st	X+, r24
     582:	9c 93       	st	X, r25
     584:	fe 01       	movw	r30, r28
     586:	e9 5b       	subi	r30, 0xB9	; 185
     588:	ff 4f       	sbci	r31, 0xFF	; 255
     58a:	80 81       	ld	r24, Z
     58c:	91 81       	ldd	r25, Z+1	; 0x01
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <__stack+0x12f>
     592:	fe 01       	movw	r30, r28
     594:	e9 5b       	subi	r30, 0xB9	; 185
     596:	ff 4f       	sbci	r31, 0xFF	; 255
     598:	91 83       	std	Z+1, r25	; 0x01
     59a:	80 83       	st	Z, r24
	PORTB=8;_delay_ms(100);
     59c:	e8 e3       	ldi	r30, 0x38	; 56
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	88 e0       	ldi	r24, 0x08	; 8
     5a2:	80 83       	st	Z, r24
     5a4:	fe 01       	movw	r30, r28
     5a6:	ed 5b       	subi	r30, 0xBD	; 189
     5a8:	ff 4f       	sbci	r31, 0xFF	; 255
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	a8 ec       	ldi	r26, 0xC8	; 200
     5b0:	b2 e4       	ldi	r27, 0x42	; 66
     5b2:	80 83       	st	Z, r24
     5b4:	91 83       	std	Z+1, r25	; 0x01
     5b6:	a2 83       	std	Z+2, r26	; 0x02
     5b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5ba:	8e 01       	movw	r16, r28
     5bc:	01 5c       	subi	r16, 0xC1	; 193
     5be:	1f 4f       	sbci	r17, 0xFF	; 255
     5c0:	fe 01       	movw	r30, r28
     5c2:	ed 5b       	subi	r30, 0xBD	; 189
     5c4:	ff 4f       	sbci	r31, 0xFF	; 255
     5c6:	60 81       	ld	r22, Z
     5c8:	71 81       	ldd	r23, Z+1	; 0x01
     5ca:	82 81       	ldd	r24, Z+2	; 0x02
     5cc:	93 81       	ldd	r25, Z+3	; 0x03
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	4a e7       	ldi	r20, 0x7A	; 122
     5d4:	54 e4       	ldi	r21, 0x44	; 68
     5d6:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     5da:	dc 01       	movw	r26, r24
     5dc:	cb 01       	movw	r24, r22
     5de:	f8 01       	movw	r30, r16
     5e0:	80 83       	st	Z, r24
     5e2:	91 83       	std	Z+1, r25	; 0x01
     5e4:	a2 83       	std	Z+2, r26	; 0x02
     5e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     5e8:	fe 01       	movw	r30, r28
     5ea:	ff 96       	adiw	r30, 0x3f	; 63
     5ec:	60 81       	ld	r22, Z
     5ee:	71 81       	ldd	r23, Z+1	; 0x01
     5f0:	82 81       	ldd	r24, Z+2	; 0x02
     5f2:	93 81       	ldd	r25, Z+3	; 0x03
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e8       	ldi	r20, 0x80	; 128
     5fa:	5f e3       	ldi	r21, 0x3F	; 63
     5fc:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
     600:	88 23       	and	r24, r24
     602:	2c f4       	brge	.+10     	; 0x60e <__stack+0x1af>
		__ticks = 1;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	9e af       	std	Y+62, r25	; 0x3e
     60a:	8d af       	std	Y+61, r24	; 0x3d
     60c:	46 c0       	rjmp	.+140    	; 0x69a <__stack+0x23b>
	else if (__tmp > 65535)
     60e:	fe 01       	movw	r30, r28
     610:	ff 96       	adiw	r30, 0x3f	; 63
     612:	60 81       	ld	r22, Z
     614:	71 81       	ldd	r23, Z+1	; 0x01
     616:	82 81       	ldd	r24, Z+2	; 0x02
     618:	93 81       	ldd	r25, Z+3	; 0x03
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	3f ef       	ldi	r19, 0xFF	; 255
     61e:	4f e7       	ldi	r20, 0x7F	; 127
     620:	57 e4       	ldi	r21, 0x47	; 71
     622:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
     626:	18 16       	cp	r1, r24
     628:	64 f5       	brge	.+88     	; 0x682 <__stack+0x223>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     62a:	fe 01       	movw	r30, r28
     62c:	ed 5b       	subi	r30, 0xBD	; 189
     62e:	ff 4f       	sbci	r31, 0xFF	; 255
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e2       	ldi	r20, 0x20	; 32
     63e:	51 e4       	ldi	r21, 0x41	; 65
     640:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     644:	dc 01       	movw	r26, r24
     646:	cb 01       	movw	r24, r22
     648:	bc 01       	movw	r22, r24
     64a:	cd 01       	movw	r24, r26
     64c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	9e af       	std	Y+62, r25	; 0x3e
     656:	8d af       	std	Y+61, r24	; 0x3d
     658:	0f c0       	rjmp	.+30     	; 0x678 <__stack+0x219>
     65a:	84 e6       	ldi	r24, 0x64	; 100
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	9c af       	std	Y+60, r25	; 0x3c
     660:	8b af       	std	Y+59, r24	; 0x3b
     662:	8b ad       	ldd	r24, Y+59	; 0x3b
     664:	9c ad       	ldd	r25, Y+60	; 0x3c
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	f1 f7       	brne	.-4      	; 0x666 <__stack+0x207>
     66a:	9c af       	std	Y+60, r25	; 0x3c
     66c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     66e:	8d ad       	ldd	r24, Y+61	; 0x3d
     670:	9e ad       	ldd	r25, Y+62	; 0x3e
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	9e af       	std	Y+62, r25	; 0x3e
     676:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     678:	8d ad       	ldd	r24, Y+61	; 0x3d
     67a:	9e ad       	ldd	r25, Y+62	; 0x3e
     67c:	00 97       	sbiw	r24, 0x00	; 0
     67e:	69 f7       	brne	.-38     	; 0x65a <__stack+0x1fb>
     680:	16 c0       	rjmp	.+44     	; 0x6ae <__stack+0x24f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     682:	fe 01       	movw	r30, r28
     684:	ff 96       	adiw	r30, 0x3f	; 63
     686:	60 81       	ld	r22, Z
     688:	71 81       	ldd	r23, Z+1	; 0x01
     68a:	82 81       	ldd	r24, Z+2	; 0x02
     68c:	93 81       	ldd	r25, Z+3	; 0x03
     68e:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	9e af       	std	Y+62, r25	; 0x3e
     698:	8d af       	std	Y+61, r24	; 0x3d
     69a:	8d ad       	ldd	r24, Y+61	; 0x3d
     69c:	9e ad       	ldd	r25, Y+62	; 0x3e
     69e:	9a af       	std	Y+58, r25	; 0x3a
     6a0:	89 af       	std	Y+57, r24	; 0x39
     6a2:	89 ad       	ldd	r24, Y+57	; 0x39
     6a4:	9a ad       	ldd	r25, Y+58	; 0x3a
     6a6:	01 97       	sbiw	r24, 0x01	; 1
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <__stack+0x247>
     6aa:	9a af       	std	Y+58, r25	; 0x3a
     6ac:	89 af       	std	Y+57, r24	; 0x39
	PORTB=16;_delay_ms(100);
     6ae:	e8 e3       	ldi	r30, 0x38	; 56
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	80 e1       	ldi	r24, 0x10	; 16
     6b4:	80 83       	st	Z, r24
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	a8 ec       	ldi	r26, 0xC8	; 200
     6bc:	b2 e4       	ldi	r27, 0x42	; 66
     6be:	8d ab       	std	Y+53, r24	; 0x35
     6c0:	9e ab       	std	Y+54, r25	; 0x36
     6c2:	af ab       	std	Y+55, r26	; 0x37
     6c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6c6:	6d a9       	ldd	r22, Y+53	; 0x35
     6c8:	7e a9       	ldd	r23, Y+54	; 0x36
     6ca:	8f a9       	ldd	r24, Y+55	; 0x37
     6cc:	98 ad       	ldd	r25, Y+56	; 0x38
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	4a e7       	ldi	r20, 0x7A	; 122
     6d4:	54 e4       	ldi	r21, 0x44	; 68
     6d6:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     6da:	dc 01       	movw	r26, r24
     6dc:	cb 01       	movw	r24, r22
     6de:	89 ab       	std	Y+49, r24	; 0x31
     6e0:	9a ab       	std	Y+50, r25	; 0x32
     6e2:	ab ab       	std	Y+51, r26	; 0x33
     6e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     6e6:	69 a9       	ldd	r22, Y+49	; 0x31
     6e8:	7a a9       	ldd	r23, Y+50	; 0x32
     6ea:	8b a9       	ldd	r24, Y+51	; 0x33
     6ec:	9c a9       	ldd	r25, Y+52	; 0x34
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	40 e8       	ldi	r20, 0x80	; 128
     6f4:	5f e3       	ldi	r21, 0x3F	; 63
     6f6:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
     6fa:	88 23       	and	r24, r24
     6fc:	2c f4       	brge	.+10     	; 0x708 <__stack+0x2a9>
		__ticks = 1;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	98 ab       	std	Y+48, r25	; 0x30
     704:	8f a7       	std	Y+47, r24	; 0x2f
     706:	3f c0       	rjmp	.+126    	; 0x786 <__stack+0x327>
	else if (__tmp > 65535)
     708:	69 a9       	ldd	r22, Y+49	; 0x31
     70a:	7a a9       	ldd	r23, Y+50	; 0x32
     70c:	8b a9       	ldd	r24, Y+51	; 0x33
     70e:	9c a9       	ldd	r25, Y+52	; 0x34
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	3f ef       	ldi	r19, 0xFF	; 255
     714:	4f e7       	ldi	r20, 0x7F	; 127
     716:	57 e4       	ldi	r21, 0x47	; 71
     718:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
     71c:	18 16       	cp	r1, r24
     71e:	4c f5       	brge	.+82     	; 0x772 <__stack+0x313>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     720:	6d a9       	ldd	r22, Y+53	; 0x35
     722:	7e a9       	ldd	r23, Y+54	; 0x36
     724:	8f a9       	ldd	r24, Y+55	; 0x37
     726:	98 ad       	ldd	r25, Y+56	; 0x38
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	40 e2       	ldi	r20, 0x20	; 32
     72e:	51 e4       	ldi	r21, 0x41	; 65
     730:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     734:	dc 01       	movw	r26, r24
     736:	cb 01       	movw	r24, r22
     738:	bc 01       	movw	r22, r24
     73a:	cd 01       	movw	r24, r26
     73c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     740:	dc 01       	movw	r26, r24
     742:	cb 01       	movw	r24, r22
     744:	98 ab       	std	Y+48, r25	; 0x30
     746:	8f a7       	std	Y+47, r24	; 0x2f
     748:	0f c0       	rjmp	.+30     	; 0x768 <__stack+0x309>
     74a:	84 e6       	ldi	r24, 0x64	; 100
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	9e a7       	std	Y+46, r25	; 0x2e
     750:	8d a7       	std	Y+45, r24	; 0x2d
     752:	8d a5       	ldd	r24, Y+45	; 0x2d
     754:	9e a5       	ldd	r25, Y+46	; 0x2e
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	f1 f7       	brne	.-4      	; 0x756 <__stack+0x2f7>
     75a:	9e a7       	std	Y+46, r25	; 0x2e
     75c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     75e:	8f a5       	ldd	r24, Y+47	; 0x2f
     760:	98 a9       	ldd	r25, Y+48	; 0x30
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	98 ab       	std	Y+48, r25	; 0x30
     766:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     768:	8f a5       	ldd	r24, Y+47	; 0x2f
     76a:	98 a9       	ldd	r25, Y+48	; 0x30
     76c:	00 97       	sbiw	r24, 0x00	; 0
     76e:	69 f7       	brne	.-38     	; 0x74a <__stack+0x2eb>
     770:	14 c0       	rjmp	.+40     	; 0x79a <__stack+0x33b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     772:	69 a9       	ldd	r22, Y+49	; 0x31
     774:	7a a9       	ldd	r23, Y+50	; 0x32
     776:	8b a9       	ldd	r24, Y+51	; 0x33
     778:	9c a9       	ldd	r25, Y+52	; 0x34
     77a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	98 ab       	std	Y+48, r25	; 0x30
     784:	8f a7       	std	Y+47, r24	; 0x2f
     786:	8f a5       	ldd	r24, Y+47	; 0x2f
     788:	98 a9       	ldd	r25, Y+48	; 0x30
     78a:	9c a7       	std	Y+44, r25	; 0x2c
     78c:	8b a7       	std	Y+43, r24	; 0x2b
     78e:	8b a5       	ldd	r24, Y+43	; 0x2b
     790:	9c a5       	ldd	r25, Y+44	; 0x2c
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	f1 f7       	brne	.-4      	; 0x792 <__stack+0x333>
     796:	9c a7       	std	Y+44, r25	; 0x2c
     798:	8b a7       	std	Y+43, r24	; 0x2b
	PORTB=32;_delay_ms(100);
     79a:	e8 e3       	ldi	r30, 0x38	; 56
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	80 e2       	ldi	r24, 0x20	; 32
     7a0:	80 83       	st	Z, r24
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	a8 ec       	ldi	r26, 0xC8	; 200
     7a8:	b2 e4       	ldi	r27, 0x42	; 66
     7aa:	8f a3       	std	Y+39, r24	; 0x27
     7ac:	98 a7       	std	Y+40, r25	; 0x28
     7ae:	a9 a7       	std	Y+41, r26	; 0x29
     7b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7b2:	6f a1       	ldd	r22, Y+39	; 0x27
     7b4:	78 a5       	ldd	r23, Y+40	; 0x28
     7b6:	89 a5       	ldd	r24, Y+41	; 0x29
     7b8:	9a a5       	ldd	r25, Y+42	; 0x2a
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	4a e7       	ldi	r20, 0x7A	; 122
     7c0:	54 e4       	ldi	r21, 0x44	; 68
     7c2:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     7c6:	dc 01       	movw	r26, r24
     7c8:	cb 01       	movw	r24, r22
     7ca:	8b a3       	std	Y+35, r24	; 0x23
     7cc:	9c a3       	std	Y+36, r25	; 0x24
     7ce:	ad a3       	std	Y+37, r26	; 0x25
     7d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     7d2:	6b a1       	ldd	r22, Y+35	; 0x23
     7d4:	7c a1       	ldd	r23, Y+36	; 0x24
     7d6:	8d a1       	ldd	r24, Y+37	; 0x25
     7d8:	9e a1       	ldd	r25, Y+38	; 0x26
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e8       	ldi	r20, 0x80	; 128
     7e0:	5f e3       	ldi	r21, 0x3F	; 63
     7e2:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
     7e6:	88 23       	and	r24, r24
     7e8:	2c f4       	brge	.+10     	; 0x7f4 <__stack+0x395>
		__ticks = 1;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	9a a3       	std	Y+34, r25	; 0x22
     7f0:	89 a3       	std	Y+33, r24	; 0x21
     7f2:	3f c0       	rjmp	.+126    	; 0x872 <__stack+0x413>
	else if (__tmp > 65535)
     7f4:	6b a1       	ldd	r22, Y+35	; 0x23
     7f6:	7c a1       	ldd	r23, Y+36	; 0x24
     7f8:	8d a1       	ldd	r24, Y+37	; 0x25
     7fa:	9e a1       	ldd	r25, Y+38	; 0x26
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	3f ef       	ldi	r19, 0xFF	; 255
     800:	4f e7       	ldi	r20, 0x7F	; 127
     802:	57 e4       	ldi	r21, 0x47	; 71
     804:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
     808:	18 16       	cp	r1, r24
     80a:	4c f5       	brge	.+82     	; 0x85e <__stack+0x3ff>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     80c:	6f a1       	ldd	r22, Y+39	; 0x27
     80e:	78 a5       	ldd	r23, Y+40	; 0x28
     810:	89 a5       	ldd	r24, Y+41	; 0x29
     812:	9a a5       	ldd	r25, Y+42	; 0x2a
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	40 e2       	ldi	r20, 0x20	; 32
     81a:	51 e4       	ldi	r21, 0x41	; 65
     81c:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     820:	dc 01       	movw	r26, r24
     822:	cb 01       	movw	r24, r22
     824:	bc 01       	movw	r22, r24
     826:	cd 01       	movw	r24, r26
     828:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     82c:	dc 01       	movw	r26, r24
     82e:	cb 01       	movw	r24, r22
     830:	9a a3       	std	Y+34, r25	; 0x22
     832:	89 a3       	std	Y+33, r24	; 0x21
     834:	0f c0       	rjmp	.+30     	; 0x854 <__stack+0x3f5>
     836:	84 e6       	ldi	r24, 0x64	; 100
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	98 a3       	std	Y+32, r25	; 0x20
     83c:	8f 8f       	std	Y+31, r24	; 0x1f
     83e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     840:	98 a1       	ldd	r25, Y+32	; 0x20
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <__stack+0x3e3>
     846:	98 a3       	std	Y+32, r25	; 0x20
     848:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     84a:	89 a1       	ldd	r24, Y+33	; 0x21
     84c:	9a a1       	ldd	r25, Y+34	; 0x22
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	9a a3       	std	Y+34, r25	; 0x22
     852:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     854:	89 a1       	ldd	r24, Y+33	; 0x21
     856:	9a a1       	ldd	r25, Y+34	; 0x22
     858:	00 97       	sbiw	r24, 0x00	; 0
     85a:	69 f7       	brne	.-38     	; 0x836 <__stack+0x3d7>
     85c:	14 c0       	rjmp	.+40     	; 0x886 <__stack+0x427>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     85e:	6b a1       	ldd	r22, Y+35	; 0x23
     860:	7c a1       	ldd	r23, Y+36	; 0x24
     862:	8d a1       	ldd	r24, Y+37	; 0x25
     864:	9e a1       	ldd	r25, Y+38	; 0x26
     866:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     86a:	dc 01       	movw	r26, r24
     86c:	cb 01       	movw	r24, r22
     86e:	9a a3       	std	Y+34, r25	; 0x22
     870:	89 a3       	std	Y+33, r24	; 0x21
     872:	89 a1       	ldd	r24, Y+33	; 0x21
     874:	9a a1       	ldd	r25, Y+34	; 0x22
     876:	9e 8f       	std	Y+30, r25	; 0x1e
     878:	8d 8f       	std	Y+29, r24	; 0x1d
     87a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     87c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <__stack+0x41f>
     882:	9e 8f       	std	Y+30, r25	; 0x1e
     884:	8d 8f       	std	Y+29, r24	; 0x1d
	PORTB=64;_delay_ms(100);
     886:	e8 e3       	ldi	r30, 0x38	; 56
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 e4       	ldi	r24, 0x40	; 64
     88c:	80 83       	st	Z, r24
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	a8 ec       	ldi	r26, 0xC8	; 200
     894:	b2 e4       	ldi	r27, 0x42	; 66
     896:	89 8f       	std	Y+25, r24	; 0x19
     898:	9a 8f       	std	Y+26, r25	; 0x1a
     89a:	ab 8f       	std	Y+27, r26	; 0x1b
     89c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     89e:	69 8d       	ldd	r22, Y+25	; 0x19
     8a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	4a e7       	ldi	r20, 0x7A	; 122
     8ac:	54 e4       	ldi	r21, 0x44	; 68
     8ae:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     8b2:	dc 01       	movw	r26, r24
     8b4:	cb 01       	movw	r24, r22
     8b6:	8d 8b       	std	Y+21, r24	; 0x15
     8b8:	9e 8b       	std	Y+22, r25	; 0x16
     8ba:	af 8b       	std	Y+23, r26	; 0x17
     8bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     8be:	6d 89       	ldd	r22, Y+21	; 0x15
     8c0:	7e 89       	ldd	r23, Y+22	; 0x16
     8c2:	8f 89       	ldd	r24, Y+23	; 0x17
     8c4:	98 8d       	ldd	r25, Y+24	; 0x18
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	40 e8       	ldi	r20, 0x80	; 128
     8cc:	5f e3       	ldi	r21, 0x3F	; 63
     8ce:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
     8d2:	88 23       	and	r24, r24
     8d4:	2c f4       	brge	.+10     	; 0x8e0 <__stack+0x481>
		__ticks = 1;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	9c 8b       	std	Y+20, r25	; 0x14
     8dc:	8b 8b       	std	Y+19, r24	; 0x13
     8de:	3f c0       	rjmp	.+126    	; 0x95e <__stack+0x4ff>
	else if (__tmp > 65535)
     8e0:	6d 89       	ldd	r22, Y+21	; 0x15
     8e2:	7e 89       	ldd	r23, Y+22	; 0x16
     8e4:	8f 89       	ldd	r24, Y+23	; 0x17
     8e6:	98 8d       	ldd	r25, Y+24	; 0x18
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	3f ef       	ldi	r19, 0xFF	; 255
     8ec:	4f e7       	ldi	r20, 0x7F	; 127
     8ee:	57 e4       	ldi	r21, 0x47	; 71
     8f0:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
     8f4:	18 16       	cp	r1, r24
     8f6:	4c f5       	brge	.+82     	; 0x94a <__stack+0x4eb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8f8:	69 8d       	ldd	r22, Y+25	; 0x19
     8fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e2       	ldi	r20, 0x20	; 32
     906:	51 e4       	ldi	r21, 0x41	; 65
     908:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     90c:	dc 01       	movw	r26, r24
     90e:	cb 01       	movw	r24, r22
     910:	bc 01       	movw	r22, r24
     912:	cd 01       	movw	r24, r26
     914:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     918:	dc 01       	movw	r26, r24
     91a:	cb 01       	movw	r24, r22
     91c:	9c 8b       	std	Y+20, r25	; 0x14
     91e:	8b 8b       	std	Y+19, r24	; 0x13
     920:	0f c0       	rjmp	.+30     	; 0x940 <__stack+0x4e1>
     922:	84 e6       	ldi	r24, 0x64	; 100
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	9a 8b       	std	Y+18, r25	; 0x12
     928:	89 8b       	std	Y+17, r24	; 0x11
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	9a 89       	ldd	r25, Y+18	; 0x12
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	f1 f7       	brne	.-4      	; 0x92e <__stack+0x4cf>
     932:	9a 8b       	std	Y+18, r25	; 0x12
     934:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     936:	8b 89       	ldd	r24, Y+19	; 0x13
     938:	9c 89       	ldd	r25, Y+20	; 0x14
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	9c 8b       	std	Y+20, r25	; 0x14
     93e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     940:	8b 89       	ldd	r24, Y+19	; 0x13
     942:	9c 89       	ldd	r25, Y+20	; 0x14
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	69 f7       	brne	.-38     	; 0x922 <__stack+0x4c3>
     948:	14 c0       	rjmp	.+40     	; 0x972 <__stack+0x513>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     94a:	6d 89       	ldd	r22, Y+21	; 0x15
     94c:	7e 89       	ldd	r23, Y+22	; 0x16
     94e:	8f 89       	ldd	r24, Y+23	; 0x17
     950:	98 8d       	ldd	r25, Y+24	; 0x18
     952:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     956:	dc 01       	movw	r26, r24
     958:	cb 01       	movw	r24, r22
     95a:	9c 8b       	std	Y+20, r25	; 0x14
     95c:	8b 8b       	std	Y+19, r24	; 0x13
     95e:	8b 89       	ldd	r24, Y+19	; 0x13
     960:	9c 89       	ldd	r25, Y+20	; 0x14
     962:	98 8b       	std	Y+16, r25	; 0x10
     964:	8f 87       	std	Y+15, r24	; 0x0f
     966:	8f 85       	ldd	r24, Y+15	; 0x0f
     968:	98 89       	ldd	r25, Y+16	; 0x10
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	f1 f7       	brne	.-4      	; 0x96a <__stack+0x50b>
     96e:	98 8b       	std	Y+16, r25	; 0x10
     970:	8f 87       	std	Y+15, r24	; 0x0f
	PORTB=128;_delay_ms(100);
     972:	e8 e3       	ldi	r30, 0x38	; 56
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 e8       	ldi	r24, 0x80	; 128
     978:	80 83       	st	Z, r24
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	a8 ec       	ldi	r26, 0xC8	; 200
     980:	b2 e4       	ldi	r27, 0x42	; 66
     982:	8b 87       	std	Y+11, r24	; 0x0b
     984:	9c 87       	std	Y+12, r25	; 0x0c
     986:	ad 87       	std	Y+13, r26	; 0x0d
     988:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     98a:	6b 85       	ldd	r22, Y+11	; 0x0b
     98c:	7c 85       	ldd	r23, Y+12	; 0x0c
     98e:	8d 85       	ldd	r24, Y+13	; 0x0d
     990:	9e 85       	ldd	r25, Y+14	; 0x0e
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	4a e7       	ldi	r20, 0x7A	; 122
     998:	54 e4       	ldi	r21, 0x44	; 68
     99a:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	8f 83       	std	Y+7, r24	; 0x07
     9a4:	98 87       	std	Y+8, r25	; 0x08
     9a6:	a9 87       	std	Y+9, r26	; 0x09
     9a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     9aa:	6f 81       	ldd	r22, Y+7	; 0x07
     9ac:	78 85       	ldd	r23, Y+8	; 0x08
     9ae:	89 85       	ldd	r24, Y+9	; 0x09
     9b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e8       	ldi	r20, 0x80	; 128
     9b8:	5f e3       	ldi	r21, 0x3F	; 63
     9ba:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
     9be:	88 23       	and	r24, r24
     9c0:	2c f4       	brge	.+10     	; 0x9cc <__stack+0x56d>
		__ticks = 1;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	9e 83       	std	Y+6, r25	; 0x06
     9c8:	8d 83       	std	Y+5, r24	; 0x05
     9ca:	3f c0       	rjmp	.+126    	; 0xa4a <__stack+0x5eb>
	else if (__tmp > 65535)
     9cc:	6f 81       	ldd	r22, Y+7	; 0x07
     9ce:	78 85       	ldd	r23, Y+8	; 0x08
     9d0:	89 85       	ldd	r24, Y+9	; 0x09
     9d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	3f ef       	ldi	r19, 0xFF	; 255
     9d8:	4f e7       	ldi	r20, 0x7F	; 127
     9da:	57 e4       	ldi	r21, 0x47	; 71
     9dc:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
     9e0:	18 16       	cp	r1, r24
     9e2:	4c f5       	brge	.+82     	; 0xa36 <__stack+0x5d7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9e4:	6b 85       	ldd	r22, Y+11	; 0x0b
     9e6:	7c 85       	ldd	r23, Y+12	; 0x0c
     9e8:	8d 85       	ldd	r24, Y+13	; 0x0d
     9ea:	9e 85       	ldd	r25, Y+14	; 0x0e
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	40 e2       	ldi	r20, 0x20	; 32
     9f2:	51 e4       	ldi	r21, 0x41	; 65
     9f4:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     9f8:	dc 01       	movw	r26, r24
     9fa:	cb 01       	movw	r24, r22
     9fc:	bc 01       	movw	r22, r24
     9fe:	cd 01       	movw	r24, r26
     a00:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     a04:	dc 01       	movw	r26, r24
     a06:	cb 01       	movw	r24, r22
     a08:	9e 83       	std	Y+6, r25	; 0x06
     a0a:	8d 83       	std	Y+5, r24	; 0x05
     a0c:	0f c0       	rjmp	.+30     	; 0xa2c <__stack+0x5cd>
     a0e:	84 e6       	ldi	r24, 0x64	; 100
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	9c 83       	std	Y+4, r25	; 0x04
     a14:	8b 83       	std	Y+3, r24	; 0x03
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	9c 81       	ldd	r25, Y+4	; 0x04
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <__stack+0x5bb>
     a1e:	9c 83       	std	Y+4, r25	; 0x04
     a20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a22:	8d 81       	ldd	r24, Y+5	; 0x05
     a24:	9e 81       	ldd	r25, Y+6	; 0x06
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	9e 83       	std	Y+6, r25	; 0x06
     a2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a2c:	8d 81       	ldd	r24, Y+5	; 0x05
     a2e:	9e 81       	ldd	r25, Y+6	; 0x06
     a30:	00 97       	sbiw	r24, 0x00	; 0
     a32:	69 f7       	brne	.-38     	; 0xa0e <__stack+0x5af>
     a34:	8e cb       	rjmp	.-2276   	; 0x152 <main+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a36:	6f 81       	ldd	r22, Y+7	; 0x07
     a38:	78 85       	ldd	r23, Y+8	; 0x08
     a3a:	89 85       	ldd	r24, Y+9	; 0x09
     a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a3e:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	9e 83       	std	Y+6, r25	; 0x06
     a48:	8d 83       	std	Y+5, r24	; 0x05
     a4a:	8d 81       	ldd	r24, Y+5	; 0x05
     a4c:	9e 81       	ldd	r25, Y+6	; 0x06
     a4e:	9a 83       	std	Y+2, r25	; 0x02
     a50:	89 83       	std	Y+1, r24	; 0x01
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	9a 81       	ldd	r25, Y+2	; 0x02
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <__stack+0x5f7>
     a5a:	9a 83       	std	Y+2, r25	; 0x02
     a5c:	89 83       	std	Y+1, r24	; 0x01
     a5e:	79 cb       	rjmp	.-2318   	; 0x152 <main+0x22>

00000a60 <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     a60:	df 93       	push	r29
     a62:	cf 93       	push	r28
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	e9 97       	sbiw	r28, 0x39	; 57
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
     a74:	89 af       	std	Y+57, r24	; 0x39

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     a76:	e5 e3       	ldi	r30, 0x35	; 53
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	89 ad       	ldd	r24, Y+57	; 0x39
     a7c:	80 7f       	andi	r24, 0xF0	; 240
     a7e:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     a80:	a5 e3       	ldi	r26, 0x35	; 53
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	e5 e3       	ldi	r30, 0x35	; 53
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	80 81       	ld	r24, Z
     a8a:	81 60       	ori	r24, 0x01	; 1
     a8c:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     a8e:	a5 e3       	ldi	r26, 0x35	; 53
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	e5 e3       	ldi	r30, 0x35	; 53
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	80 81       	ld	r24, Z
     a98:	84 60       	ori	r24, 0x04	; 4
     a9a:	8c 93       	st	X, r24
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	a0 e8       	ldi	r26, 0x80	; 128
     aa2:	bf e3       	ldi	r27, 0x3F	; 63
     aa4:	8d ab       	std	Y+53, r24	; 0x35
     aa6:	9e ab       	std	Y+54, r25	; 0x36
     aa8:	af ab       	std	Y+55, r26	; 0x37
     aaa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     aac:	6d a9       	ldd	r22, Y+53	; 0x35
     aae:	7e a9       	ldd	r23, Y+54	; 0x36
     ab0:	8f a9       	ldd	r24, Y+55	; 0x37
     ab2:	98 ad       	ldd	r25, Y+56	; 0x38
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	4a e7       	ldi	r20, 0x7A	; 122
     aba:	54 e4       	ldi	r21, 0x44	; 68
     abc:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     ac0:	dc 01       	movw	r26, r24
     ac2:	cb 01       	movw	r24, r22
     ac4:	89 ab       	std	Y+49, r24	; 0x31
     ac6:	9a ab       	std	Y+50, r25	; 0x32
     ac8:	ab ab       	std	Y+51, r26	; 0x33
     aca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     acc:	69 a9       	ldd	r22, Y+49	; 0x31
     ace:	7a a9       	ldd	r23, Y+50	; 0x32
     ad0:	8b a9       	ldd	r24, Y+51	; 0x33
     ad2:	9c a9       	ldd	r25, Y+52	; 0x34
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	40 e8       	ldi	r20, 0x80	; 128
     ada:	5f e3       	ldi	r21, 0x3F	; 63
     adc:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
     ae0:	88 23       	and	r24, r24
     ae2:	2c f4       	brge	.+10     	; 0xaee <LCDsendChar+0x8e>
		__ticks = 1;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	98 ab       	std	Y+48, r25	; 0x30
     aea:	8f a7       	std	Y+47, r24	; 0x2f
     aec:	3f c0       	rjmp	.+126    	; 0xb6c <LCDsendChar+0x10c>
	else if (__tmp > 65535)
     aee:	69 a9       	ldd	r22, Y+49	; 0x31
     af0:	7a a9       	ldd	r23, Y+50	; 0x32
     af2:	8b a9       	ldd	r24, Y+51	; 0x33
     af4:	9c a9       	ldd	r25, Y+52	; 0x34
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	3f ef       	ldi	r19, 0xFF	; 255
     afa:	4f e7       	ldi	r20, 0x7F	; 127
     afc:	57 e4       	ldi	r21, 0x47	; 71
     afe:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
     b02:	18 16       	cp	r1, r24
     b04:	4c f5       	brge	.+82     	; 0xb58 <LCDsendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b06:	6d a9       	ldd	r22, Y+53	; 0x35
     b08:	7e a9       	ldd	r23, Y+54	; 0x36
     b0a:	8f a9       	ldd	r24, Y+55	; 0x37
     b0c:	98 ad       	ldd	r25, Y+56	; 0x38
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	40 e2       	ldi	r20, 0x20	; 32
     b14:	51 e4       	ldi	r21, 0x41	; 65
     b16:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     b1a:	dc 01       	movw	r26, r24
     b1c:	cb 01       	movw	r24, r22
     b1e:	bc 01       	movw	r22, r24
     b20:	cd 01       	movw	r24, r26
     b22:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     b26:	dc 01       	movw	r26, r24
     b28:	cb 01       	movw	r24, r22
     b2a:	98 ab       	std	Y+48, r25	; 0x30
     b2c:	8f a7       	std	Y+47, r24	; 0x2f
     b2e:	0f c0       	rjmp	.+30     	; 0xb4e <LCDsendChar+0xee>
     b30:	84 e6       	ldi	r24, 0x64	; 100
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	9e a7       	std	Y+46, r25	; 0x2e
     b36:	8d a7       	std	Y+45, r24	; 0x2d
     b38:	8d a5       	ldd	r24, Y+45	; 0x2d
     b3a:	9e a5       	ldd	r25, Y+46	; 0x2e
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <LCDsendChar+0xdc>
     b40:	9e a7       	std	Y+46, r25	; 0x2e
     b42:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b44:	8f a5       	ldd	r24, Y+47	; 0x2f
     b46:	98 a9       	ldd	r25, Y+48	; 0x30
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	98 ab       	std	Y+48, r25	; 0x30
     b4c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b4e:	8f a5       	ldd	r24, Y+47	; 0x2f
     b50:	98 a9       	ldd	r25, Y+48	; 0x30
     b52:	00 97       	sbiw	r24, 0x00	; 0
     b54:	69 f7       	brne	.-38     	; 0xb30 <LCDsendChar+0xd0>
     b56:	14 c0       	rjmp	.+40     	; 0xb80 <LCDsendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b58:	69 a9       	ldd	r22, Y+49	; 0x31
     b5a:	7a a9       	ldd	r23, Y+50	; 0x32
     b5c:	8b a9       	ldd	r24, Y+51	; 0x33
     b5e:	9c a9       	ldd	r25, Y+52	; 0x34
     b60:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     b64:	dc 01       	movw	r26, r24
     b66:	cb 01       	movw	r24, r22
     b68:	98 ab       	std	Y+48, r25	; 0x30
     b6a:	8f a7       	std	Y+47, r24	; 0x2f
     b6c:	8f a5       	ldd	r24, Y+47	; 0x2f
     b6e:	98 a9       	ldd	r25, Y+48	; 0x30
     b70:	9c a7       	std	Y+44, r25	; 0x2c
     b72:	8b a7       	std	Y+43, r24	; 0x2b
     b74:	8b a5       	ldd	r24, Y+43	; 0x2b
     b76:	9c a5       	ldd	r25, Y+44	; 0x2c
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <LCDsendChar+0x118>
     b7c:	9c a7       	std	Y+44, r25	; 0x2c
     b7e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     b80:	a5 e3       	ldi	r26, 0x35	; 53
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e5 e3       	ldi	r30, 0x35	; 53
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	8b 7f       	andi	r24, 0xFB	; 251
     b8c:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     b8e:	a5 e3       	ldi	r26, 0x35	; 53
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e5 e3       	ldi	r30, 0x35	; 53
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	8e 7f       	andi	r24, 0xFE	; 254
     b9a:	8c 93       	st	X, r24
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a0 e8       	ldi	r26, 0x80	; 128
     ba2:	bf e3       	ldi	r27, 0x3F	; 63
     ba4:	8f a3       	std	Y+39, r24	; 0x27
     ba6:	98 a7       	std	Y+40, r25	; 0x28
     ba8:	a9 a7       	std	Y+41, r26	; 0x29
     baa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bac:	6f a1       	ldd	r22, Y+39	; 0x27
     bae:	78 a5       	ldd	r23, Y+40	; 0x28
     bb0:	89 a5       	ldd	r24, Y+41	; 0x29
     bb2:	9a a5       	ldd	r25, Y+42	; 0x2a
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	4a e7       	ldi	r20, 0x7A	; 122
     bba:	54 e4       	ldi	r21, 0x44	; 68
     bbc:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     bc0:	dc 01       	movw	r26, r24
     bc2:	cb 01       	movw	r24, r22
     bc4:	8b a3       	std	Y+35, r24	; 0x23
     bc6:	9c a3       	std	Y+36, r25	; 0x24
     bc8:	ad a3       	std	Y+37, r26	; 0x25
     bca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bcc:	6b a1       	ldd	r22, Y+35	; 0x23
     bce:	7c a1       	ldd	r23, Y+36	; 0x24
     bd0:	8d a1       	ldd	r24, Y+37	; 0x25
     bd2:	9e a1       	ldd	r25, Y+38	; 0x26
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	40 e8       	ldi	r20, 0x80	; 128
     bda:	5f e3       	ldi	r21, 0x3F	; 63
     bdc:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
     be0:	88 23       	and	r24, r24
     be2:	2c f4       	brge	.+10     	; 0xbee <LCDsendChar+0x18e>
		__ticks = 1;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	9a a3       	std	Y+34, r25	; 0x22
     bea:	89 a3       	std	Y+33, r24	; 0x21
     bec:	3f c0       	rjmp	.+126    	; 0xc6c <LCDsendChar+0x20c>
	else if (__tmp > 65535)
     bee:	6b a1       	ldd	r22, Y+35	; 0x23
     bf0:	7c a1       	ldd	r23, Y+36	; 0x24
     bf2:	8d a1       	ldd	r24, Y+37	; 0x25
     bf4:	9e a1       	ldd	r25, Y+38	; 0x26
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	3f ef       	ldi	r19, 0xFF	; 255
     bfa:	4f e7       	ldi	r20, 0x7F	; 127
     bfc:	57 e4       	ldi	r21, 0x47	; 71
     bfe:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
     c02:	18 16       	cp	r1, r24
     c04:	4c f5       	brge	.+82     	; 0xc58 <LCDsendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c06:	6f a1       	ldd	r22, Y+39	; 0x27
     c08:	78 a5       	ldd	r23, Y+40	; 0x28
     c0a:	89 a5       	ldd	r24, Y+41	; 0x29
     c0c:	9a a5       	ldd	r25, Y+42	; 0x2a
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e2       	ldi	r20, 0x20	; 32
     c14:	51 e4       	ldi	r21, 0x41	; 65
     c16:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	bc 01       	movw	r22, r24
     c20:	cd 01       	movw	r24, r26
     c22:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	9a a3       	std	Y+34, r25	; 0x22
     c2c:	89 a3       	std	Y+33, r24	; 0x21
     c2e:	0f c0       	rjmp	.+30     	; 0xc4e <LCDsendChar+0x1ee>
     c30:	84 e6       	ldi	r24, 0x64	; 100
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	98 a3       	std	Y+32, r25	; 0x20
     c36:	8f 8f       	std	Y+31, r24	; 0x1f
     c38:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c3a:	98 a1       	ldd	r25, Y+32	; 0x20
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <LCDsendChar+0x1dc>
     c40:	98 a3       	std	Y+32, r25	; 0x20
     c42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c44:	89 a1       	ldd	r24, Y+33	; 0x21
     c46:	9a a1       	ldd	r25, Y+34	; 0x22
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	9a a3       	std	Y+34, r25	; 0x22
     c4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c4e:	89 a1       	ldd	r24, Y+33	; 0x21
     c50:	9a a1       	ldd	r25, Y+34	; 0x22
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	69 f7       	brne	.-38     	; 0xc30 <LCDsendChar+0x1d0>
     c56:	14 c0       	rjmp	.+40     	; 0xc80 <LCDsendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c58:	6b a1       	ldd	r22, Y+35	; 0x23
     c5a:	7c a1       	ldd	r23, Y+36	; 0x24
     c5c:	8d a1       	ldd	r24, Y+37	; 0x25
     c5e:	9e a1       	ldd	r25, Y+38	; 0x26
     c60:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     c64:	dc 01       	movw	r26, r24
     c66:	cb 01       	movw	r24, r22
     c68:	9a a3       	std	Y+34, r25	; 0x22
     c6a:	89 a3       	std	Y+33, r24	; 0x21
     c6c:	89 a1       	ldd	r24, Y+33	; 0x21
     c6e:	9a a1       	ldd	r25, Y+34	; 0x22
     c70:	9e 8f       	std	Y+30, r25	; 0x1e
     c72:	8d 8f       	std	Y+29, r24	; 0x1d
     c74:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c76:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <LCDsendChar+0x218>
     c7c:	9e 8f       	std	Y+30, r25	; 0x1e
     c7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     c80:	e5 e3       	ldi	r30, 0x35	; 53
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	89 ad       	ldd	r24, Y+57	; 0x39
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	82 95       	swap	r24
     c8c:	92 95       	swap	r25
     c8e:	90 7f       	andi	r25, 0xF0	; 240
     c90:	98 27       	eor	r25, r24
     c92:	80 7f       	andi	r24, 0xF0	; 240
     c94:	98 27       	eor	r25, r24
     c96:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     c98:	a5 e3       	ldi	r26, 0x35	; 53
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e5 e3       	ldi	r30, 0x35	; 53
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	81 60       	ori	r24, 0x01	; 1
     ca4:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     ca6:	a5 e3       	ldi	r26, 0x35	; 53
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e5 e3       	ldi	r30, 0x35	; 53
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	84 60       	ori	r24, 0x04	; 4
     cb2:	8c 93       	st	X, r24
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e8       	ldi	r26, 0x80	; 128
     cba:	bf e3       	ldi	r27, 0x3F	; 63
     cbc:	89 8f       	std	Y+25, r24	; 0x19
     cbe:	9a 8f       	std	Y+26, r25	; 0x1a
     cc0:	ab 8f       	std	Y+27, r26	; 0x1b
     cc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc4:	69 8d       	ldd	r22, Y+25	; 0x19
     cc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	4a e7       	ldi	r20, 0x7A	; 122
     cd2:	54 e4       	ldi	r21, 0x44	; 68
     cd4:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	8d 8b       	std	Y+21, r24	; 0x15
     cde:	9e 8b       	std	Y+22, r25	; 0x16
     ce0:	af 8b       	std	Y+23, r26	; 0x17
     ce2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce4:	6d 89       	ldd	r22, Y+21	; 0x15
     ce6:	7e 89       	ldd	r23, Y+22	; 0x16
     ce8:	8f 89       	ldd	r24, Y+23	; 0x17
     cea:	98 8d       	ldd	r25, Y+24	; 0x18
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e8       	ldi	r20, 0x80	; 128
     cf2:	5f e3       	ldi	r21, 0x3F	; 63
     cf4:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
     cf8:	88 23       	and	r24, r24
     cfa:	2c f4       	brge	.+10     	; 0xd06 <LCDsendChar+0x2a6>
		__ticks = 1;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	9c 8b       	std	Y+20, r25	; 0x14
     d02:	8b 8b       	std	Y+19, r24	; 0x13
     d04:	3f c0       	rjmp	.+126    	; 0xd84 <LCDsendChar+0x324>
	else if (__tmp > 65535)
     d06:	6d 89       	ldd	r22, Y+21	; 0x15
     d08:	7e 89       	ldd	r23, Y+22	; 0x16
     d0a:	8f 89       	ldd	r24, Y+23	; 0x17
     d0c:	98 8d       	ldd	r25, Y+24	; 0x18
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	3f ef       	ldi	r19, 0xFF	; 255
     d12:	4f e7       	ldi	r20, 0x7F	; 127
     d14:	57 e4       	ldi	r21, 0x47	; 71
     d16:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
     d1a:	18 16       	cp	r1, r24
     d1c:	4c f5       	brge	.+82     	; 0xd70 <LCDsendChar+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1e:	69 8d       	ldd	r22, Y+25	; 0x19
     d20:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d22:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d24:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e2       	ldi	r20, 0x20	; 32
     d2c:	51 e4       	ldi	r21, 0x41	; 65
     d2e:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	bc 01       	movw	r22, r24
     d38:	cd 01       	movw	r24, r26
     d3a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	9c 8b       	std	Y+20, r25	; 0x14
     d44:	8b 8b       	std	Y+19, r24	; 0x13
     d46:	0f c0       	rjmp	.+30     	; 0xd66 <LCDsendChar+0x306>
     d48:	84 e6       	ldi	r24, 0x64	; 100
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	9a 8b       	std	Y+18, r25	; 0x12
     d4e:	89 8b       	std	Y+17, r24	; 0x11
     d50:	89 89       	ldd	r24, Y+17	; 0x11
     d52:	9a 89       	ldd	r25, Y+18	; 0x12
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <LCDsendChar+0x2f4>
     d58:	9a 8b       	std	Y+18, r25	; 0x12
     d5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5c:	8b 89       	ldd	r24, Y+19	; 0x13
     d5e:	9c 89       	ldd	r25, Y+20	; 0x14
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	9c 8b       	std	Y+20, r25	; 0x14
     d64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d66:	8b 89       	ldd	r24, Y+19	; 0x13
     d68:	9c 89       	ldd	r25, Y+20	; 0x14
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	69 f7       	brne	.-38     	; 0xd48 <LCDsendChar+0x2e8>
     d6e:	14 c0       	rjmp	.+40     	; 0xd98 <LCDsendChar+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d70:	6d 89       	ldd	r22, Y+21	; 0x15
     d72:	7e 89       	ldd	r23, Y+22	; 0x16
     d74:	8f 89       	ldd	r24, Y+23	; 0x17
     d76:	98 8d       	ldd	r25, Y+24	; 0x18
     d78:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	9c 8b       	std	Y+20, r25	; 0x14
     d82:	8b 8b       	std	Y+19, r24	; 0x13
     d84:	8b 89       	ldd	r24, Y+19	; 0x13
     d86:	9c 89       	ldd	r25, Y+20	; 0x14
     d88:	98 8b       	std	Y+16, r25	; 0x10
     d8a:	8f 87       	std	Y+15, r24	; 0x0f
     d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d8e:	98 89       	ldd	r25, Y+16	; 0x10
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <LCDsendChar+0x330>
     d94:	98 8b       	std	Y+16, r25	; 0x10
     d96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     d98:	a5 e3       	ldi	r26, 0x35	; 53
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e5 e3       	ldi	r30, 0x35	; 53
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8b 7f       	andi	r24, 0xFB	; 251
     da4:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     da6:	a5 e3       	ldi	r26, 0x35	; 53
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e5 e3       	ldi	r30, 0x35	; 53
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8e 7f       	andi	r24, 0xFE	; 254
     db2:	8c 93       	st	X, r24
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	a0 e8       	ldi	r26, 0x80	; 128
     dba:	bf e3       	ldi	r27, 0x3F	; 63
     dbc:	8b 87       	std	Y+11, r24	; 0x0b
     dbe:	9c 87       	std	Y+12, r25	; 0x0c
     dc0:	ad 87       	std	Y+13, r26	; 0x0d
     dc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dca:	9e 85       	ldd	r25, Y+14	; 0x0e
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	4a e7       	ldi	r20, 0x7A	; 122
     dd2:	54 e4       	ldi	r21, 0x44	; 68
     dd4:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	8f 83       	std	Y+7, r24	; 0x07
     dde:	98 87       	std	Y+8, r25	; 0x08
     de0:	a9 87       	std	Y+9, r26	; 0x09
     de2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     de4:	6f 81       	ldd	r22, Y+7	; 0x07
     de6:	78 85       	ldd	r23, Y+8	; 0x08
     de8:	89 85       	ldd	r24, Y+9	; 0x09
     dea:	9a 85       	ldd	r25, Y+10	; 0x0a
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e8       	ldi	r20, 0x80	; 128
     df2:	5f e3       	ldi	r21, 0x3F	; 63
     df4:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
     df8:	88 23       	and	r24, r24
     dfa:	2c f4       	brge	.+10     	; 0xe06 <LCDsendChar+0x3a6>
		__ticks = 1;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9e 83       	std	Y+6, r25	; 0x06
     e02:	8d 83       	std	Y+5, r24	; 0x05
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <LCDsendChar+0x424>
	else if (__tmp > 65535)
     e06:	6f 81       	ldd	r22, Y+7	; 0x07
     e08:	78 85       	ldd	r23, Y+8	; 0x08
     e0a:	89 85       	ldd	r24, Y+9	; 0x09
     e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	3f ef       	ldi	r19, 0xFF	; 255
     e12:	4f e7       	ldi	r20, 0x7F	; 127
     e14:	57 e4       	ldi	r21, 0x47	; 71
     e16:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
     e1a:	18 16       	cp	r1, r24
     e1c:	4c f5       	brge	.+82     	; 0xe70 <LCDsendChar+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e20:	7c 85       	ldd	r23, Y+12	; 0x0c
     e22:	8d 85       	ldd	r24, Y+13	; 0x0d
     e24:	9e 85       	ldd	r25, Y+14	; 0x0e
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e2       	ldi	r20, 0x20	; 32
     e2c:	51 e4       	ldi	r21, 0x41	; 65
     e2e:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	bc 01       	movw	r22, r24
     e38:	cd 01       	movw	r24, r26
     e3a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9e 83       	std	Y+6, r25	; 0x06
     e44:	8d 83       	std	Y+5, r24	; 0x05
     e46:	0f c0       	rjmp	.+30     	; 0xe66 <LCDsendChar+0x406>
     e48:	84 e6       	ldi	r24, 0x64	; 100
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9c 83       	std	Y+4, r25	; 0x04
     e4e:	8b 83       	std	Y+3, r24	; 0x03
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	9c 81       	ldd	r25, Y+4	; 0x04
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <LCDsendChar+0x3f4>
     e58:	9c 83       	std	Y+4, r25	; 0x04
     e5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	9e 81       	ldd	r25, Y+6	; 0x06
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	9e 83       	std	Y+6, r25	; 0x06
     e64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	9e 81       	ldd	r25, Y+6	; 0x06
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	69 f7       	brne	.-38     	; 0xe48 <LCDsendChar+0x3e8>
     e6e:	14 c0       	rjmp	.+40     	; 0xe98 <LCDsendChar+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e70:	6f 81       	ldd	r22, Y+7	; 0x07
     e72:	78 85       	ldd	r23, Y+8	; 0x08
     e74:	89 85       	ldd	r24, Y+9	; 0x09
     e76:	9a 85       	ldd	r25, Y+10	; 0x0a
     e78:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	89 83       	std	Y+1, r24	; 0x01
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <LCDsendChar+0x430>
     e94:	9a 83       	std	Y+2, r25	; 0x02
     e96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     e98:	e9 96       	adiw	r28, 0x39	; 57
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	e9 97       	sbiw	r28, 0x39	; 57
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	89 af       	std	Y+57, r24	; 0x39
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     ec0:	e5 e3       	ldi	r30, 0x35	; 53
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	89 ad       	ldd	r24, Y+57	; 0x39
     ec6:	80 7f       	andi	r24, 0xF0	; 240
     ec8:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     eca:	a5 e3       	ldi	r26, 0x35	; 53
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e5 e3       	ldi	r30, 0x35	; 53
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	84 60       	ori	r24, 0x04	; 4
     ed6:	8c 93       	st	X, r24
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	a0 e8       	ldi	r26, 0x80	; 128
     ede:	bf e3       	ldi	r27, 0x3F	; 63
     ee0:	8d ab       	std	Y+53, r24	; 0x35
     ee2:	9e ab       	std	Y+54, r25	; 0x36
     ee4:	af ab       	std	Y+55, r26	; 0x37
     ee6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee8:	6d a9       	ldd	r22, Y+53	; 0x35
     eea:	7e a9       	ldd	r23, Y+54	; 0x36
     eec:	8f a9       	ldd	r24, Y+55	; 0x37
     eee:	98 ad       	ldd	r25, Y+56	; 0x38
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	4a e7       	ldi	r20, 0x7A	; 122
     ef6:	54 e4       	ldi	r21, 0x44	; 68
     ef8:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	89 ab       	std	Y+49, r24	; 0x31
     f02:	9a ab       	std	Y+50, r25	; 0x32
     f04:	ab ab       	std	Y+51, r26	; 0x33
     f06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f08:	69 a9       	ldd	r22, Y+49	; 0x31
     f0a:	7a a9       	ldd	r23, Y+50	; 0x32
     f0c:	8b a9       	ldd	r24, Y+51	; 0x33
     f0e:	9c a9       	ldd	r25, Y+52	; 0x34
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e8       	ldi	r20, 0x80	; 128
     f16:	5f e3       	ldi	r21, 0x3F	; 63
     f18:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
     f1c:	88 23       	and	r24, r24
     f1e:	2c f4       	brge	.+10     	; 0xf2a <LCDsendCommand+0x80>
		__ticks = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	98 ab       	std	Y+48, r25	; 0x30
     f26:	8f a7       	std	Y+47, r24	; 0x2f
     f28:	3f c0       	rjmp	.+126    	; 0xfa8 <LCDsendCommand+0xfe>
	else if (__tmp > 65535)
     f2a:	69 a9       	ldd	r22, Y+49	; 0x31
     f2c:	7a a9       	ldd	r23, Y+50	; 0x32
     f2e:	8b a9       	ldd	r24, Y+51	; 0x33
     f30:	9c a9       	ldd	r25, Y+52	; 0x34
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	4f e7       	ldi	r20, 0x7F	; 127
     f38:	57 e4       	ldi	r21, 0x47	; 71
     f3a:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
     f3e:	18 16       	cp	r1, r24
     f40:	4c f5       	brge	.+82     	; 0xf94 <LCDsendCommand+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f42:	6d a9       	ldd	r22, Y+53	; 0x35
     f44:	7e a9       	ldd	r23, Y+54	; 0x36
     f46:	8f a9       	ldd	r24, Y+55	; 0x37
     f48:	98 ad       	ldd	r25, Y+56	; 0x38
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e2       	ldi	r20, 0x20	; 32
     f50:	51 e4       	ldi	r21, 0x41	; 65
     f52:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	bc 01       	movw	r22, r24
     f5c:	cd 01       	movw	r24, r26
     f5e:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	98 ab       	std	Y+48, r25	; 0x30
     f68:	8f a7       	std	Y+47, r24	; 0x2f
     f6a:	0f c0       	rjmp	.+30     	; 0xf8a <LCDsendCommand+0xe0>
     f6c:	84 e6       	ldi	r24, 0x64	; 100
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	9e a7       	std	Y+46, r25	; 0x2e
     f72:	8d a7       	std	Y+45, r24	; 0x2d
     f74:	8d a5       	ldd	r24, Y+45	; 0x2d
     f76:	9e a5       	ldd	r25, Y+46	; 0x2e
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <LCDsendCommand+0xce>
     f7c:	9e a7       	std	Y+46, r25	; 0x2e
     f7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f80:	8f a5       	ldd	r24, Y+47	; 0x2f
     f82:	98 a9       	ldd	r25, Y+48	; 0x30
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	98 ab       	std	Y+48, r25	; 0x30
     f88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8a:	8f a5       	ldd	r24, Y+47	; 0x2f
     f8c:	98 a9       	ldd	r25, Y+48	; 0x30
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	69 f7       	brne	.-38     	; 0xf6c <LCDsendCommand+0xc2>
     f92:	14 c0       	rjmp	.+40     	; 0xfbc <LCDsendCommand+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f94:	69 a9       	ldd	r22, Y+49	; 0x31
     f96:	7a a9       	ldd	r23, Y+50	; 0x32
     f98:	8b a9       	ldd	r24, Y+51	; 0x33
     f9a:	9c a9       	ldd	r25, Y+52	; 0x34
     f9c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	98 ab       	std	Y+48, r25	; 0x30
     fa6:	8f a7       	std	Y+47, r24	; 0x2f
     fa8:	8f a5       	ldd	r24, Y+47	; 0x2f
     faa:	98 a9       	ldd	r25, Y+48	; 0x30
     fac:	9c a7       	std	Y+44, r25	; 0x2c
     fae:	8b a7       	std	Y+43, r24	; 0x2b
     fb0:	8b a5       	ldd	r24, Y+43	; 0x2b
     fb2:	9c a5       	ldd	r25, Y+44	; 0x2c
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <LCDsendCommand+0x10a>
     fb8:	9c a7       	std	Y+44, r25	; 0x2c
     fba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     fbc:	a5 e3       	ldi	r26, 0x35	; 53
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e5 e3       	ldi	r30, 0x35	; 53
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8b 7f       	andi	r24, 0xFB	; 251
     fc8:	8c 93       	st	X, r24
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a0 e8       	ldi	r26, 0x80	; 128
     fd0:	bf e3       	ldi	r27, 0x3F	; 63
     fd2:	8f a3       	std	Y+39, r24	; 0x27
     fd4:	98 a7       	std	Y+40, r25	; 0x28
     fd6:	a9 a7       	std	Y+41, r26	; 0x29
     fd8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fda:	6f a1       	ldd	r22, Y+39	; 0x27
     fdc:	78 a5       	ldd	r23, Y+40	; 0x28
     fde:	89 a5       	ldd	r24, Y+41	; 0x29
     fe0:	9a a5       	ldd	r25, Y+42	; 0x2a
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4a e7       	ldi	r20, 0x7A	; 122
     fe8:	54 e4       	ldi	r21, 0x44	; 68
     fea:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	8b a3       	std	Y+35, r24	; 0x23
     ff4:	9c a3       	std	Y+36, r25	; 0x24
     ff6:	ad a3       	std	Y+37, r26	; 0x25
     ff8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ffa:	6b a1       	ldd	r22, Y+35	; 0x23
     ffc:	7c a1       	ldd	r23, Y+36	; 0x24
     ffe:	8d a1       	ldd	r24, Y+37	; 0x25
    1000:	9e a1       	ldd	r25, Y+38	; 0x26
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
    100e:	88 23       	and	r24, r24
    1010:	2c f4       	brge	.+10     	; 0x101c <LCDsendCommand+0x172>
		__ticks = 1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9a a3       	std	Y+34, r25	; 0x22
    1018:	89 a3       	std	Y+33, r24	; 0x21
    101a:	3f c0       	rjmp	.+126    	; 0x109a <LCDsendCommand+0x1f0>
	else if (__tmp > 65535)
    101c:	6b a1       	ldd	r22, Y+35	; 0x23
    101e:	7c a1       	ldd	r23, Y+36	; 0x24
    1020:	8d a1       	ldd	r24, Y+37	; 0x25
    1022:	9e a1       	ldd	r25, Y+38	; 0x26
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	3f ef       	ldi	r19, 0xFF	; 255
    1028:	4f e7       	ldi	r20, 0x7F	; 127
    102a:	57 e4       	ldi	r21, 0x47	; 71
    102c:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
    1030:	18 16       	cp	r1, r24
    1032:	4c f5       	brge	.+82     	; 0x1086 <LCDsendCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1034:	6f a1       	ldd	r22, Y+39	; 0x27
    1036:	78 a5       	ldd	r23, Y+40	; 0x28
    1038:	89 a5       	ldd	r24, Y+41	; 0x29
    103a:	9a a5       	ldd	r25, Y+42	; 0x2a
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e2       	ldi	r20, 0x20	; 32
    1042:	51 e4       	ldi	r21, 0x41	; 65
    1044:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9a a3       	std	Y+34, r25	; 0x22
    105a:	89 a3       	std	Y+33, r24	; 0x21
    105c:	0f c0       	rjmp	.+30     	; 0x107c <LCDsendCommand+0x1d2>
    105e:	84 e6       	ldi	r24, 0x64	; 100
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	98 a3       	std	Y+32, r25	; 0x20
    1064:	8f 8f       	std	Y+31, r24	; 0x1f
    1066:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1068:	98 a1       	ldd	r25, Y+32	; 0x20
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <LCDsendCommand+0x1c0>
    106e:	98 a3       	std	Y+32, r25	; 0x20
    1070:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1072:	89 a1       	ldd	r24, Y+33	; 0x21
    1074:	9a a1       	ldd	r25, Y+34	; 0x22
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	9a a3       	std	Y+34, r25	; 0x22
    107a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107c:	89 a1       	ldd	r24, Y+33	; 0x21
    107e:	9a a1       	ldd	r25, Y+34	; 0x22
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	69 f7       	brne	.-38     	; 0x105e <LCDsendCommand+0x1b4>
    1084:	14 c0       	rjmp	.+40     	; 0x10ae <LCDsendCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1086:	6b a1       	ldd	r22, Y+35	; 0x23
    1088:	7c a1       	ldd	r23, Y+36	; 0x24
    108a:	8d a1       	ldd	r24, Y+37	; 0x25
    108c:	9e a1       	ldd	r25, Y+38	; 0x26
    108e:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	9a a3       	std	Y+34, r25	; 0x22
    1098:	89 a3       	std	Y+33, r24	; 0x21
    109a:	89 a1       	ldd	r24, Y+33	; 0x21
    109c:	9a a1       	ldd	r25, Y+34	; 0x22
    109e:	9e 8f       	std	Y+30, r25	; 0x1e
    10a0:	8d 8f       	std	Y+29, r24	; 0x1d
    10a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <LCDsendCommand+0x1fc>
    10aa:	9e 8f       	std	Y+30, r25	; 0x1e
    10ac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
    10ae:	e5 e3       	ldi	r30, 0x35	; 53
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	89 ad       	ldd	r24, Y+57	; 0x39
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	82 95       	swap	r24
    10ba:	92 95       	swap	r25
    10bc:	90 7f       	andi	r25, 0xF0	; 240
    10be:	98 27       	eor	r25, r24
    10c0:	80 7f       	andi	r24, 0xF0	; 240
    10c2:	98 27       	eor	r25, r24
    10c4:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
    10c6:	a5 e3       	ldi	r26, 0x35	; 53
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e5 e3       	ldi	r30, 0x35	; 53
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	84 60       	ori	r24, 0x04	; 4
    10d2:	8c 93       	st	X, r24
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a0 e8       	ldi	r26, 0x80	; 128
    10da:	bf e3       	ldi	r27, 0x3F	; 63
    10dc:	89 8f       	std	Y+25, r24	; 0x19
    10de:	9a 8f       	std	Y+26, r25	; 0x1a
    10e0:	ab 8f       	std	Y+27, r26	; 0x1b
    10e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e4:	69 8d       	ldd	r22, Y+25	; 0x19
    10e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	4a e7       	ldi	r20, 0x7A	; 122
    10f2:	54 e4       	ldi	r21, 0x44	; 68
    10f4:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	8d 8b       	std	Y+21, r24	; 0x15
    10fe:	9e 8b       	std	Y+22, r25	; 0x16
    1100:	af 8b       	std	Y+23, r26	; 0x17
    1102:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1104:	6d 89       	ldd	r22, Y+21	; 0x15
    1106:	7e 89       	ldd	r23, Y+22	; 0x16
    1108:	8f 89       	ldd	r24, Y+23	; 0x17
    110a:	98 8d       	ldd	r25, Y+24	; 0x18
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e8       	ldi	r20, 0x80	; 128
    1112:	5f e3       	ldi	r21, 0x3F	; 63
    1114:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
    1118:	88 23       	and	r24, r24
    111a:	2c f4       	brge	.+10     	; 0x1126 <LCDsendCommand+0x27c>
		__ticks = 1;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	9c 8b       	std	Y+20, r25	; 0x14
    1122:	8b 8b       	std	Y+19, r24	; 0x13
    1124:	3f c0       	rjmp	.+126    	; 0x11a4 <LCDsendCommand+0x2fa>
	else if (__tmp > 65535)
    1126:	6d 89       	ldd	r22, Y+21	; 0x15
    1128:	7e 89       	ldd	r23, Y+22	; 0x16
    112a:	8f 89       	ldd	r24, Y+23	; 0x17
    112c:	98 8d       	ldd	r25, Y+24	; 0x18
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	3f ef       	ldi	r19, 0xFF	; 255
    1132:	4f e7       	ldi	r20, 0x7F	; 127
    1134:	57 e4       	ldi	r21, 0x47	; 71
    1136:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
    113a:	18 16       	cp	r1, r24
    113c:	4c f5       	brge	.+82     	; 0x1190 <LCDsendCommand+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113e:	69 8d       	ldd	r22, Y+25	; 0x19
    1140:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1142:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1144:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e2       	ldi	r20, 0x20	; 32
    114c:	51 e4       	ldi	r21, 0x41	; 65
    114e:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	9c 8b       	std	Y+20, r25	; 0x14
    1164:	8b 8b       	std	Y+19, r24	; 0x13
    1166:	0f c0       	rjmp	.+30     	; 0x1186 <LCDsendCommand+0x2dc>
    1168:	84 e6       	ldi	r24, 0x64	; 100
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	9a 8b       	std	Y+18, r25	; 0x12
    116e:	89 8b       	std	Y+17, r24	; 0x11
    1170:	89 89       	ldd	r24, Y+17	; 0x11
    1172:	9a 89       	ldd	r25, Y+18	; 0x12
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <LCDsendCommand+0x2ca>
    1178:	9a 8b       	std	Y+18, r25	; 0x12
    117a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117c:	8b 89       	ldd	r24, Y+19	; 0x13
    117e:	9c 89       	ldd	r25, Y+20	; 0x14
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	9c 8b       	std	Y+20, r25	; 0x14
    1184:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1186:	8b 89       	ldd	r24, Y+19	; 0x13
    1188:	9c 89       	ldd	r25, Y+20	; 0x14
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	69 f7       	brne	.-38     	; 0x1168 <LCDsendCommand+0x2be>
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <LCDsendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1190:	6d 89       	ldd	r22, Y+21	; 0x15
    1192:	7e 89       	ldd	r23, Y+22	; 0x16
    1194:	8f 89       	ldd	r24, Y+23	; 0x17
    1196:	98 8d       	ldd	r25, Y+24	; 0x18
    1198:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	9c 8b       	std	Y+20, r25	; 0x14
    11a2:	8b 8b       	std	Y+19, r24	; 0x13
    11a4:	8b 89       	ldd	r24, Y+19	; 0x13
    11a6:	9c 89       	ldd	r25, Y+20	; 0x14
    11a8:	98 8b       	std	Y+16, r25	; 0x10
    11aa:	8f 87       	std	Y+15, r24	; 0x0f
    11ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ae:	98 89       	ldd	r25, Y+16	; 0x10
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <LCDsendCommand+0x306>
    11b4:	98 8b       	std	Y+16, r25	; 0x10
    11b6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    11b8:	a5 e3       	ldi	r26, 0x35	; 53
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e5 e3       	ldi	r30, 0x35	; 53
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8b 7f       	andi	r24, 0xFB	; 251
    11c4:	8c 93       	st	X, r24
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a0 e8       	ldi	r26, 0x80	; 128
    11cc:	bf e3       	ldi	r27, 0x3F	; 63
    11ce:	8b 87       	std	Y+11, r24	; 0x0b
    11d0:	9c 87       	std	Y+12, r25	; 0x0c
    11d2:	ad 87       	std	Y+13, r26	; 0x0d
    11d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11da:	8d 85       	ldd	r24, Y+13	; 0x0d
    11dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	4a e7       	ldi	r20, 0x7A	; 122
    11e4:	54 e4       	ldi	r21, 0x44	; 68
    11e6:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	8f 83       	std	Y+7, r24	; 0x07
    11f0:	98 87       	std	Y+8, r25	; 0x08
    11f2:	a9 87       	std	Y+9, r26	; 0x09
    11f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11f6:	6f 81       	ldd	r22, Y+7	; 0x07
    11f8:	78 85       	ldd	r23, Y+8	; 0x08
    11fa:	89 85       	ldd	r24, Y+9	; 0x09
    11fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e8       	ldi	r20, 0x80	; 128
    1204:	5f e3       	ldi	r21, 0x3F	; 63
    1206:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
    120a:	88 23       	and	r24, r24
    120c:	2c f4       	brge	.+10     	; 0x1218 <LCDsendCommand+0x36e>
		__ticks = 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9e 83       	std	Y+6, r25	; 0x06
    1214:	8d 83       	std	Y+5, r24	; 0x05
    1216:	3f c0       	rjmp	.+126    	; 0x1296 <LCDsendCommand+0x3ec>
	else if (__tmp > 65535)
    1218:	6f 81       	ldd	r22, Y+7	; 0x07
    121a:	78 85       	ldd	r23, Y+8	; 0x08
    121c:	89 85       	ldd	r24, Y+9	; 0x09
    121e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	3f ef       	ldi	r19, 0xFF	; 255
    1224:	4f e7       	ldi	r20, 0x7F	; 127
    1226:	57 e4       	ldi	r21, 0x47	; 71
    1228:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
    122c:	18 16       	cp	r1, r24
    122e:	4c f5       	brge	.+82     	; 0x1282 <LCDsendCommand+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1230:	6b 85       	ldd	r22, Y+11	; 0x0b
    1232:	7c 85       	ldd	r23, Y+12	; 0x0c
    1234:	8d 85       	ldd	r24, Y+13	; 0x0d
    1236:	9e 85       	ldd	r25, Y+14	; 0x0e
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e2       	ldi	r20, 0x20	; 32
    123e:	51 e4       	ldi	r21, 0x41	; 65
    1240:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	9e 83       	std	Y+6, r25	; 0x06
    1256:	8d 83       	std	Y+5, r24	; 0x05
    1258:	0f c0       	rjmp	.+30     	; 0x1278 <LCDsendCommand+0x3ce>
    125a:	84 e6       	ldi	r24, 0x64	; 100
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9c 83       	std	Y+4, r25	; 0x04
    1260:	8b 83       	std	Y+3, r24	; 0x03
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <LCDsendCommand+0x3bc>
    126a:	9c 83       	std	Y+4, r25	; 0x04
    126c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	9e 83       	std	Y+6, r25	; 0x06
    1276:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	69 f7       	brne	.-38     	; 0x125a <LCDsendCommand+0x3b0>
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <LCDsendCommand+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1282:	6f 81       	ldd	r22, Y+7	; 0x07
    1284:	78 85       	ldd	r23, Y+8	; 0x08
    1286:	89 85       	ldd	r24, Y+9	; 0x09
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9e 83       	std	Y+6, r25	; 0x06
    1294:	8d 83       	std	Y+5, r24	; 0x05
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	9e 81       	ldd	r25, Y+6	; 0x06
    129a:	9a 83       	std	Y+2, r25	; 0x02
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	9a 81       	ldd	r25, Y+2	; 0x02
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <LCDsendCommand+0x3f8>
    12a6:	9a 83       	std	Y+2, r25	; 0x02
    12a8:	89 83       	std	Y+1, r24	; 0x01
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
    12aa:	e9 96       	adiw	r28, 0x39	; 57
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <LCDinit>:
void LCDinit(void)//Initializes LCD
{
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	c4 56       	subi	r28, 0x64	; 100
    12ca:	d0 40       	sbci	r29, 0x00	; 0
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	fe 01       	movw	r30, r28
    12d8:	e1 5a       	subi	r30, 0xA1	; 161
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a0 e7       	ldi	r26, 0x70	; 112
    12e2:	b1 e4       	ldi	r27, 0x41	; 65
    12e4:	80 83       	st	Z, r24
    12e6:	91 83       	std	Z+1, r25	; 0x01
    12e8:	a2 83       	std	Z+2, r26	; 0x02
    12ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ec:	8e 01       	movw	r16, r28
    12ee:	05 5a       	subi	r16, 0xA5	; 165
    12f0:	1f 4f       	sbci	r17, 0xFF	; 255
    12f2:	fe 01       	movw	r30, r28
    12f4:	e1 5a       	subi	r30, 0xA1	; 161
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	60 81       	ld	r22, Z
    12fa:	71 81       	ldd	r23, Z+1	; 0x01
    12fc:	82 81       	ldd	r24, Z+2	; 0x02
    12fe:	93 81       	ldd	r25, Z+3	; 0x03
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	4a e7       	ldi	r20, 0x7A	; 122
    1306:	54 e4       	ldi	r21, 0x44	; 68
    1308:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	f8 01       	movw	r30, r16
    1312:	80 83       	st	Z, r24
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	a2 83       	std	Z+2, r26	; 0x02
    1318:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    131a:	fe 01       	movw	r30, r28
    131c:	e5 5a       	subi	r30, 0xA5	; 165
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	60 81       	ld	r22, Z
    1322:	71 81       	ldd	r23, Z+1	; 0x01
    1324:	82 81       	ldd	r24, Z+2	; 0x02
    1326:	93 81       	ldd	r25, Z+3	; 0x03
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e8       	ldi	r20, 0x80	; 128
    132e:	5f e3       	ldi	r21, 0x3F	; 63
    1330:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
    1334:	88 23       	and	r24, r24
    1336:	44 f4       	brge	.+16     	; 0x1348 <LCDinit+0x8c>
		__ticks = 1;
    1338:	fe 01       	movw	r30, r28
    133a:	e7 5a       	subi	r30, 0xA7	; 167
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	91 83       	std	Z+1, r25	; 0x01
    1344:	80 83       	st	Z, r24
    1346:	64 c0       	rjmp	.+200    	; 0x1410 <LCDinit+0x154>
	else if (__tmp > 65535)
    1348:	fe 01       	movw	r30, r28
    134a:	e5 5a       	subi	r30, 0xA5	; 165
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	60 81       	ld	r22, Z
    1350:	71 81       	ldd	r23, Z+1	; 0x01
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	93 81       	ldd	r25, Z+3	; 0x03
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	3f ef       	ldi	r19, 0xFF	; 255
    135a:	4f e7       	ldi	r20, 0x7F	; 127
    135c:	57 e4       	ldi	r21, 0x47	; 71
    135e:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
    1362:	18 16       	cp	r1, r24
    1364:	0c f0       	brlt	.+2      	; 0x1368 <LCDinit+0xac>
    1366:	43 c0       	rjmp	.+134    	; 0x13ee <LCDinit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1368:	fe 01       	movw	r30, r28
    136a:	e1 5a       	subi	r30, 0xA1	; 161
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	60 81       	ld	r22, Z
    1370:	71 81       	ldd	r23, Z+1	; 0x01
    1372:	82 81       	ldd	r24, Z+2	; 0x02
    1374:	93 81       	ldd	r25, Z+3	; 0x03
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e2       	ldi	r20, 0x20	; 32
    137c:	51 e4       	ldi	r21, 0x41	; 65
    137e:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	8e 01       	movw	r16, r28
    1388:	07 5a       	subi	r16, 0xA7	; 167
    138a:	1f 4f       	sbci	r17, 0xFF	; 255
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	f8 01       	movw	r30, r16
    139a:	91 83       	std	Z+1, r25	; 0x01
    139c:	80 83       	st	Z, r24
    139e:	1f c0       	rjmp	.+62     	; 0x13de <LCDinit+0x122>
    13a0:	fe 01       	movw	r30, r28
    13a2:	e9 5a       	subi	r30, 0xA9	; 169
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	84 e6       	ldi	r24, 0x64	; 100
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	91 83       	std	Z+1, r25	; 0x01
    13ac:	80 83       	st	Z, r24
    13ae:	fe 01       	movw	r30, r28
    13b0:	e9 5a       	subi	r30, 0xA9	; 169
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	80 81       	ld	r24, Z
    13b6:	91 81       	ldd	r25, Z+1	; 0x01
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <LCDinit+0xfc>
    13bc:	fe 01       	movw	r30, r28
    13be:	e9 5a       	subi	r30, 0xA9	; 169
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c6:	de 01       	movw	r26, r28
    13c8:	a7 5a       	subi	r26, 0xA7	; 167
    13ca:	bf 4f       	sbci	r27, 0xFF	; 255
    13cc:	fe 01       	movw	r30, r28
    13ce:	e7 5a       	subi	r30, 0xA7	; 167
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 81       	ld	r24, Z
    13d4:	91 81       	ldd	r25, Z+1	; 0x01
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	11 96       	adiw	r26, 0x01	; 1
    13da:	9c 93       	st	X, r25
    13dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13de:	fe 01       	movw	r30, r28
    13e0:	e7 5a       	subi	r30, 0xA7	; 167
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	80 81       	ld	r24, Z
    13e6:	91 81       	ldd	r25, Z+1	; 0x01
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	d1 f6       	brne	.-76     	; 0x13a0 <LCDinit+0xe4>
    13ec:	27 c0       	rjmp	.+78     	; 0x143c <LCDinit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ee:	8e 01       	movw	r16, r28
    13f0:	07 5a       	subi	r16, 0xA7	; 167
    13f2:	1f 4f       	sbci	r17, 0xFF	; 255
    13f4:	fe 01       	movw	r30, r28
    13f6:	e5 5a       	subi	r30, 0xA5	; 165
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	60 81       	ld	r22, Z
    13fc:	71 81       	ldd	r23, Z+1	; 0x01
    13fe:	82 81       	ldd	r24, Z+2	; 0x02
    1400:	93 81       	ldd	r25, Z+3	; 0x03
    1402:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	f8 01       	movw	r30, r16
    140c:	91 83       	std	Z+1, r25	; 0x01
    140e:	80 83       	st	Z, r24
    1410:	de 01       	movw	r26, r28
    1412:	ab 5a       	subi	r26, 0xAB	; 171
    1414:	bf 4f       	sbci	r27, 0xFF	; 255
    1416:	fe 01       	movw	r30, r28
    1418:	e7 5a       	subi	r30, 0xA7	; 167
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	80 81       	ld	r24, Z
    141e:	91 81       	ldd	r25, Z+1	; 0x01
    1420:	8d 93       	st	X+, r24
    1422:	9c 93       	st	X, r25
    1424:	fe 01       	movw	r30, r28
    1426:	eb 5a       	subi	r30, 0xAB	; 171
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	80 81       	ld	r24, Z
    142c:	91 81       	ldd	r25, Z+1	; 0x01
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	f1 f7       	brne	.-4      	; 0x142e <LCDinit+0x172>
    1432:	fe 01       	movw	r30, r28
    1434:	eb 5a       	subi	r30, 0xAB	; 171
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	80 83       	st	Z, r24
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    143c:	e5 e3       	ldi	r30, 0x35	; 53
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	10 82       	st	Z, r1
	LCP=0x00;
    1442:	e5 e3       	ldi	r30, 0x35	; 53
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	10 82       	st	Z, r1
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    1448:	a4 e3       	ldi	r26, 0x34	; 52
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e4 e3       	ldi	r30, 0x34	; 52
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	80 6f       	ori	r24, 0xF0	; 240
    1454:	8c 93       	st	X, r24
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    1456:	a4 e3       	ldi	r26, 0x34	; 52
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e4 e3       	ldi	r30, 0x34	; 52
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	87 60       	ori	r24, 0x07	; 7
    1462:	8c 93       	st	X, r24
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1464:	e5 e3       	ldi	r30, 0x35	; 53
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 e3       	ldi	r24, 0x30	; 48
    146a:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    146c:	a5 e3       	ldi	r26, 0x35	; 53
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e5 e3       	ldi	r30, 0x35	; 53
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	84 60       	ori	r24, 0x04	; 4
    1478:	8c 93       	st	X, r24
    147a:	fe 01       	movw	r30, r28
    147c:	ef 5a       	subi	r30, 0xAF	; 175
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a0 e8       	ldi	r26, 0x80	; 128
    1486:	bf e3       	ldi	r27, 0x3F	; 63
    1488:	80 83       	st	Z, r24
    148a:	91 83       	std	Z+1, r25	; 0x01
    148c:	a2 83       	std	Z+2, r26	; 0x02
    148e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1490:	8e 01       	movw	r16, r28
    1492:	03 5b       	subi	r16, 0xB3	; 179
    1494:	1f 4f       	sbci	r17, 0xFF	; 255
    1496:	fe 01       	movw	r30, r28
    1498:	ef 5a       	subi	r30, 0xAF	; 175
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	4a e7       	ldi	r20, 0x7A	; 122
    14aa:	54 e4       	ldi	r21, 0x44	; 68
    14ac:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	f8 01       	movw	r30, r16
    14b6:	80 83       	st	Z, r24
    14b8:	91 83       	std	Z+1, r25	; 0x01
    14ba:	a2 83       	std	Z+2, r26	; 0x02
    14bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14be:	fe 01       	movw	r30, r28
    14c0:	e3 5b       	subi	r30, 0xB3	; 179
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	60 81       	ld	r22, Z
    14c6:	71 81       	ldd	r23, Z+1	; 0x01
    14c8:	82 81       	ldd	r24, Z+2	; 0x02
    14ca:	93 81       	ldd	r25, Z+3	; 0x03
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e8       	ldi	r20, 0x80	; 128
    14d2:	5f e3       	ldi	r21, 0x3F	; 63
    14d4:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
    14d8:	88 23       	and	r24, r24
    14da:	44 f4       	brge	.+16     	; 0x14ec <LCDinit+0x230>
		__ticks = 1;
    14dc:	fe 01       	movw	r30, r28
    14de:	e5 5b       	subi	r30, 0xB5	; 181
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	91 83       	std	Z+1, r25	; 0x01
    14e8:	80 83       	st	Z, r24
    14ea:	64 c0       	rjmp	.+200    	; 0x15b4 <LCDinit+0x2f8>
	else if (__tmp > 65535)
    14ec:	fe 01       	movw	r30, r28
    14ee:	e3 5b       	subi	r30, 0xB3	; 179
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	60 81       	ld	r22, Z
    14f4:	71 81       	ldd	r23, Z+1	; 0x01
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	93 81       	ldd	r25, Z+3	; 0x03
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	3f ef       	ldi	r19, 0xFF	; 255
    14fe:	4f e7       	ldi	r20, 0x7F	; 127
    1500:	57 e4       	ldi	r21, 0x47	; 71
    1502:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
    1506:	18 16       	cp	r1, r24
    1508:	0c f0       	brlt	.+2      	; 0x150c <LCDinit+0x250>
    150a:	43 c0       	rjmp	.+134    	; 0x1592 <LCDinit+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150c:	fe 01       	movw	r30, r28
    150e:	ef 5a       	subi	r30, 0xAF	; 175
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	60 81       	ld	r22, Z
    1514:	71 81       	ldd	r23, Z+1	; 0x01
    1516:	82 81       	ldd	r24, Z+2	; 0x02
    1518:	93 81       	ldd	r25, Z+3	; 0x03
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e2       	ldi	r20, 0x20	; 32
    1520:	51 e4       	ldi	r21, 0x41	; 65
    1522:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	8e 01       	movw	r16, r28
    152c:	05 5b       	subi	r16, 0xB5	; 181
    152e:	1f 4f       	sbci	r17, 0xFF	; 255
    1530:	bc 01       	movw	r22, r24
    1532:	cd 01       	movw	r24, r26
    1534:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	f8 01       	movw	r30, r16
    153e:	91 83       	std	Z+1, r25	; 0x01
    1540:	80 83       	st	Z, r24
    1542:	1f c0       	rjmp	.+62     	; 0x1582 <LCDinit+0x2c6>
    1544:	fe 01       	movw	r30, r28
    1546:	e7 5b       	subi	r30, 0xB7	; 183
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	84 e6       	ldi	r24, 0x64	; 100
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	91 83       	std	Z+1, r25	; 0x01
    1550:	80 83       	st	Z, r24
    1552:	fe 01       	movw	r30, r28
    1554:	e7 5b       	subi	r30, 0xB7	; 183
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	80 81       	ld	r24, Z
    155a:	91 81       	ldd	r25, Z+1	; 0x01
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <LCDinit+0x2a0>
    1560:	fe 01       	movw	r30, r28
    1562:	e7 5b       	subi	r30, 0xB7	; 183
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	91 83       	std	Z+1, r25	; 0x01
    1568:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156a:	de 01       	movw	r26, r28
    156c:	a5 5b       	subi	r26, 0xB5	; 181
    156e:	bf 4f       	sbci	r27, 0xFF	; 255
    1570:	fe 01       	movw	r30, r28
    1572:	e5 5b       	subi	r30, 0xB5	; 181
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	80 81       	ld	r24, Z
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	11 96       	adiw	r26, 0x01	; 1
    157e:	9c 93       	st	X, r25
    1580:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1582:	fe 01       	movw	r30, r28
    1584:	e5 5b       	subi	r30, 0xB5	; 181
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 81       	ld	r24, Z
    158a:	91 81       	ldd	r25, Z+1	; 0x01
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	d1 f6       	brne	.-76     	; 0x1544 <LCDinit+0x288>
    1590:	27 c0       	rjmp	.+78     	; 0x15e0 <LCDinit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1592:	8e 01       	movw	r16, r28
    1594:	05 5b       	subi	r16, 0xB5	; 181
    1596:	1f 4f       	sbci	r17, 0xFF	; 255
    1598:	fe 01       	movw	r30, r28
    159a:	e3 5b       	subi	r30, 0xB3	; 179
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	60 81       	ld	r22, Z
    15a0:	71 81       	ldd	r23, Z+1	; 0x01
    15a2:	82 81       	ldd	r24, Z+2	; 0x02
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	f8 01       	movw	r30, r16
    15b0:	91 83       	std	Z+1, r25	; 0x01
    15b2:	80 83       	st	Z, r24
    15b4:	de 01       	movw	r26, r28
    15b6:	a9 5b       	subi	r26, 0xB9	; 185
    15b8:	bf 4f       	sbci	r27, 0xFF	; 255
    15ba:	fe 01       	movw	r30, r28
    15bc:	e5 5b       	subi	r30, 0xB5	; 181
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	80 81       	ld	r24, Z
    15c2:	91 81       	ldd	r25, Z+1	; 0x01
    15c4:	8d 93       	st	X+, r24
    15c6:	9c 93       	st	X, r25
    15c8:	fe 01       	movw	r30, r28
    15ca:	e9 5b       	subi	r30, 0xB9	; 185
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	80 81       	ld	r24, Z
    15d0:	91 81       	ldd	r25, Z+1	; 0x01
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	f1 f7       	brne	.-4      	; 0x15d2 <LCDinit+0x316>
    15d6:	fe 01       	movw	r30, r28
    15d8:	e9 5b       	subi	r30, 0xB9	; 185
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	80 83       	st	Z, r24
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    15e0:	a5 e3       	ldi	r26, 0x35	; 53
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e5 e3       	ldi	r30, 0x35	; 53
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8b 7f       	andi	r24, 0xFB	; 251
    15ec:	8c 93       	st	X, r24
    15ee:	fe 01       	movw	r30, r28
    15f0:	ed 5b       	subi	r30, 0xBD	; 189
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a0 e8       	ldi	r26, 0x80	; 128
    15fa:	bf e3       	ldi	r27, 0x3F	; 63
    15fc:	80 83       	st	Z, r24
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	a2 83       	std	Z+2, r26	; 0x02
    1602:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1604:	8e 01       	movw	r16, r28
    1606:	01 5c       	subi	r16, 0xC1	; 193
    1608:	1f 4f       	sbci	r17, 0xFF	; 255
    160a:	fe 01       	movw	r30, r28
    160c:	ed 5b       	subi	r30, 0xBD	; 189
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	60 81       	ld	r22, Z
    1612:	71 81       	ldd	r23, Z+1	; 0x01
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a e7       	ldi	r20, 0x7A	; 122
    161e:	54 e4       	ldi	r21, 0x44	; 68
    1620:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	f8 01       	movw	r30, r16
    162a:	80 83       	st	Z, r24
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	a2 83       	std	Z+2, r26	; 0x02
    1630:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1632:	fe 01       	movw	r30, r28
    1634:	ff 96       	adiw	r30, 0x3f	; 63
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e8       	ldi	r20, 0x80	; 128
    1644:	5f e3       	ldi	r21, 0x3F	; 63
    1646:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
    164a:	88 23       	and	r24, r24
    164c:	2c f4       	brge	.+10     	; 0x1658 <LCDinit+0x39c>
		__ticks = 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	9e af       	std	Y+62, r25	; 0x3e
    1654:	8d af       	std	Y+61, r24	; 0x3d
    1656:	46 c0       	rjmp	.+140    	; 0x16e4 <LCDinit+0x428>
	else if (__tmp > 65535)
    1658:	fe 01       	movw	r30, r28
    165a:	ff 96       	adiw	r30, 0x3f	; 63
    165c:	60 81       	ld	r22, Z
    165e:	71 81       	ldd	r23, Z+1	; 0x01
    1660:	82 81       	ldd	r24, Z+2	; 0x02
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	3f ef       	ldi	r19, 0xFF	; 255
    1668:	4f e7       	ldi	r20, 0x7F	; 127
    166a:	57 e4       	ldi	r21, 0x47	; 71
    166c:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
    1670:	18 16       	cp	r1, r24
    1672:	64 f5       	brge	.+88     	; 0x16cc <LCDinit+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1674:	fe 01       	movw	r30, r28
    1676:	ed 5b       	subi	r30, 0xBD	; 189
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	60 81       	ld	r22, Z
    167c:	71 81       	ldd	r23, Z+1	; 0x01
    167e:	82 81       	ldd	r24, Z+2	; 0x02
    1680:	93 81       	ldd	r25, Z+3	; 0x03
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e2       	ldi	r20, 0x20	; 32
    1688:	51 e4       	ldi	r21, 0x41	; 65
    168a:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	bc 01       	movw	r22, r24
    1694:	cd 01       	movw	r24, r26
    1696:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	9e af       	std	Y+62, r25	; 0x3e
    16a0:	8d af       	std	Y+61, r24	; 0x3d
    16a2:	0f c0       	rjmp	.+30     	; 0x16c2 <LCDinit+0x406>
    16a4:	84 e6       	ldi	r24, 0x64	; 100
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	9c af       	std	Y+60, r25	; 0x3c
    16aa:	8b af       	std	Y+59, r24	; 0x3b
    16ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    16ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <LCDinit+0x3f4>
    16b4:	9c af       	std	Y+60, r25	; 0x3c
    16b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    16ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	9e af       	std	Y+62, r25	; 0x3e
    16c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    16c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	69 f7       	brne	.-38     	; 0x16a4 <LCDinit+0x3e8>
    16ca:	16 c0       	rjmp	.+44     	; 0x16f8 <LCDinit+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16cc:	fe 01       	movw	r30, r28
    16ce:	ff 96       	adiw	r30, 0x3f	; 63
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	9e af       	std	Y+62, r25	; 0x3e
    16e2:	8d af       	std	Y+61, r24	; 0x3d
    16e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    16e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    16e8:	9a af       	std	Y+58, r25	; 0x3a
    16ea:	89 af       	std	Y+57, r24	; 0x39
    16ec:	89 ad       	ldd	r24, Y+57	; 0x39
    16ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <LCDinit+0x434>
    16f4:	9a af       	std	Y+58, r25	; 0x3a
    16f6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    16f8:	e5 e3       	ldi	r30, 0x35	; 53
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 e3       	ldi	r24, 0x30	; 48
    16fe:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1700:	a5 e3       	ldi	r26, 0x35	; 53
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e5 e3       	ldi	r30, 0x35	; 53
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	84 60       	ori	r24, 0x04	; 4
    170c:	8c 93       	st	X, r24
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a0 e8       	ldi	r26, 0x80	; 128
    1714:	bf e3       	ldi	r27, 0x3F	; 63
    1716:	8d ab       	std	Y+53, r24	; 0x35
    1718:	9e ab       	std	Y+54, r25	; 0x36
    171a:	af ab       	std	Y+55, r26	; 0x37
    171c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171e:	6d a9       	ldd	r22, Y+53	; 0x35
    1720:	7e a9       	ldd	r23, Y+54	; 0x36
    1722:	8f a9       	ldd	r24, Y+55	; 0x37
    1724:	98 ad       	ldd	r25, Y+56	; 0x38
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	4a e7       	ldi	r20, 0x7A	; 122
    172c:	54 e4       	ldi	r21, 0x44	; 68
    172e:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	89 ab       	std	Y+49, r24	; 0x31
    1738:	9a ab       	std	Y+50, r25	; 0x32
    173a:	ab ab       	std	Y+51, r26	; 0x33
    173c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    173e:	69 a9       	ldd	r22, Y+49	; 0x31
    1740:	7a a9       	ldd	r23, Y+50	; 0x32
    1742:	8b a9       	ldd	r24, Y+51	; 0x33
    1744:	9c a9       	ldd	r25, Y+52	; 0x34
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e8       	ldi	r20, 0x80	; 128
    174c:	5f e3       	ldi	r21, 0x3F	; 63
    174e:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
    1752:	88 23       	and	r24, r24
    1754:	2c f4       	brge	.+10     	; 0x1760 <LCDinit+0x4a4>
		__ticks = 1;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	98 ab       	std	Y+48, r25	; 0x30
    175c:	8f a7       	std	Y+47, r24	; 0x2f
    175e:	3f c0       	rjmp	.+126    	; 0x17de <LCDinit+0x522>
	else if (__tmp > 65535)
    1760:	69 a9       	ldd	r22, Y+49	; 0x31
    1762:	7a a9       	ldd	r23, Y+50	; 0x32
    1764:	8b a9       	ldd	r24, Y+51	; 0x33
    1766:	9c a9       	ldd	r25, Y+52	; 0x34
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	3f ef       	ldi	r19, 0xFF	; 255
    176c:	4f e7       	ldi	r20, 0x7F	; 127
    176e:	57 e4       	ldi	r21, 0x47	; 71
    1770:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
    1774:	18 16       	cp	r1, r24
    1776:	4c f5       	brge	.+82     	; 0x17ca <LCDinit+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1778:	6d a9       	ldd	r22, Y+53	; 0x35
    177a:	7e a9       	ldd	r23, Y+54	; 0x36
    177c:	8f a9       	ldd	r24, Y+55	; 0x37
    177e:	98 ad       	ldd	r25, Y+56	; 0x38
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e2       	ldi	r20, 0x20	; 32
    1786:	51 e4       	ldi	r21, 0x41	; 65
    1788:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	bc 01       	movw	r22, r24
    1792:	cd 01       	movw	r24, r26
    1794:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	98 ab       	std	Y+48, r25	; 0x30
    179e:	8f a7       	std	Y+47, r24	; 0x2f
    17a0:	0f c0       	rjmp	.+30     	; 0x17c0 <LCDinit+0x504>
    17a2:	84 e6       	ldi	r24, 0x64	; 100
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	9e a7       	std	Y+46, r25	; 0x2e
    17a8:	8d a7       	std	Y+45, r24	; 0x2d
    17aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    17ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <LCDinit+0x4f2>
    17b2:	9e a7       	std	Y+46, r25	; 0x2e
    17b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17b8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	98 ab       	std	Y+48, r25	; 0x30
    17be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c2:	98 a9       	ldd	r25, Y+48	; 0x30
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	69 f7       	brne	.-38     	; 0x17a2 <LCDinit+0x4e6>
    17c8:	14 c0       	rjmp	.+40     	; 0x17f2 <LCDinit+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ca:	69 a9       	ldd	r22, Y+49	; 0x31
    17cc:	7a a9       	ldd	r23, Y+50	; 0x32
    17ce:	8b a9       	ldd	r24, Y+51	; 0x33
    17d0:	9c a9       	ldd	r25, Y+52	; 0x34
    17d2:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	98 ab       	std	Y+48, r25	; 0x30
    17dc:	8f a7       	std	Y+47, r24	; 0x2f
    17de:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e0:	98 a9       	ldd	r25, Y+48	; 0x30
    17e2:	9c a7       	std	Y+44, r25	; 0x2c
    17e4:	8b a7       	std	Y+43, r24	; 0x2b
    17e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <LCDinit+0x52e>
    17ee:	9c a7       	std	Y+44, r25	; 0x2c
    17f0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    17f2:	a5 e3       	ldi	r26, 0x35	; 53
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e5 e3       	ldi	r30, 0x35	; 53
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	8b 7f       	andi	r24, 0xFB	; 251
    17fe:	8c 93       	st	X, r24
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	a0 e8       	ldi	r26, 0x80	; 128
    1806:	bf e3       	ldi	r27, 0x3F	; 63
    1808:	8f a3       	std	Y+39, r24	; 0x27
    180a:	98 a7       	std	Y+40, r25	; 0x28
    180c:	a9 a7       	std	Y+41, r26	; 0x29
    180e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1810:	6f a1       	ldd	r22, Y+39	; 0x27
    1812:	78 a5       	ldd	r23, Y+40	; 0x28
    1814:	89 a5       	ldd	r24, Y+41	; 0x29
    1816:	9a a5       	ldd	r25, Y+42	; 0x2a
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	4a e7       	ldi	r20, 0x7A	; 122
    181e:	54 e4       	ldi	r21, 0x44	; 68
    1820:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	8b a3       	std	Y+35, r24	; 0x23
    182a:	9c a3       	std	Y+36, r25	; 0x24
    182c:	ad a3       	std	Y+37, r26	; 0x25
    182e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1830:	6b a1       	ldd	r22, Y+35	; 0x23
    1832:	7c a1       	ldd	r23, Y+36	; 0x24
    1834:	8d a1       	ldd	r24, Y+37	; 0x25
    1836:	9e a1       	ldd	r25, Y+38	; 0x26
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e8       	ldi	r20, 0x80	; 128
    183e:	5f e3       	ldi	r21, 0x3F	; 63
    1840:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
    1844:	88 23       	and	r24, r24
    1846:	2c f4       	brge	.+10     	; 0x1852 <LCDinit+0x596>
		__ticks = 1;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9a a3       	std	Y+34, r25	; 0x22
    184e:	89 a3       	std	Y+33, r24	; 0x21
    1850:	3f c0       	rjmp	.+126    	; 0x18d0 <LCDinit+0x614>
	else if (__tmp > 65535)
    1852:	6b a1       	ldd	r22, Y+35	; 0x23
    1854:	7c a1       	ldd	r23, Y+36	; 0x24
    1856:	8d a1       	ldd	r24, Y+37	; 0x25
    1858:	9e a1       	ldd	r25, Y+38	; 0x26
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	3f ef       	ldi	r19, 0xFF	; 255
    185e:	4f e7       	ldi	r20, 0x7F	; 127
    1860:	57 e4       	ldi	r21, 0x47	; 71
    1862:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
    1866:	18 16       	cp	r1, r24
    1868:	4c f5       	brge	.+82     	; 0x18bc <LCDinit+0x600>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186a:	6f a1       	ldd	r22, Y+39	; 0x27
    186c:	78 a5       	ldd	r23, Y+40	; 0x28
    186e:	89 a5       	ldd	r24, Y+41	; 0x29
    1870:	9a a5       	ldd	r25, Y+42	; 0x2a
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e2       	ldi	r20, 0x20	; 32
    1878:	51 e4       	ldi	r21, 0x41	; 65
    187a:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	bc 01       	movw	r22, r24
    1884:	cd 01       	movw	r24, r26
    1886:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	9a a3       	std	Y+34, r25	; 0x22
    1890:	89 a3       	std	Y+33, r24	; 0x21
    1892:	0f c0       	rjmp	.+30     	; 0x18b2 <LCDinit+0x5f6>
    1894:	84 e6       	ldi	r24, 0x64	; 100
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	98 a3       	std	Y+32, r25	; 0x20
    189a:	8f 8f       	std	Y+31, r24	; 0x1f
    189c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    189e:	98 a1       	ldd	r25, Y+32	; 0x20
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <LCDinit+0x5e4>
    18a4:	98 a3       	std	Y+32, r25	; 0x20
    18a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a8:	89 a1       	ldd	r24, Y+33	; 0x21
    18aa:	9a a1       	ldd	r25, Y+34	; 0x22
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	9a a3       	std	Y+34, r25	; 0x22
    18b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b2:	89 a1       	ldd	r24, Y+33	; 0x21
    18b4:	9a a1       	ldd	r25, Y+34	; 0x22
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	69 f7       	brne	.-38     	; 0x1894 <LCDinit+0x5d8>
    18ba:	14 c0       	rjmp	.+40     	; 0x18e4 <LCDinit+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18bc:	6b a1       	ldd	r22, Y+35	; 0x23
    18be:	7c a1       	ldd	r23, Y+36	; 0x24
    18c0:	8d a1       	ldd	r24, Y+37	; 0x25
    18c2:	9e a1       	ldd	r25, Y+38	; 0x26
    18c4:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	9a a3       	std	Y+34, r25	; 0x22
    18ce:	89 a3       	std	Y+33, r24	; 0x21
    18d0:	89 a1       	ldd	r24, Y+33	; 0x21
    18d2:	9a a1       	ldd	r25, Y+34	; 0x22
    18d4:	9e 8f       	std	Y+30, r25	; 0x1e
    18d6:	8d 8f       	std	Y+29, r24	; 0x1d
    18d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <LCDinit+0x620>
    18e0:	9e 8f       	std	Y+30, r25	; 0x1e
    18e2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    18e4:	e5 e3       	ldi	r30, 0x35	; 53
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 e2       	ldi	r24, 0x20	; 32
    18ea:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    18ec:	a5 e3       	ldi	r26, 0x35	; 53
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e5 e3       	ldi	r30, 0x35	; 53
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	84 60       	ori	r24, 0x04	; 4
    18f8:	8c 93       	st	X, r24
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a0 e8       	ldi	r26, 0x80	; 128
    1900:	bf e3       	ldi	r27, 0x3F	; 63
    1902:	89 8f       	std	Y+25, r24	; 0x19
    1904:	9a 8f       	std	Y+26, r25	; 0x1a
    1906:	ab 8f       	std	Y+27, r26	; 0x1b
    1908:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190a:	69 8d       	ldd	r22, Y+25	; 0x19
    190c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1910:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	4a e7       	ldi	r20, 0x7A	; 122
    1918:	54 e4       	ldi	r21, 0x44	; 68
    191a:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	8d 8b       	std	Y+21, r24	; 0x15
    1924:	9e 8b       	std	Y+22, r25	; 0x16
    1926:	af 8b       	std	Y+23, r26	; 0x17
    1928:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    192a:	6d 89       	ldd	r22, Y+21	; 0x15
    192c:	7e 89       	ldd	r23, Y+22	; 0x16
    192e:	8f 89       	ldd	r24, Y+23	; 0x17
    1930:	98 8d       	ldd	r25, Y+24	; 0x18
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e8       	ldi	r20, 0x80	; 128
    1938:	5f e3       	ldi	r21, 0x3F	; 63
    193a:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
    193e:	88 23       	and	r24, r24
    1940:	2c f4       	brge	.+10     	; 0x194c <LCDinit+0x690>
		__ticks = 1;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9c 8b       	std	Y+20, r25	; 0x14
    1948:	8b 8b       	std	Y+19, r24	; 0x13
    194a:	3f c0       	rjmp	.+126    	; 0x19ca <LCDinit+0x70e>
	else if (__tmp > 65535)
    194c:	6d 89       	ldd	r22, Y+21	; 0x15
    194e:	7e 89       	ldd	r23, Y+22	; 0x16
    1950:	8f 89       	ldd	r24, Y+23	; 0x17
    1952:	98 8d       	ldd	r25, Y+24	; 0x18
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	3f ef       	ldi	r19, 0xFF	; 255
    1958:	4f e7       	ldi	r20, 0x7F	; 127
    195a:	57 e4       	ldi	r21, 0x47	; 71
    195c:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
    1960:	18 16       	cp	r1, r24
    1962:	4c f5       	brge	.+82     	; 0x19b6 <LCDinit+0x6fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1964:	69 8d       	ldd	r22, Y+25	; 0x19
    1966:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1968:	8b 8d       	ldd	r24, Y+27	; 0x1b
    196a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e2       	ldi	r20, 0x20	; 32
    1972:	51 e4       	ldi	r21, 0x41	; 65
    1974:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	9c 8b       	std	Y+20, r25	; 0x14
    198a:	8b 8b       	std	Y+19, r24	; 0x13
    198c:	0f c0       	rjmp	.+30     	; 0x19ac <LCDinit+0x6f0>
    198e:	84 e6       	ldi	r24, 0x64	; 100
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	9a 8b       	std	Y+18, r25	; 0x12
    1994:	89 8b       	std	Y+17, r24	; 0x11
    1996:	89 89       	ldd	r24, Y+17	; 0x11
    1998:	9a 89       	ldd	r25, Y+18	; 0x12
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <LCDinit+0x6de>
    199e:	9a 8b       	std	Y+18, r25	; 0x12
    19a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a2:	8b 89       	ldd	r24, Y+19	; 0x13
    19a4:	9c 89       	ldd	r25, Y+20	; 0x14
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	9c 8b       	std	Y+20, r25	; 0x14
    19aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ac:	8b 89       	ldd	r24, Y+19	; 0x13
    19ae:	9c 89       	ldd	r25, Y+20	; 0x14
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	69 f7       	brne	.-38     	; 0x198e <LCDinit+0x6d2>
    19b4:	14 c0       	rjmp	.+40     	; 0x19de <LCDinit+0x722>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b6:	6d 89       	ldd	r22, Y+21	; 0x15
    19b8:	7e 89       	ldd	r23, Y+22	; 0x16
    19ba:	8f 89       	ldd	r24, Y+23	; 0x17
    19bc:	98 8d       	ldd	r25, Y+24	; 0x18
    19be:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	9c 8b       	std	Y+20, r25	; 0x14
    19c8:	8b 8b       	std	Y+19, r24	; 0x13
    19ca:	8b 89       	ldd	r24, Y+19	; 0x13
    19cc:	9c 89       	ldd	r25, Y+20	; 0x14
    19ce:	98 8b       	std	Y+16, r25	; 0x10
    19d0:	8f 87       	std	Y+15, r24	; 0x0f
    19d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d4:	98 89       	ldd	r25, Y+16	; 0x10
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <LCDinit+0x71a>
    19da:	98 8b       	std	Y+16, r25	; 0x10
    19dc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    19de:	a5 e3       	ldi	r26, 0x35	; 53
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e5 e3       	ldi	r30, 0x35	; 53
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	8b 7f       	andi	r24, 0xFB	; 251
    19ea:	8c 93       	st	X, r24
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a0 e8       	ldi	r26, 0x80	; 128
    19f2:	bf e3       	ldi	r27, 0x3F	; 63
    19f4:	8b 87       	std	Y+11, r24	; 0x0b
    19f6:	9c 87       	std	Y+12, r25	; 0x0c
    19f8:	ad 87       	std	Y+13, r26	; 0x0d
    19fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	4a e7       	ldi	r20, 0x7A	; 122
    1a0a:	54 e4       	ldi	r21, 0x44	; 68
    1a0c:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	8f 83       	std	Y+7, r24	; 0x07
    1a16:	98 87       	std	Y+8, r25	; 0x08
    1a18:	a9 87       	std	Y+9, r26	; 0x09
    1a1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1e:	78 85       	ldd	r23, Y+8	; 0x08
    1a20:	89 85       	ldd	r24, Y+9	; 0x09
    1a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e8       	ldi	r20, 0x80	; 128
    1a2a:	5f e3       	ldi	r21, 0x3F	; 63
    1a2c:	0e 94 1e 13 	call	0x263c	; 0x263c <__ltsf2>
    1a30:	88 23       	and	r24, r24
    1a32:	2c f4       	brge	.+10     	; 0x1a3e <LCDinit+0x782>
		__ticks = 1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
    1a3c:	3f c0       	rjmp	.+126    	; 0x1abc <LCDinit+0x800>
	else if (__tmp > 65535)
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	0e 94 be 12 	call	0x257c	; 0x257c <__gtsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	4c f5       	brge	.+82     	; 0x1aa8 <LCDinit+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e2       	ldi	r20, 0x20	; 32
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9e 83       	std	Y+6, r25	; 0x06
    1a7c:	8d 83       	std	Y+5, r24	; 0x05
    1a7e:	0f c0       	rjmp	.+30     	; 0x1a9e <LCDinit+0x7e2>
    1a80:	84 e6       	ldi	r24, 0x64	; 100
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9c 83       	std	Y+4, r25	; 0x04
    1a86:	8b 83       	std	Y+3, r24	; 0x03
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCDinit+0x7d0>
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	69 f7       	brne	.-38     	; 0x1a80 <LCDinit+0x7c4>
    1aa6:	14 c0       	rjmp	.+40     	; 0x1ad0 <LCDinit+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aaa:	78 85       	ldd	r23, Y+8	; 0x08
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <LCDinit+0x80c>
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1ad0:	88 e2       	ldi	r24, 0x28	; 40
    1ad2:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    1ad6:	8c e0       	ldi	r24, 0x0C	; 12
    1ad8:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
    1adc:	fe 01       	movw	r30, r28
    1ade:	ec 59       	subi	r30, 0x9C	; 156
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	10 82       	st	Z, r1
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	ed 59       	subi	r30, 0x9D	; 157
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	10 82       	st	Z, r1
    1aec:	23 c0       	rjmp	.+70     	; 0x1b34 <LCDinit+0x878>
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1aee:	fe 01       	movw	r30, r28
    1af0:	ec 59       	subi	r30, 0x9C	; 156
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	80 81       	ld	r24, Z
    1af6:	88 2f       	mov	r24, r24
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9c 01       	movw	r18, r24
    1afc:	2c 5a       	subi	r18, 0xAC	; 172
    1afe:	3f 4f       	sbci	r19, 0xFF	; 255
    1b00:	fe 01       	movw	r30, r28
    1b02:	ed 59       	subi	r30, 0x9D	; 157
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	40 81       	ld	r20, Z
    1b08:	de 01       	movw	r26, r28
    1b0a:	ad 59       	subi	r26, 0x9D	; 157
    1b0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0e:	fe 01       	movw	r30, r28
    1b10:	ed 59       	subi	r30, 0x9D	; 157
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	80 81       	ld	r24, Z
    1b16:	8f 5f       	subi	r24, 0xFF	; 255
    1b18:	8c 93       	st	X, r24
    1b1a:	c9 01       	movw	r24, r18
    1b1c:	64 2f       	mov	r22, r20
    1b1e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCDdefinechar>
		ch=ch+8;
    1b22:	de 01       	movw	r26, r28
    1b24:	ac 59       	subi	r26, 0x9C	; 156
    1b26:	bf 4f       	sbci	r27, 0xFF	; 255
    1b28:	fe 01       	movw	r30, r28
    1b2a:	ec 59       	subi	r30, 0x9C	; 156
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	80 81       	ld	r24, Z
    1b30:	88 5f       	subi	r24, 0xF8	; 248
    1b32:	8c 93       	st	X, r24
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1b34:	fe 01       	movw	r30, r28
    1b36:	ec 59       	subi	r30, 0x9C	; 156
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	80 81       	ld	r24, Z
    1b3c:	80 34       	cpi	r24, 0x40	; 64
    1b3e:	b8 f2       	brcs	.-82     	; 0x1aee <LCDinit+0x832>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1b40:	cc 59       	subi	r28, 0x9C	; 156
    1b42:	df 4f       	sbci	r29, 0xFF	; 255
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	08 95       	ret

00001b58 <LCDclr>:
void LCDclr(void)				//Clears LCD
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_CLR);
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDsendCommand>
}
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_HOME);
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDsendCommand>
}
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <LCDstring+0x6>
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <LCDstring+0x8>
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	9a 83       	std	Y+2, r25	; 0x02
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	6b 83       	std	Y+3, r22	; 0x03
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	a1 f0       	breq	.+40     	; 0x1bc2 <LCDstring+0x42>

	// print data
	for(i=0; i<nBytes; i++)
    1b9a:	1c 82       	std	Y+4, r1	; 0x04
    1b9c:	0e c0       	rjmp	.+28     	; 0x1bba <LCDstring+0x3a>
	{
		LCDsendChar(data[i]);
    1b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba8:	fc 01       	movw	r30, r24
    1baa:	e2 0f       	add	r30, r18
    1bac:	f3 1f       	adc	r31, r19
    1bae:	80 81       	ld	r24, Z
    1bb0:	0e 94 30 05 	call	0xa60	; 0xa60 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	9f 5f       	subi	r25, 0xFF	; 255
    1bb8:	9c 83       	std	Y+4, r25	; 0x04
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	98 17       	cp	r25, r24
    1bc0:	70 f3       	brcs	.-36     	; 0x1b9e <LCDstring+0x1e>
	{
		LCDsendChar(data[i]);
	}
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <LCDGotoXY+0x6>
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <LCDGotoXY+0x8>
    1bd8:	0f 92       	push	r0
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	6a 83       	std	Y+2, r22	; 0x02
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	3d 83       	std	Y+5, r19	; 0x05
    1bea:	2c 83       	std	Y+4, r18	; 0x04
    1bec:	8c 81       	ldd	r24, Y+4	; 0x04
    1bee:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	c1 f0       	breq	.+48     	; 0x1c26 <LCDGotoXY+0x56>
    1bf6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bfa:	22 30       	cpi	r18, 0x02	; 2
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	2c f4       	brge	.+10     	; 0x1c0a <LCDGotoXY+0x3a>
    1c00:	8c 81       	ldd	r24, Y+4	; 0x04
    1c02:	9d 81       	ldd	r25, Y+5	; 0x05
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	61 f0       	breq	.+24     	; 0x1c20 <LCDGotoXY+0x50>
    1c08:	1d c0       	rjmp	.+58     	; 0x1c44 <LCDGotoXY+0x74>
    1c0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c0e:	22 30       	cpi	r18, 0x02	; 2
    1c10:	31 05       	cpc	r19, r1
    1c12:	71 f0       	breq	.+28     	; 0x1c30 <LCDGotoXY+0x60>
    1c14:	8c 81       	ldd	r24, Y+4	; 0x04
    1c16:	9d 81       	ldd	r25, Y+5	; 0x05
    1c18:	83 30       	cpi	r24, 0x03	; 3
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	71 f0       	breq	.+28     	; 0x1c3a <LCDGotoXY+0x6a>
    1c1e:	12 c0       	rjmp	.+36     	; 0x1c44 <LCDGotoXY+0x74>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
    1c20:	99 81       	ldd	r25, Y+1	; 0x01
    1c22:	9b 83       	std	Y+3, r25	; 0x03
    1c24:	11 c0       	rjmp	.+34     	; 0x1c48 <LCDGotoXY+0x78>
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	28 2f       	mov	r18, r24
    1c2a:	20 5c       	subi	r18, 0xC0	; 192
    1c2c:	2b 83       	std	Y+3, r18	; 0x03
    1c2e:	0c c0       	rjmp	.+24     	; 0x1c48 <LCDGotoXY+0x78>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	38 2f       	mov	r19, r24
    1c34:	3c 5e       	subi	r19, 0xEC	; 236
    1c36:	3b 83       	std	Y+3, r19	; 0x03
    1c38:	07 c0       	rjmp	.+14     	; 0x1c48 <LCDGotoXY+0x78>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	98 2f       	mov	r25, r24
    1c3e:	9c 5a       	subi	r25, 0xAC	; 172
    1c40:	9b 83       	std	Y+3, r25	; 0x03
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <LCDGotoXY+0x78>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
    1c44:	29 81       	ldd	r18, Y+1	; 0x01
    1c46:	2b 83       	std	Y+3, r18	; 0x03
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	80 68       	ori	r24, 0x80	; 128
    1c4c:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDsendCommand>
	
}
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	2b 97       	sbiw	r28, 0x0b	; 11
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	99 87       	std	Y+9, r25	; 0x09
    1c76:	88 87       	std	Y+8, r24	; 0x08
    1c78:	6a 87       	std	Y+10, r22	; 0x0a
    1c7a:	4b 87       	std	Y+11, r20	; 0x0b
	uint8_t i;
	LCDGotoXY(x,y);
    1c7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c80:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1c84:	1f 82       	std	Y+7, r1	; 0x07
    1c86:	13 c0       	rjmp	.+38     	; 0x1cae <CopyStringtoLCD+0x4e>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1c88:	8f 81       	ldd	r24, Y+7	; 0x07
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	88 85       	ldd	r24, Y+8	; 0x08
    1c90:	99 85       	ldd	r25, Y+9	; 0x09
    1c92:	82 0f       	add	r24, r18
    1c94:	93 1f       	adc	r25, r19
    1c96:	9e 83       	std	Y+6, r25	; 0x06
    1c98:	8d 83       	std	Y+5, r24	; 0x05
    1c9a:	ed 81       	ldd	r30, Y+5	; 0x05
    1c9c:	fe 81       	ldd	r31, Y+6	; 0x06
    1c9e:	84 91       	lpm	r24, Z+
    1ca0:	8c 83       	std	Y+4, r24	; 0x04
    1ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca4:	0e 94 30 05 	call	0xa60	; 0xa60 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1ca8:	8f 81       	ldd	r24, Y+7	; 0x07
    1caa:	8f 5f       	subi	r24, 0xFF	; 255
    1cac:	8f 83       	std	Y+7, r24	; 0x07
    1cae:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	88 85       	ldd	r24, Y+8	; 0x08
    1cb6:	99 85       	ldd	r25, Y+9	; 0x09
    1cb8:	82 0f       	add	r24, r18
    1cba:	93 1f       	adc	r25, r19
    1cbc:	9b 83       	std	Y+3, r25	; 0x03
    1cbe:	8a 83       	std	Y+2, r24	; 0x02
    1cc0:	ea 81       	ldd	r30, Y+2	; 0x02
    1cc2:	fb 81       	ldd	r31, Y+3	; 0x03
    1cc4:	84 91       	lpm	r24, Z+
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	88 23       	and	r24, r24
    1ccc:	e9 f6       	brne	.-70     	; 0x1c88 <CopyStringtoLCD+0x28>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1cce:	2b 96       	adiw	r28, 0x0b	; 11
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	2a 97       	sbiw	r28, 0x0a	; 10
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	99 87       	std	Y+9, r25	; 0x09
    1cf6:	88 87       	std	Y+8, r24	; 0x08
    1cf8:	6a 87       	std	Y+10, r22	; 0x0a
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    1cfa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cfc:	88 2f       	mov	r24, r24
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	80 64       	ori	r24, 0x40	; 64
    1d0e:	8f 83       	std	Y+7, r24	; 0x07
	for (i=0; i<8; i++){
    1d10:	1d 82       	std	Y+5, r1	; 0x05
    1d12:	1c 82       	std	Y+4, r1	; 0x04
    1d14:	1d c0       	rjmp	.+58     	; 0x1d50 <LCDdefinechar+0x70>
		pcc=pgm_read_byte(&pc[i]);
    1d16:	28 85       	ldd	r18, Y+8	; 0x08
    1d18:	39 85       	ldd	r19, Y+9	; 0x09
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	82 0f       	add	r24, r18
    1d20:	93 1f       	adc	r25, r19
    1d22:	9b 83       	std	Y+3, r25	; 0x03
    1d24:	8a 83       	std	Y+2, r24	; 0x02
    1d26:	ea 81       	ldd	r30, Y+2	; 0x02
    1d28:	fb 81       	ldd	r31, Y+3	; 0x03
    1d2a:	84 91       	lpm	r24, Z+
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	8e 83       	std	Y+6, r24	; 0x06
		LCDsendCommand(a++);
    1d32:	9f 81       	ldd	r25, Y+7	; 0x07
    1d34:	8f 81       	ldd	r24, Y+7	; 0x07
    1d36:	8f 5f       	subi	r24, 0xFF	; 255
    1d38:	8f 83       	std	Y+7, r24	; 0x07
    1d3a:	89 2f       	mov	r24, r25
    1d3c:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDsendCommand>
		LCDsendChar(pcc);
    1d40:	8e 81       	ldd	r24, Y+6	; 0x06
    1d42:	0e 94 30 05 	call	0xa60	; 0xa60 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    1d46:	8c 81       	ldd	r24, Y+4	; 0x04
    1d48:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	9d 83       	std	Y+5, r25	; 0x05
    1d4e:	8c 83       	std	Y+4, r24	; 0x04
    1d50:	8c 81       	ldd	r24, Y+4	; 0x04
    1d52:	9d 81       	ldd	r25, Y+5	; 0x05
    1d54:	88 30       	cpi	r24, 0x08	; 8
    1d56:	91 05       	cpc	r25, r1
    1d58:	f0 f2       	brcs	.-68     	; 0x1d16 <LCDdefinechar+0x36>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    1d5a:	2a 96       	adiw	r28, 0x0a	; 10
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <LCDshiftLeft>:

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <LCDshiftLeft+0x6>
    1d72:	0f 92       	push	r0
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    1d7a:	1a 82       	std	Y+2, r1	; 0x02
    1d7c:	19 82       	std	Y+1, r1	; 0x01
    1d7e:	08 c0       	rjmp	.+16     	; 0x1d90 <LCDshiftLeft+0x24>
	{
		LCDsendCommand(0x1E);
    1d80:	8e e1       	ldi	r24, 0x1E	; 30
    1d82:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8a:	01 96       	adiw	r24, 0x01	; 1
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	82 17       	cp	r24, r18
    1d9c:	93 07       	cpc	r25, r19
    1d9e:	84 f3       	brlt	.-32     	; 0x1d80 <LCDshiftLeft+0x14>
	{
		LCDsendCommand(0x1E);
	}
}
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <LCDshiftRight+0x6>
    1db2:	0f 92       	push	r0
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    1dba:	1a 82       	std	Y+2, r1	; 0x02
    1dbc:	19 82       	std	Y+1, r1	; 0x01
    1dbe:	08 c0       	rjmp	.+16     	; 0x1dd0 <LCDshiftRight+0x24>
	{
		LCDsendCommand(0x18);
    1dc0:	88 e1       	ldi	r24, 0x18	; 24
    1dc2:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dca:	01 96       	adiw	r24, 0x01	; 1
    1dcc:	9a 83       	std	Y+2, r25	; 0x02
    1dce:	89 83       	std	Y+1, r24	; 0x01
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	82 17       	cp	r24, r18
    1ddc:	93 07       	cpc	r25, r19
    1dde:	84 f3       	brlt	.-32     	; 0x1dc0 <LCDshiftRight+0x14>
	{
		LCDsendCommand(0x18);
	}
}
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0E);
    1df4:	8e e0       	ldi	r24, 0x0E	; 14
    1df6:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDsendCommand>
}
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0F);
    1e08:	8f e0       	ldi	r24, 0x0F	; 15
    1e0a:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDsendCommand>
}
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    1e1c:	8c e0       	ldi	r24, 0x0C	; 12
    1e1e:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDsendCommand>
}
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x08);
    1e30:	88 e0       	ldi	r24, 0x08	; 8
    1e32:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDsendCommand>
}
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    1e44:	8c e0       	ldi	r24, 0x0C	; 12
    1e46:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDsendCommand>
}
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <LCDcursorLeft+0x6>
    1e56:	0f 92       	push	r0
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    1e5e:	1a 82       	std	Y+2, r1	; 0x02
    1e60:	19 82       	std	Y+1, r1	; 0x01
    1e62:	08 c0       	rjmp	.+16     	; 0x1e74 <LCDcursorLeft+0x24>
	{
		LCDsendCommand(0x10);
    1e64:	80 e1       	ldi	r24, 0x10	; 16
    1e66:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	82 17       	cp	r24, r18
    1e80:	93 07       	cpc	r25, r19
    1e82:	84 f3       	brlt	.-32     	; 0x1e64 <LCDcursorLeft+0x14>
	{
		LCDsendCommand(0x10);
	}
}
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <LCDcursorRight+0x6>
    1e96:	0f 92       	push	r0
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	8b 83       	std	Y+3, r24	; 0x03
	for (i=0;i<n;i++)
    1e9e:	1a 82       	std	Y+2, r1	; 0x02
    1ea0:	19 82       	std	Y+1, r1	; 0x01
    1ea2:	08 c0       	rjmp	.+16     	; 0x1eb4 <LCDcursorRight+0x24>
	{
		LCDsendCommand(0x14);
    1ea4:	84 e1       	ldi	r24, 0x14	; 20
    1ea6:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	9a 83       	std	Y+2, r25	; 0x02
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebe:	82 17       	cp	r24, r18
    1ec0:	93 07       	cpc	r25, r19
    1ec2:	84 f3       	brlt	.-32     	; 0x1ea4 <LCDcursorRight+0x14>
	{
		LCDsendCommand(0x14);
	}
}
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	27 97       	sbiw	r28, 0x07	; 7
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	6e 83       	std	Y+6, r22	; 0x06
    1ee8:	4f 83       	std	Y+7, r20	; 0x07
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	48 2f       	mov	r20, r24
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	c9 01       	movw	r24, r18
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	82 0f       	add	r24, r18
    1efe:	93 1f       	adc	r25, r19
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	9a 01       	movw	r18, r20
    1f06:	28 9f       	mul	r18, r24
    1f08:	a0 01       	movw	r20, r0
    1f0a:	29 9f       	mul	r18, r25
    1f0c:	50 0d       	add	r21, r0
    1f0e:	38 9f       	mul	r19, r24
    1f10:	50 0d       	add	r21, r0
    1f12:	11 24       	eor	r1, r1
    1f14:	8e 81       	ldd	r24, Y+6	; 0x06
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	ca 01       	movw	r24, r20
    1f1c:	b9 01       	movw	r22, r18
    1f1e:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__divmodhi4>
    1f22:	cb 01       	movw	r24, r22
    1f24:	9b 83       	std	Y+3, r25	; 0x03
    1f26:	8a 83       	std	Y+2, r24	; 0x02
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1f28:	1c 82       	std	Y+4, r1	; 0x04
    1f2a:	35 c0       	rjmp	.+106    	; 0x1f96 <LCDprogressBar+0xc6>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	c9 01       	movw	r24, r18
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	82 0f       	add	r24, r18
    1f3a:	93 1f       	adc	r25, r19
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	9c 01       	movw	r18, r24
    1f42:	2b 5f       	subi	r18, 0xFB	; 251
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4a:	82 17       	cp	r24, r18
    1f4c:	93 07       	cpc	r25, r19
    1f4e:	d8 f4       	brcc	.+54     	; 0x1f86 <LCDprogressBar+0xb6>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	c9 01       	movw	r24, r18
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	82 0f       	add	r24, r18
    1f5e:	93 1f       	adc	r25, r19
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	9c 01       	movw	r18, r24
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6a:	82 17       	cp	r24, r18
    1f6c:	93 07       	cpc	r25, r19
    1f6e:	10 f4       	brcc	.+4      	; 0x1f74 <LCDprogressBar+0xa4>
			{
				// this is an empty block
				// use space character?
				c = 0;
    1f70:	19 82       	std	Y+1, r1	; 0x01
    1f72:	0b c0       	rjmp	.+22     	; 0x1f8a <LCDprogressBar+0xba>
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	9b 81       	ldd	r25, Y+3	; 0x03
    1f78:	26 e0       	ldi	r18, 0x06	; 6
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	b9 01       	movw	r22, r18
    1f7e:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__udivmodhi4>
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <LCDprogressBar+0xba>
			}
		}
		else
		{
			// this is a full block
			c = 5;
    1f86:	85 e0       	ldi	r24, 0x05	; 5
    1f88:	89 83       	std	Y+1, r24	; 0x01
		}
		
		// write character to display
		LCDsendChar(c);
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	0e 94 30 05 	call	0xa60	; 0xa60 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	8f 5f       	subi	r24, 0xFF	; 255
    1f94:	8c 83       	std	Y+4, r24	; 0x04
    1f96:	9c 81       	ldd	r25, Y+4	; 0x04
    1f98:	8f 81       	ldd	r24, Y+7	; 0x07
    1f9a:	98 17       	cp	r25, r24
    1f9c:	38 f2       	brcs	.-114    	; 0x1f2c <LCDprogressBar+0x5c>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1f9e:	27 96       	adiw	r28, 0x07	; 7
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <LCDdisplay>:

void LCDdisplay(char a[])
{
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <LCDdisplay+0x6>
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	89 83       	std	Y+1, r24	; 0x01
	LCDstring(a,strlen(a));
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc2:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <strlen>
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	62 2f       	mov	r22, r18
    1fce:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <LCDstring>
}
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <__fixunssfsi>:
    1fdc:	ef 92       	push	r14
    1fde:	ff 92       	push	r15
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	7b 01       	movw	r14, r22
    1fe6:	8c 01       	movw	r16, r24
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	5f e4       	ldi	r21, 0x4F	; 79
    1ff0:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__gesf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	8c f0       	brlt	.+34     	; 0x201a <__fixunssfsi+0x3e>
    1ff8:	c8 01       	movw	r24, r16
    1ffa:	b7 01       	movw	r22, r14
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	5f e4       	ldi	r21, 0x4F	; 79
    2004:	0e 94 66 11 	call	0x22cc	; 0x22cc <__subsf3>
    2008:	0e 94 4e 13 	call	0x269c	; 0x269c <__fixsfsi>
    200c:	9b 01       	movw	r18, r22
    200e:	ac 01       	movw	r20, r24
    2010:	20 50       	subi	r18, 0x00	; 0
    2012:	30 40       	sbci	r19, 0x00	; 0
    2014:	40 40       	sbci	r20, 0x00	; 0
    2016:	50 48       	sbci	r21, 0x80	; 128
    2018:	06 c0       	rjmp	.+12     	; 0x2026 <__fixunssfsi+0x4a>
    201a:	c8 01       	movw	r24, r16
    201c:	b7 01       	movw	r22, r14
    201e:	0e 94 4e 13 	call	0x269c	; 0x269c <__fixsfsi>
    2022:	9b 01       	movw	r18, r22
    2024:	ac 01       	movw	r20, r24
    2026:	b9 01       	movw	r22, r18
    2028:	ca 01       	movw	r24, r20
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	ff 90       	pop	r15
    2030:	ef 90       	pop	r14
    2032:	08 95       	ret

00002034 <_fpadd_parts>:
    2034:	a0 e0       	ldi	r26, 0x00	; 0
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e0 e2       	ldi	r30, 0x20	; 32
    203a:	f0 e1       	ldi	r31, 0x10	; 16
    203c:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__prologue_saves__>
    2040:	dc 01       	movw	r26, r24
    2042:	2b 01       	movw	r4, r22
    2044:	fa 01       	movw	r30, r20
    2046:	9c 91       	ld	r25, X
    2048:	92 30       	cpi	r25, 0x02	; 2
    204a:	08 f4       	brcc	.+2      	; 0x204e <_fpadd_parts+0x1a>
    204c:	39 c1       	rjmp	.+626    	; 0x22c0 <_fpadd_parts+0x28c>
    204e:	eb 01       	movw	r28, r22
    2050:	88 81       	ld	r24, Y
    2052:	82 30       	cpi	r24, 0x02	; 2
    2054:	08 f4       	brcc	.+2      	; 0x2058 <_fpadd_parts+0x24>
    2056:	33 c1       	rjmp	.+614    	; 0x22be <_fpadd_parts+0x28a>
    2058:	94 30       	cpi	r25, 0x04	; 4
    205a:	69 f4       	brne	.+26     	; 0x2076 <_fpadd_parts+0x42>
    205c:	84 30       	cpi	r24, 0x04	; 4
    205e:	09 f0       	breq	.+2      	; 0x2062 <_fpadd_parts+0x2e>
    2060:	2f c1       	rjmp	.+606    	; 0x22c0 <_fpadd_parts+0x28c>
    2062:	11 96       	adiw	r26, 0x01	; 1
    2064:	9c 91       	ld	r25, X
    2066:	11 97       	sbiw	r26, 0x01	; 1
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	98 17       	cp	r25, r24
    206c:	09 f4       	brne	.+2      	; 0x2070 <_fpadd_parts+0x3c>
    206e:	28 c1       	rjmp	.+592    	; 0x22c0 <_fpadd_parts+0x28c>
    2070:	a0 e6       	ldi	r26, 0x60	; 96
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	25 c1       	rjmp	.+586    	; 0x22c0 <_fpadd_parts+0x28c>
    2076:	84 30       	cpi	r24, 0x04	; 4
    2078:	09 f4       	brne	.+2      	; 0x207c <_fpadd_parts+0x48>
    207a:	21 c1       	rjmp	.+578    	; 0x22be <_fpadd_parts+0x28a>
    207c:	82 30       	cpi	r24, 0x02	; 2
    207e:	a9 f4       	brne	.+42     	; 0x20aa <_fpadd_parts+0x76>
    2080:	92 30       	cpi	r25, 0x02	; 2
    2082:	09 f0       	breq	.+2      	; 0x2086 <_fpadd_parts+0x52>
    2084:	1d c1       	rjmp	.+570    	; 0x22c0 <_fpadd_parts+0x28c>
    2086:	9a 01       	movw	r18, r20
    2088:	ad 01       	movw	r20, r26
    208a:	88 e0       	ldi	r24, 0x08	; 8
    208c:	ea 01       	movw	r28, r20
    208e:	09 90       	ld	r0, Y+
    2090:	ae 01       	movw	r20, r28
    2092:	e9 01       	movw	r28, r18
    2094:	09 92       	st	Y+, r0
    2096:	9e 01       	movw	r18, r28
    2098:	81 50       	subi	r24, 0x01	; 1
    209a:	c1 f7       	brne	.-16     	; 0x208c <_fpadd_parts+0x58>
    209c:	e2 01       	movw	r28, r4
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	11 96       	adiw	r26, 0x01	; 1
    20a2:	9c 91       	ld	r25, X
    20a4:	89 23       	and	r24, r25
    20a6:	81 83       	std	Z+1, r24	; 0x01
    20a8:	08 c1       	rjmp	.+528    	; 0x22ba <_fpadd_parts+0x286>
    20aa:	92 30       	cpi	r25, 0x02	; 2
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <_fpadd_parts+0x7c>
    20ae:	07 c1       	rjmp	.+526    	; 0x22be <_fpadd_parts+0x28a>
    20b0:	12 96       	adiw	r26, 0x02	; 2
    20b2:	2d 90       	ld	r2, X+
    20b4:	3c 90       	ld	r3, X
    20b6:	13 97       	sbiw	r26, 0x03	; 3
    20b8:	eb 01       	movw	r28, r22
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	9b 81       	ldd	r25, Y+3	; 0x03
    20be:	14 96       	adiw	r26, 0x04	; 4
    20c0:	ad 90       	ld	r10, X+
    20c2:	bd 90       	ld	r11, X+
    20c4:	cd 90       	ld	r12, X+
    20c6:	dc 90       	ld	r13, X
    20c8:	17 97       	sbiw	r26, 0x07	; 7
    20ca:	ec 80       	ldd	r14, Y+4	; 0x04
    20cc:	fd 80       	ldd	r15, Y+5	; 0x05
    20ce:	0e 81       	ldd	r16, Y+6	; 0x06
    20d0:	1f 81       	ldd	r17, Y+7	; 0x07
    20d2:	91 01       	movw	r18, r2
    20d4:	28 1b       	sub	r18, r24
    20d6:	39 0b       	sbc	r19, r25
    20d8:	b9 01       	movw	r22, r18
    20da:	37 ff       	sbrs	r19, 7
    20dc:	04 c0       	rjmp	.+8      	; 0x20e6 <_fpadd_parts+0xb2>
    20de:	66 27       	eor	r22, r22
    20e0:	77 27       	eor	r23, r23
    20e2:	62 1b       	sub	r22, r18
    20e4:	73 0b       	sbc	r23, r19
    20e6:	60 32       	cpi	r22, 0x20	; 32
    20e8:	71 05       	cpc	r23, r1
    20ea:	0c f0       	brlt	.+2      	; 0x20ee <_fpadd_parts+0xba>
    20ec:	61 c0       	rjmp	.+194    	; 0x21b0 <_fpadd_parts+0x17c>
    20ee:	12 16       	cp	r1, r18
    20f0:	13 06       	cpc	r1, r19
    20f2:	6c f5       	brge	.+90     	; 0x214e <_fpadd_parts+0x11a>
    20f4:	37 01       	movw	r6, r14
    20f6:	48 01       	movw	r8, r16
    20f8:	06 2e       	mov	r0, r22
    20fa:	04 c0       	rjmp	.+8      	; 0x2104 <_fpadd_parts+0xd0>
    20fc:	96 94       	lsr	r9
    20fe:	87 94       	ror	r8
    2100:	77 94       	ror	r7
    2102:	67 94       	ror	r6
    2104:	0a 94       	dec	r0
    2106:	d2 f7       	brpl	.-12     	; 0x20fc <_fpadd_parts+0xc8>
    2108:	21 e0       	ldi	r18, 0x01	; 1
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	04 c0       	rjmp	.+8      	; 0x211a <_fpadd_parts+0xe6>
    2112:	22 0f       	add	r18, r18
    2114:	33 1f       	adc	r19, r19
    2116:	44 1f       	adc	r20, r20
    2118:	55 1f       	adc	r21, r21
    211a:	6a 95       	dec	r22
    211c:	d2 f7       	brpl	.-12     	; 0x2112 <_fpadd_parts+0xde>
    211e:	21 50       	subi	r18, 0x01	; 1
    2120:	30 40       	sbci	r19, 0x00	; 0
    2122:	40 40       	sbci	r20, 0x00	; 0
    2124:	50 40       	sbci	r21, 0x00	; 0
    2126:	2e 21       	and	r18, r14
    2128:	3f 21       	and	r19, r15
    212a:	40 23       	and	r20, r16
    212c:	51 23       	and	r21, r17
    212e:	21 15       	cp	r18, r1
    2130:	31 05       	cpc	r19, r1
    2132:	41 05       	cpc	r20, r1
    2134:	51 05       	cpc	r21, r1
    2136:	21 f0       	breq	.+8      	; 0x2140 <_fpadd_parts+0x10c>
    2138:	21 e0       	ldi	r18, 0x01	; 1
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	50 e0       	ldi	r21, 0x00	; 0
    2140:	79 01       	movw	r14, r18
    2142:	8a 01       	movw	r16, r20
    2144:	e6 28       	or	r14, r6
    2146:	f7 28       	or	r15, r7
    2148:	08 29       	or	r16, r8
    214a:	19 29       	or	r17, r9
    214c:	3c c0       	rjmp	.+120    	; 0x21c6 <_fpadd_parts+0x192>
    214e:	23 2b       	or	r18, r19
    2150:	d1 f1       	breq	.+116    	; 0x21c6 <_fpadd_parts+0x192>
    2152:	26 0e       	add	r2, r22
    2154:	37 1e       	adc	r3, r23
    2156:	35 01       	movw	r6, r10
    2158:	46 01       	movw	r8, r12
    215a:	06 2e       	mov	r0, r22
    215c:	04 c0       	rjmp	.+8      	; 0x2166 <_fpadd_parts+0x132>
    215e:	96 94       	lsr	r9
    2160:	87 94       	ror	r8
    2162:	77 94       	ror	r7
    2164:	67 94       	ror	r6
    2166:	0a 94       	dec	r0
    2168:	d2 f7       	brpl	.-12     	; 0x215e <_fpadd_parts+0x12a>
    216a:	21 e0       	ldi	r18, 0x01	; 1
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	04 c0       	rjmp	.+8      	; 0x217c <_fpadd_parts+0x148>
    2174:	22 0f       	add	r18, r18
    2176:	33 1f       	adc	r19, r19
    2178:	44 1f       	adc	r20, r20
    217a:	55 1f       	adc	r21, r21
    217c:	6a 95       	dec	r22
    217e:	d2 f7       	brpl	.-12     	; 0x2174 <_fpadd_parts+0x140>
    2180:	21 50       	subi	r18, 0x01	; 1
    2182:	30 40       	sbci	r19, 0x00	; 0
    2184:	40 40       	sbci	r20, 0x00	; 0
    2186:	50 40       	sbci	r21, 0x00	; 0
    2188:	2a 21       	and	r18, r10
    218a:	3b 21       	and	r19, r11
    218c:	4c 21       	and	r20, r12
    218e:	5d 21       	and	r21, r13
    2190:	21 15       	cp	r18, r1
    2192:	31 05       	cpc	r19, r1
    2194:	41 05       	cpc	r20, r1
    2196:	51 05       	cpc	r21, r1
    2198:	21 f0       	breq	.+8      	; 0x21a2 <_fpadd_parts+0x16e>
    219a:	21 e0       	ldi	r18, 0x01	; 1
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e0       	ldi	r20, 0x00	; 0
    21a0:	50 e0       	ldi	r21, 0x00	; 0
    21a2:	59 01       	movw	r10, r18
    21a4:	6a 01       	movw	r12, r20
    21a6:	a6 28       	or	r10, r6
    21a8:	b7 28       	or	r11, r7
    21aa:	c8 28       	or	r12, r8
    21ac:	d9 28       	or	r13, r9
    21ae:	0b c0       	rjmp	.+22     	; 0x21c6 <_fpadd_parts+0x192>
    21b0:	82 15       	cp	r24, r2
    21b2:	93 05       	cpc	r25, r3
    21b4:	2c f0       	brlt	.+10     	; 0x21c0 <_fpadd_parts+0x18c>
    21b6:	1c 01       	movw	r2, r24
    21b8:	aa 24       	eor	r10, r10
    21ba:	bb 24       	eor	r11, r11
    21bc:	65 01       	movw	r12, r10
    21be:	03 c0       	rjmp	.+6      	; 0x21c6 <_fpadd_parts+0x192>
    21c0:	ee 24       	eor	r14, r14
    21c2:	ff 24       	eor	r15, r15
    21c4:	87 01       	movw	r16, r14
    21c6:	11 96       	adiw	r26, 0x01	; 1
    21c8:	9c 91       	ld	r25, X
    21ca:	d2 01       	movw	r26, r4
    21cc:	11 96       	adiw	r26, 0x01	; 1
    21ce:	8c 91       	ld	r24, X
    21d0:	98 17       	cp	r25, r24
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <_fpadd_parts+0x1a2>
    21d4:	45 c0       	rjmp	.+138    	; 0x2260 <_fpadd_parts+0x22c>
    21d6:	99 23       	and	r25, r25
    21d8:	39 f0       	breq	.+14     	; 0x21e8 <_fpadd_parts+0x1b4>
    21da:	a8 01       	movw	r20, r16
    21dc:	97 01       	movw	r18, r14
    21de:	2a 19       	sub	r18, r10
    21e0:	3b 09       	sbc	r19, r11
    21e2:	4c 09       	sbc	r20, r12
    21e4:	5d 09       	sbc	r21, r13
    21e6:	06 c0       	rjmp	.+12     	; 0x21f4 <_fpadd_parts+0x1c0>
    21e8:	a6 01       	movw	r20, r12
    21ea:	95 01       	movw	r18, r10
    21ec:	2e 19       	sub	r18, r14
    21ee:	3f 09       	sbc	r19, r15
    21f0:	40 0b       	sbc	r20, r16
    21f2:	51 0b       	sbc	r21, r17
    21f4:	57 fd       	sbrc	r21, 7
    21f6:	08 c0       	rjmp	.+16     	; 0x2208 <_fpadd_parts+0x1d4>
    21f8:	11 82       	std	Z+1, r1	; 0x01
    21fa:	33 82       	std	Z+3, r3	; 0x03
    21fc:	22 82       	std	Z+2, r2	; 0x02
    21fe:	24 83       	std	Z+4, r18	; 0x04
    2200:	35 83       	std	Z+5, r19	; 0x05
    2202:	46 83       	std	Z+6, r20	; 0x06
    2204:	57 83       	std	Z+7, r21	; 0x07
    2206:	1d c0       	rjmp	.+58     	; 0x2242 <_fpadd_parts+0x20e>
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	81 83       	std	Z+1, r24	; 0x01
    220c:	33 82       	std	Z+3, r3	; 0x03
    220e:	22 82       	std	Z+2, r2	; 0x02
    2210:	88 27       	eor	r24, r24
    2212:	99 27       	eor	r25, r25
    2214:	dc 01       	movw	r26, r24
    2216:	82 1b       	sub	r24, r18
    2218:	93 0b       	sbc	r25, r19
    221a:	a4 0b       	sbc	r26, r20
    221c:	b5 0b       	sbc	r27, r21
    221e:	84 83       	std	Z+4, r24	; 0x04
    2220:	95 83       	std	Z+5, r25	; 0x05
    2222:	a6 83       	std	Z+6, r26	; 0x06
    2224:	b7 83       	std	Z+7, r27	; 0x07
    2226:	0d c0       	rjmp	.+26     	; 0x2242 <_fpadd_parts+0x20e>
    2228:	22 0f       	add	r18, r18
    222a:	33 1f       	adc	r19, r19
    222c:	44 1f       	adc	r20, r20
    222e:	55 1f       	adc	r21, r21
    2230:	24 83       	std	Z+4, r18	; 0x04
    2232:	35 83       	std	Z+5, r19	; 0x05
    2234:	46 83       	std	Z+6, r20	; 0x06
    2236:	57 83       	std	Z+7, r21	; 0x07
    2238:	82 81       	ldd	r24, Z+2	; 0x02
    223a:	93 81       	ldd	r25, Z+3	; 0x03
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	93 83       	std	Z+3, r25	; 0x03
    2240:	82 83       	std	Z+2, r24	; 0x02
    2242:	24 81       	ldd	r18, Z+4	; 0x04
    2244:	35 81       	ldd	r19, Z+5	; 0x05
    2246:	46 81       	ldd	r20, Z+6	; 0x06
    2248:	57 81       	ldd	r21, Z+7	; 0x07
    224a:	da 01       	movw	r26, r20
    224c:	c9 01       	movw	r24, r18
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	a1 09       	sbc	r26, r1
    2252:	b1 09       	sbc	r27, r1
    2254:	8f 5f       	subi	r24, 0xFF	; 255
    2256:	9f 4f       	sbci	r25, 0xFF	; 255
    2258:	af 4f       	sbci	r26, 0xFF	; 255
    225a:	bf 43       	sbci	r27, 0x3F	; 63
    225c:	28 f3       	brcs	.-54     	; 0x2228 <_fpadd_parts+0x1f4>
    225e:	0b c0       	rjmp	.+22     	; 0x2276 <_fpadd_parts+0x242>
    2260:	91 83       	std	Z+1, r25	; 0x01
    2262:	33 82       	std	Z+3, r3	; 0x03
    2264:	22 82       	std	Z+2, r2	; 0x02
    2266:	ea 0c       	add	r14, r10
    2268:	fb 1c       	adc	r15, r11
    226a:	0c 1d       	adc	r16, r12
    226c:	1d 1d       	adc	r17, r13
    226e:	e4 82       	std	Z+4, r14	; 0x04
    2270:	f5 82       	std	Z+5, r15	; 0x05
    2272:	06 83       	std	Z+6, r16	; 0x06
    2274:	17 83       	std	Z+7, r17	; 0x07
    2276:	83 e0       	ldi	r24, 0x03	; 3
    2278:	80 83       	st	Z, r24
    227a:	24 81       	ldd	r18, Z+4	; 0x04
    227c:	35 81       	ldd	r19, Z+5	; 0x05
    227e:	46 81       	ldd	r20, Z+6	; 0x06
    2280:	57 81       	ldd	r21, Z+7	; 0x07
    2282:	57 ff       	sbrs	r21, 7
    2284:	1a c0       	rjmp	.+52     	; 0x22ba <_fpadd_parts+0x286>
    2286:	c9 01       	movw	r24, r18
    2288:	aa 27       	eor	r26, r26
    228a:	97 fd       	sbrc	r25, 7
    228c:	a0 95       	com	r26
    228e:	ba 2f       	mov	r27, r26
    2290:	81 70       	andi	r24, 0x01	; 1
    2292:	90 70       	andi	r25, 0x00	; 0
    2294:	a0 70       	andi	r26, 0x00	; 0
    2296:	b0 70       	andi	r27, 0x00	; 0
    2298:	56 95       	lsr	r21
    229a:	47 95       	ror	r20
    229c:	37 95       	ror	r19
    229e:	27 95       	ror	r18
    22a0:	82 2b       	or	r24, r18
    22a2:	93 2b       	or	r25, r19
    22a4:	a4 2b       	or	r26, r20
    22a6:	b5 2b       	or	r27, r21
    22a8:	84 83       	std	Z+4, r24	; 0x04
    22aa:	95 83       	std	Z+5, r25	; 0x05
    22ac:	a6 83       	std	Z+6, r26	; 0x06
    22ae:	b7 83       	std	Z+7, r27	; 0x07
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	93 81       	ldd	r25, Z+3	; 0x03
    22b4:	01 96       	adiw	r24, 0x01	; 1
    22b6:	93 83       	std	Z+3, r25	; 0x03
    22b8:	82 83       	std	Z+2, r24	; 0x02
    22ba:	df 01       	movw	r26, r30
    22bc:	01 c0       	rjmp	.+2      	; 0x22c0 <_fpadd_parts+0x28c>
    22be:	d2 01       	movw	r26, r4
    22c0:	cd 01       	movw	r24, r26
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	e2 e1       	ldi	r30, 0x12	; 18
    22c8:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__epilogue_restores__>

000022cc <__subsf3>:
    22cc:	a0 e2       	ldi	r26, 0x20	; 32
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	ec e6       	ldi	r30, 0x6C	; 108
    22d2:	f1 e1       	ldi	r31, 0x11	; 17
    22d4:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__prologue_saves__+0x18>
    22d8:	69 83       	std	Y+1, r22	; 0x01
    22da:	7a 83       	std	Y+2, r23	; 0x02
    22dc:	8b 83       	std	Y+3, r24	; 0x03
    22de:	9c 83       	std	Y+4, r25	; 0x04
    22e0:	2d 83       	std	Y+5, r18	; 0x05
    22e2:	3e 83       	std	Y+6, r19	; 0x06
    22e4:	4f 83       	std	Y+7, r20	; 0x07
    22e6:	58 87       	std	Y+8, r21	; 0x08
    22e8:	e9 e0       	ldi	r30, 0x09	; 9
    22ea:	ee 2e       	mov	r14, r30
    22ec:	f1 2c       	mov	r15, r1
    22ee:	ec 0e       	add	r14, r28
    22f0:	fd 1e       	adc	r15, r29
    22f2:	ce 01       	movw	r24, r28
    22f4:	01 96       	adiw	r24, 0x01	; 1
    22f6:	b7 01       	movw	r22, r14
    22f8:	0e 94 77 14 	call	0x28ee	; 0x28ee <__unpack_f>
    22fc:	8e 01       	movw	r16, r28
    22fe:	0f 5e       	subi	r16, 0xEF	; 239
    2300:	1f 4f       	sbci	r17, 0xFF	; 255
    2302:	ce 01       	movw	r24, r28
    2304:	05 96       	adiw	r24, 0x05	; 5
    2306:	b8 01       	movw	r22, r16
    2308:	0e 94 77 14 	call	0x28ee	; 0x28ee <__unpack_f>
    230c:	8a 89       	ldd	r24, Y+18	; 0x12
    230e:	91 e0       	ldi	r25, 0x01	; 1
    2310:	89 27       	eor	r24, r25
    2312:	8a 8b       	std	Y+18, r24	; 0x12
    2314:	c7 01       	movw	r24, r14
    2316:	b8 01       	movw	r22, r16
    2318:	ae 01       	movw	r20, r28
    231a:	47 5e       	subi	r20, 0xE7	; 231
    231c:	5f 4f       	sbci	r21, 0xFF	; 255
    231e:	0e 94 1a 10 	call	0x2034	; 0x2034 <_fpadd_parts>
    2322:	0e 94 a2 13 	call	0x2744	; 0x2744 <__pack_f>
    2326:	a0 96       	adiw	r28, 0x20	; 32
    2328:	e6 e0       	ldi	r30, 0x06	; 6
    232a:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__epilogue_restores__+0x18>

0000232e <__addsf3>:
    232e:	a0 e2       	ldi	r26, 0x20	; 32
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	ed e9       	ldi	r30, 0x9D	; 157
    2334:	f1 e1       	ldi	r31, 0x11	; 17
    2336:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__prologue_saves__+0x18>
    233a:	69 83       	std	Y+1, r22	; 0x01
    233c:	7a 83       	std	Y+2, r23	; 0x02
    233e:	8b 83       	std	Y+3, r24	; 0x03
    2340:	9c 83       	std	Y+4, r25	; 0x04
    2342:	2d 83       	std	Y+5, r18	; 0x05
    2344:	3e 83       	std	Y+6, r19	; 0x06
    2346:	4f 83       	std	Y+7, r20	; 0x07
    2348:	58 87       	std	Y+8, r21	; 0x08
    234a:	f9 e0       	ldi	r31, 0x09	; 9
    234c:	ef 2e       	mov	r14, r31
    234e:	f1 2c       	mov	r15, r1
    2350:	ec 0e       	add	r14, r28
    2352:	fd 1e       	adc	r15, r29
    2354:	ce 01       	movw	r24, r28
    2356:	01 96       	adiw	r24, 0x01	; 1
    2358:	b7 01       	movw	r22, r14
    235a:	0e 94 77 14 	call	0x28ee	; 0x28ee <__unpack_f>
    235e:	8e 01       	movw	r16, r28
    2360:	0f 5e       	subi	r16, 0xEF	; 239
    2362:	1f 4f       	sbci	r17, 0xFF	; 255
    2364:	ce 01       	movw	r24, r28
    2366:	05 96       	adiw	r24, 0x05	; 5
    2368:	b8 01       	movw	r22, r16
    236a:	0e 94 77 14 	call	0x28ee	; 0x28ee <__unpack_f>
    236e:	c7 01       	movw	r24, r14
    2370:	b8 01       	movw	r22, r16
    2372:	ae 01       	movw	r20, r28
    2374:	47 5e       	subi	r20, 0xE7	; 231
    2376:	5f 4f       	sbci	r21, 0xFF	; 255
    2378:	0e 94 1a 10 	call	0x2034	; 0x2034 <_fpadd_parts>
    237c:	0e 94 a2 13 	call	0x2744	; 0x2744 <__pack_f>
    2380:	a0 96       	adiw	r28, 0x20	; 32
    2382:	e6 e0       	ldi	r30, 0x06	; 6
    2384:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__epilogue_restores__+0x18>

00002388 <__mulsf3>:
    2388:	a0 e2       	ldi	r26, 0x20	; 32
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	ea ec       	ldi	r30, 0xCA	; 202
    238e:	f1 e1       	ldi	r31, 0x11	; 17
    2390:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__prologue_saves__>
    2394:	69 83       	std	Y+1, r22	; 0x01
    2396:	7a 83       	std	Y+2, r23	; 0x02
    2398:	8b 83       	std	Y+3, r24	; 0x03
    239a:	9c 83       	std	Y+4, r25	; 0x04
    239c:	2d 83       	std	Y+5, r18	; 0x05
    239e:	3e 83       	std	Y+6, r19	; 0x06
    23a0:	4f 83       	std	Y+7, r20	; 0x07
    23a2:	58 87       	std	Y+8, r21	; 0x08
    23a4:	ce 01       	movw	r24, r28
    23a6:	01 96       	adiw	r24, 0x01	; 1
    23a8:	be 01       	movw	r22, r28
    23aa:	67 5f       	subi	r22, 0xF7	; 247
    23ac:	7f 4f       	sbci	r23, 0xFF	; 255
    23ae:	0e 94 77 14 	call	0x28ee	; 0x28ee <__unpack_f>
    23b2:	ce 01       	movw	r24, r28
    23b4:	05 96       	adiw	r24, 0x05	; 5
    23b6:	be 01       	movw	r22, r28
    23b8:	6f 5e       	subi	r22, 0xEF	; 239
    23ba:	7f 4f       	sbci	r23, 0xFF	; 255
    23bc:	0e 94 77 14 	call	0x28ee	; 0x28ee <__unpack_f>
    23c0:	99 85       	ldd	r25, Y+9	; 0x09
    23c2:	92 30       	cpi	r25, 0x02	; 2
    23c4:	88 f0       	brcs	.+34     	; 0x23e8 <__mulsf3+0x60>
    23c6:	89 89       	ldd	r24, Y+17	; 0x11
    23c8:	82 30       	cpi	r24, 0x02	; 2
    23ca:	c8 f0       	brcs	.+50     	; 0x23fe <__mulsf3+0x76>
    23cc:	94 30       	cpi	r25, 0x04	; 4
    23ce:	19 f4       	brne	.+6      	; 0x23d6 <__mulsf3+0x4e>
    23d0:	82 30       	cpi	r24, 0x02	; 2
    23d2:	51 f4       	brne	.+20     	; 0x23e8 <__mulsf3+0x60>
    23d4:	04 c0       	rjmp	.+8      	; 0x23de <__mulsf3+0x56>
    23d6:	84 30       	cpi	r24, 0x04	; 4
    23d8:	29 f4       	brne	.+10     	; 0x23e4 <__mulsf3+0x5c>
    23da:	92 30       	cpi	r25, 0x02	; 2
    23dc:	81 f4       	brne	.+32     	; 0x23fe <__mulsf3+0x76>
    23de:	80 e6       	ldi	r24, 0x60	; 96
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	c6 c0       	rjmp	.+396    	; 0x2570 <__mulsf3+0x1e8>
    23e4:	92 30       	cpi	r25, 0x02	; 2
    23e6:	49 f4       	brne	.+18     	; 0x23fa <__mulsf3+0x72>
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ec:	8a 89       	ldd	r24, Y+18	; 0x12
    23ee:	98 13       	cpse	r25, r24
    23f0:	21 e0       	ldi	r18, 0x01	; 1
    23f2:	2a 87       	std	Y+10, r18	; 0x0a
    23f4:	ce 01       	movw	r24, r28
    23f6:	09 96       	adiw	r24, 0x09	; 9
    23f8:	bb c0       	rjmp	.+374    	; 0x2570 <__mulsf3+0x1e8>
    23fa:	82 30       	cpi	r24, 0x02	; 2
    23fc:	49 f4       	brne	.+18     	; 0x2410 <__mulsf3+0x88>
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	9a 85       	ldd	r25, Y+10	; 0x0a
    2402:	8a 89       	ldd	r24, Y+18	; 0x12
    2404:	98 13       	cpse	r25, r24
    2406:	21 e0       	ldi	r18, 0x01	; 1
    2408:	2a 8b       	std	Y+18, r18	; 0x12
    240a:	ce 01       	movw	r24, r28
    240c:	41 96       	adiw	r24, 0x11	; 17
    240e:	b0 c0       	rjmp	.+352    	; 0x2570 <__mulsf3+0x1e8>
    2410:	2d 84       	ldd	r2, Y+13	; 0x0d
    2412:	3e 84       	ldd	r3, Y+14	; 0x0e
    2414:	4f 84       	ldd	r4, Y+15	; 0x0f
    2416:	58 88       	ldd	r5, Y+16	; 0x10
    2418:	6d 88       	ldd	r6, Y+21	; 0x15
    241a:	7e 88       	ldd	r7, Y+22	; 0x16
    241c:	8f 88       	ldd	r8, Y+23	; 0x17
    241e:	98 8c       	ldd	r9, Y+24	; 0x18
    2420:	ee 24       	eor	r14, r14
    2422:	ff 24       	eor	r15, r15
    2424:	87 01       	movw	r16, r14
    2426:	aa 24       	eor	r10, r10
    2428:	bb 24       	eor	r11, r11
    242a:	65 01       	movw	r12, r10
    242c:	40 e0       	ldi	r20, 0x00	; 0
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	70 e0       	ldi	r23, 0x00	; 0
    2434:	e0 e0       	ldi	r30, 0x00	; 0
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	c1 01       	movw	r24, r2
    243a:	81 70       	andi	r24, 0x01	; 1
    243c:	90 70       	andi	r25, 0x00	; 0
    243e:	89 2b       	or	r24, r25
    2440:	e9 f0       	breq	.+58     	; 0x247c <__mulsf3+0xf4>
    2442:	e6 0c       	add	r14, r6
    2444:	f7 1c       	adc	r15, r7
    2446:	08 1d       	adc	r16, r8
    2448:	19 1d       	adc	r17, r9
    244a:	9a 01       	movw	r18, r20
    244c:	ab 01       	movw	r20, r22
    244e:	2a 0d       	add	r18, r10
    2450:	3b 1d       	adc	r19, r11
    2452:	4c 1d       	adc	r20, r12
    2454:	5d 1d       	adc	r21, r13
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	a0 e0       	ldi	r26, 0x00	; 0
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e6 14       	cp	r14, r6
    2460:	f7 04       	cpc	r15, r7
    2462:	08 05       	cpc	r16, r8
    2464:	19 05       	cpc	r17, r9
    2466:	20 f4       	brcc	.+8      	; 0x2470 <__mulsf3+0xe8>
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	a0 e0       	ldi	r26, 0x00	; 0
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	ba 01       	movw	r22, r20
    2472:	a9 01       	movw	r20, r18
    2474:	48 0f       	add	r20, r24
    2476:	59 1f       	adc	r21, r25
    2478:	6a 1f       	adc	r22, r26
    247a:	7b 1f       	adc	r23, r27
    247c:	aa 0c       	add	r10, r10
    247e:	bb 1c       	adc	r11, r11
    2480:	cc 1c       	adc	r12, r12
    2482:	dd 1c       	adc	r13, r13
    2484:	97 fe       	sbrs	r9, 7
    2486:	08 c0       	rjmp	.+16     	; 0x2498 <__mulsf3+0x110>
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	a0 e0       	ldi	r26, 0x00	; 0
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	a8 2a       	or	r10, r24
    2492:	b9 2a       	or	r11, r25
    2494:	ca 2a       	or	r12, r26
    2496:	db 2a       	or	r13, r27
    2498:	31 96       	adiw	r30, 0x01	; 1
    249a:	e0 32       	cpi	r30, 0x20	; 32
    249c:	f1 05       	cpc	r31, r1
    249e:	49 f0       	breq	.+18     	; 0x24b2 <__mulsf3+0x12a>
    24a0:	66 0c       	add	r6, r6
    24a2:	77 1c       	adc	r7, r7
    24a4:	88 1c       	adc	r8, r8
    24a6:	99 1c       	adc	r9, r9
    24a8:	56 94       	lsr	r5
    24aa:	47 94       	ror	r4
    24ac:	37 94       	ror	r3
    24ae:	27 94       	ror	r2
    24b0:	c3 cf       	rjmp	.-122    	; 0x2438 <__mulsf3+0xb0>
    24b2:	fa 85       	ldd	r31, Y+10	; 0x0a
    24b4:	ea 89       	ldd	r30, Y+18	; 0x12
    24b6:	2b 89       	ldd	r18, Y+19	; 0x13
    24b8:	3c 89       	ldd	r19, Y+20	; 0x14
    24ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    24bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    24be:	28 0f       	add	r18, r24
    24c0:	39 1f       	adc	r19, r25
    24c2:	2e 5f       	subi	r18, 0xFE	; 254
    24c4:	3f 4f       	sbci	r19, 0xFF	; 255
    24c6:	17 c0       	rjmp	.+46     	; 0x24f6 <__mulsf3+0x16e>
    24c8:	ca 01       	movw	r24, r20
    24ca:	81 70       	andi	r24, 0x01	; 1
    24cc:	90 70       	andi	r25, 0x00	; 0
    24ce:	89 2b       	or	r24, r25
    24d0:	61 f0       	breq	.+24     	; 0x24ea <__mulsf3+0x162>
    24d2:	16 95       	lsr	r17
    24d4:	07 95       	ror	r16
    24d6:	f7 94       	ror	r15
    24d8:	e7 94       	ror	r14
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a0 e0       	ldi	r26, 0x00	; 0
    24e0:	b0 e8       	ldi	r27, 0x80	; 128
    24e2:	e8 2a       	or	r14, r24
    24e4:	f9 2a       	or	r15, r25
    24e6:	0a 2b       	or	r16, r26
    24e8:	1b 2b       	or	r17, r27
    24ea:	76 95       	lsr	r23
    24ec:	67 95       	ror	r22
    24ee:	57 95       	ror	r21
    24f0:	47 95       	ror	r20
    24f2:	2f 5f       	subi	r18, 0xFF	; 255
    24f4:	3f 4f       	sbci	r19, 0xFF	; 255
    24f6:	77 fd       	sbrc	r23, 7
    24f8:	e7 cf       	rjmp	.-50     	; 0x24c8 <__mulsf3+0x140>
    24fa:	0c c0       	rjmp	.+24     	; 0x2514 <__mulsf3+0x18c>
    24fc:	44 0f       	add	r20, r20
    24fe:	55 1f       	adc	r21, r21
    2500:	66 1f       	adc	r22, r22
    2502:	77 1f       	adc	r23, r23
    2504:	17 fd       	sbrc	r17, 7
    2506:	41 60       	ori	r20, 0x01	; 1
    2508:	ee 0c       	add	r14, r14
    250a:	ff 1c       	adc	r15, r15
    250c:	00 1f       	adc	r16, r16
    250e:	11 1f       	adc	r17, r17
    2510:	21 50       	subi	r18, 0x01	; 1
    2512:	30 40       	sbci	r19, 0x00	; 0
    2514:	40 30       	cpi	r20, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	59 07       	cpc	r21, r25
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	69 07       	cpc	r22, r25
    251e:	90 e4       	ldi	r25, 0x40	; 64
    2520:	79 07       	cpc	r23, r25
    2522:	60 f3       	brcs	.-40     	; 0x24fc <__mulsf3+0x174>
    2524:	2b 8f       	std	Y+27, r18	; 0x1b
    2526:	3c 8f       	std	Y+28, r19	; 0x1c
    2528:	db 01       	movw	r26, r22
    252a:	ca 01       	movw	r24, r20
    252c:	8f 77       	andi	r24, 0x7F	; 127
    252e:	90 70       	andi	r25, 0x00	; 0
    2530:	a0 70       	andi	r26, 0x00	; 0
    2532:	b0 70       	andi	r27, 0x00	; 0
    2534:	80 34       	cpi	r24, 0x40	; 64
    2536:	91 05       	cpc	r25, r1
    2538:	a1 05       	cpc	r26, r1
    253a:	b1 05       	cpc	r27, r1
    253c:	61 f4       	brne	.+24     	; 0x2556 <__mulsf3+0x1ce>
    253e:	47 fd       	sbrc	r20, 7
    2540:	0a c0       	rjmp	.+20     	; 0x2556 <__mulsf3+0x1ce>
    2542:	e1 14       	cp	r14, r1
    2544:	f1 04       	cpc	r15, r1
    2546:	01 05       	cpc	r16, r1
    2548:	11 05       	cpc	r17, r1
    254a:	29 f0       	breq	.+10     	; 0x2556 <__mulsf3+0x1ce>
    254c:	40 5c       	subi	r20, 0xC0	; 192
    254e:	5f 4f       	sbci	r21, 0xFF	; 255
    2550:	6f 4f       	sbci	r22, 0xFF	; 255
    2552:	7f 4f       	sbci	r23, 0xFF	; 255
    2554:	40 78       	andi	r20, 0x80	; 128
    2556:	1a 8e       	std	Y+26, r1	; 0x1a
    2558:	fe 17       	cp	r31, r30
    255a:	11 f0       	breq	.+4      	; 0x2560 <__mulsf3+0x1d8>
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	8a 8f       	std	Y+26, r24	; 0x1a
    2560:	4d 8f       	std	Y+29, r20	; 0x1d
    2562:	5e 8f       	std	Y+30, r21	; 0x1e
    2564:	6f 8f       	std	Y+31, r22	; 0x1f
    2566:	78 a3       	std	Y+32, r23	; 0x20
    2568:	83 e0       	ldi	r24, 0x03	; 3
    256a:	89 8f       	std	Y+25, r24	; 0x19
    256c:	ce 01       	movw	r24, r28
    256e:	49 96       	adiw	r24, 0x19	; 25
    2570:	0e 94 a2 13 	call	0x2744	; 0x2744 <__pack_f>
    2574:	a0 96       	adiw	r28, 0x20	; 32
    2576:	e2 e1       	ldi	r30, 0x12	; 18
    2578:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__epilogue_restores__>

0000257c <__gtsf2>:
    257c:	a8 e1       	ldi	r26, 0x18	; 24
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e4 ec       	ldi	r30, 0xC4	; 196
    2582:	f2 e1       	ldi	r31, 0x12	; 18
    2584:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__prologue_saves__+0x18>
    2588:	69 83       	std	Y+1, r22	; 0x01
    258a:	7a 83       	std	Y+2, r23	; 0x02
    258c:	8b 83       	std	Y+3, r24	; 0x03
    258e:	9c 83       	std	Y+4, r25	; 0x04
    2590:	2d 83       	std	Y+5, r18	; 0x05
    2592:	3e 83       	std	Y+6, r19	; 0x06
    2594:	4f 83       	std	Y+7, r20	; 0x07
    2596:	58 87       	std	Y+8, r21	; 0x08
    2598:	89 e0       	ldi	r24, 0x09	; 9
    259a:	e8 2e       	mov	r14, r24
    259c:	f1 2c       	mov	r15, r1
    259e:	ec 0e       	add	r14, r28
    25a0:	fd 1e       	adc	r15, r29
    25a2:	ce 01       	movw	r24, r28
    25a4:	01 96       	adiw	r24, 0x01	; 1
    25a6:	b7 01       	movw	r22, r14
    25a8:	0e 94 77 14 	call	0x28ee	; 0x28ee <__unpack_f>
    25ac:	8e 01       	movw	r16, r28
    25ae:	0f 5e       	subi	r16, 0xEF	; 239
    25b0:	1f 4f       	sbci	r17, 0xFF	; 255
    25b2:	ce 01       	movw	r24, r28
    25b4:	05 96       	adiw	r24, 0x05	; 5
    25b6:	b8 01       	movw	r22, r16
    25b8:	0e 94 77 14 	call	0x28ee	; 0x28ee <__unpack_f>
    25bc:	89 85       	ldd	r24, Y+9	; 0x09
    25be:	82 30       	cpi	r24, 0x02	; 2
    25c0:	40 f0       	brcs	.+16     	; 0x25d2 <__gtsf2+0x56>
    25c2:	89 89       	ldd	r24, Y+17	; 0x11
    25c4:	82 30       	cpi	r24, 0x02	; 2
    25c6:	28 f0       	brcs	.+10     	; 0x25d2 <__gtsf2+0x56>
    25c8:	c7 01       	movw	r24, r14
    25ca:	b8 01       	movw	r22, r16
    25cc:	0e 94 ef 14 	call	0x29de	; 0x29de <__fpcmp_parts_f>
    25d0:	01 c0       	rjmp	.+2      	; 0x25d4 <__gtsf2+0x58>
    25d2:	8f ef       	ldi	r24, 0xFF	; 255
    25d4:	68 96       	adiw	r28, 0x18	; 24
    25d6:	e6 e0       	ldi	r30, 0x06	; 6
    25d8:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__epilogue_restores__+0x18>

000025dc <__gesf2>:
    25dc:	a8 e1       	ldi	r26, 0x18	; 24
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e4 ef       	ldi	r30, 0xF4	; 244
    25e2:	f2 e1       	ldi	r31, 0x12	; 18
    25e4:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__prologue_saves__+0x18>
    25e8:	69 83       	std	Y+1, r22	; 0x01
    25ea:	7a 83       	std	Y+2, r23	; 0x02
    25ec:	8b 83       	std	Y+3, r24	; 0x03
    25ee:	9c 83       	std	Y+4, r25	; 0x04
    25f0:	2d 83       	std	Y+5, r18	; 0x05
    25f2:	3e 83       	std	Y+6, r19	; 0x06
    25f4:	4f 83       	std	Y+7, r20	; 0x07
    25f6:	58 87       	std	Y+8, r21	; 0x08
    25f8:	89 e0       	ldi	r24, 0x09	; 9
    25fa:	e8 2e       	mov	r14, r24
    25fc:	f1 2c       	mov	r15, r1
    25fe:	ec 0e       	add	r14, r28
    2600:	fd 1e       	adc	r15, r29
    2602:	ce 01       	movw	r24, r28
    2604:	01 96       	adiw	r24, 0x01	; 1
    2606:	b7 01       	movw	r22, r14
    2608:	0e 94 77 14 	call	0x28ee	; 0x28ee <__unpack_f>
    260c:	8e 01       	movw	r16, r28
    260e:	0f 5e       	subi	r16, 0xEF	; 239
    2610:	1f 4f       	sbci	r17, 0xFF	; 255
    2612:	ce 01       	movw	r24, r28
    2614:	05 96       	adiw	r24, 0x05	; 5
    2616:	b8 01       	movw	r22, r16
    2618:	0e 94 77 14 	call	0x28ee	; 0x28ee <__unpack_f>
    261c:	89 85       	ldd	r24, Y+9	; 0x09
    261e:	82 30       	cpi	r24, 0x02	; 2
    2620:	40 f0       	brcs	.+16     	; 0x2632 <__gesf2+0x56>
    2622:	89 89       	ldd	r24, Y+17	; 0x11
    2624:	82 30       	cpi	r24, 0x02	; 2
    2626:	28 f0       	brcs	.+10     	; 0x2632 <__gesf2+0x56>
    2628:	c7 01       	movw	r24, r14
    262a:	b8 01       	movw	r22, r16
    262c:	0e 94 ef 14 	call	0x29de	; 0x29de <__fpcmp_parts_f>
    2630:	01 c0       	rjmp	.+2      	; 0x2634 <__gesf2+0x58>
    2632:	8f ef       	ldi	r24, 0xFF	; 255
    2634:	68 96       	adiw	r28, 0x18	; 24
    2636:	e6 e0       	ldi	r30, 0x06	; 6
    2638:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__epilogue_restores__+0x18>

0000263c <__ltsf2>:
    263c:	a8 e1       	ldi	r26, 0x18	; 24
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	e4 e2       	ldi	r30, 0x24	; 36
    2642:	f3 e1       	ldi	r31, 0x13	; 19
    2644:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__prologue_saves__+0x18>
    2648:	69 83       	std	Y+1, r22	; 0x01
    264a:	7a 83       	std	Y+2, r23	; 0x02
    264c:	8b 83       	std	Y+3, r24	; 0x03
    264e:	9c 83       	std	Y+4, r25	; 0x04
    2650:	2d 83       	std	Y+5, r18	; 0x05
    2652:	3e 83       	std	Y+6, r19	; 0x06
    2654:	4f 83       	std	Y+7, r20	; 0x07
    2656:	58 87       	std	Y+8, r21	; 0x08
    2658:	89 e0       	ldi	r24, 0x09	; 9
    265a:	e8 2e       	mov	r14, r24
    265c:	f1 2c       	mov	r15, r1
    265e:	ec 0e       	add	r14, r28
    2660:	fd 1e       	adc	r15, r29
    2662:	ce 01       	movw	r24, r28
    2664:	01 96       	adiw	r24, 0x01	; 1
    2666:	b7 01       	movw	r22, r14
    2668:	0e 94 77 14 	call	0x28ee	; 0x28ee <__unpack_f>
    266c:	8e 01       	movw	r16, r28
    266e:	0f 5e       	subi	r16, 0xEF	; 239
    2670:	1f 4f       	sbci	r17, 0xFF	; 255
    2672:	ce 01       	movw	r24, r28
    2674:	05 96       	adiw	r24, 0x05	; 5
    2676:	b8 01       	movw	r22, r16
    2678:	0e 94 77 14 	call	0x28ee	; 0x28ee <__unpack_f>
    267c:	89 85       	ldd	r24, Y+9	; 0x09
    267e:	82 30       	cpi	r24, 0x02	; 2
    2680:	40 f0       	brcs	.+16     	; 0x2692 <__ltsf2+0x56>
    2682:	89 89       	ldd	r24, Y+17	; 0x11
    2684:	82 30       	cpi	r24, 0x02	; 2
    2686:	28 f0       	brcs	.+10     	; 0x2692 <__ltsf2+0x56>
    2688:	c7 01       	movw	r24, r14
    268a:	b8 01       	movw	r22, r16
    268c:	0e 94 ef 14 	call	0x29de	; 0x29de <__fpcmp_parts_f>
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <__ltsf2+0x58>
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	68 96       	adiw	r28, 0x18	; 24
    2696:	e6 e0       	ldi	r30, 0x06	; 6
    2698:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__epilogue_restores__+0x18>

0000269c <__fixsfsi>:
    269c:	ac e0       	ldi	r26, 0x0C	; 12
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e4 e5       	ldi	r30, 0x54	; 84
    26a2:	f3 e1       	ldi	r31, 0x13	; 19
    26a4:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__prologue_saves__+0x20>
    26a8:	69 83       	std	Y+1, r22	; 0x01
    26aa:	7a 83       	std	Y+2, r23	; 0x02
    26ac:	8b 83       	std	Y+3, r24	; 0x03
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	ce 01       	movw	r24, r28
    26b2:	01 96       	adiw	r24, 0x01	; 1
    26b4:	be 01       	movw	r22, r28
    26b6:	6b 5f       	subi	r22, 0xFB	; 251
    26b8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ba:	0e 94 77 14 	call	0x28ee	; 0x28ee <__unpack_f>
    26be:	8d 81       	ldd	r24, Y+5	; 0x05
    26c0:	82 30       	cpi	r24, 0x02	; 2
    26c2:	61 f1       	breq	.+88     	; 0x271c <__fixsfsi+0x80>
    26c4:	82 30       	cpi	r24, 0x02	; 2
    26c6:	50 f1       	brcs	.+84     	; 0x271c <__fixsfsi+0x80>
    26c8:	84 30       	cpi	r24, 0x04	; 4
    26ca:	21 f4       	brne	.+8      	; 0x26d4 <__fixsfsi+0x38>
    26cc:	8e 81       	ldd	r24, Y+6	; 0x06
    26ce:	88 23       	and	r24, r24
    26d0:	51 f1       	breq	.+84     	; 0x2726 <__fixsfsi+0x8a>
    26d2:	2e c0       	rjmp	.+92     	; 0x2730 <__fixsfsi+0x94>
    26d4:	2f 81       	ldd	r18, Y+7	; 0x07
    26d6:	38 85       	ldd	r19, Y+8	; 0x08
    26d8:	37 fd       	sbrc	r19, 7
    26da:	20 c0       	rjmp	.+64     	; 0x271c <__fixsfsi+0x80>
    26dc:	6e 81       	ldd	r22, Y+6	; 0x06
    26de:	2f 31       	cpi	r18, 0x1F	; 31
    26e0:	31 05       	cpc	r19, r1
    26e2:	1c f0       	brlt	.+6      	; 0x26ea <__fixsfsi+0x4e>
    26e4:	66 23       	and	r22, r22
    26e6:	f9 f0       	breq	.+62     	; 0x2726 <__fixsfsi+0x8a>
    26e8:	23 c0       	rjmp	.+70     	; 0x2730 <__fixsfsi+0x94>
    26ea:	8e e1       	ldi	r24, 0x1E	; 30
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	82 1b       	sub	r24, r18
    26f0:	93 0b       	sbc	r25, r19
    26f2:	29 85       	ldd	r18, Y+9	; 0x09
    26f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    26f6:	4b 85       	ldd	r20, Y+11	; 0x0b
    26f8:	5c 85       	ldd	r21, Y+12	; 0x0c
    26fa:	04 c0       	rjmp	.+8      	; 0x2704 <__fixsfsi+0x68>
    26fc:	56 95       	lsr	r21
    26fe:	47 95       	ror	r20
    2700:	37 95       	ror	r19
    2702:	27 95       	ror	r18
    2704:	8a 95       	dec	r24
    2706:	d2 f7       	brpl	.-12     	; 0x26fc <__fixsfsi+0x60>
    2708:	66 23       	and	r22, r22
    270a:	b1 f0       	breq	.+44     	; 0x2738 <__fixsfsi+0x9c>
    270c:	50 95       	com	r21
    270e:	40 95       	com	r20
    2710:	30 95       	com	r19
    2712:	21 95       	neg	r18
    2714:	3f 4f       	sbci	r19, 0xFF	; 255
    2716:	4f 4f       	sbci	r20, 0xFF	; 255
    2718:	5f 4f       	sbci	r21, 0xFF	; 255
    271a:	0e c0       	rjmp	.+28     	; 0x2738 <__fixsfsi+0x9c>
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	09 c0       	rjmp	.+18     	; 0x2738 <__fixsfsi+0x9c>
    2726:	2f ef       	ldi	r18, 0xFF	; 255
    2728:	3f ef       	ldi	r19, 0xFF	; 255
    272a:	4f ef       	ldi	r20, 0xFF	; 255
    272c:	5f e7       	ldi	r21, 0x7F	; 127
    272e:	04 c0       	rjmp	.+8      	; 0x2738 <__fixsfsi+0x9c>
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	50 e8       	ldi	r21, 0x80	; 128
    2738:	b9 01       	movw	r22, r18
    273a:	ca 01       	movw	r24, r20
    273c:	2c 96       	adiw	r28, 0x0c	; 12
    273e:	e2 e0       	ldi	r30, 0x02	; 2
    2740:	0c 94 9b 15 	jmp	0x2b36	; 0x2b36 <__epilogue_restores__+0x20>

00002744 <__pack_f>:
    2744:	df 92       	push	r13
    2746:	ef 92       	push	r14
    2748:	ff 92       	push	r15
    274a:	0f 93       	push	r16
    274c:	1f 93       	push	r17
    274e:	fc 01       	movw	r30, r24
    2750:	e4 80       	ldd	r14, Z+4	; 0x04
    2752:	f5 80       	ldd	r15, Z+5	; 0x05
    2754:	06 81       	ldd	r16, Z+6	; 0x06
    2756:	17 81       	ldd	r17, Z+7	; 0x07
    2758:	d1 80       	ldd	r13, Z+1	; 0x01
    275a:	80 81       	ld	r24, Z
    275c:	82 30       	cpi	r24, 0x02	; 2
    275e:	48 f4       	brcc	.+18     	; 0x2772 <__pack_f+0x2e>
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	a0 e1       	ldi	r26, 0x10	; 16
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e8 2a       	or	r14, r24
    276a:	f9 2a       	or	r15, r25
    276c:	0a 2b       	or	r16, r26
    276e:	1b 2b       	or	r17, r27
    2770:	a5 c0       	rjmp	.+330    	; 0x28bc <__pack_f+0x178>
    2772:	84 30       	cpi	r24, 0x04	; 4
    2774:	09 f4       	brne	.+2      	; 0x2778 <__pack_f+0x34>
    2776:	9f c0       	rjmp	.+318    	; 0x28b6 <__pack_f+0x172>
    2778:	82 30       	cpi	r24, 0x02	; 2
    277a:	21 f4       	brne	.+8      	; 0x2784 <__pack_f+0x40>
    277c:	ee 24       	eor	r14, r14
    277e:	ff 24       	eor	r15, r15
    2780:	87 01       	movw	r16, r14
    2782:	05 c0       	rjmp	.+10     	; 0x278e <__pack_f+0x4a>
    2784:	e1 14       	cp	r14, r1
    2786:	f1 04       	cpc	r15, r1
    2788:	01 05       	cpc	r16, r1
    278a:	11 05       	cpc	r17, r1
    278c:	19 f4       	brne	.+6      	; 0x2794 <__pack_f+0x50>
    278e:	e0 e0       	ldi	r30, 0x00	; 0
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	96 c0       	rjmp	.+300    	; 0x28c0 <__pack_f+0x17c>
    2794:	62 81       	ldd	r22, Z+2	; 0x02
    2796:	73 81       	ldd	r23, Z+3	; 0x03
    2798:	9f ef       	ldi	r25, 0xFF	; 255
    279a:	62 38       	cpi	r22, 0x82	; 130
    279c:	79 07       	cpc	r23, r25
    279e:	0c f0       	brlt	.+2      	; 0x27a2 <__pack_f+0x5e>
    27a0:	5b c0       	rjmp	.+182    	; 0x2858 <__pack_f+0x114>
    27a2:	22 e8       	ldi	r18, 0x82	; 130
    27a4:	3f ef       	ldi	r19, 0xFF	; 255
    27a6:	26 1b       	sub	r18, r22
    27a8:	37 0b       	sbc	r19, r23
    27aa:	2a 31       	cpi	r18, 0x1A	; 26
    27ac:	31 05       	cpc	r19, r1
    27ae:	2c f0       	brlt	.+10     	; 0x27ba <__pack_f+0x76>
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	2a c0       	rjmp	.+84     	; 0x280e <__pack_f+0xca>
    27ba:	b8 01       	movw	r22, r16
    27bc:	a7 01       	movw	r20, r14
    27be:	02 2e       	mov	r0, r18
    27c0:	04 c0       	rjmp	.+8      	; 0x27ca <__pack_f+0x86>
    27c2:	76 95       	lsr	r23
    27c4:	67 95       	ror	r22
    27c6:	57 95       	ror	r21
    27c8:	47 95       	ror	r20
    27ca:	0a 94       	dec	r0
    27cc:	d2 f7       	brpl	.-12     	; 0x27c2 <__pack_f+0x7e>
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	a0 e0       	ldi	r26, 0x00	; 0
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	04 c0       	rjmp	.+8      	; 0x27e0 <__pack_f+0x9c>
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	aa 1f       	adc	r26, r26
    27de:	bb 1f       	adc	r27, r27
    27e0:	2a 95       	dec	r18
    27e2:	d2 f7       	brpl	.-12     	; 0x27d8 <__pack_f+0x94>
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	a1 09       	sbc	r26, r1
    27e8:	b1 09       	sbc	r27, r1
    27ea:	8e 21       	and	r24, r14
    27ec:	9f 21       	and	r25, r15
    27ee:	a0 23       	and	r26, r16
    27f0:	b1 23       	and	r27, r17
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	a1 05       	cpc	r26, r1
    27f6:	b1 05       	cpc	r27, r1
    27f8:	21 f0       	breq	.+8      	; 0x2802 <__pack_f+0xbe>
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	a0 e0       	ldi	r26, 0x00	; 0
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	9a 01       	movw	r18, r20
    2804:	ab 01       	movw	r20, r22
    2806:	28 2b       	or	r18, r24
    2808:	39 2b       	or	r19, r25
    280a:	4a 2b       	or	r20, r26
    280c:	5b 2b       	or	r21, r27
    280e:	da 01       	movw	r26, r20
    2810:	c9 01       	movw	r24, r18
    2812:	8f 77       	andi	r24, 0x7F	; 127
    2814:	90 70       	andi	r25, 0x00	; 0
    2816:	a0 70       	andi	r26, 0x00	; 0
    2818:	b0 70       	andi	r27, 0x00	; 0
    281a:	80 34       	cpi	r24, 0x40	; 64
    281c:	91 05       	cpc	r25, r1
    281e:	a1 05       	cpc	r26, r1
    2820:	b1 05       	cpc	r27, r1
    2822:	39 f4       	brne	.+14     	; 0x2832 <__pack_f+0xee>
    2824:	27 ff       	sbrs	r18, 7
    2826:	09 c0       	rjmp	.+18     	; 0x283a <__pack_f+0xf6>
    2828:	20 5c       	subi	r18, 0xC0	; 192
    282a:	3f 4f       	sbci	r19, 0xFF	; 255
    282c:	4f 4f       	sbci	r20, 0xFF	; 255
    282e:	5f 4f       	sbci	r21, 0xFF	; 255
    2830:	04 c0       	rjmp	.+8      	; 0x283a <__pack_f+0xf6>
    2832:	21 5c       	subi	r18, 0xC1	; 193
    2834:	3f 4f       	sbci	r19, 0xFF	; 255
    2836:	4f 4f       	sbci	r20, 0xFF	; 255
    2838:	5f 4f       	sbci	r21, 0xFF	; 255
    283a:	e0 e0       	ldi	r30, 0x00	; 0
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	20 30       	cpi	r18, 0x00	; 0
    2840:	a0 e0       	ldi	r26, 0x00	; 0
    2842:	3a 07       	cpc	r19, r26
    2844:	a0 e0       	ldi	r26, 0x00	; 0
    2846:	4a 07       	cpc	r20, r26
    2848:	a0 e4       	ldi	r26, 0x40	; 64
    284a:	5a 07       	cpc	r21, r26
    284c:	10 f0       	brcs	.+4      	; 0x2852 <__pack_f+0x10e>
    284e:	e1 e0       	ldi	r30, 0x01	; 1
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	79 01       	movw	r14, r18
    2854:	8a 01       	movw	r16, r20
    2856:	27 c0       	rjmp	.+78     	; 0x28a6 <__pack_f+0x162>
    2858:	60 38       	cpi	r22, 0x80	; 128
    285a:	71 05       	cpc	r23, r1
    285c:	64 f5       	brge	.+88     	; 0x28b6 <__pack_f+0x172>
    285e:	fb 01       	movw	r30, r22
    2860:	e1 58       	subi	r30, 0x81	; 129
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	d8 01       	movw	r26, r16
    2866:	c7 01       	movw	r24, r14
    2868:	8f 77       	andi	r24, 0x7F	; 127
    286a:	90 70       	andi	r25, 0x00	; 0
    286c:	a0 70       	andi	r26, 0x00	; 0
    286e:	b0 70       	andi	r27, 0x00	; 0
    2870:	80 34       	cpi	r24, 0x40	; 64
    2872:	91 05       	cpc	r25, r1
    2874:	a1 05       	cpc	r26, r1
    2876:	b1 05       	cpc	r27, r1
    2878:	39 f4       	brne	.+14     	; 0x2888 <__pack_f+0x144>
    287a:	e7 fe       	sbrs	r14, 7
    287c:	0d c0       	rjmp	.+26     	; 0x2898 <__pack_f+0x154>
    287e:	80 e4       	ldi	r24, 0x40	; 64
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	a0 e0       	ldi	r26, 0x00	; 0
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	04 c0       	rjmp	.+8      	; 0x2890 <__pack_f+0x14c>
    2888:	8f e3       	ldi	r24, 0x3F	; 63
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	a0 e0       	ldi	r26, 0x00	; 0
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	e8 0e       	add	r14, r24
    2892:	f9 1e       	adc	r15, r25
    2894:	0a 1f       	adc	r16, r26
    2896:	1b 1f       	adc	r17, r27
    2898:	17 ff       	sbrs	r17, 7
    289a:	05 c0       	rjmp	.+10     	; 0x28a6 <__pack_f+0x162>
    289c:	16 95       	lsr	r17
    289e:	07 95       	ror	r16
    28a0:	f7 94       	ror	r15
    28a2:	e7 94       	ror	r14
    28a4:	31 96       	adiw	r30, 0x01	; 1
    28a6:	87 e0       	ldi	r24, 0x07	; 7
    28a8:	16 95       	lsr	r17
    28aa:	07 95       	ror	r16
    28ac:	f7 94       	ror	r15
    28ae:	e7 94       	ror	r14
    28b0:	8a 95       	dec	r24
    28b2:	d1 f7       	brne	.-12     	; 0x28a8 <__pack_f+0x164>
    28b4:	05 c0       	rjmp	.+10     	; 0x28c0 <__pack_f+0x17c>
    28b6:	ee 24       	eor	r14, r14
    28b8:	ff 24       	eor	r15, r15
    28ba:	87 01       	movw	r16, r14
    28bc:	ef ef       	ldi	r30, 0xFF	; 255
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	6e 2f       	mov	r22, r30
    28c2:	67 95       	ror	r22
    28c4:	66 27       	eor	r22, r22
    28c6:	67 95       	ror	r22
    28c8:	90 2f       	mov	r25, r16
    28ca:	9f 77       	andi	r25, 0x7F	; 127
    28cc:	d7 94       	ror	r13
    28ce:	dd 24       	eor	r13, r13
    28d0:	d7 94       	ror	r13
    28d2:	8e 2f       	mov	r24, r30
    28d4:	86 95       	lsr	r24
    28d6:	49 2f       	mov	r20, r25
    28d8:	46 2b       	or	r20, r22
    28da:	58 2f       	mov	r21, r24
    28dc:	5d 29       	or	r21, r13
    28de:	b7 01       	movw	r22, r14
    28e0:	ca 01       	movw	r24, r20
    28e2:	1f 91       	pop	r17
    28e4:	0f 91       	pop	r16
    28e6:	ff 90       	pop	r15
    28e8:	ef 90       	pop	r14
    28ea:	df 90       	pop	r13
    28ec:	08 95       	ret

000028ee <__unpack_f>:
    28ee:	fc 01       	movw	r30, r24
    28f0:	db 01       	movw	r26, r22
    28f2:	40 81       	ld	r20, Z
    28f4:	51 81       	ldd	r21, Z+1	; 0x01
    28f6:	22 81       	ldd	r18, Z+2	; 0x02
    28f8:	62 2f       	mov	r22, r18
    28fa:	6f 77       	andi	r22, 0x7F	; 127
    28fc:	70 e0       	ldi	r23, 0x00	; 0
    28fe:	22 1f       	adc	r18, r18
    2900:	22 27       	eor	r18, r18
    2902:	22 1f       	adc	r18, r18
    2904:	93 81       	ldd	r25, Z+3	; 0x03
    2906:	89 2f       	mov	r24, r25
    2908:	88 0f       	add	r24, r24
    290a:	82 2b       	or	r24, r18
    290c:	28 2f       	mov	r18, r24
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	99 1f       	adc	r25, r25
    2912:	99 27       	eor	r25, r25
    2914:	99 1f       	adc	r25, r25
    2916:	11 96       	adiw	r26, 0x01	; 1
    2918:	9c 93       	st	X, r25
    291a:	11 97       	sbiw	r26, 0x01	; 1
    291c:	21 15       	cp	r18, r1
    291e:	31 05       	cpc	r19, r1
    2920:	a9 f5       	brne	.+106    	; 0x298c <__unpack_f+0x9e>
    2922:	41 15       	cp	r20, r1
    2924:	51 05       	cpc	r21, r1
    2926:	61 05       	cpc	r22, r1
    2928:	71 05       	cpc	r23, r1
    292a:	11 f4       	brne	.+4      	; 0x2930 <__unpack_f+0x42>
    292c:	82 e0       	ldi	r24, 0x02	; 2
    292e:	37 c0       	rjmp	.+110    	; 0x299e <__unpack_f+0xb0>
    2930:	82 e8       	ldi	r24, 0x82	; 130
    2932:	9f ef       	ldi	r25, 0xFF	; 255
    2934:	13 96       	adiw	r26, 0x03	; 3
    2936:	9c 93       	st	X, r25
    2938:	8e 93       	st	-X, r24
    293a:	12 97       	sbiw	r26, 0x02	; 2
    293c:	9a 01       	movw	r18, r20
    293e:	ab 01       	movw	r20, r22
    2940:	67 e0       	ldi	r22, 0x07	; 7
    2942:	22 0f       	add	r18, r18
    2944:	33 1f       	adc	r19, r19
    2946:	44 1f       	adc	r20, r20
    2948:	55 1f       	adc	r21, r21
    294a:	6a 95       	dec	r22
    294c:	d1 f7       	brne	.-12     	; 0x2942 <__unpack_f+0x54>
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	8c 93       	st	X, r24
    2952:	0d c0       	rjmp	.+26     	; 0x296e <__unpack_f+0x80>
    2954:	22 0f       	add	r18, r18
    2956:	33 1f       	adc	r19, r19
    2958:	44 1f       	adc	r20, r20
    295a:	55 1f       	adc	r21, r21
    295c:	12 96       	adiw	r26, 0x02	; 2
    295e:	8d 91       	ld	r24, X+
    2960:	9c 91       	ld	r25, X
    2962:	13 97       	sbiw	r26, 0x03	; 3
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	13 96       	adiw	r26, 0x03	; 3
    2968:	9c 93       	st	X, r25
    296a:	8e 93       	st	-X, r24
    296c:	12 97       	sbiw	r26, 0x02	; 2
    296e:	20 30       	cpi	r18, 0x00	; 0
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	38 07       	cpc	r19, r24
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	48 07       	cpc	r20, r24
    2978:	80 e4       	ldi	r24, 0x40	; 64
    297a:	58 07       	cpc	r21, r24
    297c:	58 f3       	brcs	.-42     	; 0x2954 <__unpack_f+0x66>
    297e:	14 96       	adiw	r26, 0x04	; 4
    2980:	2d 93       	st	X+, r18
    2982:	3d 93       	st	X+, r19
    2984:	4d 93       	st	X+, r20
    2986:	5c 93       	st	X, r21
    2988:	17 97       	sbiw	r26, 0x07	; 7
    298a:	08 95       	ret
    298c:	2f 3f       	cpi	r18, 0xFF	; 255
    298e:	31 05       	cpc	r19, r1
    2990:	79 f4       	brne	.+30     	; 0x29b0 <__unpack_f+0xc2>
    2992:	41 15       	cp	r20, r1
    2994:	51 05       	cpc	r21, r1
    2996:	61 05       	cpc	r22, r1
    2998:	71 05       	cpc	r23, r1
    299a:	19 f4       	brne	.+6      	; 0x29a2 <__unpack_f+0xb4>
    299c:	84 e0       	ldi	r24, 0x04	; 4
    299e:	8c 93       	st	X, r24
    29a0:	08 95       	ret
    29a2:	64 ff       	sbrs	r22, 4
    29a4:	03 c0       	rjmp	.+6      	; 0x29ac <__unpack_f+0xbe>
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	8c 93       	st	X, r24
    29aa:	12 c0       	rjmp	.+36     	; 0x29d0 <__unpack_f+0xe2>
    29ac:	1c 92       	st	X, r1
    29ae:	10 c0       	rjmp	.+32     	; 0x29d0 <__unpack_f+0xe2>
    29b0:	2f 57       	subi	r18, 0x7F	; 127
    29b2:	30 40       	sbci	r19, 0x00	; 0
    29b4:	13 96       	adiw	r26, 0x03	; 3
    29b6:	3c 93       	st	X, r19
    29b8:	2e 93       	st	-X, r18
    29ba:	12 97       	sbiw	r26, 0x02	; 2
    29bc:	83 e0       	ldi	r24, 0x03	; 3
    29be:	8c 93       	st	X, r24
    29c0:	87 e0       	ldi	r24, 0x07	; 7
    29c2:	44 0f       	add	r20, r20
    29c4:	55 1f       	adc	r21, r21
    29c6:	66 1f       	adc	r22, r22
    29c8:	77 1f       	adc	r23, r23
    29ca:	8a 95       	dec	r24
    29cc:	d1 f7       	brne	.-12     	; 0x29c2 <__unpack_f+0xd4>
    29ce:	70 64       	ori	r23, 0x40	; 64
    29d0:	14 96       	adiw	r26, 0x04	; 4
    29d2:	4d 93       	st	X+, r20
    29d4:	5d 93       	st	X+, r21
    29d6:	6d 93       	st	X+, r22
    29d8:	7c 93       	st	X, r23
    29da:	17 97       	sbiw	r26, 0x07	; 7
    29dc:	08 95       	ret

000029de <__fpcmp_parts_f>:
    29de:	1f 93       	push	r17
    29e0:	dc 01       	movw	r26, r24
    29e2:	fb 01       	movw	r30, r22
    29e4:	9c 91       	ld	r25, X
    29e6:	92 30       	cpi	r25, 0x02	; 2
    29e8:	08 f4       	brcc	.+2      	; 0x29ec <__fpcmp_parts_f+0xe>
    29ea:	47 c0       	rjmp	.+142    	; 0x2a7a <__fpcmp_parts_f+0x9c>
    29ec:	80 81       	ld	r24, Z
    29ee:	82 30       	cpi	r24, 0x02	; 2
    29f0:	08 f4       	brcc	.+2      	; 0x29f4 <__fpcmp_parts_f+0x16>
    29f2:	43 c0       	rjmp	.+134    	; 0x2a7a <__fpcmp_parts_f+0x9c>
    29f4:	94 30       	cpi	r25, 0x04	; 4
    29f6:	51 f4       	brne	.+20     	; 0x2a0c <__fpcmp_parts_f+0x2e>
    29f8:	11 96       	adiw	r26, 0x01	; 1
    29fa:	1c 91       	ld	r17, X
    29fc:	84 30       	cpi	r24, 0x04	; 4
    29fe:	99 f5       	brne	.+102    	; 0x2a66 <__fpcmp_parts_f+0x88>
    2a00:	81 81       	ldd	r24, Z+1	; 0x01
    2a02:	68 2f       	mov	r22, r24
    2a04:	70 e0       	ldi	r23, 0x00	; 0
    2a06:	61 1b       	sub	r22, r17
    2a08:	71 09       	sbc	r23, r1
    2a0a:	3f c0       	rjmp	.+126    	; 0x2a8a <__fpcmp_parts_f+0xac>
    2a0c:	84 30       	cpi	r24, 0x04	; 4
    2a0e:	21 f0       	breq	.+8      	; 0x2a18 <__fpcmp_parts_f+0x3a>
    2a10:	92 30       	cpi	r25, 0x02	; 2
    2a12:	31 f4       	brne	.+12     	; 0x2a20 <__fpcmp_parts_f+0x42>
    2a14:	82 30       	cpi	r24, 0x02	; 2
    2a16:	b9 f1       	breq	.+110    	; 0x2a86 <__fpcmp_parts_f+0xa8>
    2a18:	81 81       	ldd	r24, Z+1	; 0x01
    2a1a:	88 23       	and	r24, r24
    2a1c:	89 f1       	breq	.+98     	; 0x2a80 <__fpcmp_parts_f+0xa2>
    2a1e:	2d c0       	rjmp	.+90     	; 0x2a7a <__fpcmp_parts_f+0x9c>
    2a20:	11 96       	adiw	r26, 0x01	; 1
    2a22:	1c 91       	ld	r17, X
    2a24:	11 97       	sbiw	r26, 0x01	; 1
    2a26:	82 30       	cpi	r24, 0x02	; 2
    2a28:	f1 f0       	breq	.+60     	; 0x2a66 <__fpcmp_parts_f+0x88>
    2a2a:	81 81       	ldd	r24, Z+1	; 0x01
    2a2c:	18 17       	cp	r17, r24
    2a2e:	d9 f4       	brne	.+54     	; 0x2a66 <__fpcmp_parts_f+0x88>
    2a30:	12 96       	adiw	r26, 0x02	; 2
    2a32:	2d 91       	ld	r18, X+
    2a34:	3c 91       	ld	r19, X
    2a36:	13 97       	sbiw	r26, 0x03	; 3
    2a38:	82 81       	ldd	r24, Z+2	; 0x02
    2a3a:	93 81       	ldd	r25, Z+3	; 0x03
    2a3c:	82 17       	cp	r24, r18
    2a3e:	93 07       	cpc	r25, r19
    2a40:	94 f0       	brlt	.+36     	; 0x2a66 <__fpcmp_parts_f+0x88>
    2a42:	28 17       	cp	r18, r24
    2a44:	39 07       	cpc	r19, r25
    2a46:	bc f0       	brlt	.+46     	; 0x2a76 <__fpcmp_parts_f+0x98>
    2a48:	14 96       	adiw	r26, 0x04	; 4
    2a4a:	8d 91       	ld	r24, X+
    2a4c:	9d 91       	ld	r25, X+
    2a4e:	0d 90       	ld	r0, X+
    2a50:	bc 91       	ld	r27, X
    2a52:	a0 2d       	mov	r26, r0
    2a54:	24 81       	ldd	r18, Z+4	; 0x04
    2a56:	35 81       	ldd	r19, Z+5	; 0x05
    2a58:	46 81       	ldd	r20, Z+6	; 0x06
    2a5a:	57 81       	ldd	r21, Z+7	; 0x07
    2a5c:	28 17       	cp	r18, r24
    2a5e:	39 07       	cpc	r19, r25
    2a60:	4a 07       	cpc	r20, r26
    2a62:	5b 07       	cpc	r21, r27
    2a64:	18 f4       	brcc	.+6      	; 0x2a6c <__fpcmp_parts_f+0x8e>
    2a66:	11 23       	and	r17, r17
    2a68:	41 f0       	breq	.+16     	; 0x2a7a <__fpcmp_parts_f+0x9c>
    2a6a:	0a c0       	rjmp	.+20     	; 0x2a80 <__fpcmp_parts_f+0xa2>
    2a6c:	82 17       	cp	r24, r18
    2a6e:	93 07       	cpc	r25, r19
    2a70:	a4 07       	cpc	r26, r20
    2a72:	b5 07       	cpc	r27, r21
    2a74:	40 f4       	brcc	.+16     	; 0x2a86 <__fpcmp_parts_f+0xa8>
    2a76:	11 23       	and	r17, r17
    2a78:	19 f0       	breq	.+6      	; 0x2a80 <__fpcmp_parts_f+0xa2>
    2a7a:	61 e0       	ldi	r22, 0x01	; 1
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	05 c0       	rjmp	.+10     	; 0x2a8a <__fpcmp_parts_f+0xac>
    2a80:	6f ef       	ldi	r22, 0xFF	; 255
    2a82:	7f ef       	ldi	r23, 0xFF	; 255
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <__fpcmp_parts_f+0xac>
    2a86:	60 e0       	ldi	r22, 0x00	; 0
    2a88:	70 e0       	ldi	r23, 0x00	; 0
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	1f 91       	pop	r17
    2a8e:	08 95       	ret

00002a90 <__udivmodhi4>:
    2a90:	aa 1b       	sub	r26, r26
    2a92:	bb 1b       	sub	r27, r27
    2a94:	51 e1       	ldi	r21, 0x11	; 17
    2a96:	07 c0       	rjmp	.+14     	; 0x2aa6 <__udivmodhi4_ep>

00002a98 <__udivmodhi4_loop>:
    2a98:	aa 1f       	adc	r26, r26
    2a9a:	bb 1f       	adc	r27, r27
    2a9c:	a6 17       	cp	r26, r22
    2a9e:	b7 07       	cpc	r27, r23
    2aa0:	10 f0       	brcs	.+4      	; 0x2aa6 <__udivmodhi4_ep>
    2aa2:	a6 1b       	sub	r26, r22
    2aa4:	b7 0b       	sbc	r27, r23

00002aa6 <__udivmodhi4_ep>:
    2aa6:	88 1f       	adc	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	5a 95       	dec	r21
    2aac:	a9 f7       	brne	.-22     	; 0x2a98 <__udivmodhi4_loop>
    2aae:	80 95       	com	r24
    2ab0:	90 95       	com	r25
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	08 95       	ret

00002ab8 <__divmodhi4>:
    2ab8:	97 fb       	bst	r25, 7
    2aba:	09 2e       	mov	r0, r25
    2abc:	07 26       	eor	r0, r23
    2abe:	0a d0       	rcall	.+20     	; 0x2ad4 <__divmodhi4_neg1>
    2ac0:	77 fd       	sbrc	r23, 7
    2ac2:	04 d0       	rcall	.+8      	; 0x2acc <__divmodhi4_neg2>
    2ac4:	e5 df       	rcall	.-54     	; 0x2a90 <__udivmodhi4>
    2ac6:	06 d0       	rcall	.+12     	; 0x2ad4 <__divmodhi4_neg1>
    2ac8:	00 20       	and	r0, r0
    2aca:	1a f4       	brpl	.+6      	; 0x2ad2 <__divmodhi4_exit>

00002acc <__divmodhi4_neg2>:
    2acc:	70 95       	com	r23
    2ace:	61 95       	neg	r22
    2ad0:	7f 4f       	sbci	r23, 0xFF	; 255

00002ad2 <__divmodhi4_exit>:
    2ad2:	08 95       	ret

00002ad4 <__divmodhi4_neg1>:
    2ad4:	f6 f7       	brtc	.-4      	; 0x2ad2 <__divmodhi4_exit>
    2ad6:	90 95       	com	r25
    2ad8:	81 95       	neg	r24
    2ada:	9f 4f       	sbci	r25, 0xFF	; 255
    2adc:	08 95       	ret

00002ade <__prologue_saves__>:
    2ade:	2f 92       	push	r2
    2ae0:	3f 92       	push	r3
    2ae2:	4f 92       	push	r4
    2ae4:	5f 92       	push	r5
    2ae6:	6f 92       	push	r6
    2ae8:	7f 92       	push	r7
    2aea:	8f 92       	push	r8
    2aec:	9f 92       	push	r9
    2aee:	af 92       	push	r10
    2af0:	bf 92       	push	r11
    2af2:	cf 92       	push	r12
    2af4:	df 92       	push	r13
    2af6:	ef 92       	push	r14
    2af8:	ff 92       	push	r15
    2afa:	0f 93       	push	r16
    2afc:	1f 93       	push	r17
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
    2b06:	ca 1b       	sub	r28, r26
    2b08:	db 0b       	sbc	r29, r27
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	de bf       	out	0x3e, r29	; 62
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	cd bf       	out	0x3d, r28	; 61
    2b14:	09 94       	ijmp

00002b16 <__epilogue_restores__>:
    2b16:	2a 88       	ldd	r2, Y+18	; 0x12
    2b18:	39 88       	ldd	r3, Y+17	; 0x11
    2b1a:	48 88       	ldd	r4, Y+16	; 0x10
    2b1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b20:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b22:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b24:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b26:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b28:	b9 84       	ldd	r11, Y+9	; 0x09
    2b2a:	c8 84       	ldd	r12, Y+8	; 0x08
    2b2c:	df 80       	ldd	r13, Y+7	; 0x07
    2b2e:	ee 80       	ldd	r14, Y+6	; 0x06
    2b30:	fd 80       	ldd	r15, Y+5	; 0x05
    2b32:	0c 81       	ldd	r16, Y+4	; 0x04
    2b34:	1b 81       	ldd	r17, Y+3	; 0x03
    2b36:	aa 81       	ldd	r26, Y+2	; 0x02
    2b38:	b9 81       	ldd	r27, Y+1	; 0x01
    2b3a:	ce 0f       	add	r28, r30
    2b3c:	d1 1d       	adc	r29, r1
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
    2b48:	ed 01       	movw	r28, r26
    2b4a:	08 95       	ret

00002b4c <strlen>:
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	01 90       	ld	r0, Z+
    2b50:	00 20       	and	r0, r0
    2b52:	e9 f7       	brne	.-6      	; 0x2b4e <strlen+0x2>
    2b54:	80 95       	com	r24
    2b56:	90 95       	com	r25
    2b58:	8e 0f       	add	r24, r30
    2b5a:	9f 1f       	adc	r25, r31
    2b5c:	08 95       	ret

00002b5e <_exit>:
    2b5e:	f8 94       	cli

00002b60 <__stop_program>:
    2b60:	ff cf       	rjmp	.-2      	; 0x2b60 <__stop_program>
