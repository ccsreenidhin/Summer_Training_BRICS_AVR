
LED3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b10  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002b10  00002b84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000026ac  00000000  00000000  00002b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dae  00000000  00000000  00005240  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000612e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000629e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3f  00000000  00000000  00008dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c6  00000000  00000000  00009c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a708  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d4 e0       	ldi	r29, 0x04	; 4
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	e0 e1       	ldi	r30, 0x10	; 16
      a8:	fb e2       	ldi	r31, 0x2B	; 43
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
      b0:	ae 36       	cpi	r26, 0x6E	; 110
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>
      b6:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
      ba:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <main>:
 */

#include <avr/io.h>
#include <util/delay.h>

main(){
      c2:	0f 93       	push	r16
      c4:	1f 93       	push	r17
      c6:	df 93       	push	r29
      c8:	cf 93       	push	r28
      ca:	cd b7       	in	r28, 0x3d	; 61
      cc:	de b7       	in	r29, 0x3e	; 62
      ce:	c0 57       	subi	r28, 0x70	; 112
      d0:	d0 40       	sbci	r29, 0x00	; 0
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	f8 94       	cli
      d6:	de bf       	out	0x3e, r29	; 62
      d8:	0f be       	out	0x3f, r0	; 63
      da:	cd bf       	out	0x3d, r28	; 61
	DDRA=255;
      dc:	ea e3       	ldi	r30, 0x3A	; 58
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	8f ef       	ldi	r24, 0xFF	; 255
      e2:	80 83       	st	Z, r24
	LCDinit();
      e4:	0e 94 35 09 	call	0x126a	; 0x126a <LCDinit>
	LCDclr();
      e8:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <LCDclr>
	while(1){
	     LCDGotoXY(5,0);
      ec:	85 e0       	ldi	r24, 0x05	; 5
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	70 e0       	ldi	r23, 0x00	; 0
      f4:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <LCDGotoXY>
	      LCDdisplay("BRiCS");
      f8:	80 e6       	ldi	r24, 0x60	; 96
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCDdisplay>

	PORTA=1;_delay_ms(1000);
     100:	eb e3       	ldi	r30, 0x3B	; 59
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	80 83       	st	Z, r24
     108:	fe 01       	movw	r30, r28
     10a:	e3 59       	subi	r30, 0x93	; 147
     10c:	ff 4f       	sbci	r31, 0xFF	; 255
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	aa e7       	ldi	r26, 0x7A	; 122
     114:	b4 e4       	ldi	r27, 0x44	; 68
     116:	80 83       	st	Z, r24
     118:	91 83       	std	Z+1, r25	; 0x01
     11a:	a2 83       	std	Z+2, r26	; 0x02
     11c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     11e:	8e 01       	movw	r16, r28
     120:	07 59       	subi	r16, 0x97	; 151
     122:	1f 4f       	sbci	r17, 0xFF	; 255
     124:	fe 01       	movw	r30, r28
     126:	e3 59       	subi	r30, 0x93	; 147
     128:	ff 4f       	sbci	r31, 0xFF	; 255
     12a:	60 81       	ld	r22, Z
     12c:	71 81       	ldd	r23, Z+1	; 0x01
     12e:	82 81       	ldd	r24, Z+2	; 0x02
     130:	93 81       	ldd	r25, Z+3	; 0x03
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	4a e7       	ldi	r20, 0x7A	; 122
     138:	54 e4       	ldi	r21, 0x44	; 68
     13a:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     13e:	dc 01       	movw	r26, r24
     140:	cb 01       	movw	r24, r22
     142:	f8 01       	movw	r30, r16
     144:	80 83       	st	Z, r24
     146:	91 83       	std	Z+1, r25	; 0x01
     148:	a2 83       	std	Z+2, r26	; 0x02
     14a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     14c:	fe 01       	movw	r30, r28
     14e:	e7 59       	subi	r30, 0x97	; 151
     150:	ff 4f       	sbci	r31, 0xFF	; 255
     152:	60 81       	ld	r22, Z
     154:	71 81       	ldd	r23, Z+1	; 0x01
     156:	82 81       	ldd	r24, Z+2	; 0x02
     158:	93 81       	ldd	r25, Z+3	; 0x03
     15a:	20 e0       	ldi	r18, 0x00	; 0
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	40 e8       	ldi	r20, 0x80	; 128
     160:	5f e3       	ldi	r21, 0x3F	; 63
     162:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
     166:	88 23       	and	r24, r24
     168:	44 f4       	brge	.+16     	; 0x17a <main+0xb8>
		__ticks = 1;
     16a:	fe 01       	movw	r30, r28
     16c:	e9 59       	subi	r30, 0x99	; 153
     16e:	ff 4f       	sbci	r31, 0xFF	; 255
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	91 83       	std	Z+1, r25	; 0x01
     176:	80 83       	st	Z, r24
     178:	64 c0       	rjmp	.+200    	; 0x242 <main+0x180>
	else if (__tmp > 65535)
     17a:	fe 01       	movw	r30, r28
     17c:	e7 59       	subi	r30, 0x97	; 151
     17e:	ff 4f       	sbci	r31, 0xFF	; 255
     180:	60 81       	ld	r22, Z
     182:	71 81       	ldd	r23, Z+1	; 0x01
     184:	82 81       	ldd	r24, Z+2	; 0x02
     186:	93 81       	ldd	r25, Z+3	; 0x03
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	3f ef       	ldi	r19, 0xFF	; 255
     18c:	4f e7       	ldi	r20, 0x7F	; 127
     18e:	57 e4       	ldi	r21, 0x47	; 71
     190:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
     194:	18 16       	cp	r1, r24
     196:	0c f0       	brlt	.+2      	; 0x19a <main+0xd8>
     198:	43 c0       	rjmp	.+134    	; 0x220 <main+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     19a:	fe 01       	movw	r30, r28
     19c:	e3 59       	subi	r30, 0x93	; 147
     19e:	ff 4f       	sbci	r31, 0xFF	; 255
     1a0:	60 81       	ld	r22, Z
     1a2:	71 81       	ldd	r23, Z+1	; 0x01
     1a4:	82 81       	ldd	r24, Z+2	; 0x02
     1a6:	93 81       	ldd	r25, Z+3	; 0x03
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	40 e2       	ldi	r20, 0x20	; 32
     1ae:	51 e4       	ldi	r21, 0x41	; 65
     1b0:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     1b4:	dc 01       	movw	r26, r24
     1b6:	cb 01       	movw	r24, r22
     1b8:	8e 01       	movw	r16, r28
     1ba:	09 59       	subi	r16, 0x99	; 153
     1bc:	1f 4f       	sbci	r17, 0xFF	; 255
     1be:	bc 01       	movw	r22, r24
     1c0:	cd 01       	movw	r24, r26
     1c2:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     1c6:	dc 01       	movw	r26, r24
     1c8:	cb 01       	movw	r24, r22
     1ca:	f8 01       	movw	r30, r16
     1cc:	91 83       	std	Z+1, r25	; 0x01
     1ce:	80 83       	st	Z, r24
     1d0:	1f c0       	rjmp	.+62     	; 0x210 <main+0x14e>
     1d2:	fe 01       	movw	r30, r28
     1d4:	eb 59       	subi	r30, 0x9B	; 155
     1d6:	ff 4f       	sbci	r31, 0xFF	; 255
     1d8:	84 e6       	ldi	r24, 0x64	; 100
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	91 83       	std	Z+1, r25	; 0x01
     1de:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1e0:	fe 01       	movw	r30, r28
     1e2:	eb 59       	subi	r30, 0x9B	; 155
     1e4:	ff 4f       	sbci	r31, 0xFF	; 255
     1e6:	80 81       	ld	r24, Z
     1e8:	91 81       	ldd	r25, Z+1	; 0x01
     1ea:	01 97       	sbiw	r24, 0x01	; 1
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x128>
     1ee:	fe 01       	movw	r30, r28
     1f0:	eb 59       	subi	r30, 0x9B	; 155
     1f2:	ff 4f       	sbci	r31, 0xFF	; 255
     1f4:	91 83       	std	Z+1, r25	; 0x01
     1f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1f8:	de 01       	movw	r26, r28
     1fa:	a9 59       	subi	r26, 0x99	; 153
     1fc:	bf 4f       	sbci	r27, 0xFF	; 255
     1fe:	fe 01       	movw	r30, r28
     200:	e9 59       	subi	r30, 0x99	; 153
     202:	ff 4f       	sbci	r31, 0xFF	; 255
     204:	80 81       	ld	r24, Z
     206:	91 81       	ldd	r25, Z+1	; 0x01
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	11 96       	adiw	r26, 0x01	; 1
     20c:	9c 93       	st	X, r25
     20e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     210:	fe 01       	movw	r30, r28
     212:	e9 59       	subi	r30, 0x99	; 153
     214:	ff 4f       	sbci	r31, 0xFF	; 255
     216:	80 81       	ld	r24, Z
     218:	91 81       	ldd	r25, Z+1	; 0x01
     21a:	00 97       	sbiw	r24, 0x00	; 0
     21c:	d1 f6       	brne	.-76     	; 0x1d2 <main+0x110>
     21e:	27 c0       	rjmp	.+78     	; 0x26e <main+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     220:	8e 01       	movw	r16, r28
     222:	09 59       	subi	r16, 0x99	; 153
     224:	1f 4f       	sbci	r17, 0xFF	; 255
     226:	fe 01       	movw	r30, r28
     228:	e7 59       	subi	r30, 0x97	; 151
     22a:	ff 4f       	sbci	r31, 0xFF	; 255
     22c:	60 81       	ld	r22, Z
     22e:	71 81       	ldd	r23, Z+1	; 0x01
     230:	82 81       	ldd	r24, Z+2	; 0x02
     232:	93 81       	ldd	r25, Z+3	; 0x03
     234:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     238:	dc 01       	movw	r26, r24
     23a:	cb 01       	movw	r24, r22
     23c:	f8 01       	movw	r30, r16
     23e:	91 83       	std	Z+1, r25	; 0x01
     240:	80 83       	st	Z, r24
     242:	de 01       	movw	r26, r28
     244:	ad 59       	subi	r26, 0x9D	; 157
     246:	bf 4f       	sbci	r27, 0xFF	; 255
     248:	fe 01       	movw	r30, r28
     24a:	e9 59       	subi	r30, 0x99	; 153
     24c:	ff 4f       	sbci	r31, 0xFF	; 255
     24e:	80 81       	ld	r24, Z
     250:	91 81       	ldd	r25, Z+1	; 0x01
     252:	8d 93       	st	X+, r24
     254:	9c 93       	st	X, r25
     256:	fe 01       	movw	r30, r28
     258:	ed 59       	subi	r30, 0x9D	; 157
     25a:	ff 4f       	sbci	r31, 0xFF	; 255
     25c:	80 81       	ld	r24, Z
     25e:	91 81       	ldd	r25, Z+1	; 0x01
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <main+0x19e>
     264:	fe 01       	movw	r30, r28
     266:	ed 59       	subi	r30, 0x9D	; 157
     268:	ff 4f       	sbci	r31, 0xFF	; 255
     26a:	91 83       	std	Z+1, r25	; 0x01
     26c:	80 83       	st	Z, r24
	PORTA=2;_delay_ms(1000);
     26e:	eb e3       	ldi	r30, 0x3B	; 59
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	82 e0       	ldi	r24, 0x02	; 2
     274:	80 83       	st	Z, r24
     276:	fe 01       	movw	r30, r28
     278:	e1 5a       	subi	r30, 0xA1	; 161
     27a:	ff 4f       	sbci	r31, 0xFF	; 255
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	aa e7       	ldi	r26, 0x7A	; 122
     282:	b4 e4       	ldi	r27, 0x44	; 68
     284:	80 83       	st	Z, r24
     286:	91 83       	std	Z+1, r25	; 0x01
     288:	a2 83       	std	Z+2, r26	; 0x02
     28a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     28c:	8e 01       	movw	r16, r28
     28e:	05 5a       	subi	r16, 0xA5	; 165
     290:	1f 4f       	sbci	r17, 0xFF	; 255
     292:	fe 01       	movw	r30, r28
     294:	e1 5a       	subi	r30, 0xA1	; 161
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	60 81       	ld	r22, Z
     29a:	71 81       	ldd	r23, Z+1	; 0x01
     29c:	82 81       	ldd	r24, Z+2	; 0x02
     29e:	93 81       	ldd	r25, Z+3	; 0x03
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	4a e7       	ldi	r20, 0x7A	; 122
     2a6:	54 e4       	ldi	r21, 0x44	; 68
     2a8:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     2ac:	dc 01       	movw	r26, r24
     2ae:	cb 01       	movw	r24, r22
     2b0:	f8 01       	movw	r30, r16
     2b2:	80 83       	st	Z, r24
     2b4:	91 83       	std	Z+1, r25	; 0x01
     2b6:	a2 83       	std	Z+2, r26	; 0x02
     2b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     2ba:	fe 01       	movw	r30, r28
     2bc:	e5 5a       	subi	r30, 0xA5	; 165
     2be:	ff 4f       	sbci	r31, 0xFF	; 255
     2c0:	60 81       	ld	r22, Z
     2c2:	71 81       	ldd	r23, Z+1	; 0x01
     2c4:	82 81       	ldd	r24, Z+2	; 0x02
     2c6:	93 81       	ldd	r25, Z+3	; 0x03
     2c8:	20 e0       	ldi	r18, 0x00	; 0
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	40 e8       	ldi	r20, 0x80	; 128
     2ce:	5f e3       	ldi	r21, 0x3F	; 63
     2d0:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
     2d4:	88 23       	and	r24, r24
     2d6:	44 f4       	brge	.+16     	; 0x2e8 <main+0x226>
		__ticks = 1;
     2d8:	fe 01       	movw	r30, r28
     2da:	e7 5a       	subi	r30, 0xA7	; 167
     2dc:	ff 4f       	sbci	r31, 0xFF	; 255
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	91 83       	std	Z+1, r25	; 0x01
     2e4:	80 83       	st	Z, r24
     2e6:	64 c0       	rjmp	.+200    	; 0x3b0 <main+0x2ee>
	else if (__tmp > 65535)
     2e8:	fe 01       	movw	r30, r28
     2ea:	e5 5a       	subi	r30, 0xA5	; 165
     2ec:	ff 4f       	sbci	r31, 0xFF	; 255
     2ee:	60 81       	ld	r22, Z
     2f0:	71 81       	ldd	r23, Z+1	; 0x01
     2f2:	82 81       	ldd	r24, Z+2	; 0x02
     2f4:	93 81       	ldd	r25, Z+3	; 0x03
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	3f ef       	ldi	r19, 0xFF	; 255
     2fa:	4f e7       	ldi	r20, 0x7F	; 127
     2fc:	57 e4       	ldi	r21, 0x47	; 71
     2fe:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
     302:	18 16       	cp	r1, r24
     304:	0c f0       	brlt	.+2      	; 0x308 <main+0x246>
     306:	43 c0       	rjmp	.+134    	; 0x38e <main+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     308:	fe 01       	movw	r30, r28
     30a:	e1 5a       	subi	r30, 0xA1	; 161
     30c:	ff 4f       	sbci	r31, 0xFF	; 255
     30e:	60 81       	ld	r22, Z
     310:	71 81       	ldd	r23, Z+1	; 0x01
     312:	82 81       	ldd	r24, Z+2	; 0x02
     314:	93 81       	ldd	r25, Z+3	; 0x03
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	40 e2       	ldi	r20, 0x20	; 32
     31c:	51 e4       	ldi	r21, 0x41	; 65
     31e:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     322:	dc 01       	movw	r26, r24
     324:	cb 01       	movw	r24, r22
     326:	8e 01       	movw	r16, r28
     328:	07 5a       	subi	r16, 0xA7	; 167
     32a:	1f 4f       	sbci	r17, 0xFF	; 255
     32c:	bc 01       	movw	r22, r24
     32e:	cd 01       	movw	r24, r26
     330:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	f8 01       	movw	r30, r16
     33a:	91 83       	std	Z+1, r25	; 0x01
     33c:	80 83       	st	Z, r24
     33e:	1f c0       	rjmp	.+62     	; 0x37e <main+0x2bc>
     340:	fe 01       	movw	r30, r28
     342:	e9 5a       	subi	r30, 0xA9	; 169
     344:	ff 4f       	sbci	r31, 0xFF	; 255
     346:	84 e6       	ldi	r24, 0x64	; 100
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	91 83       	std	Z+1, r25	; 0x01
     34c:	80 83       	st	Z, r24
     34e:	fe 01       	movw	r30, r28
     350:	e9 5a       	subi	r30, 0xA9	; 169
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	80 81       	ld	r24, Z
     356:	91 81       	ldd	r25, Z+1	; 0x01
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <main+0x296>
     35c:	fe 01       	movw	r30, r28
     35e:	e9 5a       	subi	r30, 0xA9	; 169
     360:	ff 4f       	sbci	r31, 0xFF	; 255
     362:	91 83       	std	Z+1, r25	; 0x01
     364:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     366:	de 01       	movw	r26, r28
     368:	a7 5a       	subi	r26, 0xA7	; 167
     36a:	bf 4f       	sbci	r27, 0xFF	; 255
     36c:	fe 01       	movw	r30, r28
     36e:	e7 5a       	subi	r30, 0xA7	; 167
     370:	ff 4f       	sbci	r31, 0xFF	; 255
     372:	80 81       	ld	r24, Z
     374:	91 81       	ldd	r25, Z+1	; 0x01
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	11 96       	adiw	r26, 0x01	; 1
     37a:	9c 93       	st	X, r25
     37c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     37e:	fe 01       	movw	r30, r28
     380:	e7 5a       	subi	r30, 0xA7	; 167
     382:	ff 4f       	sbci	r31, 0xFF	; 255
     384:	80 81       	ld	r24, Z
     386:	91 81       	ldd	r25, Z+1	; 0x01
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	d1 f6       	brne	.-76     	; 0x340 <main+0x27e>
     38c:	27 c0       	rjmp	.+78     	; 0x3dc <main+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     38e:	8e 01       	movw	r16, r28
     390:	07 5a       	subi	r16, 0xA7	; 167
     392:	1f 4f       	sbci	r17, 0xFF	; 255
     394:	fe 01       	movw	r30, r28
     396:	e5 5a       	subi	r30, 0xA5	; 165
     398:	ff 4f       	sbci	r31, 0xFF	; 255
     39a:	60 81       	ld	r22, Z
     39c:	71 81       	ldd	r23, Z+1	; 0x01
     39e:	82 81       	ldd	r24, Z+2	; 0x02
     3a0:	93 81       	ldd	r25, Z+3	; 0x03
     3a2:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     3a6:	dc 01       	movw	r26, r24
     3a8:	cb 01       	movw	r24, r22
     3aa:	f8 01       	movw	r30, r16
     3ac:	91 83       	std	Z+1, r25	; 0x01
     3ae:	80 83       	st	Z, r24
     3b0:	de 01       	movw	r26, r28
     3b2:	ab 5a       	subi	r26, 0xAB	; 171
     3b4:	bf 4f       	sbci	r27, 0xFF	; 255
     3b6:	fe 01       	movw	r30, r28
     3b8:	e7 5a       	subi	r30, 0xA7	; 167
     3ba:	ff 4f       	sbci	r31, 0xFF	; 255
     3bc:	80 81       	ld	r24, Z
     3be:	91 81       	ldd	r25, Z+1	; 0x01
     3c0:	8d 93       	st	X+, r24
     3c2:	9c 93       	st	X, r25
     3c4:	fe 01       	movw	r30, r28
     3c6:	eb 5a       	subi	r30, 0xAB	; 171
     3c8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ca:	80 81       	ld	r24, Z
     3cc:	91 81       	ldd	r25, Z+1	; 0x01
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0x30c>
     3d2:	fe 01       	movw	r30, r28
     3d4:	eb 5a       	subi	r30, 0xAB	; 171
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	91 83       	std	Z+1, r25	; 0x01
     3da:	80 83       	st	Z, r24
	PORTA=4;_delay_ms(1000);
     3dc:	eb e3       	ldi	r30, 0x3B	; 59
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	84 e0       	ldi	r24, 0x04	; 4
     3e2:	80 83       	st	Z, r24
     3e4:	fe 01       	movw	r30, r28
     3e6:	ef 5a       	subi	r30, 0xAF	; 175
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	aa e7       	ldi	r26, 0x7A	; 122
     3f0:	b4 e4       	ldi	r27, 0x44	; 68
     3f2:	80 83       	st	Z, r24
     3f4:	91 83       	std	Z+1, r25	; 0x01
     3f6:	a2 83       	std	Z+2, r26	; 0x02
     3f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3fa:	8e 01       	movw	r16, r28
     3fc:	03 5b       	subi	r16, 0xB3	; 179
     3fe:	1f 4f       	sbci	r17, 0xFF	; 255
     400:	fe 01       	movw	r30, r28
     402:	ef 5a       	subi	r30, 0xAF	; 175
     404:	ff 4f       	sbci	r31, 0xFF	; 255
     406:	60 81       	ld	r22, Z
     408:	71 81       	ldd	r23, Z+1	; 0x01
     40a:	82 81       	ldd	r24, Z+2	; 0x02
     40c:	93 81       	ldd	r25, Z+3	; 0x03
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	4a e7       	ldi	r20, 0x7A	; 122
     414:	54 e4       	ldi	r21, 0x44	; 68
     416:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     41a:	dc 01       	movw	r26, r24
     41c:	cb 01       	movw	r24, r22
     41e:	f8 01       	movw	r30, r16
     420:	80 83       	st	Z, r24
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	a2 83       	std	Z+2, r26	; 0x02
     426:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     428:	fe 01       	movw	r30, r28
     42a:	e3 5b       	subi	r30, 0xB3	; 179
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	60 81       	ld	r22, Z
     430:	71 81       	ldd	r23, Z+1	; 0x01
     432:	82 81       	ldd	r24, Z+2	; 0x02
     434:	93 81       	ldd	r25, Z+3	; 0x03
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	40 e8       	ldi	r20, 0x80	; 128
     43c:	5f e3       	ldi	r21, 0x3F	; 63
     43e:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
     442:	88 23       	and	r24, r24
     444:	44 f4       	brge	.+16     	; 0x456 <main+0x394>
		__ticks = 1;
     446:	fe 01       	movw	r30, r28
     448:	e5 5b       	subi	r30, 0xB5	; 181
     44a:	ff 4f       	sbci	r31, 0xFF	; 255
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	91 83       	std	Z+1, r25	; 0x01
     452:	80 83       	st	Z, r24
     454:	64 c0       	rjmp	.+200    	; 0x51e <__stack+0xbf>
	else if (__tmp > 65535)
     456:	fe 01       	movw	r30, r28
     458:	e3 5b       	subi	r30, 0xB3	; 179
     45a:	ff 4f       	sbci	r31, 0xFF	; 255
     45c:	60 81       	ld	r22, Z
     45e:	71 81       	ldd	r23, Z+1	; 0x01
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	3f ef       	ldi	r19, 0xFF	; 255
     468:	4f e7       	ldi	r20, 0x7F	; 127
     46a:	57 e4       	ldi	r21, 0x47	; 71
     46c:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
     470:	18 16       	cp	r1, r24
     472:	0c f0       	brlt	.+2      	; 0x476 <__stack+0x17>
     474:	43 c0       	rjmp	.+134    	; 0x4fc <__stack+0x9d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     476:	fe 01       	movw	r30, r28
     478:	ef 5a       	subi	r30, 0xAF	; 175
     47a:	ff 4f       	sbci	r31, 0xFF	; 255
     47c:	60 81       	ld	r22, Z
     47e:	71 81       	ldd	r23, Z+1	; 0x01
     480:	82 81       	ldd	r24, Z+2	; 0x02
     482:	93 81       	ldd	r25, Z+3	; 0x03
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	40 e2       	ldi	r20, 0x20	; 32
     48a:	51 e4       	ldi	r21, 0x41	; 65
     48c:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     490:	dc 01       	movw	r26, r24
     492:	cb 01       	movw	r24, r22
     494:	8e 01       	movw	r16, r28
     496:	05 5b       	subi	r16, 0xB5	; 181
     498:	1f 4f       	sbci	r17, 0xFF	; 255
     49a:	bc 01       	movw	r22, r24
     49c:	cd 01       	movw	r24, r26
     49e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     4a2:	dc 01       	movw	r26, r24
     4a4:	cb 01       	movw	r24, r22
     4a6:	f8 01       	movw	r30, r16
     4a8:	91 83       	std	Z+1, r25	; 0x01
     4aa:	80 83       	st	Z, r24
     4ac:	1f c0       	rjmp	.+62     	; 0x4ec <__stack+0x8d>
     4ae:	fe 01       	movw	r30, r28
     4b0:	e7 5b       	subi	r30, 0xB7	; 183
     4b2:	ff 4f       	sbci	r31, 0xFF	; 255
     4b4:	84 e6       	ldi	r24, 0x64	; 100
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	91 83       	std	Z+1, r25	; 0x01
     4ba:	80 83       	st	Z, r24
     4bc:	fe 01       	movw	r30, r28
     4be:	e7 5b       	subi	r30, 0xB7	; 183
     4c0:	ff 4f       	sbci	r31, 0xFF	; 255
     4c2:	80 81       	ld	r24, Z
     4c4:	91 81       	ldd	r25, Z+1	; 0x01
     4c6:	01 97       	sbiw	r24, 0x01	; 1
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__stack+0x67>
     4ca:	fe 01       	movw	r30, r28
     4cc:	e7 5b       	subi	r30, 0xB7	; 183
     4ce:	ff 4f       	sbci	r31, 0xFF	; 255
     4d0:	91 83       	std	Z+1, r25	; 0x01
     4d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4d4:	de 01       	movw	r26, r28
     4d6:	a5 5b       	subi	r26, 0xB5	; 181
     4d8:	bf 4f       	sbci	r27, 0xFF	; 255
     4da:	fe 01       	movw	r30, r28
     4dc:	e5 5b       	subi	r30, 0xB5	; 181
     4de:	ff 4f       	sbci	r31, 0xFF	; 255
     4e0:	80 81       	ld	r24, Z
     4e2:	91 81       	ldd	r25, Z+1	; 0x01
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	11 96       	adiw	r26, 0x01	; 1
     4e8:	9c 93       	st	X, r25
     4ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ec:	fe 01       	movw	r30, r28
     4ee:	e5 5b       	subi	r30, 0xB5	; 181
     4f0:	ff 4f       	sbci	r31, 0xFF	; 255
     4f2:	80 81       	ld	r24, Z
     4f4:	91 81       	ldd	r25, Z+1	; 0x01
     4f6:	00 97       	sbiw	r24, 0x00	; 0
     4f8:	d1 f6       	brne	.-76     	; 0x4ae <__stack+0x4f>
     4fa:	27 c0       	rjmp	.+78     	; 0x54a <__stack+0xeb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4fc:	8e 01       	movw	r16, r28
     4fe:	05 5b       	subi	r16, 0xB5	; 181
     500:	1f 4f       	sbci	r17, 0xFF	; 255
     502:	fe 01       	movw	r30, r28
     504:	e3 5b       	subi	r30, 0xB3	; 179
     506:	ff 4f       	sbci	r31, 0xFF	; 255
     508:	60 81       	ld	r22, Z
     50a:	71 81       	ldd	r23, Z+1	; 0x01
     50c:	82 81       	ldd	r24, Z+2	; 0x02
     50e:	93 81       	ldd	r25, Z+3	; 0x03
     510:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     514:	dc 01       	movw	r26, r24
     516:	cb 01       	movw	r24, r22
     518:	f8 01       	movw	r30, r16
     51a:	91 83       	std	Z+1, r25	; 0x01
     51c:	80 83       	st	Z, r24
     51e:	de 01       	movw	r26, r28
     520:	a9 5b       	subi	r26, 0xB9	; 185
     522:	bf 4f       	sbci	r27, 0xFF	; 255
     524:	fe 01       	movw	r30, r28
     526:	e5 5b       	subi	r30, 0xB5	; 181
     528:	ff 4f       	sbci	r31, 0xFF	; 255
     52a:	80 81       	ld	r24, Z
     52c:	91 81       	ldd	r25, Z+1	; 0x01
     52e:	8d 93       	st	X+, r24
     530:	9c 93       	st	X, r25
     532:	fe 01       	movw	r30, r28
     534:	e9 5b       	subi	r30, 0xB9	; 185
     536:	ff 4f       	sbci	r31, 0xFF	; 255
     538:	80 81       	ld	r24, Z
     53a:	91 81       	ldd	r25, Z+1	; 0x01
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	f1 f7       	brne	.-4      	; 0x53c <__stack+0xdd>
     540:	fe 01       	movw	r30, r28
     542:	e9 5b       	subi	r30, 0xB9	; 185
     544:	ff 4f       	sbci	r31, 0xFF	; 255
     546:	91 83       	std	Z+1, r25	; 0x01
     548:	80 83       	st	Z, r24
	PORTA=8;_delay_ms(1000);
     54a:	eb e3       	ldi	r30, 0x3B	; 59
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	88 e0       	ldi	r24, 0x08	; 8
     550:	80 83       	st	Z, r24
     552:	fe 01       	movw	r30, r28
     554:	ed 5b       	subi	r30, 0xBD	; 189
     556:	ff 4f       	sbci	r31, 0xFF	; 255
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	aa e7       	ldi	r26, 0x7A	; 122
     55e:	b4 e4       	ldi	r27, 0x44	; 68
     560:	80 83       	st	Z, r24
     562:	91 83       	std	Z+1, r25	; 0x01
     564:	a2 83       	std	Z+2, r26	; 0x02
     566:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     568:	8e 01       	movw	r16, r28
     56a:	01 5c       	subi	r16, 0xC1	; 193
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	ed 5b       	subi	r30, 0xBD	; 189
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	4a e7       	ldi	r20, 0x7A	; 122
     582:	54 e4       	ldi	r21, 0x44	; 68
     584:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	f8 01       	movw	r30, r16
     58e:	80 83       	st	Z, r24
     590:	91 83       	std	Z+1, r25	; 0x01
     592:	a2 83       	std	Z+2, r26	; 0x02
     594:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     596:	fe 01       	movw	r30, r28
     598:	ff 96       	adiw	r30, 0x3f	; 63
     59a:	60 81       	ld	r22, Z
     59c:	71 81       	ldd	r23, Z+1	; 0x01
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	40 e8       	ldi	r20, 0x80	; 128
     5a8:	5f e3       	ldi	r21, 0x3F	; 63
     5aa:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
     5ae:	88 23       	and	r24, r24
     5b0:	2c f4       	brge	.+10     	; 0x5bc <__stack+0x15d>
		__ticks = 1;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	9e af       	std	Y+62, r25	; 0x3e
     5b8:	8d af       	std	Y+61, r24	; 0x3d
     5ba:	46 c0       	rjmp	.+140    	; 0x648 <__stack+0x1e9>
	else if (__tmp > 65535)
     5bc:	fe 01       	movw	r30, r28
     5be:	ff 96       	adiw	r30, 0x3f	; 63
     5c0:	60 81       	ld	r22, Z
     5c2:	71 81       	ldd	r23, Z+1	; 0x01
     5c4:	82 81       	ldd	r24, Z+2	; 0x02
     5c6:	93 81       	ldd	r25, Z+3	; 0x03
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	3f ef       	ldi	r19, 0xFF	; 255
     5cc:	4f e7       	ldi	r20, 0x7F	; 127
     5ce:	57 e4       	ldi	r21, 0x47	; 71
     5d0:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
     5d4:	18 16       	cp	r1, r24
     5d6:	64 f5       	brge	.+88     	; 0x630 <__stack+0x1d1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5d8:	fe 01       	movw	r30, r28
     5da:	ed 5b       	subi	r30, 0xBD	; 189
     5dc:	ff 4f       	sbci	r31, 0xFF	; 255
     5de:	60 81       	ld	r22, Z
     5e0:	71 81       	ldd	r23, Z+1	; 0x01
     5e2:	82 81       	ldd	r24, Z+2	; 0x02
     5e4:	93 81       	ldd	r25, Z+3	; 0x03
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	40 e2       	ldi	r20, 0x20	; 32
     5ec:	51 e4       	ldi	r21, 0x41	; 65
     5ee:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     5f2:	dc 01       	movw	r26, r24
     5f4:	cb 01       	movw	r24, r22
     5f6:	bc 01       	movw	r22, r24
     5f8:	cd 01       	movw	r24, r26
     5fa:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     5fe:	dc 01       	movw	r26, r24
     600:	cb 01       	movw	r24, r22
     602:	9e af       	std	Y+62, r25	; 0x3e
     604:	8d af       	std	Y+61, r24	; 0x3d
     606:	0f c0       	rjmp	.+30     	; 0x626 <__stack+0x1c7>
     608:	84 e6       	ldi	r24, 0x64	; 100
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	9c af       	std	Y+60, r25	; 0x3c
     60e:	8b af       	std	Y+59, r24	; 0x3b
     610:	8b ad       	ldd	r24, Y+59	; 0x3b
     612:	9c ad       	ldd	r25, Y+60	; 0x3c
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	f1 f7       	brne	.-4      	; 0x614 <__stack+0x1b5>
     618:	9c af       	std	Y+60, r25	; 0x3c
     61a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     61c:	8d ad       	ldd	r24, Y+61	; 0x3d
     61e:	9e ad       	ldd	r25, Y+62	; 0x3e
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	9e af       	std	Y+62, r25	; 0x3e
     624:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     626:	8d ad       	ldd	r24, Y+61	; 0x3d
     628:	9e ad       	ldd	r25, Y+62	; 0x3e
     62a:	00 97       	sbiw	r24, 0x00	; 0
     62c:	69 f7       	brne	.-38     	; 0x608 <__stack+0x1a9>
     62e:	16 c0       	rjmp	.+44     	; 0x65c <__stack+0x1fd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     630:	fe 01       	movw	r30, r28
     632:	ff 96       	adiw	r30, 0x3f	; 63
     634:	60 81       	ld	r22, Z
     636:	71 81       	ldd	r23, Z+1	; 0x01
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     640:	dc 01       	movw	r26, r24
     642:	cb 01       	movw	r24, r22
     644:	9e af       	std	Y+62, r25	; 0x3e
     646:	8d af       	std	Y+61, r24	; 0x3d
     648:	8d ad       	ldd	r24, Y+61	; 0x3d
     64a:	9e ad       	ldd	r25, Y+62	; 0x3e
     64c:	9a af       	std	Y+58, r25	; 0x3a
     64e:	89 af       	std	Y+57, r24	; 0x39
     650:	89 ad       	ldd	r24, Y+57	; 0x39
     652:	9a ad       	ldd	r25, Y+58	; 0x3a
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <__stack+0x1f5>
     658:	9a af       	std	Y+58, r25	; 0x3a
     65a:	89 af       	std	Y+57, r24	; 0x39
	PORTA=16;_delay_ms(1000);
     65c:	eb e3       	ldi	r30, 0x3B	; 59
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 e1       	ldi	r24, 0x10	; 16
     662:	80 83       	st	Z, r24
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	aa e7       	ldi	r26, 0x7A	; 122
     66a:	b4 e4       	ldi	r27, 0x44	; 68
     66c:	8d ab       	std	Y+53, r24	; 0x35
     66e:	9e ab       	std	Y+54, r25	; 0x36
     670:	af ab       	std	Y+55, r26	; 0x37
     672:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     674:	6d a9       	ldd	r22, Y+53	; 0x35
     676:	7e a9       	ldd	r23, Y+54	; 0x36
     678:	8f a9       	ldd	r24, Y+55	; 0x37
     67a:	98 ad       	ldd	r25, Y+56	; 0x38
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	4a e7       	ldi	r20, 0x7A	; 122
     682:	54 e4       	ldi	r21, 0x44	; 68
     684:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	89 ab       	std	Y+49, r24	; 0x31
     68e:	9a ab       	std	Y+50, r25	; 0x32
     690:	ab ab       	std	Y+51, r26	; 0x33
     692:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     694:	69 a9       	ldd	r22, Y+49	; 0x31
     696:	7a a9       	ldd	r23, Y+50	; 0x32
     698:	8b a9       	ldd	r24, Y+51	; 0x33
     69a:	9c a9       	ldd	r25, Y+52	; 0x34
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	40 e8       	ldi	r20, 0x80	; 128
     6a2:	5f e3       	ldi	r21, 0x3F	; 63
     6a4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
     6a8:	88 23       	and	r24, r24
     6aa:	2c f4       	brge	.+10     	; 0x6b6 <__stack+0x257>
		__ticks = 1;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	98 ab       	std	Y+48, r25	; 0x30
     6b2:	8f a7       	std	Y+47, r24	; 0x2f
     6b4:	3f c0       	rjmp	.+126    	; 0x734 <__stack+0x2d5>
	else if (__tmp > 65535)
     6b6:	69 a9       	ldd	r22, Y+49	; 0x31
     6b8:	7a a9       	ldd	r23, Y+50	; 0x32
     6ba:	8b a9       	ldd	r24, Y+51	; 0x33
     6bc:	9c a9       	ldd	r25, Y+52	; 0x34
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	3f ef       	ldi	r19, 0xFF	; 255
     6c2:	4f e7       	ldi	r20, 0x7F	; 127
     6c4:	57 e4       	ldi	r21, 0x47	; 71
     6c6:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
     6ca:	18 16       	cp	r1, r24
     6cc:	4c f5       	brge	.+82     	; 0x720 <__stack+0x2c1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6ce:	6d a9       	ldd	r22, Y+53	; 0x35
     6d0:	7e a9       	ldd	r23, Y+54	; 0x36
     6d2:	8f a9       	ldd	r24, Y+55	; 0x37
     6d4:	98 ad       	ldd	r25, Y+56	; 0x38
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e2       	ldi	r20, 0x20	; 32
     6dc:	51 e4       	ldi	r21, 0x41	; 65
     6de:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     6e2:	dc 01       	movw	r26, r24
     6e4:	cb 01       	movw	r24, r22
     6e6:	bc 01       	movw	r22, r24
     6e8:	cd 01       	movw	r24, r26
     6ea:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     6ee:	dc 01       	movw	r26, r24
     6f0:	cb 01       	movw	r24, r22
     6f2:	98 ab       	std	Y+48, r25	; 0x30
     6f4:	8f a7       	std	Y+47, r24	; 0x2f
     6f6:	0f c0       	rjmp	.+30     	; 0x716 <__stack+0x2b7>
     6f8:	84 e6       	ldi	r24, 0x64	; 100
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	9e a7       	std	Y+46, r25	; 0x2e
     6fe:	8d a7       	std	Y+45, r24	; 0x2d
     700:	8d a5       	ldd	r24, Y+45	; 0x2d
     702:	9e a5       	ldd	r25, Y+46	; 0x2e
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <__stack+0x2a5>
     708:	9e a7       	std	Y+46, r25	; 0x2e
     70a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     70c:	8f a5       	ldd	r24, Y+47	; 0x2f
     70e:	98 a9       	ldd	r25, Y+48	; 0x30
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	98 ab       	std	Y+48, r25	; 0x30
     714:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     716:	8f a5       	ldd	r24, Y+47	; 0x2f
     718:	98 a9       	ldd	r25, Y+48	; 0x30
     71a:	00 97       	sbiw	r24, 0x00	; 0
     71c:	69 f7       	brne	.-38     	; 0x6f8 <__stack+0x299>
     71e:	14 c0       	rjmp	.+40     	; 0x748 <__stack+0x2e9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     720:	69 a9       	ldd	r22, Y+49	; 0x31
     722:	7a a9       	ldd	r23, Y+50	; 0x32
     724:	8b a9       	ldd	r24, Y+51	; 0x33
     726:	9c a9       	ldd	r25, Y+52	; 0x34
     728:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     72c:	dc 01       	movw	r26, r24
     72e:	cb 01       	movw	r24, r22
     730:	98 ab       	std	Y+48, r25	; 0x30
     732:	8f a7       	std	Y+47, r24	; 0x2f
     734:	8f a5       	ldd	r24, Y+47	; 0x2f
     736:	98 a9       	ldd	r25, Y+48	; 0x30
     738:	9c a7       	std	Y+44, r25	; 0x2c
     73a:	8b a7       	std	Y+43, r24	; 0x2b
     73c:	8b a5       	ldd	r24, Y+43	; 0x2b
     73e:	9c a5       	ldd	r25, Y+44	; 0x2c
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	f1 f7       	brne	.-4      	; 0x740 <__stack+0x2e1>
     744:	9c a7       	std	Y+44, r25	; 0x2c
     746:	8b a7       	std	Y+43, r24	; 0x2b
	PORTA=32;_delay_ms(1000);
     748:	eb e3       	ldi	r30, 0x3B	; 59
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 e2       	ldi	r24, 0x20	; 32
     74e:	80 83       	st	Z, r24
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	aa e7       	ldi	r26, 0x7A	; 122
     756:	b4 e4       	ldi	r27, 0x44	; 68
     758:	8f a3       	std	Y+39, r24	; 0x27
     75a:	98 a7       	std	Y+40, r25	; 0x28
     75c:	a9 a7       	std	Y+41, r26	; 0x29
     75e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     760:	6f a1       	ldd	r22, Y+39	; 0x27
     762:	78 a5       	ldd	r23, Y+40	; 0x28
     764:	89 a5       	ldd	r24, Y+41	; 0x29
     766:	9a a5       	ldd	r25, Y+42	; 0x2a
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	4a e7       	ldi	r20, 0x7A	; 122
     76e:	54 e4       	ldi	r21, 0x44	; 68
     770:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     774:	dc 01       	movw	r26, r24
     776:	cb 01       	movw	r24, r22
     778:	8b a3       	std	Y+35, r24	; 0x23
     77a:	9c a3       	std	Y+36, r25	; 0x24
     77c:	ad a3       	std	Y+37, r26	; 0x25
     77e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     780:	6b a1       	ldd	r22, Y+35	; 0x23
     782:	7c a1       	ldd	r23, Y+36	; 0x24
     784:	8d a1       	ldd	r24, Y+37	; 0x25
     786:	9e a1       	ldd	r25, Y+38	; 0x26
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	40 e8       	ldi	r20, 0x80	; 128
     78e:	5f e3       	ldi	r21, 0x3F	; 63
     790:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
     794:	88 23       	and	r24, r24
     796:	2c f4       	brge	.+10     	; 0x7a2 <__stack+0x343>
		__ticks = 1;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	9a a3       	std	Y+34, r25	; 0x22
     79e:	89 a3       	std	Y+33, r24	; 0x21
     7a0:	3f c0       	rjmp	.+126    	; 0x820 <__stack+0x3c1>
	else if (__tmp > 65535)
     7a2:	6b a1       	ldd	r22, Y+35	; 0x23
     7a4:	7c a1       	ldd	r23, Y+36	; 0x24
     7a6:	8d a1       	ldd	r24, Y+37	; 0x25
     7a8:	9e a1       	ldd	r25, Y+38	; 0x26
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	3f ef       	ldi	r19, 0xFF	; 255
     7ae:	4f e7       	ldi	r20, 0x7F	; 127
     7b0:	57 e4       	ldi	r21, 0x47	; 71
     7b2:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
     7b6:	18 16       	cp	r1, r24
     7b8:	4c f5       	brge	.+82     	; 0x80c <__stack+0x3ad>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ba:	6f a1       	ldd	r22, Y+39	; 0x27
     7bc:	78 a5       	ldd	r23, Y+40	; 0x28
     7be:	89 a5       	ldd	r24, Y+41	; 0x29
     7c0:	9a a5       	ldd	r25, Y+42	; 0x2a
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e2       	ldi	r20, 0x20	; 32
     7c8:	51 e4       	ldi	r21, 0x41	; 65
     7ca:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     7ce:	dc 01       	movw	r26, r24
     7d0:	cb 01       	movw	r24, r22
     7d2:	bc 01       	movw	r22, r24
     7d4:	cd 01       	movw	r24, r26
     7d6:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     7da:	dc 01       	movw	r26, r24
     7dc:	cb 01       	movw	r24, r22
     7de:	9a a3       	std	Y+34, r25	; 0x22
     7e0:	89 a3       	std	Y+33, r24	; 0x21
     7e2:	0f c0       	rjmp	.+30     	; 0x802 <__stack+0x3a3>
     7e4:	84 e6       	ldi	r24, 0x64	; 100
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	98 a3       	std	Y+32, r25	; 0x20
     7ea:	8f 8f       	std	Y+31, r24	; 0x1f
     7ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7ee:	98 a1       	ldd	r25, Y+32	; 0x20
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <__stack+0x391>
     7f4:	98 a3       	std	Y+32, r25	; 0x20
     7f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7f8:	89 a1       	ldd	r24, Y+33	; 0x21
     7fa:	9a a1       	ldd	r25, Y+34	; 0x22
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	9a a3       	std	Y+34, r25	; 0x22
     800:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     802:	89 a1       	ldd	r24, Y+33	; 0x21
     804:	9a a1       	ldd	r25, Y+34	; 0x22
     806:	00 97       	sbiw	r24, 0x00	; 0
     808:	69 f7       	brne	.-38     	; 0x7e4 <__stack+0x385>
     80a:	14 c0       	rjmp	.+40     	; 0x834 <__stack+0x3d5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     80c:	6b a1       	ldd	r22, Y+35	; 0x23
     80e:	7c a1       	ldd	r23, Y+36	; 0x24
     810:	8d a1       	ldd	r24, Y+37	; 0x25
     812:	9e a1       	ldd	r25, Y+38	; 0x26
     814:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     818:	dc 01       	movw	r26, r24
     81a:	cb 01       	movw	r24, r22
     81c:	9a a3       	std	Y+34, r25	; 0x22
     81e:	89 a3       	std	Y+33, r24	; 0x21
     820:	89 a1       	ldd	r24, Y+33	; 0x21
     822:	9a a1       	ldd	r25, Y+34	; 0x22
     824:	9e 8f       	std	Y+30, r25	; 0x1e
     826:	8d 8f       	std	Y+29, r24	; 0x1d
     828:	8d 8d       	ldd	r24, Y+29	; 0x1d
     82a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <__stack+0x3cd>
     830:	9e 8f       	std	Y+30, r25	; 0x1e
     832:	8d 8f       	std	Y+29, r24	; 0x1d
	PORTA=64;_delay_ms(1000);
     834:	eb e3       	ldi	r30, 0x3B	; 59
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 e4       	ldi	r24, 0x40	; 64
     83a:	80 83       	st	Z, r24
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	aa e7       	ldi	r26, 0x7A	; 122
     842:	b4 e4       	ldi	r27, 0x44	; 68
     844:	89 8f       	std	Y+25, r24	; 0x19
     846:	9a 8f       	std	Y+26, r25	; 0x1a
     848:	ab 8f       	std	Y+27, r26	; 0x1b
     84a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     84c:	69 8d       	ldd	r22, Y+25	; 0x19
     84e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     850:	8b 8d       	ldd	r24, Y+27	; 0x1b
     852:	9c 8d       	ldd	r25, Y+28	; 0x1c
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	4a e7       	ldi	r20, 0x7A	; 122
     85a:	54 e4       	ldi	r21, 0x44	; 68
     85c:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     860:	dc 01       	movw	r26, r24
     862:	cb 01       	movw	r24, r22
     864:	8d 8b       	std	Y+21, r24	; 0x15
     866:	9e 8b       	std	Y+22, r25	; 0x16
     868:	af 8b       	std	Y+23, r26	; 0x17
     86a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     86c:	6d 89       	ldd	r22, Y+21	; 0x15
     86e:	7e 89       	ldd	r23, Y+22	; 0x16
     870:	8f 89       	ldd	r24, Y+23	; 0x17
     872:	98 8d       	ldd	r25, Y+24	; 0x18
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	40 e8       	ldi	r20, 0x80	; 128
     87a:	5f e3       	ldi	r21, 0x3F	; 63
     87c:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
     880:	88 23       	and	r24, r24
     882:	2c f4       	brge	.+10     	; 0x88e <__stack+0x42f>
		__ticks = 1;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	9c 8b       	std	Y+20, r25	; 0x14
     88a:	8b 8b       	std	Y+19, r24	; 0x13
     88c:	3f c0       	rjmp	.+126    	; 0x90c <__stack+0x4ad>
	else if (__tmp > 65535)
     88e:	6d 89       	ldd	r22, Y+21	; 0x15
     890:	7e 89       	ldd	r23, Y+22	; 0x16
     892:	8f 89       	ldd	r24, Y+23	; 0x17
     894:	98 8d       	ldd	r25, Y+24	; 0x18
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	3f ef       	ldi	r19, 0xFF	; 255
     89a:	4f e7       	ldi	r20, 0x7F	; 127
     89c:	57 e4       	ldi	r21, 0x47	; 71
     89e:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
     8a2:	18 16       	cp	r1, r24
     8a4:	4c f5       	brge	.+82     	; 0x8f8 <__stack+0x499>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a6:	69 8d       	ldd	r22, Y+25	; 0x19
     8a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	40 e2       	ldi	r20, 0x20	; 32
     8b4:	51 e4       	ldi	r21, 0x41	; 65
     8b6:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     8ba:	dc 01       	movw	r26, r24
     8bc:	cb 01       	movw	r24, r22
     8be:	bc 01       	movw	r22, r24
     8c0:	cd 01       	movw	r24, r26
     8c2:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     8c6:	dc 01       	movw	r26, r24
     8c8:	cb 01       	movw	r24, r22
     8ca:	9c 8b       	std	Y+20, r25	; 0x14
     8cc:	8b 8b       	std	Y+19, r24	; 0x13
     8ce:	0f c0       	rjmp	.+30     	; 0x8ee <__stack+0x48f>
     8d0:	84 e6       	ldi	r24, 0x64	; 100
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	9a 8b       	std	Y+18, r25	; 0x12
     8d6:	89 8b       	std	Y+17, r24	; 0x11
     8d8:	89 89       	ldd	r24, Y+17	; 0x11
     8da:	9a 89       	ldd	r25, Y+18	; 0x12
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <__stack+0x47d>
     8e0:	9a 8b       	std	Y+18, r25	; 0x12
     8e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e4:	8b 89       	ldd	r24, Y+19	; 0x13
     8e6:	9c 89       	ldd	r25, Y+20	; 0x14
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	9c 8b       	std	Y+20, r25	; 0x14
     8ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ee:	8b 89       	ldd	r24, Y+19	; 0x13
     8f0:	9c 89       	ldd	r25, Y+20	; 0x14
     8f2:	00 97       	sbiw	r24, 0x00	; 0
     8f4:	69 f7       	brne	.-38     	; 0x8d0 <__stack+0x471>
     8f6:	14 c0       	rjmp	.+40     	; 0x920 <__stack+0x4c1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8f8:	6d 89       	ldd	r22, Y+21	; 0x15
     8fa:	7e 89       	ldd	r23, Y+22	; 0x16
     8fc:	8f 89       	ldd	r24, Y+23	; 0x17
     8fe:	98 8d       	ldd	r25, Y+24	; 0x18
     900:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     904:	dc 01       	movw	r26, r24
     906:	cb 01       	movw	r24, r22
     908:	9c 8b       	std	Y+20, r25	; 0x14
     90a:	8b 8b       	std	Y+19, r24	; 0x13
     90c:	8b 89       	ldd	r24, Y+19	; 0x13
     90e:	9c 89       	ldd	r25, Y+20	; 0x14
     910:	98 8b       	std	Y+16, r25	; 0x10
     912:	8f 87       	std	Y+15, r24	; 0x0f
     914:	8f 85       	ldd	r24, Y+15	; 0x0f
     916:	98 89       	ldd	r25, Y+16	; 0x10
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <__stack+0x4b9>
     91c:	98 8b       	std	Y+16, r25	; 0x10
     91e:	8f 87       	std	Y+15, r24	; 0x0f
	PORTA=128;_delay_ms(1000);
     920:	eb e3       	ldi	r30, 0x3B	; 59
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 e8       	ldi	r24, 0x80	; 128
     926:	80 83       	st	Z, r24
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	aa e7       	ldi	r26, 0x7A	; 122
     92e:	b4 e4       	ldi	r27, 0x44	; 68
     930:	8b 87       	std	Y+11, r24	; 0x0b
     932:	9c 87       	std	Y+12, r25	; 0x0c
     934:	ad 87       	std	Y+13, r26	; 0x0d
     936:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     938:	6b 85       	ldd	r22, Y+11	; 0x0b
     93a:	7c 85       	ldd	r23, Y+12	; 0x0c
     93c:	8d 85       	ldd	r24, Y+13	; 0x0d
     93e:	9e 85       	ldd	r25, Y+14	; 0x0e
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	4a e7       	ldi	r20, 0x7A	; 122
     946:	54 e4       	ldi	r21, 0x44	; 68
     948:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     94c:	dc 01       	movw	r26, r24
     94e:	cb 01       	movw	r24, r22
     950:	8f 83       	std	Y+7, r24	; 0x07
     952:	98 87       	std	Y+8, r25	; 0x08
     954:	a9 87       	std	Y+9, r26	; 0x09
     956:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     958:	6f 81       	ldd	r22, Y+7	; 0x07
     95a:	78 85       	ldd	r23, Y+8	; 0x08
     95c:	89 85       	ldd	r24, Y+9	; 0x09
     95e:	9a 85       	ldd	r25, Y+10	; 0x0a
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	40 e8       	ldi	r20, 0x80	; 128
     966:	5f e3       	ldi	r21, 0x3F	; 63
     968:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
     96c:	88 23       	and	r24, r24
     96e:	2c f4       	brge	.+10     	; 0x97a <__stack+0x51b>
		__ticks = 1;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	9e 83       	std	Y+6, r25	; 0x06
     976:	8d 83       	std	Y+5, r24	; 0x05
     978:	3f c0       	rjmp	.+126    	; 0x9f8 <__stack+0x599>
	else if (__tmp > 65535)
     97a:	6f 81       	ldd	r22, Y+7	; 0x07
     97c:	78 85       	ldd	r23, Y+8	; 0x08
     97e:	89 85       	ldd	r24, Y+9	; 0x09
     980:	9a 85       	ldd	r25, Y+10	; 0x0a
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	3f ef       	ldi	r19, 0xFF	; 255
     986:	4f e7       	ldi	r20, 0x7F	; 127
     988:	57 e4       	ldi	r21, 0x47	; 71
     98a:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
     98e:	18 16       	cp	r1, r24
     990:	4c f5       	brge	.+82     	; 0x9e4 <__stack+0x585>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     992:	6b 85       	ldd	r22, Y+11	; 0x0b
     994:	7c 85       	ldd	r23, Y+12	; 0x0c
     996:	8d 85       	ldd	r24, Y+13	; 0x0d
     998:	9e 85       	ldd	r25, Y+14	; 0x0e
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e2       	ldi	r20, 0x20	; 32
     9a0:	51 e4       	ldi	r21, 0x41	; 65
     9a2:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     9a6:	dc 01       	movw	r26, r24
     9a8:	cb 01       	movw	r24, r22
     9aa:	bc 01       	movw	r22, r24
     9ac:	cd 01       	movw	r24, r26
     9ae:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     9b2:	dc 01       	movw	r26, r24
     9b4:	cb 01       	movw	r24, r22
     9b6:	9e 83       	std	Y+6, r25	; 0x06
     9b8:	8d 83       	std	Y+5, r24	; 0x05
     9ba:	0f c0       	rjmp	.+30     	; 0x9da <__stack+0x57b>
     9bc:	84 e6       	ldi	r24, 0x64	; 100
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	9c 83       	std	Y+4, r25	; 0x04
     9c2:	8b 83       	std	Y+3, r24	; 0x03
     9c4:	8b 81       	ldd	r24, Y+3	; 0x03
     9c6:	9c 81       	ldd	r25, Y+4	; 0x04
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <__stack+0x569>
     9cc:	9c 83       	std	Y+4, r25	; 0x04
     9ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9d0:	8d 81       	ldd	r24, Y+5	; 0x05
     9d2:	9e 81       	ldd	r25, Y+6	; 0x06
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	9e 83       	std	Y+6, r25	; 0x06
     9d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9da:	8d 81       	ldd	r24, Y+5	; 0x05
     9dc:	9e 81       	ldd	r25, Y+6	; 0x06
     9de:	00 97       	sbiw	r24, 0x00	; 0
     9e0:	69 f7       	brne	.-38     	; 0x9bc <__stack+0x55d>
     9e2:	84 cb       	rjmp	.-2296   	; 0xec <main+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9e4:	6f 81       	ldd	r22, Y+7	; 0x07
     9e6:	78 85       	ldd	r23, Y+8	; 0x08
     9e8:	89 85       	ldd	r24, Y+9	; 0x09
     9ea:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ec:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     9f0:	dc 01       	movw	r26, r24
     9f2:	cb 01       	movw	r24, r22
     9f4:	9e 83       	std	Y+6, r25	; 0x06
     9f6:	8d 83       	std	Y+5, r24	; 0x05
     9f8:	8d 81       	ldd	r24, Y+5	; 0x05
     9fa:	9e 81       	ldd	r25, Y+6	; 0x06
     9fc:	9a 83       	std	Y+2, r25	; 0x02
     9fe:	89 83       	std	Y+1, r24	; 0x01
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	9a 81       	ldd	r25, Y+2	; 0x02
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <__stack+0x5a5>
     a08:	9a 83       	std	Y+2, r25	; 0x02
     a0a:	89 83       	std	Y+1, r24	; 0x01
     a0c:	6f cb       	rjmp	.-2338   	; 0xec <main+0x2a>

00000a0e <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     a0e:	df 93       	push	r29
     a10:	cf 93       	push	r28
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	e9 97       	sbiw	r28, 0x39	; 57
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	89 af       	std	Y+57, r24	; 0x39

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     a24:	e5 e3       	ldi	r30, 0x35	; 53
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	89 ad       	ldd	r24, Y+57	; 0x39
     a2a:	80 7f       	andi	r24, 0xF0	; 240
     a2c:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     a2e:	a5 e3       	ldi	r26, 0x35	; 53
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	e5 e3       	ldi	r30, 0x35	; 53
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	81 60       	ori	r24, 0x01	; 1
     a3a:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     a3c:	a5 e3       	ldi	r26, 0x35	; 53
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e5 e3       	ldi	r30, 0x35	; 53
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	84 60       	ori	r24, 0x04	; 4
     a48:	8c 93       	st	X, r24
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	a0 e8       	ldi	r26, 0x80	; 128
     a50:	bf e3       	ldi	r27, 0x3F	; 63
     a52:	8d ab       	std	Y+53, r24	; 0x35
     a54:	9e ab       	std	Y+54, r25	; 0x36
     a56:	af ab       	std	Y+55, r26	; 0x37
     a58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a5a:	6d a9       	ldd	r22, Y+53	; 0x35
     a5c:	7e a9       	ldd	r23, Y+54	; 0x36
     a5e:	8f a9       	ldd	r24, Y+55	; 0x37
     a60:	98 ad       	ldd	r25, Y+56	; 0x38
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	4a e7       	ldi	r20, 0x7A	; 122
     a68:	54 e4       	ldi	r21, 0x44	; 68
     a6a:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     a6e:	dc 01       	movw	r26, r24
     a70:	cb 01       	movw	r24, r22
     a72:	89 ab       	std	Y+49, r24	; 0x31
     a74:	9a ab       	std	Y+50, r25	; 0x32
     a76:	ab ab       	std	Y+51, r26	; 0x33
     a78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     a7a:	69 a9       	ldd	r22, Y+49	; 0x31
     a7c:	7a a9       	ldd	r23, Y+50	; 0x32
     a7e:	8b a9       	ldd	r24, Y+51	; 0x33
     a80:	9c a9       	ldd	r25, Y+52	; 0x34
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	40 e8       	ldi	r20, 0x80	; 128
     a88:	5f e3       	ldi	r21, 0x3F	; 63
     a8a:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
     a8e:	88 23       	and	r24, r24
     a90:	2c f4       	brge	.+10     	; 0xa9c <LCDsendChar+0x8e>
		__ticks = 1;
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	98 ab       	std	Y+48, r25	; 0x30
     a98:	8f a7       	std	Y+47, r24	; 0x2f
     a9a:	3f c0       	rjmp	.+126    	; 0xb1a <LCDsendChar+0x10c>
	else if (__tmp > 65535)
     a9c:	69 a9       	ldd	r22, Y+49	; 0x31
     a9e:	7a a9       	ldd	r23, Y+50	; 0x32
     aa0:	8b a9       	ldd	r24, Y+51	; 0x33
     aa2:	9c a9       	ldd	r25, Y+52	; 0x34
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	3f ef       	ldi	r19, 0xFF	; 255
     aa8:	4f e7       	ldi	r20, 0x7F	; 127
     aaa:	57 e4       	ldi	r21, 0x47	; 71
     aac:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
     ab0:	18 16       	cp	r1, r24
     ab2:	4c f5       	brge	.+82     	; 0xb06 <LCDsendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ab4:	6d a9       	ldd	r22, Y+53	; 0x35
     ab6:	7e a9       	ldd	r23, Y+54	; 0x36
     ab8:	8f a9       	ldd	r24, Y+55	; 0x37
     aba:	98 ad       	ldd	r25, Y+56	; 0x38
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	40 e2       	ldi	r20, 0x20	; 32
     ac2:	51 e4       	ldi	r21, 0x41	; 65
     ac4:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     ac8:	dc 01       	movw	r26, r24
     aca:	cb 01       	movw	r24, r22
     acc:	bc 01       	movw	r22, r24
     ace:	cd 01       	movw	r24, r26
     ad0:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     ad4:	dc 01       	movw	r26, r24
     ad6:	cb 01       	movw	r24, r22
     ad8:	98 ab       	std	Y+48, r25	; 0x30
     ada:	8f a7       	std	Y+47, r24	; 0x2f
     adc:	0f c0       	rjmp	.+30     	; 0xafc <LCDsendChar+0xee>
     ade:	84 e6       	ldi	r24, 0x64	; 100
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	9e a7       	std	Y+46, r25	; 0x2e
     ae4:	8d a7       	std	Y+45, r24	; 0x2d
     ae6:	8d a5       	ldd	r24, Y+45	; 0x2d
     ae8:	9e a5       	ldd	r25, Y+46	; 0x2e
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	f1 f7       	brne	.-4      	; 0xaea <LCDsendChar+0xdc>
     aee:	9e a7       	std	Y+46, r25	; 0x2e
     af0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     af2:	8f a5       	ldd	r24, Y+47	; 0x2f
     af4:	98 a9       	ldd	r25, Y+48	; 0x30
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	98 ab       	std	Y+48, r25	; 0x30
     afa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     afc:	8f a5       	ldd	r24, Y+47	; 0x2f
     afe:	98 a9       	ldd	r25, Y+48	; 0x30
     b00:	00 97       	sbiw	r24, 0x00	; 0
     b02:	69 f7       	brne	.-38     	; 0xade <LCDsendChar+0xd0>
     b04:	14 c0       	rjmp	.+40     	; 0xb2e <LCDsendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b06:	69 a9       	ldd	r22, Y+49	; 0x31
     b08:	7a a9       	ldd	r23, Y+50	; 0x32
     b0a:	8b a9       	ldd	r24, Y+51	; 0x33
     b0c:	9c a9       	ldd	r25, Y+52	; 0x34
     b0e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     b12:	dc 01       	movw	r26, r24
     b14:	cb 01       	movw	r24, r22
     b16:	98 ab       	std	Y+48, r25	; 0x30
     b18:	8f a7       	std	Y+47, r24	; 0x2f
     b1a:	8f a5       	ldd	r24, Y+47	; 0x2f
     b1c:	98 a9       	ldd	r25, Y+48	; 0x30
     b1e:	9c a7       	std	Y+44, r25	; 0x2c
     b20:	8b a7       	std	Y+43, r24	; 0x2b
     b22:	8b a5       	ldd	r24, Y+43	; 0x2b
     b24:	9c a5       	ldd	r25, Y+44	; 0x2c
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <LCDsendChar+0x118>
     b2a:	9c a7       	std	Y+44, r25	; 0x2c
     b2c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     b2e:	a5 e3       	ldi	r26, 0x35	; 53
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	e5 e3       	ldi	r30, 0x35	; 53
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	8b 7f       	andi	r24, 0xFB	; 251
     b3a:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     b3c:	a5 e3       	ldi	r26, 0x35	; 53
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	e5 e3       	ldi	r30, 0x35	; 53
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	8e 7f       	andi	r24, 0xFE	; 254
     b48:	8c 93       	st	X, r24
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	a0 e8       	ldi	r26, 0x80	; 128
     b50:	bf e3       	ldi	r27, 0x3F	; 63
     b52:	8f a3       	std	Y+39, r24	; 0x27
     b54:	98 a7       	std	Y+40, r25	; 0x28
     b56:	a9 a7       	std	Y+41, r26	; 0x29
     b58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b5a:	6f a1       	ldd	r22, Y+39	; 0x27
     b5c:	78 a5       	ldd	r23, Y+40	; 0x28
     b5e:	89 a5       	ldd	r24, Y+41	; 0x29
     b60:	9a a5       	ldd	r25, Y+42	; 0x2a
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	4a e7       	ldi	r20, 0x7A	; 122
     b68:	54 e4       	ldi	r21, 0x44	; 68
     b6a:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     b6e:	dc 01       	movw	r26, r24
     b70:	cb 01       	movw	r24, r22
     b72:	8b a3       	std	Y+35, r24	; 0x23
     b74:	9c a3       	std	Y+36, r25	; 0x24
     b76:	ad a3       	std	Y+37, r26	; 0x25
     b78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     b7a:	6b a1       	ldd	r22, Y+35	; 0x23
     b7c:	7c a1       	ldd	r23, Y+36	; 0x24
     b7e:	8d a1       	ldd	r24, Y+37	; 0x25
     b80:	9e a1       	ldd	r25, Y+38	; 0x26
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	40 e8       	ldi	r20, 0x80	; 128
     b88:	5f e3       	ldi	r21, 0x3F	; 63
     b8a:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
     b8e:	88 23       	and	r24, r24
     b90:	2c f4       	brge	.+10     	; 0xb9c <LCDsendChar+0x18e>
		__ticks = 1;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	9a a3       	std	Y+34, r25	; 0x22
     b98:	89 a3       	std	Y+33, r24	; 0x21
     b9a:	3f c0       	rjmp	.+126    	; 0xc1a <LCDsendChar+0x20c>
	else if (__tmp > 65535)
     b9c:	6b a1       	ldd	r22, Y+35	; 0x23
     b9e:	7c a1       	ldd	r23, Y+36	; 0x24
     ba0:	8d a1       	ldd	r24, Y+37	; 0x25
     ba2:	9e a1       	ldd	r25, Y+38	; 0x26
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	3f ef       	ldi	r19, 0xFF	; 255
     ba8:	4f e7       	ldi	r20, 0x7F	; 127
     baa:	57 e4       	ldi	r21, 0x47	; 71
     bac:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
     bb0:	18 16       	cp	r1, r24
     bb2:	4c f5       	brge	.+82     	; 0xc06 <LCDsendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bb4:	6f a1       	ldd	r22, Y+39	; 0x27
     bb6:	78 a5       	ldd	r23, Y+40	; 0x28
     bb8:	89 a5       	ldd	r24, Y+41	; 0x29
     bba:	9a a5       	ldd	r25, Y+42	; 0x2a
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e2       	ldi	r20, 0x20	; 32
     bc2:	51 e4       	ldi	r21, 0x41	; 65
     bc4:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     bc8:	dc 01       	movw	r26, r24
     bca:	cb 01       	movw	r24, r22
     bcc:	bc 01       	movw	r22, r24
     bce:	cd 01       	movw	r24, r26
     bd0:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	9a a3       	std	Y+34, r25	; 0x22
     bda:	89 a3       	std	Y+33, r24	; 0x21
     bdc:	0f c0       	rjmp	.+30     	; 0xbfc <LCDsendChar+0x1ee>
     bde:	84 e6       	ldi	r24, 0x64	; 100
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	98 a3       	std	Y+32, r25	; 0x20
     be4:	8f 8f       	std	Y+31, r24	; 0x1f
     be6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     be8:	98 a1       	ldd	r25, Y+32	; 0x20
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <LCDsendChar+0x1dc>
     bee:	98 a3       	std	Y+32, r25	; 0x20
     bf0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bf2:	89 a1       	ldd	r24, Y+33	; 0x21
     bf4:	9a a1       	ldd	r25, Y+34	; 0x22
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	9a a3       	std	Y+34, r25	; 0x22
     bfa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bfc:	89 a1       	ldd	r24, Y+33	; 0x21
     bfe:	9a a1       	ldd	r25, Y+34	; 0x22
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	69 f7       	brne	.-38     	; 0xbde <LCDsendChar+0x1d0>
     c04:	14 c0       	rjmp	.+40     	; 0xc2e <LCDsendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c06:	6b a1       	ldd	r22, Y+35	; 0x23
     c08:	7c a1       	ldd	r23, Y+36	; 0x24
     c0a:	8d a1       	ldd	r24, Y+37	; 0x25
     c0c:	9e a1       	ldd	r25, Y+38	; 0x26
     c0e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     c12:	dc 01       	movw	r26, r24
     c14:	cb 01       	movw	r24, r22
     c16:	9a a3       	std	Y+34, r25	; 0x22
     c18:	89 a3       	std	Y+33, r24	; 0x21
     c1a:	89 a1       	ldd	r24, Y+33	; 0x21
     c1c:	9a a1       	ldd	r25, Y+34	; 0x22
     c1e:	9e 8f       	std	Y+30, r25	; 0x1e
     c20:	8d 8f       	std	Y+29, r24	; 0x1d
     c22:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c24:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	f1 f7       	brne	.-4      	; 0xc26 <LCDsendChar+0x218>
     c2a:	9e 8f       	std	Y+30, r25	; 0x1e
     c2c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     c2e:	e5 e3       	ldi	r30, 0x35	; 53
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	89 ad       	ldd	r24, Y+57	; 0x39
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	82 95       	swap	r24
     c3a:	92 95       	swap	r25
     c3c:	90 7f       	andi	r25, 0xF0	; 240
     c3e:	98 27       	eor	r25, r24
     c40:	80 7f       	andi	r24, 0xF0	; 240
     c42:	98 27       	eor	r25, r24
     c44:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     c46:	a5 e3       	ldi	r26, 0x35	; 53
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e5 e3       	ldi	r30, 0x35	; 53
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	81 60       	ori	r24, 0x01	; 1
     c52:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     c54:	a5 e3       	ldi	r26, 0x35	; 53
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e5 e3       	ldi	r30, 0x35	; 53
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	84 60       	ori	r24, 0x04	; 4
     c60:	8c 93       	st	X, r24
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	a0 e8       	ldi	r26, 0x80	; 128
     c68:	bf e3       	ldi	r27, 0x3F	; 63
     c6a:	89 8f       	std	Y+25, r24	; 0x19
     c6c:	9a 8f       	std	Y+26, r25	; 0x1a
     c6e:	ab 8f       	std	Y+27, r26	; 0x1b
     c70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c72:	69 8d       	ldd	r22, Y+25	; 0x19
     c74:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c76:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c78:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	4a e7       	ldi	r20, 0x7A	; 122
     c80:	54 e4       	ldi	r21, 0x44	; 68
     c82:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	8d 8b       	std	Y+21, r24	; 0x15
     c8c:	9e 8b       	std	Y+22, r25	; 0x16
     c8e:	af 8b       	std	Y+23, r26	; 0x17
     c90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c92:	6d 89       	ldd	r22, Y+21	; 0x15
     c94:	7e 89       	ldd	r23, Y+22	; 0x16
     c96:	8f 89       	ldd	r24, Y+23	; 0x17
     c98:	98 8d       	ldd	r25, Y+24	; 0x18
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	40 e8       	ldi	r20, 0x80	; 128
     ca0:	5f e3       	ldi	r21, 0x3F	; 63
     ca2:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
     ca6:	88 23       	and	r24, r24
     ca8:	2c f4       	brge	.+10     	; 0xcb4 <LCDsendChar+0x2a6>
		__ticks = 1;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	9c 8b       	std	Y+20, r25	; 0x14
     cb0:	8b 8b       	std	Y+19, r24	; 0x13
     cb2:	3f c0       	rjmp	.+126    	; 0xd32 <LCDsendChar+0x324>
	else if (__tmp > 65535)
     cb4:	6d 89       	ldd	r22, Y+21	; 0x15
     cb6:	7e 89       	ldd	r23, Y+22	; 0x16
     cb8:	8f 89       	ldd	r24, Y+23	; 0x17
     cba:	98 8d       	ldd	r25, Y+24	; 0x18
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	3f ef       	ldi	r19, 0xFF	; 255
     cc0:	4f e7       	ldi	r20, 0x7F	; 127
     cc2:	57 e4       	ldi	r21, 0x47	; 71
     cc4:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
     cc8:	18 16       	cp	r1, r24
     cca:	4c f5       	brge	.+82     	; 0xd1e <LCDsendChar+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ccc:	69 8d       	ldd	r22, Y+25	; 0x19
     cce:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e2       	ldi	r20, 0x20	; 32
     cda:	51 e4       	ldi	r21, 0x41	; 65
     cdc:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	bc 01       	movw	r22, r24
     ce6:	cd 01       	movw	r24, r26
     ce8:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	9c 8b       	std	Y+20, r25	; 0x14
     cf2:	8b 8b       	std	Y+19, r24	; 0x13
     cf4:	0f c0       	rjmp	.+30     	; 0xd14 <LCDsendChar+0x306>
     cf6:	84 e6       	ldi	r24, 0x64	; 100
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9a 8b       	std	Y+18, r25	; 0x12
     cfc:	89 8b       	std	Y+17, r24	; 0x11
     cfe:	89 89       	ldd	r24, Y+17	; 0x11
     d00:	9a 89       	ldd	r25, Y+18	; 0x12
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	f1 f7       	brne	.-4      	; 0xd02 <LCDsendChar+0x2f4>
     d06:	9a 8b       	std	Y+18, r25	; 0x12
     d08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d0a:	8b 89       	ldd	r24, Y+19	; 0x13
     d0c:	9c 89       	ldd	r25, Y+20	; 0x14
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	9c 8b       	std	Y+20, r25	; 0x14
     d12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d14:	8b 89       	ldd	r24, Y+19	; 0x13
     d16:	9c 89       	ldd	r25, Y+20	; 0x14
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	69 f7       	brne	.-38     	; 0xcf6 <LCDsendChar+0x2e8>
     d1c:	14 c0       	rjmp	.+40     	; 0xd46 <LCDsendChar+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d1e:	6d 89       	ldd	r22, Y+21	; 0x15
     d20:	7e 89       	ldd	r23, Y+22	; 0x16
     d22:	8f 89       	ldd	r24, Y+23	; 0x17
     d24:	98 8d       	ldd	r25, Y+24	; 0x18
     d26:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     d2a:	dc 01       	movw	r26, r24
     d2c:	cb 01       	movw	r24, r22
     d2e:	9c 8b       	std	Y+20, r25	; 0x14
     d30:	8b 8b       	std	Y+19, r24	; 0x13
     d32:	8b 89       	ldd	r24, Y+19	; 0x13
     d34:	9c 89       	ldd	r25, Y+20	; 0x14
     d36:	98 8b       	std	Y+16, r25	; 0x10
     d38:	8f 87       	std	Y+15, r24	; 0x0f
     d3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d3c:	98 89       	ldd	r25, Y+16	; 0x10
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <LCDsendChar+0x330>
     d42:	98 8b       	std	Y+16, r25	; 0x10
     d44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     d46:	a5 e3       	ldi	r26, 0x35	; 53
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e5 e3       	ldi	r30, 0x35	; 53
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8b 7f       	andi	r24, 0xFB	; 251
     d52:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     d54:	a5 e3       	ldi	r26, 0x35	; 53
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e5 e3       	ldi	r30, 0x35	; 53
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	8e 7f       	andi	r24, 0xFE	; 254
     d60:	8c 93       	st	X, r24
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	a0 e8       	ldi	r26, 0x80	; 128
     d68:	bf e3       	ldi	r27, 0x3F	; 63
     d6a:	8b 87       	std	Y+11, r24	; 0x0b
     d6c:	9c 87       	std	Y+12, r25	; 0x0c
     d6e:	ad 87       	std	Y+13, r26	; 0x0d
     d70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d72:	6b 85       	ldd	r22, Y+11	; 0x0b
     d74:	7c 85       	ldd	r23, Y+12	; 0x0c
     d76:	8d 85       	ldd	r24, Y+13	; 0x0d
     d78:	9e 85       	ldd	r25, Y+14	; 0x0e
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	4a e7       	ldi	r20, 0x7A	; 122
     d80:	54 e4       	ldi	r21, 0x44	; 68
     d82:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	8f 83       	std	Y+7, r24	; 0x07
     d8c:	98 87       	std	Y+8, r25	; 0x08
     d8e:	a9 87       	std	Y+9, r26	; 0x09
     d90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d92:	6f 81       	ldd	r22, Y+7	; 0x07
     d94:	78 85       	ldd	r23, Y+8	; 0x08
     d96:	89 85       	ldd	r24, Y+9	; 0x09
     d98:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e8       	ldi	r20, 0x80	; 128
     da0:	5f e3       	ldi	r21, 0x3F	; 63
     da2:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
     da6:	88 23       	and	r24, r24
     da8:	2c f4       	brge	.+10     	; 0xdb4 <LCDsendChar+0x3a6>
		__ticks = 1;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	9e 83       	std	Y+6, r25	; 0x06
     db0:	8d 83       	std	Y+5, r24	; 0x05
     db2:	3f c0       	rjmp	.+126    	; 0xe32 <LCDsendChar+0x424>
	else if (__tmp > 65535)
     db4:	6f 81       	ldd	r22, Y+7	; 0x07
     db6:	78 85       	ldd	r23, Y+8	; 0x08
     db8:	89 85       	ldd	r24, Y+9	; 0x09
     dba:	9a 85       	ldd	r25, Y+10	; 0x0a
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	3f ef       	ldi	r19, 0xFF	; 255
     dc0:	4f e7       	ldi	r20, 0x7F	; 127
     dc2:	57 e4       	ldi	r21, 0x47	; 71
     dc4:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
     dc8:	18 16       	cp	r1, r24
     dca:	4c f5       	brge	.+82     	; 0xe1e <LCDsendChar+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dce:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e2       	ldi	r20, 0x20	; 32
     dda:	51 e4       	ldi	r21, 0x41	; 65
     ddc:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	bc 01       	movw	r22, r24
     de6:	cd 01       	movw	r24, r26
     de8:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	9e 83       	std	Y+6, r25	; 0x06
     df2:	8d 83       	std	Y+5, r24	; 0x05
     df4:	0f c0       	rjmp	.+30     	; 0xe14 <LCDsendChar+0x406>
     df6:	84 e6       	ldi	r24, 0x64	; 100
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	9c 83       	std	Y+4, r25	; 0x04
     dfc:	8b 83       	std	Y+3, r24	; 0x03
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	9c 81       	ldd	r25, Y+4	; 0x04
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <LCDsendChar+0x3f4>
     e06:	9c 83       	std	Y+4, r25	; 0x04
     e08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	9e 81       	ldd	r25, Y+6	; 0x06
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	69 f7       	brne	.-38     	; 0xdf6 <LCDsendChar+0x3e8>
     e1c:	14 c0       	rjmp	.+40     	; 0xe46 <LCDsendChar+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e1e:	6f 81       	ldd	r22, Y+7	; 0x07
     e20:	78 85       	ldd	r23, Y+8	; 0x08
     e22:	89 85       	ldd	r24, Y+9	; 0x09
     e24:	9a 85       	ldd	r25, Y+10	; 0x0a
     e26:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	9e 83       	std	Y+6, r25	; 0x06
     e30:	8d 83       	std	Y+5, r24	; 0x05
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	9e 81       	ldd	r25, Y+6	; 0x06
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <LCDsendChar+0x430>
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     e46:	e9 96       	adiw	r28, 0x39	; 57
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	e9 97       	sbiw	r28, 0x39	; 57
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	89 af       	std	Y+57, r24	; 0x39
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     e6e:	e5 e3       	ldi	r30, 0x35	; 53
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	89 ad       	ldd	r24, Y+57	; 0x39
     e74:	80 7f       	andi	r24, 0xF0	; 240
     e76:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     e78:	a5 e3       	ldi	r26, 0x35	; 53
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e5 e3       	ldi	r30, 0x35	; 53
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	84 60       	ori	r24, 0x04	; 4
     e84:	8c 93       	st	X, r24
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	a0 e8       	ldi	r26, 0x80	; 128
     e8c:	bf e3       	ldi	r27, 0x3F	; 63
     e8e:	8d ab       	std	Y+53, r24	; 0x35
     e90:	9e ab       	std	Y+54, r25	; 0x36
     e92:	af ab       	std	Y+55, r26	; 0x37
     e94:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e96:	6d a9       	ldd	r22, Y+53	; 0x35
     e98:	7e a9       	ldd	r23, Y+54	; 0x36
     e9a:	8f a9       	ldd	r24, Y+55	; 0x37
     e9c:	98 ad       	ldd	r25, Y+56	; 0x38
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	4a e7       	ldi	r20, 0x7A	; 122
     ea4:	54 e4       	ldi	r21, 0x44	; 68
     ea6:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	89 ab       	std	Y+49, r24	; 0x31
     eb0:	9a ab       	std	Y+50, r25	; 0x32
     eb2:	ab ab       	std	Y+51, r26	; 0x33
     eb4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     eb6:	69 a9       	ldd	r22, Y+49	; 0x31
     eb8:	7a a9       	ldd	r23, Y+50	; 0x32
     eba:	8b a9       	ldd	r24, Y+51	; 0x33
     ebc:	9c a9       	ldd	r25, Y+52	; 0x34
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e8       	ldi	r20, 0x80	; 128
     ec4:	5f e3       	ldi	r21, 0x3F	; 63
     ec6:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
     eca:	88 23       	and	r24, r24
     ecc:	2c f4       	brge	.+10     	; 0xed8 <LCDsendCommand+0x80>
		__ticks = 1;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	98 ab       	std	Y+48, r25	; 0x30
     ed4:	8f a7       	std	Y+47, r24	; 0x2f
     ed6:	3f c0       	rjmp	.+126    	; 0xf56 <LCDsendCommand+0xfe>
	else if (__tmp > 65535)
     ed8:	69 a9       	ldd	r22, Y+49	; 0x31
     eda:	7a a9       	ldd	r23, Y+50	; 0x32
     edc:	8b a9       	ldd	r24, Y+51	; 0x33
     ede:	9c a9       	ldd	r25, Y+52	; 0x34
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	3f ef       	ldi	r19, 0xFF	; 255
     ee4:	4f e7       	ldi	r20, 0x7F	; 127
     ee6:	57 e4       	ldi	r21, 0x47	; 71
     ee8:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
     eec:	18 16       	cp	r1, r24
     eee:	4c f5       	brge	.+82     	; 0xf42 <LCDsendCommand+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef0:	6d a9       	ldd	r22, Y+53	; 0x35
     ef2:	7e a9       	ldd	r23, Y+54	; 0x36
     ef4:	8f a9       	ldd	r24, Y+55	; 0x37
     ef6:	98 ad       	ldd	r25, Y+56	; 0x38
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e2       	ldi	r20, 0x20	; 32
     efe:	51 e4       	ldi	r21, 0x41	; 65
     f00:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	bc 01       	movw	r22, r24
     f0a:	cd 01       	movw	r24, r26
     f0c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	98 ab       	std	Y+48, r25	; 0x30
     f16:	8f a7       	std	Y+47, r24	; 0x2f
     f18:	0f c0       	rjmp	.+30     	; 0xf38 <LCDsendCommand+0xe0>
     f1a:	84 e6       	ldi	r24, 0x64	; 100
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	9e a7       	std	Y+46, r25	; 0x2e
     f20:	8d a7       	std	Y+45, r24	; 0x2d
     f22:	8d a5       	ldd	r24, Y+45	; 0x2d
     f24:	9e a5       	ldd	r25, Y+46	; 0x2e
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <LCDsendCommand+0xce>
     f2a:	9e a7       	std	Y+46, r25	; 0x2e
     f2c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f30:	98 a9       	ldd	r25, Y+48	; 0x30
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	98 ab       	std	Y+48, r25	; 0x30
     f36:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f38:	8f a5       	ldd	r24, Y+47	; 0x2f
     f3a:	98 a9       	ldd	r25, Y+48	; 0x30
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	69 f7       	brne	.-38     	; 0xf1a <LCDsendCommand+0xc2>
     f40:	14 c0       	rjmp	.+40     	; 0xf6a <LCDsendCommand+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f42:	69 a9       	ldd	r22, Y+49	; 0x31
     f44:	7a a9       	ldd	r23, Y+50	; 0x32
     f46:	8b a9       	ldd	r24, Y+51	; 0x33
     f48:	9c a9       	ldd	r25, Y+52	; 0x34
     f4a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	98 ab       	std	Y+48, r25	; 0x30
     f54:	8f a7       	std	Y+47, r24	; 0x2f
     f56:	8f a5       	ldd	r24, Y+47	; 0x2f
     f58:	98 a9       	ldd	r25, Y+48	; 0x30
     f5a:	9c a7       	std	Y+44, r25	; 0x2c
     f5c:	8b a7       	std	Y+43, r24	; 0x2b
     f5e:	8b a5       	ldd	r24, Y+43	; 0x2b
     f60:	9c a5       	ldd	r25, Y+44	; 0x2c
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <LCDsendCommand+0x10a>
     f66:	9c a7       	std	Y+44, r25	; 0x2c
     f68:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     f6a:	a5 e3       	ldi	r26, 0x35	; 53
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e5 e3       	ldi	r30, 0x35	; 53
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8b 7f       	andi	r24, 0xFB	; 251
     f76:	8c 93       	st	X, r24
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	a0 e8       	ldi	r26, 0x80	; 128
     f7e:	bf e3       	ldi	r27, 0x3F	; 63
     f80:	8f a3       	std	Y+39, r24	; 0x27
     f82:	98 a7       	std	Y+40, r25	; 0x28
     f84:	a9 a7       	std	Y+41, r26	; 0x29
     f86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f88:	6f a1       	ldd	r22, Y+39	; 0x27
     f8a:	78 a5       	ldd	r23, Y+40	; 0x28
     f8c:	89 a5       	ldd	r24, Y+41	; 0x29
     f8e:	9a a5       	ldd	r25, Y+42	; 0x2a
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	4a e7       	ldi	r20, 0x7A	; 122
     f96:	54 e4       	ldi	r21, 0x44	; 68
     f98:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	8b a3       	std	Y+35, r24	; 0x23
     fa2:	9c a3       	std	Y+36, r25	; 0x24
     fa4:	ad a3       	std	Y+37, r26	; 0x25
     fa6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fa8:	6b a1       	ldd	r22, Y+35	; 0x23
     faa:	7c a1       	ldd	r23, Y+36	; 0x24
     fac:	8d a1       	ldd	r24, Y+37	; 0x25
     fae:	9e a1       	ldd	r25, Y+38	; 0x26
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e8       	ldi	r20, 0x80	; 128
     fb6:	5f e3       	ldi	r21, 0x3F	; 63
     fb8:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
     fbc:	88 23       	and	r24, r24
     fbe:	2c f4       	brge	.+10     	; 0xfca <LCDsendCommand+0x172>
		__ticks = 1;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9a a3       	std	Y+34, r25	; 0x22
     fc6:	89 a3       	std	Y+33, r24	; 0x21
     fc8:	3f c0       	rjmp	.+126    	; 0x1048 <LCDsendCommand+0x1f0>
	else if (__tmp > 65535)
     fca:	6b a1       	ldd	r22, Y+35	; 0x23
     fcc:	7c a1       	ldd	r23, Y+36	; 0x24
     fce:	8d a1       	ldd	r24, Y+37	; 0x25
     fd0:	9e a1       	ldd	r25, Y+38	; 0x26
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	3f ef       	ldi	r19, 0xFF	; 255
     fd6:	4f e7       	ldi	r20, 0x7F	; 127
     fd8:	57 e4       	ldi	r21, 0x47	; 71
     fda:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
     fde:	18 16       	cp	r1, r24
     fe0:	4c f5       	brge	.+82     	; 0x1034 <LCDsendCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe2:	6f a1       	ldd	r22, Y+39	; 0x27
     fe4:	78 a5       	ldd	r23, Y+40	; 0x28
     fe6:	89 a5       	ldd	r24, Y+41	; 0x29
     fe8:	9a a5       	ldd	r25, Y+42	; 0x2a
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e2       	ldi	r20, 0x20	; 32
     ff0:	51 e4       	ldi	r21, 0x41	; 65
     ff2:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	bc 01       	movw	r22, r24
     ffc:	cd 01       	movw	r24, r26
     ffe:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	9a a3       	std	Y+34, r25	; 0x22
    1008:	89 a3       	std	Y+33, r24	; 0x21
    100a:	0f c0       	rjmp	.+30     	; 0x102a <LCDsendCommand+0x1d2>
    100c:	84 e6       	ldi	r24, 0x64	; 100
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	98 a3       	std	Y+32, r25	; 0x20
    1012:	8f 8f       	std	Y+31, r24	; 0x1f
    1014:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1016:	98 a1       	ldd	r25, Y+32	; 0x20
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <LCDsendCommand+0x1c0>
    101c:	98 a3       	std	Y+32, r25	; 0x20
    101e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1020:	89 a1       	ldd	r24, Y+33	; 0x21
    1022:	9a a1       	ldd	r25, Y+34	; 0x22
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	9a a3       	std	Y+34, r25	; 0x22
    1028:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102a:	89 a1       	ldd	r24, Y+33	; 0x21
    102c:	9a a1       	ldd	r25, Y+34	; 0x22
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	69 f7       	brne	.-38     	; 0x100c <LCDsendCommand+0x1b4>
    1032:	14 c0       	rjmp	.+40     	; 0x105c <LCDsendCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1034:	6b a1       	ldd	r22, Y+35	; 0x23
    1036:	7c a1       	ldd	r23, Y+36	; 0x24
    1038:	8d a1       	ldd	r24, Y+37	; 0x25
    103a:	9e a1       	ldd	r25, Y+38	; 0x26
    103c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	9a a3       	std	Y+34, r25	; 0x22
    1046:	89 a3       	std	Y+33, r24	; 0x21
    1048:	89 a1       	ldd	r24, Y+33	; 0x21
    104a:	9a a1       	ldd	r25, Y+34	; 0x22
    104c:	9e 8f       	std	Y+30, r25	; 0x1e
    104e:	8d 8f       	std	Y+29, r24	; 0x1d
    1050:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1052:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <LCDsendCommand+0x1fc>
    1058:	9e 8f       	std	Y+30, r25	; 0x1e
    105a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
    105c:	e5 e3       	ldi	r30, 0x35	; 53
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	89 ad       	ldd	r24, Y+57	; 0x39
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	82 95       	swap	r24
    1068:	92 95       	swap	r25
    106a:	90 7f       	andi	r25, 0xF0	; 240
    106c:	98 27       	eor	r25, r24
    106e:	80 7f       	andi	r24, 0xF0	; 240
    1070:	98 27       	eor	r25, r24
    1072:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
    1074:	a5 e3       	ldi	r26, 0x35	; 53
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e5 e3       	ldi	r30, 0x35	; 53
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	84 60       	ori	r24, 0x04	; 4
    1080:	8c 93       	st	X, r24
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	a0 e8       	ldi	r26, 0x80	; 128
    1088:	bf e3       	ldi	r27, 0x3F	; 63
    108a:	89 8f       	std	Y+25, r24	; 0x19
    108c:	9a 8f       	std	Y+26, r25	; 0x1a
    108e:	ab 8f       	std	Y+27, r26	; 0x1b
    1090:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1092:	69 8d       	ldd	r22, Y+25	; 0x19
    1094:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1096:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1098:	9c 8d       	ldd	r25, Y+28	; 0x1c
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	4a e7       	ldi	r20, 0x7A	; 122
    10a0:	54 e4       	ldi	r21, 0x44	; 68
    10a2:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	8d 8b       	std	Y+21, r24	; 0x15
    10ac:	9e 8b       	std	Y+22, r25	; 0x16
    10ae:	af 8b       	std	Y+23, r26	; 0x17
    10b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10b2:	6d 89       	ldd	r22, Y+21	; 0x15
    10b4:	7e 89       	ldd	r23, Y+22	; 0x16
    10b6:	8f 89       	ldd	r24, Y+23	; 0x17
    10b8:	98 8d       	ldd	r25, Y+24	; 0x18
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	40 e8       	ldi	r20, 0x80	; 128
    10c0:	5f e3       	ldi	r21, 0x3F	; 63
    10c2:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
    10c6:	88 23       	and	r24, r24
    10c8:	2c f4       	brge	.+10     	; 0x10d4 <LCDsendCommand+0x27c>
		__ticks = 1;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	9c 8b       	std	Y+20, r25	; 0x14
    10d0:	8b 8b       	std	Y+19, r24	; 0x13
    10d2:	3f c0       	rjmp	.+126    	; 0x1152 <LCDsendCommand+0x2fa>
	else if (__tmp > 65535)
    10d4:	6d 89       	ldd	r22, Y+21	; 0x15
    10d6:	7e 89       	ldd	r23, Y+22	; 0x16
    10d8:	8f 89       	ldd	r24, Y+23	; 0x17
    10da:	98 8d       	ldd	r25, Y+24	; 0x18
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	3f ef       	ldi	r19, 0xFF	; 255
    10e0:	4f e7       	ldi	r20, 0x7F	; 127
    10e2:	57 e4       	ldi	r21, 0x47	; 71
    10e4:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
    10e8:	18 16       	cp	r1, r24
    10ea:	4c f5       	brge	.+82     	; 0x113e <LCDsendCommand+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ec:	69 8d       	ldd	r22, Y+25	; 0x19
    10ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	40 e2       	ldi	r20, 0x20	; 32
    10fa:	51 e4       	ldi	r21, 0x41	; 65
    10fc:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	bc 01       	movw	r22, r24
    1106:	cd 01       	movw	r24, r26
    1108:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	9c 8b       	std	Y+20, r25	; 0x14
    1112:	8b 8b       	std	Y+19, r24	; 0x13
    1114:	0f c0       	rjmp	.+30     	; 0x1134 <LCDsendCommand+0x2dc>
    1116:	84 e6       	ldi	r24, 0x64	; 100
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9a 8b       	std	Y+18, r25	; 0x12
    111c:	89 8b       	std	Y+17, r24	; 0x11
    111e:	89 89       	ldd	r24, Y+17	; 0x11
    1120:	9a 89       	ldd	r25, Y+18	; 0x12
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	f1 f7       	brne	.-4      	; 0x1122 <LCDsendCommand+0x2ca>
    1126:	9a 8b       	std	Y+18, r25	; 0x12
    1128:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    112a:	8b 89       	ldd	r24, Y+19	; 0x13
    112c:	9c 89       	ldd	r25, Y+20	; 0x14
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	9c 8b       	std	Y+20, r25	; 0x14
    1132:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1134:	8b 89       	ldd	r24, Y+19	; 0x13
    1136:	9c 89       	ldd	r25, Y+20	; 0x14
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	69 f7       	brne	.-38     	; 0x1116 <LCDsendCommand+0x2be>
    113c:	14 c0       	rjmp	.+40     	; 0x1166 <LCDsendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113e:	6d 89       	ldd	r22, Y+21	; 0x15
    1140:	7e 89       	ldd	r23, Y+22	; 0x16
    1142:	8f 89       	ldd	r24, Y+23	; 0x17
    1144:	98 8d       	ldd	r25, Y+24	; 0x18
    1146:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	9c 8b       	std	Y+20, r25	; 0x14
    1150:	8b 8b       	std	Y+19, r24	; 0x13
    1152:	8b 89       	ldd	r24, Y+19	; 0x13
    1154:	9c 89       	ldd	r25, Y+20	; 0x14
    1156:	98 8b       	std	Y+16, r25	; 0x10
    1158:	8f 87       	std	Y+15, r24	; 0x0f
    115a:	8f 85       	ldd	r24, Y+15	; 0x0f
    115c:	98 89       	ldd	r25, Y+16	; 0x10
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	f1 f7       	brne	.-4      	; 0x115e <LCDsendCommand+0x306>
    1162:	98 8b       	std	Y+16, r25	; 0x10
    1164:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1166:	a5 e3       	ldi	r26, 0x35	; 53
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e5 e3       	ldi	r30, 0x35	; 53
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	8b 7f       	andi	r24, 0xFB	; 251
    1172:	8c 93       	st	X, r24
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a0 e8       	ldi	r26, 0x80	; 128
    117a:	bf e3       	ldi	r27, 0x3F	; 63
    117c:	8b 87       	std	Y+11, r24	; 0x0b
    117e:	9c 87       	std	Y+12, r25	; 0x0c
    1180:	ad 87       	std	Y+13, r26	; 0x0d
    1182:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1184:	6b 85       	ldd	r22, Y+11	; 0x0b
    1186:	7c 85       	ldd	r23, Y+12	; 0x0c
    1188:	8d 85       	ldd	r24, Y+13	; 0x0d
    118a:	9e 85       	ldd	r25, Y+14	; 0x0e
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	4a e7       	ldi	r20, 0x7A	; 122
    1192:	54 e4       	ldi	r21, 0x44	; 68
    1194:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	8f 83       	std	Y+7, r24	; 0x07
    119e:	98 87       	std	Y+8, r25	; 0x08
    11a0:	a9 87       	std	Y+9, r26	; 0x09
    11a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11a4:	6f 81       	ldd	r22, Y+7	; 0x07
    11a6:	78 85       	ldd	r23, Y+8	; 0x08
    11a8:	89 85       	ldd	r24, Y+9	; 0x09
    11aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e8       	ldi	r20, 0x80	; 128
    11b2:	5f e3       	ldi	r21, 0x3F	; 63
    11b4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
    11b8:	88 23       	and	r24, r24
    11ba:	2c f4       	brge	.+10     	; 0x11c6 <LCDsendCommand+0x36e>
		__ticks = 1;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9e 83       	std	Y+6, r25	; 0x06
    11c2:	8d 83       	std	Y+5, r24	; 0x05
    11c4:	3f c0       	rjmp	.+126    	; 0x1244 <LCDsendCommand+0x3ec>
	else if (__tmp > 65535)
    11c6:	6f 81       	ldd	r22, Y+7	; 0x07
    11c8:	78 85       	ldd	r23, Y+8	; 0x08
    11ca:	89 85       	ldd	r24, Y+9	; 0x09
    11cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	3f ef       	ldi	r19, 0xFF	; 255
    11d2:	4f e7       	ldi	r20, 0x7F	; 127
    11d4:	57 e4       	ldi	r21, 0x47	; 71
    11d6:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
    11da:	18 16       	cp	r1, r24
    11dc:	4c f5       	brge	.+82     	; 0x1230 <LCDsendCommand+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11de:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e2       	ldi	r20, 0x20	; 32
    11ec:	51 e4       	ldi	r21, 0x41	; 65
    11ee:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	bc 01       	movw	r22, r24
    11f8:	cd 01       	movw	r24, r26
    11fa:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	9e 83       	std	Y+6, r25	; 0x06
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	0f c0       	rjmp	.+30     	; 0x1226 <LCDsendCommand+0x3ce>
    1208:	84 e6       	ldi	r24, 0x64	; 100
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	9c 83       	std	Y+4, r25	; 0x04
    120e:	8b 83       	std	Y+3, r24	; 0x03
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	9c 81       	ldd	r25, Y+4	; 0x04
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	f1 f7       	brne	.-4      	; 0x1214 <LCDsendCommand+0x3bc>
    1218:	9c 83       	std	Y+4, r25	; 0x04
    121a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	9e 83       	std	Y+6, r25	; 0x06
    1224:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	9e 81       	ldd	r25, Y+6	; 0x06
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	69 f7       	brne	.-38     	; 0x1208 <LCDsendCommand+0x3b0>
    122e:	14 c0       	rjmp	.+40     	; 0x1258 <LCDsendCommand+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1230:	6f 81       	ldd	r22, Y+7	; 0x07
    1232:	78 85       	ldd	r23, Y+8	; 0x08
    1234:	89 85       	ldd	r24, Y+9	; 0x09
    1236:	9a 85       	ldd	r25, Y+10	; 0x0a
    1238:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	9e 83       	std	Y+6, r25	; 0x06
    1242:	8d 83       	std	Y+5, r24	; 0x05
    1244:	8d 81       	ldd	r24, Y+5	; 0x05
    1246:	9e 81       	ldd	r25, Y+6	; 0x06
    1248:	9a 83       	std	Y+2, r25	; 0x02
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	9a 81       	ldd	r25, Y+2	; 0x02
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	f1 f7       	brne	.-4      	; 0x1250 <LCDsendCommand+0x3f8>
    1254:	9a 83       	std	Y+2, r25	; 0x02
    1256:	89 83       	std	Y+1, r24	; 0x01
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
    1258:	e9 96       	adiw	r28, 0x39	; 57
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <LCDinit>:
void LCDinit(void)//Initializes LCD
{
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	c4 56       	subi	r28, 0x64	; 100
    1278:	d0 40       	sbci	r29, 0x00	; 0
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	fe 01       	movw	r30, r28
    1286:	e1 5a       	subi	r30, 0xA1	; 161
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a0 e7       	ldi	r26, 0x70	; 112
    1290:	b1 e4       	ldi	r27, 0x41	; 65
    1292:	80 83       	st	Z, r24
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	a2 83       	std	Z+2, r26	; 0x02
    1298:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    129a:	8e 01       	movw	r16, r28
    129c:	05 5a       	subi	r16, 0xA5	; 165
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	fe 01       	movw	r30, r28
    12a2:	e1 5a       	subi	r30, 0xA1	; 161
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	60 81       	ld	r22, Z
    12a8:	71 81       	ldd	r23, Z+1	; 0x01
    12aa:	82 81       	ldd	r24, Z+2	; 0x02
    12ac:	93 81       	ldd	r25, Z+3	; 0x03
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	4a e7       	ldi	r20, 0x7A	; 122
    12b4:	54 e4       	ldi	r21, 0x44	; 68
    12b6:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	f8 01       	movw	r30, r16
    12c0:	80 83       	st	Z, r24
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	a2 83       	std	Z+2, r26	; 0x02
    12c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12c8:	fe 01       	movw	r30, r28
    12ca:	e5 5a       	subi	r30, 0xA5	; 165
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	60 81       	ld	r22, Z
    12d0:	71 81       	ldd	r23, Z+1	; 0x01
    12d2:	82 81       	ldd	r24, Z+2	; 0x02
    12d4:	93 81       	ldd	r25, Z+3	; 0x03
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e8       	ldi	r20, 0x80	; 128
    12dc:	5f e3       	ldi	r21, 0x3F	; 63
    12de:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
    12e2:	88 23       	and	r24, r24
    12e4:	44 f4       	brge	.+16     	; 0x12f6 <LCDinit+0x8c>
		__ticks = 1;
    12e6:	fe 01       	movw	r30, r28
    12e8:	e7 5a       	subi	r30, 0xA7	; 167
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	91 83       	std	Z+1, r25	; 0x01
    12f2:	80 83       	st	Z, r24
    12f4:	64 c0       	rjmp	.+200    	; 0x13be <LCDinit+0x154>
	else if (__tmp > 65535)
    12f6:	fe 01       	movw	r30, r28
    12f8:	e5 5a       	subi	r30, 0xA5	; 165
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	60 81       	ld	r22, Z
    12fe:	71 81       	ldd	r23, Z+1	; 0x01
    1300:	82 81       	ldd	r24, Z+2	; 0x02
    1302:	93 81       	ldd	r25, Z+3	; 0x03
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	3f ef       	ldi	r19, 0xFF	; 255
    1308:	4f e7       	ldi	r20, 0x7F	; 127
    130a:	57 e4       	ldi	r21, 0x47	; 71
    130c:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
    1310:	18 16       	cp	r1, r24
    1312:	0c f0       	brlt	.+2      	; 0x1316 <LCDinit+0xac>
    1314:	43 c0       	rjmp	.+134    	; 0x139c <LCDinit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1316:	fe 01       	movw	r30, r28
    1318:	e1 5a       	subi	r30, 0xA1	; 161
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	60 81       	ld	r22, Z
    131e:	71 81       	ldd	r23, Z+1	; 0x01
    1320:	82 81       	ldd	r24, Z+2	; 0x02
    1322:	93 81       	ldd	r25, Z+3	; 0x03
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e2       	ldi	r20, 0x20	; 32
    132a:	51 e4       	ldi	r21, 0x41	; 65
    132c:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	8e 01       	movw	r16, r28
    1336:	07 5a       	subi	r16, 0xA7	; 167
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
    133a:	bc 01       	movw	r22, r24
    133c:	cd 01       	movw	r24, r26
    133e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	f8 01       	movw	r30, r16
    1348:	91 83       	std	Z+1, r25	; 0x01
    134a:	80 83       	st	Z, r24
    134c:	1f c0       	rjmp	.+62     	; 0x138c <LCDinit+0x122>
    134e:	fe 01       	movw	r30, r28
    1350:	e9 5a       	subi	r30, 0xA9	; 169
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	84 e6       	ldi	r24, 0x64	; 100
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	91 83       	std	Z+1, r25	; 0x01
    135a:	80 83       	st	Z, r24
    135c:	fe 01       	movw	r30, r28
    135e:	e9 5a       	subi	r30, 0xA9	; 169
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	80 81       	ld	r24, Z
    1364:	91 81       	ldd	r25, Z+1	; 0x01
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <LCDinit+0xfc>
    136a:	fe 01       	movw	r30, r28
    136c:	e9 5a       	subi	r30, 0xA9	; 169
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1374:	de 01       	movw	r26, r28
    1376:	a7 5a       	subi	r26, 0xA7	; 167
    1378:	bf 4f       	sbci	r27, 0xFF	; 255
    137a:	fe 01       	movw	r30, r28
    137c:	e7 5a       	subi	r30, 0xA7	; 167
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	11 96       	adiw	r26, 0x01	; 1
    1388:	9c 93       	st	X, r25
    138a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138c:	fe 01       	movw	r30, r28
    138e:	e7 5a       	subi	r30, 0xA7	; 167
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	d1 f6       	brne	.-76     	; 0x134e <LCDinit+0xe4>
    139a:	27 c0       	rjmp	.+78     	; 0x13ea <LCDinit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    139c:	8e 01       	movw	r16, r28
    139e:	07 5a       	subi	r16, 0xA7	; 167
    13a0:	1f 4f       	sbci	r17, 0xFF	; 255
    13a2:	fe 01       	movw	r30, r28
    13a4:	e5 5a       	subi	r30, 0xA5	; 165
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	60 81       	ld	r22, Z
    13aa:	71 81       	ldd	r23, Z+1	; 0x01
    13ac:	82 81       	ldd	r24, Z+2	; 0x02
    13ae:	93 81       	ldd	r25, Z+3	; 0x03
    13b0:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	f8 01       	movw	r30, r16
    13ba:	91 83       	std	Z+1, r25	; 0x01
    13bc:	80 83       	st	Z, r24
    13be:	de 01       	movw	r26, r28
    13c0:	ab 5a       	subi	r26, 0xAB	; 171
    13c2:	bf 4f       	sbci	r27, 0xFF	; 255
    13c4:	fe 01       	movw	r30, r28
    13c6:	e7 5a       	subi	r30, 0xA7	; 167
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	8d 93       	st	X+, r24
    13d0:	9c 93       	st	X, r25
    13d2:	fe 01       	movw	r30, r28
    13d4:	eb 5a       	subi	r30, 0xAB	; 171
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	80 81       	ld	r24, Z
    13da:	91 81       	ldd	r25, Z+1	; 0x01
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <LCDinit+0x172>
    13e0:	fe 01       	movw	r30, r28
    13e2:	eb 5a       	subi	r30, 0xAB	; 171
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	80 83       	st	Z, r24
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    13ea:	e5 e3       	ldi	r30, 0x35	; 53
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	10 82       	st	Z, r1
	LCP=0x00;
    13f0:	e5 e3       	ldi	r30, 0x35	; 53
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	10 82       	st	Z, r1
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    13f6:	a4 e3       	ldi	r26, 0x34	; 52
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e4 e3       	ldi	r30, 0x34	; 52
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	80 6f       	ori	r24, 0xF0	; 240
    1402:	8c 93       	st	X, r24
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    1404:	a4 e3       	ldi	r26, 0x34	; 52
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e4 e3       	ldi	r30, 0x34	; 52
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	87 60       	ori	r24, 0x07	; 7
    1410:	8c 93       	st	X, r24
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1412:	e5 e3       	ldi	r30, 0x35	; 53
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 e3       	ldi	r24, 0x30	; 48
    1418:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    141a:	a5 e3       	ldi	r26, 0x35	; 53
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e5 e3       	ldi	r30, 0x35	; 53
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	84 60       	ori	r24, 0x04	; 4
    1426:	8c 93       	st	X, r24
    1428:	fe 01       	movw	r30, r28
    142a:	ef 5a       	subi	r30, 0xAF	; 175
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	a0 e8       	ldi	r26, 0x80	; 128
    1434:	bf e3       	ldi	r27, 0x3F	; 63
    1436:	80 83       	st	Z, r24
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	a2 83       	std	Z+2, r26	; 0x02
    143c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143e:	8e 01       	movw	r16, r28
    1440:	03 5b       	subi	r16, 0xB3	; 179
    1442:	1f 4f       	sbci	r17, 0xFF	; 255
    1444:	fe 01       	movw	r30, r28
    1446:	ef 5a       	subi	r30, 0xAF	; 175
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	60 81       	ld	r22, Z
    144c:	71 81       	ldd	r23, Z+1	; 0x01
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	93 81       	ldd	r25, Z+3	; 0x03
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	4a e7       	ldi	r20, 0x7A	; 122
    1458:	54 e4       	ldi	r21, 0x44	; 68
    145a:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	f8 01       	movw	r30, r16
    1464:	80 83       	st	Z, r24
    1466:	91 83       	std	Z+1, r25	; 0x01
    1468:	a2 83       	std	Z+2, r26	; 0x02
    146a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    146c:	fe 01       	movw	r30, r28
    146e:	e3 5b       	subi	r30, 0xB3	; 179
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	60 81       	ld	r22, Z
    1474:	71 81       	ldd	r23, Z+1	; 0x01
    1476:	82 81       	ldd	r24, Z+2	; 0x02
    1478:	93 81       	ldd	r25, Z+3	; 0x03
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e8       	ldi	r20, 0x80	; 128
    1480:	5f e3       	ldi	r21, 0x3F	; 63
    1482:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
    1486:	88 23       	and	r24, r24
    1488:	44 f4       	brge	.+16     	; 0x149a <LCDinit+0x230>
		__ticks = 1;
    148a:	fe 01       	movw	r30, r28
    148c:	e5 5b       	subi	r30, 0xB5	; 181
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	91 83       	std	Z+1, r25	; 0x01
    1496:	80 83       	st	Z, r24
    1498:	64 c0       	rjmp	.+200    	; 0x1562 <LCDinit+0x2f8>
	else if (__tmp > 65535)
    149a:	fe 01       	movw	r30, r28
    149c:	e3 5b       	subi	r30, 0xB3	; 179
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	60 81       	ld	r22, Z
    14a2:	71 81       	ldd	r23, Z+1	; 0x01
    14a4:	82 81       	ldd	r24, Z+2	; 0x02
    14a6:	93 81       	ldd	r25, Z+3	; 0x03
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	3f ef       	ldi	r19, 0xFF	; 255
    14ac:	4f e7       	ldi	r20, 0x7F	; 127
    14ae:	57 e4       	ldi	r21, 0x47	; 71
    14b0:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
    14b4:	18 16       	cp	r1, r24
    14b6:	0c f0       	brlt	.+2      	; 0x14ba <LCDinit+0x250>
    14b8:	43 c0       	rjmp	.+134    	; 0x1540 <LCDinit+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ba:	fe 01       	movw	r30, r28
    14bc:	ef 5a       	subi	r30, 0xAF	; 175
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	60 81       	ld	r22, Z
    14c2:	71 81       	ldd	r23, Z+1	; 0x01
    14c4:	82 81       	ldd	r24, Z+2	; 0x02
    14c6:	93 81       	ldd	r25, Z+3	; 0x03
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e2       	ldi	r20, 0x20	; 32
    14ce:	51 e4       	ldi	r21, 0x41	; 65
    14d0:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	8e 01       	movw	r16, r28
    14da:	05 5b       	subi	r16, 0xB5	; 181
    14dc:	1f 4f       	sbci	r17, 0xFF	; 255
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	f8 01       	movw	r30, r16
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	80 83       	st	Z, r24
    14f0:	1f c0       	rjmp	.+62     	; 0x1530 <LCDinit+0x2c6>
    14f2:	fe 01       	movw	r30, r28
    14f4:	e7 5b       	subi	r30, 0xB7	; 183
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	84 e6       	ldi	r24, 0x64	; 100
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	91 83       	std	Z+1, r25	; 0x01
    14fe:	80 83       	st	Z, r24
    1500:	fe 01       	movw	r30, r28
    1502:	e7 5b       	subi	r30, 0xB7	; 183
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	80 81       	ld	r24, Z
    1508:	91 81       	ldd	r25, Z+1	; 0x01
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	f1 f7       	brne	.-4      	; 0x150a <LCDinit+0x2a0>
    150e:	fe 01       	movw	r30, r28
    1510:	e7 5b       	subi	r30, 0xB7	; 183
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	91 83       	std	Z+1, r25	; 0x01
    1516:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1518:	de 01       	movw	r26, r28
    151a:	a5 5b       	subi	r26, 0xB5	; 181
    151c:	bf 4f       	sbci	r27, 0xFF	; 255
    151e:	fe 01       	movw	r30, r28
    1520:	e5 5b       	subi	r30, 0xB5	; 181
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	80 81       	ld	r24, Z
    1526:	91 81       	ldd	r25, Z+1	; 0x01
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	11 96       	adiw	r26, 0x01	; 1
    152c:	9c 93       	st	X, r25
    152e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1530:	fe 01       	movw	r30, r28
    1532:	e5 5b       	subi	r30, 0xB5	; 181
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	80 81       	ld	r24, Z
    1538:	91 81       	ldd	r25, Z+1	; 0x01
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	d1 f6       	brne	.-76     	; 0x14f2 <LCDinit+0x288>
    153e:	27 c0       	rjmp	.+78     	; 0x158e <LCDinit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1540:	8e 01       	movw	r16, r28
    1542:	05 5b       	subi	r16, 0xB5	; 181
    1544:	1f 4f       	sbci	r17, 0xFF	; 255
    1546:	fe 01       	movw	r30, r28
    1548:	e3 5b       	subi	r30, 0xB3	; 179
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	60 81       	ld	r22, Z
    154e:	71 81       	ldd	r23, Z+1	; 0x01
    1550:	82 81       	ldd	r24, Z+2	; 0x02
    1552:	93 81       	ldd	r25, Z+3	; 0x03
    1554:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	f8 01       	movw	r30, r16
    155e:	91 83       	std	Z+1, r25	; 0x01
    1560:	80 83       	st	Z, r24
    1562:	de 01       	movw	r26, r28
    1564:	a9 5b       	subi	r26, 0xB9	; 185
    1566:	bf 4f       	sbci	r27, 0xFF	; 255
    1568:	fe 01       	movw	r30, r28
    156a:	e5 5b       	subi	r30, 0xB5	; 181
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	80 81       	ld	r24, Z
    1570:	91 81       	ldd	r25, Z+1	; 0x01
    1572:	8d 93       	st	X+, r24
    1574:	9c 93       	st	X, r25
    1576:	fe 01       	movw	r30, r28
    1578:	e9 5b       	subi	r30, 0xB9	; 185
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	80 81       	ld	r24, Z
    157e:	91 81       	ldd	r25, Z+1	; 0x01
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <LCDinit+0x316>
    1584:	fe 01       	movw	r30, r28
    1586:	e9 5b       	subi	r30, 0xB9	; 185
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	91 83       	std	Z+1, r25	; 0x01
    158c:	80 83       	st	Z, r24
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    158e:	a5 e3       	ldi	r26, 0x35	; 53
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e5 e3       	ldi	r30, 0x35	; 53
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	8b 7f       	andi	r24, 0xFB	; 251
    159a:	8c 93       	st	X, r24
    159c:	fe 01       	movw	r30, r28
    159e:	ed 5b       	subi	r30, 0xBD	; 189
    15a0:	ff 4f       	sbci	r31, 0xFF	; 255
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a0 e8       	ldi	r26, 0x80	; 128
    15a8:	bf e3       	ldi	r27, 0x3F	; 63
    15aa:	80 83       	st	Z, r24
    15ac:	91 83       	std	Z+1, r25	; 0x01
    15ae:	a2 83       	std	Z+2, r26	; 0x02
    15b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b2:	8e 01       	movw	r16, r28
    15b4:	01 5c       	subi	r16, 0xC1	; 193
    15b6:	1f 4f       	sbci	r17, 0xFF	; 255
    15b8:	fe 01       	movw	r30, r28
    15ba:	ed 5b       	subi	r30, 0xBD	; 189
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	60 81       	ld	r22, Z
    15c0:	71 81       	ldd	r23, Z+1	; 0x01
    15c2:	82 81       	ldd	r24, Z+2	; 0x02
    15c4:	93 81       	ldd	r25, Z+3	; 0x03
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	4a e7       	ldi	r20, 0x7A	; 122
    15cc:	54 e4       	ldi	r21, 0x44	; 68
    15ce:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	f8 01       	movw	r30, r16
    15d8:	80 83       	st	Z, r24
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	a2 83       	std	Z+2, r26	; 0x02
    15de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15e0:	fe 01       	movw	r30, r28
    15e2:	ff 96       	adiw	r30, 0x3f	; 63
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
    15f8:	88 23       	and	r24, r24
    15fa:	2c f4       	brge	.+10     	; 0x1606 <LCDinit+0x39c>
		__ticks = 1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9e af       	std	Y+62, r25	; 0x3e
    1602:	8d af       	std	Y+61, r24	; 0x3d
    1604:	46 c0       	rjmp	.+140    	; 0x1692 <LCDinit+0x428>
	else if (__tmp > 65535)
    1606:	fe 01       	movw	r30, r28
    1608:	ff 96       	adiw	r30, 0x3f	; 63
    160a:	60 81       	ld	r22, Z
    160c:	71 81       	ldd	r23, Z+1	; 0x01
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	3f ef       	ldi	r19, 0xFF	; 255
    1616:	4f e7       	ldi	r20, 0x7F	; 127
    1618:	57 e4       	ldi	r21, 0x47	; 71
    161a:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
    161e:	18 16       	cp	r1, r24
    1620:	64 f5       	brge	.+88     	; 0x167a <LCDinit+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1622:	fe 01       	movw	r30, r28
    1624:	ed 5b       	subi	r30, 0xBD	; 189
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	60 81       	ld	r22, Z
    162a:	71 81       	ldd	r23, Z+1	; 0x01
    162c:	82 81       	ldd	r24, Z+2	; 0x02
    162e:	93 81       	ldd	r25, Z+3	; 0x03
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e2       	ldi	r20, 0x20	; 32
    1636:	51 e4       	ldi	r21, 0x41	; 65
    1638:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	bc 01       	movw	r22, r24
    1642:	cd 01       	movw	r24, r26
    1644:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	9e af       	std	Y+62, r25	; 0x3e
    164e:	8d af       	std	Y+61, r24	; 0x3d
    1650:	0f c0       	rjmp	.+30     	; 0x1670 <LCDinit+0x406>
    1652:	84 e6       	ldi	r24, 0x64	; 100
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	9c af       	std	Y+60, r25	; 0x3c
    1658:	8b af       	std	Y+59, r24	; 0x3b
    165a:	8b ad       	ldd	r24, Y+59	; 0x3b
    165c:	9c ad       	ldd	r25, Y+60	; 0x3c
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <LCDinit+0x3f4>
    1662:	9c af       	std	Y+60, r25	; 0x3c
    1664:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1666:	8d ad       	ldd	r24, Y+61	; 0x3d
    1668:	9e ad       	ldd	r25, Y+62	; 0x3e
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	9e af       	std	Y+62, r25	; 0x3e
    166e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1670:	8d ad       	ldd	r24, Y+61	; 0x3d
    1672:	9e ad       	ldd	r25, Y+62	; 0x3e
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	69 f7       	brne	.-38     	; 0x1652 <LCDinit+0x3e8>
    1678:	16 c0       	rjmp	.+44     	; 0x16a6 <LCDinit+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167a:	fe 01       	movw	r30, r28
    167c:	ff 96       	adiw	r30, 0x3f	; 63
    167e:	60 81       	ld	r22, Z
    1680:	71 81       	ldd	r23, Z+1	; 0x01
    1682:	82 81       	ldd	r24, Z+2	; 0x02
    1684:	93 81       	ldd	r25, Z+3	; 0x03
    1686:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9e af       	std	Y+62, r25	; 0x3e
    1690:	8d af       	std	Y+61, r24	; 0x3d
    1692:	8d ad       	ldd	r24, Y+61	; 0x3d
    1694:	9e ad       	ldd	r25, Y+62	; 0x3e
    1696:	9a af       	std	Y+58, r25	; 0x3a
    1698:	89 af       	std	Y+57, r24	; 0x39
    169a:	89 ad       	ldd	r24, Y+57	; 0x39
    169c:	9a ad       	ldd	r25, Y+58	; 0x3a
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <LCDinit+0x434>
    16a2:	9a af       	std	Y+58, r25	; 0x3a
    16a4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    16a6:	e5 e3       	ldi	r30, 0x35	; 53
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 e3       	ldi	r24, 0x30	; 48
    16ac:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    16ae:	a5 e3       	ldi	r26, 0x35	; 53
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e5 e3       	ldi	r30, 0x35	; 53
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	84 60       	ori	r24, 0x04	; 4
    16ba:	8c 93       	st	X, r24
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	a0 e8       	ldi	r26, 0x80	; 128
    16c2:	bf e3       	ldi	r27, 0x3F	; 63
    16c4:	8d ab       	std	Y+53, r24	; 0x35
    16c6:	9e ab       	std	Y+54, r25	; 0x36
    16c8:	af ab       	std	Y+55, r26	; 0x37
    16ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16cc:	6d a9       	ldd	r22, Y+53	; 0x35
    16ce:	7e a9       	ldd	r23, Y+54	; 0x36
    16d0:	8f a9       	ldd	r24, Y+55	; 0x37
    16d2:	98 ad       	ldd	r25, Y+56	; 0x38
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	4a e7       	ldi	r20, 0x7A	; 122
    16da:	54 e4       	ldi	r21, 0x44	; 68
    16dc:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	89 ab       	std	Y+49, r24	; 0x31
    16e6:	9a ab       	std	Y+50, r25	; 0x32
    16e8:	ab ab       	std	Y+51, r26	; 0x33
    16ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16ec:	69 a9       	ldd	r22, Y+49	; 0x31
    16ee:	7a a9       	ldd	r23, Y+50	; 0x32
    16f0:	8b a9       	ldd	r24, Y+51	; 0x33
    16f2:	9c a9       	ldd	r25, Y+52	; 0x34
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e8       	ldi	r20, 0x80	; 128
    16fa:	5f e3       	ldi	r21, 0x3F	; 63
    16fc:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
    1700:	88 23       	and	r24, r24
    1702:	2c f4       	brge	.+10     	; 0x170e <LCDinit+0x4a4>
		__ticks = 1;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	98 ab       	std	Y+48, r25	; 0x30
    170a:	8f a7       	std	Y+47, r24	; 0x2f
    170c:	3f c0       	rjmp	.+126    	; 0x178c <LCDinit+0x522>
	else if (__tmp > 65535)
    170e:	69 a9       	ldd	r22, Y+49	; 0x31
    1710:	7a a9       	ldd	r23, Y+50	; 0x32
    1712:	8b a9       	ldd	r24, Y+51	; 0x33
    1714:	9c a9       	ldd	r25, Y+52	; 0x34
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	3f ef       	ldi	r19, 0xFF	; 255
    171a:	4f e7       	ldi	r20, 0x7F	; 127
    171c:	57 e4       	ldi	r21, 0x47	; 71
    171e:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
    1722:	18 16       	cp	r1, r24
    1724:	4c f5       	brge	.+82     	; 0x1778 <LCDinit+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1726:	6d a9       	ldd	r22, Y+53	; 0x35
    1728:	7e a9       	ldd	r23, Y+54	; 0x36
    172a:	8f a9       	ldd	r24, Y+55	; 0x37
    172c:	98 ad       	ldd	r25, Y+56	; 0x38
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e2       	ldi	r20, 0x20	; 32
    1734:	51 e4       	ldi	r21, 0x41	; 65
    1736:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	bc 01       	movw	r22, r24
    1740:	cd 01       	movw	r24, r26
    1742:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	98 ab       	std	Y+48, r25	; 0x30
    174c:	8f a7       	std	Y+47, r24	; 0x2f
    174e:	0f c0       	rjmp	.+30     	; 0x176e <LCDinit+0x504>
    1750:	84 e6       	ldi	r24, 0x64	; 100
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9e a7       	std	Y+46, r25	; 0x2e
    1756:	8d a7       	std	Y+45, r24	; 0x2d
    1758:	8d a5       	ldd	r24, Y+45	; 0x2d
    175a:	9e a5       	ldd	r25, Y+46	; 0x2e
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <LCDinit+0x4f2>
    1760:	9e a7       	std	Y+46, r25	; 0x2e
    1762:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1764:	8f a5       	ldd	r24, Y+47	; 0x2f
    1766:	98 a9       	ldd	r25, Y+48	; 0x30
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	98 ab       	std	Y+48, r25	; 0x30
    176c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1770:	98 a9       	ldd	r25, Y+48	; 0x30
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	69 f7       	brne	.-38     	; 0x1750 <LCDinit+0x4e6>
    1776:	14 c0       	rjmp	.+40     	; 0x17a0 <LCDinit+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1778:	69 a9       	ldd	r22, Y+49	; 0x31
    177a:	7a a9       	ldd	r23, Y+50	; 0x32
    177c:	8b a9       	ldd	r24, Y+51	; 0x33
    177e:	9c a9       	ldd	r25, Y+52	; 0x34
    1780:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	98 ab       	std	Y+48, r25	; 0x30
    178a:	8f a7       	std	Y+47, r24	; 0x2f
    178c:	8f a5       	ldd	r24, Y+47	; 0x2f
    178e:	98 a9       	ldd	r25, Y+48	; 0x30
    1790:	9c a7       	std	Y+44, r25	; 0x2c
    1792:	8b a7       	std	Y+43, r24	; 0x2b
    1794:	8b a5       	ldd	r24, Y+43	; 0x2b
    1796:	9c a5       	ldd	r25, Y+44	; 0x2c
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <LCDinit+0x52e>
    179c:	9c a7       	std	Y+44, r25	; 0x2c
    179e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    17a0:	a5 e3       	ldi	r26, 0x35	; 53
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e5 e3       	ldi	r30, 0x35	; 53
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	8b 7f       	andi	r24, 0xFB	; 251
    17ac:	8c 93       	st	X, r24
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	a0 e8       	ldi	r26, 0x80	; 128
    17b4:	bf e3       	ldi	r27, 0x3F	; 63
    17b6:	8f a3       	std	Y+39, r24	; 0x27
    17b8:	98 a7       	std	Y+40, r25	; 0x28
    17ba:	a9 a7       	std	Y+41, r26	; 0x29
    17bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17be:	6f a1       	ldd	r22, Y+39	; 0x27
    17c0:	78 a5       	ldd	r23, Y+40	; 0x28
    17c2:	89 a5       	ldd	r24, Y+41	; 0x29
    17c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	4a e7       	ldi	r20, 0x7A	; 122
    17cc:	54 e4       	ldi	r21, 0x44	; 68
    17ce:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	8b a3       	std	Y+35, r24	; 0x23
    17d8:	9c a3       	std	Y+36, r25	; 0x24
    17da:	ad a3       	std	Y+37, r26	; 0x25
    17dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17de:	6b a1       	ldd	r22, Y+35	; 0x23
    17e0:	7c a1       	ldd	r23, Y+36	; 0x24
    17e2:	8d a1       	ldd	r24, Y+37	; 0x25
    17e4:	9e a1       	ldd	r25, Y+38	; 0x26
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	5f e3       	ldi	r21, 0x3F	; 63
    17ee:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
    17f2:	88 23       	and	r24, r24
    17f4:	2c f4       	brge	.+10     	; 0x1800 <LCDinit+0x596>
		__ticks = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9a a3       	std	Y+34, r25	; 0x22
    17fc:	89 a3       	std	Y+33, r24	; 0x21
    17fe:	3f c0       	rjmp	.+126    	; 0x187e <LCDinit+0x614>
	else if (__tmp > 65535)
    1800:	6b a1       	ldd	r22, Y+35	; 0x23
    1802:	7c a1       	ldd	r23, Y+36	; 0x24
    1804:	8d a1       	ldd	r24, Y+37	; 0x25
    1806:	9e a1       	ldd	r25, Y+38	; 0x26
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	3f ef       	ldi	r19, 0xFF	; 255
    180c:	4f e7       	ldi	r20, 0x7F	; 127
    180e:	57 e4       	ldi	r21, 0x47	; 71
    1810:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
    1814:	18 16       	cp	r1, r24
    1816:	4c f5       	brge	.+82     	; 0x186a <LCDinit+0x600>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1818:	6f a1       	ldd	r22, Y+39	; 0x27
    181a:	78 a5       	ldd	r23, Y+40	; 0x28
    181c:	89 a5       	ldd	r24, Y+41	; 0x29
    181e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9a a3       	std	Y+34, r25	; 0x22
    183e:	89 a3       	std	Y+33, r24	; 0x21
    1840:	0f c0       	rjmp	.+30     	; 0x1860 <LCDinit+0x5f6>
    1842:	84 e6       	ldi	r24, 0x64	; 100
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	98 a3       	std	Y+32, r25	; 0x20
    1848:	8f 8f       	std	Y+31, r24	; 0x1f
    184a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    184c:	98 a1       	ldd	r25, Y+32	; 0x20
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <LCDinit+0x5e4>
    1852:	98 a3       	std	Y+32, r25	; 0x20
    1854:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1856:	89 a1       	ldd	r24, Y+33	; 0x21
    1858:	9a a1       	ldd	r25, Y+34	; 0x22
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	9a a3       	std	Y+34, r25	; 0x22
    185e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1860:	89 a1       	ldd	r24, Y+33	; 0x21
    1862:	9a a1       	ldd	r25, Y+34	; 0x22
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	69 f7       	brne	.-38     	; 0x1842 <LCDinit+0x5d8>
    1868:	14 c0       	rjmp	.+40     	; 0x1892 <LCDinit+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	6b a1       	ldd	r22, Y+35	; 0x23
    186c:	7c a1       	ldd	r23, Y+36	; 0x24
    186e:	8d a1       	ldd	r24, Y+37	; 0x25
    1870:	9e a1       	ldd	r25, Y+38	; 0x26
    1872:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9a a3       	std	Y+34, r25	; 0x22
    187c:	89 a3       	std	Y+33, r24	; 0x21
    187e:	89 a1       	ldd	r24, Y+33	; 0x21
    1880:	9a a1       	ldd	r25, Y+34	; 0x22
    1882:	9e 8f       	std	Y+30, r25	; 0x1e
    1884:	8d 8f       	std	Y+29, r24	; 0x1d
    1886:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1888:	9e 8d       	ldd	r25, Y+30	; 0x1e
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <LCDinit+0x620>
    188e:	9e 8f       	std	Y+30, r25	; 0x1e
    1890:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1892:	e5 e3       	ldi	r30, 0x35	; 53
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 e2       	ldi	r24, 0x20	; 32
    1898:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    189a:	a5 e3       	ldi	r26, 0x35	; 53
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e5 e3       	ldi	r30, 0x35	; 53
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	84 60       	ori	r24, 0x04	; 4
    18a6:	8c 93       	st	X, r24
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a0 e8       	ldi	r26, 0x80	; 128
    18ae:	bf e3       	ldi	r27, 0x3F	; 63
    18b0:	89 8f       	std	Y+25, r24	; 0x19
    18b2:	9a 8f       	std	Y+26, r25	; 0x1a
    18b4:	ab 8f       	std	Y+27, r26	; 0x1b
    18b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b8:	69 8d       	ldd	r22, Y+25	; 0x19
    18ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	4a e7       	ldi	r20, 0x7A	; 122
    18c6:	54 e4       	ldi	r21, 0x44	; 68
    18c8:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	8d 8b       	std	Y+21, r24	; 0x15
    18d2:	9e 8b       	std	Y+22, r25	; 0x16
    18d4:	af 8b       	std	Y+23, r26	; 0x17
    18d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18d8:	6d 89       	ldd	r22, Y+21	; 0x15
    18da:	7e 89       	ldd	r23, Y+22	; 0x16
    18dc:	8f 89       	ldd	r24, Y+23	; 0x17
    18de:	98 8d       	ldd	r25, Y+24	; 0x18
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e8       	ldi	r20, 0x80	; 128
    18e6:	5f e3       	ldi	r21, 0x3F	; 63
    18e8:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
    18ec:	88 23       	and	r24, r24
    18ee:	2c f4       	brge	.+10     	; 0x18fa <LCDinit+0x690>
		__ticks = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9c 8b       	std	Y+20, r25	; 0x14
    18f6:	8b 8b       	std	Y+19, r24	; 0x13
    18f8:	3f c0       	rjmp	.+126    	; 0x1978 <LCDinit+0x70e>
	else if (__tmp > 65535)
    18fa:	6d 89       	ldd	r22, Y+21	; 0x15
    18fc:	7e 89       	ldd	r23, Y+22	; 0x16
    18fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1900:	98 8d       	ldd	r25, Y+24	; 0x18
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	3f ef       	ldi	r19, 0xFF	; 255
    1906:	4f e7       	ldi	r20, 0x7F	; 127
    1908:	57 e4       	ldi	r21, 0x47	; 71
    190a:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
    190e:	18 16       	cp	r1, r24
    1910:	4c f5       	brge	.+82     	; 0x1964 <LCDinit+0x6fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1912:	69 8d       	ldd	r22, Y+25	; 0x19
    1914:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1916:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1918:	9c 8d       	ldd	r25, Y+28	; 0x1c
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e2       	ldi	r20, 0x20	; 32
    1920:	51 e4       	ldi	r21, 0x41	; 65
    1922:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	9c 8b       	std	Y+20, r25	; 0x14
    1938:	8b 8b       	std	Y+19, r24	; 0x13
    193a:	0f c0       	rjmp	.+30     	; 0x195a <LCDinit+0x6f0>
    193c:	84 e6       	ldi	r24, 0x64	; 100
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9a 8b       	std	Y+18, r25	; 0x12
    1942:	89 8b       	std	Y+17, r24	; 0x11
    1944:	89 89       	ldd	r24, Y+17	; 0x11
    1946:	9a 89       	ldd	r25, Y+18	; 0x12
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <LCDinit+0x6de>
    194c:	9a 8b       	std	Y+18, r25	; 0x12
    194e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1950:	8b 89       	ldd	r24, Y+19	; 0x13
    1952:	9c 89       	ldd	r25, Y+20	; 0x14
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	9c 8b       	std	Y+20, r25	; 0x14
    1958:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195a:	8b 89       	ldd	r24, Y+19	; 0x13
    195c:	9c 89       	ldd	r25, Y+20	; 0x14
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	69 f7       	brne	.-38     	; 0x193c <LCDinit+0x6d2>
    1962:	14 c0       	rjmp	.+40     	; 0x198c <LCDinit+0x722>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1964:	6d 89       	ldd	r22, Y+21	; 0x15
    1966:	7e 89       	ldd	r23, Y+22	; 0x16
    1968:	8f 89       	ldd	r24, Y+23	; 0x17
    196a:	98 8d       	ldd	r25, Y+24	; 0x18
    196c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9c 8b       	std	Y+20, r25	; 0x14
    1976:	8b 8b       	std	Y+19, r24	; 0x13
    1978:	8b 89       	ldd	r24, Y+19	; 0x13
    197a:	9c 89       	ldd	r25, Y+20	; 0x14
    197c:	98 8b       	std	Y+16, r25	; 0x10
    197e:	8f 87       	std	Y+15, r24	; 0x0f
    1980:	8f 85       	ldd	r24, Y+15	; 0x0f
    1982:	98 89       	ldd	r25, Y+16	; 0x10
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <LCDinit+0x71a>
    1988:	98 8b       	std	Y+16, r25	; 0x10
    198a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    198c:	a5 e3       	ldi	r26, 0x35	; 53
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e5 e3       	ldi	r30, 0x35	; 53
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8b 7f       	andi	r24, 0xFB	; 251
    1998:	8c 93       	st	X, r24
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a0 e8       	ldi	r26, 0x80	; 128
    19a0:	bf e3       	ldi	r27, 0x3F	; 63
    19a2:	8b 87       	std	Y+11, r24	; 0x0b
    19a4:	9c 87       	std	Y+12, r25	; 0x0c
    19a6:	ad 87       	std	Y+13, r26	; 0x0d
    19a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	4a e7       	ldi	r20, 0x7A	; 122
    19b8:	54 e4       	ldi	r21, 0x44	; 68
    19ba:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	8f 83       	std	Y+7, r24	; 0x07
    19c4:	98 87       	std	Y+8, r25	; 0x08
    19c6:	a9 87       	std	Y+9, r26	; 0x09
    19c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ca:	6f 81       	ldd	r22, Y+7	; 0x07
    19cc:	78 85       	ldd	r23, Y+8	; 0x08
    19ce:	89 85       	ldd	r24, Y+9	; 0x09
    19d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e8       	ldi	r20, 0x80	; 128
    19d8:	5f e3       	ldi	r21, 0x3F	; 63
    19da:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__ltsf2>
    19de:	88 23       	and	r24, r24
    19e0:	2c f4       	brge	.+10     	; 0x19ec <LCDinit+0x782>
		__ticks = 1;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9e 83       	std	Y+6, r25	; 0x06
    19e8:	8d 83       	std	Y+5, r24	; 0x05
    19ea:	3f c0       	rjmp	.+126    	; 0x1a6a <LCDinit+0x800>
	else if (__tmp > 65535)
    19ec:	6f 81       	ldd	r22, Y+7	; 0x07
    19ee:	78 85       	ldd	r23, Y+8	; 0x08
    19f0:	89 85       	ldd	r24, Y+9	; 0x09
    19f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	3f ef       	ldi	r19, 0xFF	; 255
    19f8:	4f e7       	ldi	r20, 0x7F	; 127
    19fa:	57 e4       	ldi	r21, 0x47	; 71
    19fc:	0e 94 95 12 	call	0x252a	; 0x252a <__gtsf2>
    1a00:	18 16       	cp	r1, r24
    1a02:	4c f5       	brge	.+82     	; 0x1a56 <LCDinit+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e2       	ldi	r20, 0x20	; 32
    1a12:	51 e4       	ldi	r21, 0x41	; 65
    1a14:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	0f c0       	rjmp	.+30     	; 0x1a4c <LCDinit+0x7e2>
    1a2e:	84 e6       	ldi	r24, 0x64	; 100
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9c 83       	std	Y+4, r25	; 0x04
    1a34:	8b 83       	std	Y+3, r24	; 0x03
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <LCDinit+0x7d0>
    1a3e:	9c 83       	std	Y+4, r25	; 0x04
    1a40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	9e 81       	ldd	r25, Y+6	; 0x06
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	69 f7       	brne	.-38     	; 0x1a2e <LCDinit+0x7c4>
    1a54:	14 c0       	rjmp	.+40     	; 0x1a7e <LCDinit+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a56:	6f 81       	ldd	r22, Y+7	; 0x07
    1a58:	78 85       	ldd	r23, Y+8	; 0x08
    1a5a:	89 85       	ldd	r24, Y+9	; 0x09
    1a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <LCDinit+0x80c>
    1a7a:	9a 83       	std	Y+2, r25	; 0x02
    1a7c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1a7e:	88 e2       	ldi	r24, 0x28	; 40
    1a80:	0e 94 2c 07 	call	0xe58	; 0xe58 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    1a84:	8c e0       	ldi	r24, 0x0C	; 12
    1a86:	0e 94 2c 07 	call	0xe58	; 0xe58 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	ec 59       	subi	r30, 0x9C	; 156
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	10 82       	st	Z, r1
    1a92:	fe 01       	movw	r30, r28
    1a94:	ed 59       	subi	r30, 0x9D	; 157
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	10 82       	st	Z, r1
    1a9a:	23 c0       	rjmp	.+70     	; 0x1ae2 <LCDinit+0x878>
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	ec 59       	subi	r30, 0x9C	; 156
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 81       	ld	r24, Z
    1aa4:	88 2f       	mov	r24, r24
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	9c 01       	movw	r18, r24
    1aaa:	2c 5a       	subi	r18, 0xAC	; 172
    1aac:	3f 4f       	sbci	r19, 0xFF	; 255
    1aae:	fe 01       	movw	r30, r28
    1ab0:	ed 59       	subi	r30, 0x9D	; 157
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	40 81       	ld	r20, Z
    1ab6:	de 01       	movw	r26, r28
    1ab8:	ad 59       	subi	r26, 0x9D	; 157
    1aba:	bf 4f       	sbci	r27, 0xFF	; 255
    1abc:	fe 01       	movw	r30, r28
    1abe:	ed 59       	subi	r30, 0x9D	; 157
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	80 81       	ld	r24, Z
    1ac4:	8f 5f       	subi	r24, 0xFF	; 255
    1ac6:	8c 93       	st	X, r24
    1ac8:	c9 01       	movw	r24, r18
    1aca:	64 2f       	mov	r22, r20
    1acc:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <LCDdefinechar>
		ch=ch+8;
    1ad0:	de 01       	movw	r26, r28
    1ad2:	ac 59       	subi	r26, 0x9C	; 156
    1ad4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	ec 59       	subi	r30, 0x9C	; 156
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 81       	ld	r24, Z
    1ade:	88 5f       	subi	r24, 0xF8	; 248
    1ae0:	8c 93       	st	X, r24
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	ec 59       	subi	r30, 0x9C	; 156
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	80 81       	ld	r24, Z
    1aea:	80 34       	cpi	r24, 0x40	; 64
    1aec:	b8 f2       	brcs	.-82     	; 0x1a9c <LCDinit+0x832>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1aee:	cc 59       	subi	r28, 0x9C	; 156
    1af0:	df 4f       	sbci	r29, 0xFF	; 255
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	1f 91       	pop	r17
    1b02:	0f 91       	pop	r16
    1b04:	08 95       	ret

00001b06 <LCDclr>:
void LCDclr(void)				//Clears LCD
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_CLR);
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	0e 94 2c 07 	call	0xe58	; 0xe58 <LCDsendCommand>
}
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_HOME);
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	0e 94 2c 07 	call	0xe58	; 0xe58 <LCDsendCommand>
}
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <LCDstring+0x6>
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <LCDstring+0x8>
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	9a 83       	std	Y+2, r25	; 0x02
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	6b 83       	std	Y+3, r22	; 0x03
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	a1 f0       	breq	.+40     	; 0x1b70 <LCDstring+0x42>

	// print data
	for(i=0; i<nBytes; i++)
    1b48:	1c 82       	std	Y+4, r1	; 0x04
    1b4a:	0e c0       	rjmp	.+28     	; 0x1b68 <LCDstring+0x3a>
	{
		LCDsendChar(data[i]);
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	fc 01       	movw	r30, r24
    1b58:	e2 0f       	add	r30, r18
    1b5a:	f3 1f       	adc	r31, r19
    1b5c:	80 81       	ld	r24, Z
    1b5e:	0e 94 07 05 	call	0xa0e	; 0xa0e <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	9f 5f       	subi	r25, 0xFF	; 255
    1b66:	9c 83       	std	Y+4, r25	; 0x04
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	98 17       	cp	r25, r24
    1b6e:	70 f3       	brcs	.-36     	; 0x1b4c <LCDstring+0x1e>
	{
		LCDsendChar(data[i]);
	}
}
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <LCDGotoXY+0x6>
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <LCDGotoXY+0x8>
    1b86:	0f 92       	push	r0
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	6a 83       	std	Y+2, r22	; 0x02
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	3d 83       	std	Y+5, r19	; 0x05
    1b98:	2c 83       	std	Y+4, r18	; 0x04
    1b9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	c1 f0       	breq	.+48     	; 0x1bd4 <LCDGotoXY+0x56>
    1ba4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba8:	22 30       	cpi	r18, 0x02	; 2
    1baa:	31 05       	cpc	r19, r1
    1bac:	2c f4       	brge	.+10     	; 0x1bb8 <LCDGotoXY+0x3a>
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	61 f0       	breq	.+24     	; 0x1bce <LCDGotoXY+0x50>
    1bb6:	1d c0       	rjmp	.+58     	; 0x1bf2 <LCDGotoXY+0x74>
    1bb8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bba:	3d 81       	ldd	r19, Y+5	; 0x05
    1bbc:	22 30       	cpi	r18, 0x02	; 2
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	71 f0       	breq	.+28     	; 0x1bde <LCDGotoXY+0x60>
    1bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc6:	83 30       	cpi	r24, 0x03	; 3
    1bc8:	91 05       	cpc	r25, r1
    1bca:	71 f0       	breq	.+28     	; 0x1be8 <LCDGotoXY+0x6a>
    1bcc:	12 c0       	rjmp	.+36     	; 0x1bf2 <LCDGotoXY+0x74>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
    1bce:	99 81       	ldd	r25, Y+1	; 0x01
    1bd0:	9b 83       	std	Y+3, r25	; 0x03
    1bd2:	11 c0       	rjmp	.+34     	; 0x1bf6 <LCDGotoXY+0x78>
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	20 5c       	subi	r18, 0xC0	; 192
    1bda:	2b 83       	std	Y+3, r18	; 0x03
    1bdc:	0c c0       	rjmp	.+24     	; 0x1bf6 <LCDGotoXY+0x78>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	38 2f       	mov	r19, r24
    1be2:	3c 5e       	subi	r19, 0xEC	; 236
    1be4:	3b 83       	std	Y+3, r19	; 0x03
    1be6:	07 c0       	rjmp	.+14     	; 0x1bf6 <LCDGotoXY+0x78>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	98 2f       	mov	r25, r24
    1bec:	9c 5a       	subi	r25, 0xAC	; 172
    1bee:	9b 83       	std	Y+3, r25	; 0x03
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <LCDGotoXY+0x78>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
    1bf2:	29 81       	ldd	r18, Y+1	; 0x01
    1bf4:	2b 83       	std	Y+3, r18	; 0x03
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	80 68       	ori	r24, 0x80	; 128
    1bfa:	0e 94 2c 07 	call	0xe58	; 0xe58 <LCDsendCommand>
	
}
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	2b 97       	sbiw	r28, 0x0b	; 11
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	99 87       	std	Y+9, r25	; 0x09
    1c24:	88 87       	std	Y+8, r24	; 0x08
    1c26:	6a 87       	std	Y+10, r22	; 0x0a
    1c28:	4b 87       	std	Y+11, r20	; 0x0b
	uint8_t i;
	LCDGotoXY(x,y);
    1c2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1c32:	1f 82       	std	Y+7, r1	; 0x07
    1c34:	13 c0       	rjmp	.+38     	; 0x1c5c <CopyStringtoLCD+0x4e>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1c36:	8f 81       	ldd	r24, Y+7	; 0x07
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	88 85       	ldd	r24, Y+8	; 0x08
    1c3e:	99 85       	ldd	r25, Y+9	; 0x09
    1c40:	82 0f       	add	r24, r18
    1c42:	93 1f       	adc	r25, r19
    1c44:	9e 83       	std	Y+6, r25	; 0x06
    1c46:	8d 83       	std	Y+5, r24	; 0x05
    1c48:	ed 81       	ldd	r30, Y+5	; 0x05
    1c4a:	fe 81       	ldd	r31, Y+6	; 0x06
    1c4c:	84 91       	lpm	r24, Z+
    1c4e:	8c 83       	std	Y+4, r24	; 0x04
    1c50:	8c 81       	ldd	r24, Y+4	; 0x04
    1c52:	0e 94 07 05 	call	0xa0e	; 0xa0e <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1c56:	8f 81       	ldd	r24, Y+7	; 0x07
    1c58:	8f 5f       	subi	r24, 0xFF	; 255
    1c5a:	8f 83       	std	Y+7, r24	; 0x07
    1c5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	88 85       	ldd	r24, Y+8	; 0x08
    1c64:	99 85       	ldd	r25, Y+9	; 0x09
    1c66:	82 0f       	add	r24, r18
    1c68:	93 1f       	adc	r25, r19
    1c6a:	9b 83       	std	Y+3, r25	; 0x03
    1c6c:	8a 83       	std	Y+2, r24	; 0x02
    1c6e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c70:	fb 81       	ldd	r31, Y+3	; 0x03
    1c72:	84 91       	lpm	r24, Z+
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	88 23       	and	r24, r24
    1c7a:	e9 f6       	brne	.-70     	; 0x1c36 <CopyStringtoLCD+0x28>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1c7c:	2b 96       	adiw	r28, 0x0b	; 11
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	2a 97       	sbiw	r28, 0x0a	; 10
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	99 87       	std	Y+9, r25	; 0x09
    1ca4:	88 87       	std	Y+8, r24	; 0x08
    1ca6:	6a 87       	std	Y+10, r22	; 0x0a
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    1ca8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	80 64       	ori	r24, 0x40	; 64
    1cbc:	8f 83       	std	Y+7, r24	; 0x07
	for (i=0; i<8; i++){
    1cbe:	1d 82       	std	Y+5, r1	; 0x05
    1cc0:	1c 82       	std	Y+4, r1	; 0x04
    1cc2:	1d c0       	rjmp	.+58     	; 0x1cfe <LCDdefinechar+0x70>
		pcc=pgm_read_byte(&pc[i]);
    1cc4:	28 85       	ldd	r18, Y+8	; 0x08
    1cc6:	39 85       	ldd	r19, Y+9	; 0x09
    1cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ccc:	82 0f       	add	r24, r18
    1cce:	93 1f       	adc	r25, r19
    1cd0:	9b 83       	std	Y+3, r25	; 0x03
    1cd2:	8a 83       	std	Y+2, r24	; 0x02
    1cd4:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd6:	fb 81       	ldd	r31, Y+3	; 0x03
    1cd8:	84 91       	lpm	r24, Z+
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	8e 83       	std	Y+6, r24	; 0x06
		LCDsendCommand(a++);
    1ce0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ce2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce4:	8f 5f       	subi	r24, 0xFF	; 255
    1ce6:	8f 83       	std	Y+7, r24	; 0x07
    1ce8:	89 2f       	mov	r24, r25
    1cea:	0e 94 2c 07 	call	0xe58	; 0xe58 <LCDsendCommand>
		LCDsendChar(pcc);
    1cee:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf0:	0e 94 07 05 	call	0xa0e	; 0xa0e <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    1cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf8:	01 96       	adiw	r24, 0x01	; 1
    1cfa:	9d 83       	std	Y+5, r25	; 0x05
    1cfc:	8c 83       	std	Y+4, r24	; 0x04
    1cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1d00:	9d 81       	ldd	r25, Y+5	; 0x05
    1d02:	88 30       	cpi	r24, 0x08	; 8
    1d04:	91 05       	cpc	r25, r1
    1d06:	f0 f2       	brcs	.-68     	; 0x1cc4 <LCDdefinechar+0x36>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    1d08:	2a 96       	adiw	r28, 0x0a	; 10
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <LCDshiftLeft>:

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <LCDshiftLeft+0x6>
    1d20:	0f 92       	push	r0
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    1d28:	1a 82       	std	Y+2, r1	; 0x02
    1d2a:	19 82       	std	Y+1, r1	; 0x01
    1d2c:	08 c0       	rjmp	.+16     	; 0x1d3e <LCDshiftLeft+0x24>
	{
		LCDsendCommand(0x1E);
    1d2e:	8e e1       	ldi	r24, 0x1E	; 30
    1d30:	0e 94 2c 07 	call	0xe58	; 0xe58 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	01 96       	adiw	r24, 0x01	; 1
    1d3a:	9a 83       	std	Y+2, r25	; 0x02
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	82 17       	cp	r24, r18
    1d4a:	93 07       	cpc	r25, r19
    1d4c:	84 f3       	brlt	.-32     	; 0x1d2e <LCDshiftLeft+0x14>
	{
		LCDsendCommand(0x1E);
	}
}
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <LCDshiftRight+0x6>
    1d60:	0f 92       	push	r0
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    1d68:	1a 82       	std	Y+2, r1	; 0x02
    1d6a:	19 82       	std	Y+1, r1	; 0x01
    1d6c:	08 c0       	rjmp	.+16     	; 0x1d7e <LCDshiftRight+0x24>
	{
		LCDsendCommand(0x18);
    1d6e:	88 e1       	ldi	r24, 0x18	; 24
    1d70:	0e 94 2c 07 	call	0xe58	; 0xe58 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
    1d78:	01 96       	adiw	r24, 0x01	; 1
    1d7a:	9a 83       	std	Y+2, r25	; 0x02
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	82 17       	cp	r24, r18
    1d8a:	93 07       	cpc	r25, r19
    1d8c:	84 f3       	brlt	.-32     	; 0x1d6e <LCDshiftRight+0x14>
	{
		LCDsendCommand(0x18);
	}
}
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0E);
    1da2:	8e e0       	ldi	r24, 0x0E	; 14
    1da4:	0e 94 2c 07 	call	0xe58	; 0xe58 <LCDsendCommand>
}
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0F);
    1db6:	8f e0       	ldi	r24, 0x0F	; 15
    1db8:	0e 94 2c 07 	call	0xe58	; 0xe58 <LCDsendCommand>
}
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    1dca:	8c e0       	ldi	r24, 0x0C	; 12
    1dcc:	0e 94 2c 07 	call	0xe58	; 0xe58 <LCDsendCommand>
}
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x08);
    1dde:	88 e0       	ldi	r24, 0x08	; 8
    1de0:	0e 94 2c 07 	call	0xe58	; 0xe58 <LCDsendCommand>
}
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    1df2:	8c e0       	ldi	r24, 0x0C	; 12
    1df4:	0e 94 2c 07 	call	0xe58	; 0xe58 <LCDsendCommand>
}
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <LCDcursorLeft+0x6>
    1e04:	0f 92       	push	r0
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    1e0c:	1a 82       	std	Y+2, r1	; 0x02
    1e0e:	19 82       	std	Y+1, r1	; 0x01
    1e10:	08 c0       	rjmp	.+16     	; 0x1e22 <LCDcursorLeft+0x24>
	{
		LCDsendCommand(0x10);
    1e12:	80 e1       	ldi	r24, 0x10	; 16
    1e14:	0e 94 2c 07 	call	0xe58	; 0xe58 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	01 96       	adiw	r24, 0x01	; 1
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	82 17       	cp	r24, r18
    1e2e:	93 07       	cpc	r25, r19
    1e30:	84 f3       	brlt	.-32     	; 0x1e12 <LCDcursorLeft+0x14>
	{
		LCDsendCommand(0x10);
	}
}
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <LCDcursorRight+0x6>
    1e44:	0f 92       	push	r0
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
	for (i=0;i<n;i++)
    1e4c:	1a 82       	std	Y+2, r1	; 0x02
    1e4e:	19 82       	std	Y+1, r1	; 0x01
    1e50:	08 c0       	rjmp	.+16     	; 0x1e62 <LCDcursorRight+0x24>
	{
		LCDsendCommand(0x14);
    1e52:	84 e1       	ldi	r24, 0x14	; 20
    1e54:	0e 94 2c 07 	call	0xe58	; 0xe58 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6c:	82 17       	cp	r24, r18
    1e6e:	93 07       	cpc	r25, r19
    1e70:	84 f3       	brlt	.-32     	; 0x1e52 <LCDcursorRight+0x14>
	{
		LCDsendCommand(0x14);
	}
}
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	27 97       	sbiw	r28, 0x07	; 7
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	8d 83       	std	Y+5, r24	; 0x05
    1e94:	6e 83       	std	Y+6, r22	; 0x06
    1e96:	4f 83       	std	Y+7, r20	; 0x07
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	48 2f       	mov	r20, r24
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	c9 01       	movw	r24, r18
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	82 0f       	add	r24, r18
    1eac:	93 1f       	adc	r25, r19
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	9a 01       	movw	r18, r20
    1eb4:	28 9f       	mul	r18, r24
    1eb6:	a0 01       	movw	r20, r0
    1eb8:	29 9f       	mul	r18, r25
    1eba:	50 0d       	add	r21, r0
    1ebc:	38 9f       	mul	r19, r24
    1ebe:	50 0d       	add	r21, r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	ca 01       	movw	r24, r20
    1eca:	b9 01       	movw	r22, r18
    1ecc:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__divmodhi4>
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	9b 83       	std	Y+3, r25	; 0x03
    1ed4:	8a 83       	std	Y+2, r24	; 0x02
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1ed6:	1c 82       	std	Y+4, r1	; 0x04
    1ed8:	35 c0       	rjmp	.+106    	; 0x1f44 <LCDprogressBar+0xc6>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1eda:	8c 81       	ldd	r24, Y+4	; 0x04
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	c9 01       	movw	r24, r18
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	82 0f       	add	r24, r18
    1ee8:	93 1f       	adc	r25, r19
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	9c 01       	movw	r18, r24
    1ef0:	2b 5f       	subi	r18, 0xFB	; 251
    1ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef8:	82 17       	cp	r24, r18
    1efa:	93 07       	cpc	r25, r19
    1efc:	d8 f4       	brcc	.+54     	; 0x1f34 <LCDprogressBar+0xb6>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    1efe:	8c 81       	ldd	r24, Y+4	; 0x04
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	c9 01       	movw	r24, r18
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	82 0f       	add	r24, r18
    1f0c:	93 1f       	adc	r25, r19
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	9c 01       	movw	r18, r24
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	9b 81       	ldd	r25, Y+3	; 0x03
    1f18:	82 17       	cp	r24, r18
    1f1a:	93 07       	cpc	r25, r19
    1f1c:	10 f4       	brcc	.+4      	; 0x1f22 <LCDprogressBar+0xa4>
			{
				// this is an empty block
				// use space character?
				c = 0;
    1f1e:	19 82       	std	Y+1, r1	; 0x01
    1f20:	0b c0       	rjmp	.+22     	; 0x1f38 <LCDprogressBar+0xba>
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	9b 81       	ldd	r25, Y+3	; 0x03
    1f26:	26 e0       	ldi	r18, 0x06	; 6
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	b9 01       	movw	r22, r18
    1f2c:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__udivmodhi4>
    1f30:	89 83       	std	Y+1, r24	; 0x01
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <LCDprogressBar+0xba>
			}
		}
		else
		{
			// this is a full block
			c = 5;
    1f34:	85 e0       	ldi	r24, 0x05	; 5
    1f36:	89 83       	std	Y+1, r24	; 0x01
		}
		
		// write character to display
		LCDsendChar(c);
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	0e 94 07 05 	call	0xa0e	; 0xa0e <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f40:	8f 5f       	subi	r24, 0xFF	; 255
    1f42:	8c 83       	std	Y+4, r24	; 0x04
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	8f 81       	ldd	r24, Y+7	; 0x07
    1f48:	98 17       	cp	r25, r24
    1f4a:	38 f2       	brcs	.-114    	; 0x1eda <LCDprogressBar+0x5c>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1f4c:	27 96       	adiw	r28, 0x07	; 7
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <LCDdisplay>:

void LCDdisplay(char a[])
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <LCDdisplay+0x6>
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	9a 83       	std	Y+2, r25	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
	LCDstring(a,strlen(a));
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	0e 94 7d 15 	call	0x2afa	; 0x2afa <strlen>
    1f74:	28 2f       	mov	r18, r24
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	62 2f       	mov	r22, r18
    1f7c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCDstring>
}
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <__fixunssfsi>:
    1f8a:	ef 92       	push	r14
    1f8c:	ff 92       	push	r15
    1f8e:	0f 93       	push	r16
    1f90:	1f 93       	push	r17
    1f92:	7b 01       	movw	r14, r22
    1f94:	8c 01       	movw	r16, r24
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	5f e4       	ldi	r21, 0x4F	; 79
    1f9e:	0e 94 c5 12 	call	0x258a	; 0x258a <__gesf2>
    1fa2:	88 23       	and	r24, r24
    1fa4:	8c f0       	brlt	.+34     	; 0x1fc8 <__fixunssfsi+0x3e>
    1fa6:	c8 01       	movw	r24, r16
    1fa8:	b7 01       	movw	r22, r14
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	5f e4       	ldi	r21, 0x4F	; 79
    1fb2:	0e 94 3d 11 	call	0x227a	; 0x227a <__subsf3>
    1fb6:	0e 94 25 13 	call	0x264a	; 0x264a <__fixsfsi>
    1fba:	9b 01       	movw	r18, r22
    1fbc:	ac 01       	movw	r20, r24
    1fbe:	20 50       	subi	r18, 0x00	; 0
    1fc0:	30 40       	sbci	r19, 0x00	; 0
    1fc2:	40 40       	sbci	r20, 0x00	; 0
    1fc4:	50 48       	sbci	r21, 0x80	; 128
    1fc6:	06 c0       	rjmp	.+12     	; 0x1fd4 <__fixunssfsi+0x4a>
    1fc8:	c8 01       	movw	r24, r16
    1fca:	b7 01       	movw	r22, r14
    1fcc:	0e 94 25 13 	call	0x264a	; 0x264a <__fixsfsi>
    1fd0:	9b 01       	movw	r18, r22
    1fd2:	ac 01       	movw	r20, r24
    1fd4:	b9 01       	movw	r22, r18
    1fd6:	ca 01       	movw	r24, r20
    1fd8:	1f 91       	pop	r17
    1fda:	0f 91       	pop	r16
    1fdc:	ff 90       	pop	r15
    1fde:	ef 90       	pop	r14
    1fe0:	08 95       	ret

00001fe2 <_fpadd_parts>:
    1fe2:	a0 e0       	ldi	r26, 0x00	; 0
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e7 ef       	ldi	r30, 0xF7	; 247
    1fe8:	ff e0       	ldi	r31, 0x0F	; 15
    1fea:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <__prologue_saves__>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	2b 01       	movw	r4, r22
    1ff2:	fa 01       	movw	r30, r20
    1ff4:	9c 91       	ld	r25, X
    1ff6:	92 30       	cpi	r25, 0x02	; 2
    1ff8:	08 f4       	brcc	.+2      	; 0x1ffc <_fpadd_parts+0x1a>
    1ffa:	39 c1       	rjmp	.+626    	; 0x226e <_fpadd_parts+0x28c>
    1ffc:	eb 01       	movw	r28, r22
    1ffe:	88 81       	ld	r24, Y
    2000:	82 30       	cpi	r24, 0x02	; 2
    2002:	08 f4       	brcc	.+2      	; 0x2006 <_fpadd_parts+0x24>
    2004:	33 c1       	rjmp	.+614    	; 0x226c <_fpadd_parts+0x28a>
    2006:	94 30       	cpi	r25, 0x04	; 4
    2008:	69 f4       	brne	.+26     	; 0x2024 <_fpadd_parts+0x42>
    200a:	84 30       	cpi	r24, 0x04	; 4
    200c:	09 f0       	breq	.+2      	; 0x2010 <_fpadd_parts+0x2e>
    200e:	2f c1       	rjmp	.+606    	; 0x226e <_fpadd_parts+0x28c>
    2010:	11 96       	adiw	r26, 0x01	; 1
    2012:	9c 91       	ld	r25, X
    2014:	11 97       	sbiw	r26, 0x01	; 1
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	98 17       	cp	r25, r24
    201a:	09 f4       	brne	.+2      	; 0x201e <_fpadd_parts+0x3c>
    201c:	28 c1       	rjmp	.+592    	; 0x226e <_fpadd_parts+0x28c>
    201e:	a6 e6       	ldi	r26, 0x66	; 102
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	25 c1       	rjmp	.+586    	; 0x226e <_fpadd_parts+0x28c>
    2024:	84 30       	cpi	r24, 0x04	; 4
    2026:	09 f4       	brne	.+2      	; 0x202a <_fpadd_parts+0x48>
    2028:	21 c1       	rjmp	.+578    	; 0x226c <_fpadd_parts+0x28a>
    202a:	82 30       	cpi	r24, 0x02	; 2
    202c:	a9 f4       	brne	.+42     	; 0x2058 <_fpadd_parts+0x76>
    202e:	92 30       	cpi	r25, 0x02	; 2
    2030:	09 f0       	breq	.+2      	; 0x2034 <_fpadd_parts+0x52>
    2032:	1d c1       	rjmp	.+570    	; 0x226e <_fpadd_parts+0x28c>
    2034:	9a 01       	movw	r18, r20
    2036:	ad 01       	movw	r20, r26
    2038:	88 e0       	ldi	r24, 0x08	; 8
    203a:	ea 01       	movw	r28, r20
    203c:	09 90       	ld	r0, Y+
    203e:	ae 01       	movw	r20, r28
    2040:	e9 01       	movw	r28, r18
    2042:	09 92       	st	Y+, r0
    2044:	9e 01       	movw	r18, r28
    2046:	81 50       	subi	r24, 0x01	; 1
    2048:	c1 f7       	brne	.-16     	; 0x203a <_fpadd_parts+0x58>
    204a:	e2 01       	movw	r28, r4
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	11 96       	adiw	r26, 0x01	; 1
    2050:	9c 91       	ld	r25, X
    2052:	89 23       	and	r24, r25
    2054:	81 83       	std	Z+1, r24	; 0x01
    2056:	08 c1       	rjmp	.+528    	; 0x2268 <_fpadd_parts+0x286>
    2058:	92 30       	cpi	r25, 0x02	; 2
    205a:	09 f4       	brne	.+2      	; 0x205e <_fpadd_parts+0x7c>
    205c:	07 c1       	rjmp	.+526    	; 0x226c <_fpadd_parts+0x28a>
    205e:	12 96       	adiw	r26, 0x02	; 2
    2060:	2d 90       	ld	r2, X+
    2062:	3c 90       	ld	r3, X
    2064:	13 97       	sbiw	r26, 0x03	; 3
    2066:	eb 01       	movw	r28, r22
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	9b 81       	ldd	r25, Y+3	; 0x03
    206c:	14 96       	adiw	r26, 0x04	; 4
    206e:	ad 90       	ld	r10, X+
    2070:	bd 90       	ld	r11, X+
    2072:	cd 90       	ld	r12, X+
    2074:	dc 90       	ld	r13, X
    2076:	17 97       	sbiw	r26, 0x07	; 7
    2078:	ec 80       	ldd	r14, Y+4	; 0x04
    207a:	fd 80       	ldd	r15, Y+5	; 0x05
    207c:	0e 81       	ldd	r16, Y+6	; 0x06
    207e:	1f 81       	ldd	r17, Y+7	; 0x07
    2080:	91 01       	movw	r18, r2
    2082:	28 1b       	sub	r18, r24
    2084:	39 0b       	sbc	r19, r25
    2086:	b9 01       	movw	r22, r18
    2088:	37 ff       	sbrs	r19, 7
    208a:	04 c0       	rjmp	.+8      	; 0x2094 <_fpadd_parts+0xb2>
    208c:	66 27       	eor	r22, r22
    208e:	77 27       	eor	r23, r23
    2090:	62 1b       	sub	r22, r18
    2092:	73 0b       	sbc	r23, r19
    2094:	60 32       	cpi	r22, 0x20	; 32
    2096:	71 05       	cpc	r23, r1
    2098:	0c f0       	brlt	.+2      	; 0x209c <_fpadd_parts+0xba>
    209a:	61 c0       	rjmp	.+194    	; 0x215e <_fpadd_parts+0x17c>
    209c:	12 16       	cp	r1, r18
    209e:	13 06       	cpc	r1, r19
    20a0:	6c f5       	brge	.+90     	; 0x20fc <_fpadd_parts+0x11a>
    20a2:	37 01       	movw	r6, r14
    20a4:	48 01       	movw	r8, r16
    20a6:	06 2e       	mov	r0, r22
    20a8:	04 c0       	rjmp	.+8      	; 0x20b2 <_fpadd_parts+0xd0>
    20aa:	96 94       	lsr	r9
    20ac:	87 94       	ror	r8
    20ae:	77 94       	ror	r7
    20b0:	67 94       	ror	r6
    20b2:	0a 94       	dec	r0
    20b4:	d2 f7       	brpl	.-12     	; 0x20aa <_fpadd_parts+0xc8>
    20b6:	21 e0       	ldi	r18, 0x01	; 1
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	04 c0       	rjmp	.+8      	; 0x20c8 <_fpadd_parts+0xe6>
    20c0:	22 0f       	add	r18, r18
    20c2:	33 1f       	adc	r19, r19
    20c4:	44 1f       	adc	r20, r20
    20c6:	55 1f       	adc	r21, r21
    20c8:	6a 95       	dec	r22
    20ca:	d2 f7       	brpl	.-12     	; 0x20c0 <_fpadd_parts+0xde>
    20cc:	21 50       	subi	r18, 0x01	; 1
    20ce:	30 40       	sbci	r19, 0x00	; 0
    20d0:	40 40       	sbci	r20, 0x00	; 0
    20d2:	50 40       	sbci	r21, 0x00	; 0
    20d4:	2e 21       	and	r18, r14
    20d6:	3f 21       	and	r19, r15
    20d8:	40 23       	and	r20, r16
    20da:	51 23       	and	r21, r17
    20dc:	21 15       	cp	r18, r1
    20de:	31 05       	cpc	r19, r1
    20e0:	41 05       	cpc	r20, r1
    20e2:	51 05       	cpc	r21, r1
    20e4:	21 f0       	breq	.+8      	; 0x20ee <_fpadd_parts+0x10c>
    20e6:	21 e0       	ldi	r18, 0x01	; 1
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e0       	ldi	r20, 0x00	; 0
    20ec:	50 e0       	ldi	r21, 0x00	; 0
    20ee:	79 01       	movw	r14, r18
    20f0:	8a 01       	movw	r16, r20
    20f2:	e6 28       	or	r14, r6
    20f4:	f7 28       	or	r15, r7
    20f6:	08 29       	or	r16, r8
    20f8:	19 29       	or	r17, r9
    20fa:	3c c0       	rjmp	.+120    	; 0x2174 <_fpadd_parts+0x192>
    20fc:	23 2b       	or	r18, r19
    20fe:	d1 f1       	breq	.+116    	; 0x2174 <_fpadd_parts+0x192>
    2100:	26 0e       	add	r2, r22
    2102:	37 1e       	adc	r3, r23
    2104:	35 01       	movw	r6, r10
    2106:	46 01       	movw	r8, r12
    2108:	06 2e       	mov	r0, r22
    210a:	04 c0       	rjmp	.+8      	; 0x2114 <_fpadd_parts+0x132>
    210c:	96 94       	lsr	r9
    210e:	87 94       	ror	r8
    2110:	77 94       	ror	r7
    2112:	67 94       	ror	r6
    2114:	0a 94       	dec	r0
    2116:	d2 f7       	brpl	.-12     	; 0x210c <_fpadd_parts+0x12a>
    2118:	21 e0       	ldi	r18, 0x01	; 1
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	50 e0       	ldi	r21, 0x00	; 0
    2120:	04 c0       	rjmp	.+8      	; 0x212a <_fpadd_parts+0x148>
    2122:	22 0f       	add	r18, r18
    2124:	33 1f       	adc	r19, r19
    2126:	44 1f       	adc	r20, r20
    2128:	55 1f       	adc	r21, r21
    212a:	6a 95       	dec	r22
    212c:	d2 f7       	brpl	.-12     	; 0x2122 <_fpadd_parts+0x140>
    212e:	21 50       	subi	r18, 0x01	; 1
    2130:	30 40       	sbci	r19, 0x00	; 0
    2132:	40 40       	sbci	r20, 0x00	; 0
    2134:	50 40       	sbci	r21, 0x00	; 0
    2136:	2a 21       	and	r18, r10
    2138:	3b 21       	and	r19, r11
    213a:	4c 21       	and	r20, r12
    213c:	5d 21       	and	r21, r13
    213e:	21 15       	cp	r18, r1
    2140:	31 05       	cpc	r19, r1
    2142:	41 05       	cpc	r20, r1
    2144:	51 05       	cpc	r21, r1
    2146:	21 f0       	breq	.+8      	; 0x2150 <_fpadd_parts+0x16e>
    2148:	21 e0       	ldi	r18, 0x01	; 1
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e0       	ldi	r20, 0x00	; 0
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	59 01       	movw	r10, r18
    2152:	6a 01       	movw	r12, r20
    2154:	a6 28       	or	r10, r6
    2156:	b7 28       	or	r11, r7
    2158:	c8 28       	or	r12, r8
    215a:	d9 28       	or	r13, r9
    215c:	0b c0       	rjmp	.+22     	; 0x2174 <_fpadd_parts+0x192>
    215e:	82 15       	cp	r24, r2
    2160:	93 05       	cpc	r25, r3
    2162:	2c f0       	brlt	.+10     	; 0x216e <_fpadd_parts+0x18c>
    2164:	1c 01       	movw	r2, r24
    2166:	aa 24       	eor	r10, r10
    2168:	bb 24       	eor	r11, r11
    216a:	65 01       	movw	r12, r10
    216c:	03 c0       	rjmp	.+6      	; 0x2174 <_fpadd_parts+0x192>
    216e:	ee 24       	eor	r14, r14
    2170:	ff 24       	eor	r15, r15
    2172:	87 01       	movw	r16, r14
    2174:	11 96       	adiw	r26, 0x01	; 1
    2176:	9c 91       	ld	r25, X
    2178:	d2 01       	movw	r26, r4
    217a:	11 96       	adiw	r26, 0x01	; 1
    217c:	8c 91       	ld	r24, X
    217e:	98 17       	cp	r25, r24
    2180:	09 f4       	brne	.+2      	; 0x2184 <_fpadd_parts+0x1a2>
    2182:	45 c0       	rjmp	.+138    	; 0x220e <_fpadd_parts+0x22c>
    2184:	99 23       	and	r25, r25
    2186:	39 f0       	breq	.+14     	; 0x2196 <_fpadd_parts+0x1b4>
    2188:	a8 01       	movw	r20, r16
    218a:	97 01       	movw	r18, r14
    218c:	2a 19       	sub	r18, r10
    218e:	3b 09       	sbc	r19, r11
    2190:	4c 09       	sbc	r20, r12
    2192:	5d 09       	sbc	r21, r13
    2194:	06 c0       	rjmp	.+12     	; 0x21a2 <_fpadd_parts+0x1c0>
    2196:	a6 01       	movw	r20, r12
    2198:	95 01       	movw	r18, r10
    219a:	2e 19       	sub	r18, r14
    219c:	3f 09       	sbc	r19, r15
    219e:	40 0b       	sbc	r20, r16
    21a0:	51 0b       	sbc	r21, r17
    21a2:	57 fd       	sbrc	r21, 7
    21a4:	08 c0       	rjmp	.+16     	; 0x21b6 <_fpadd_parts+0x1d4>
    21a6:	11 82       	std	Z+1, r1	; 0x01
    21a8:	33 82       	std	Z+3, r3	; 0x03
    21aa:	22 82       	std	Z+2, r2	; 0x02
    21ac:	24 83       	std	Z+4, r18	; 0x04
    21ae:	35 83       	std	Z+5, r19	; 0x05
    21b0:	46 83       	std	Z+6, r20	; 0x06
    21b2:	57 83       	std	Z+7, r21	; 0x07
    21b4:	1d c0       	rjmp	.+58     	; 0x21f0 <_fpadd_parts+0x20e>
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	81 83       	std	Z+1, r24	; 0x01
    21ba:	33 82       	std	Z+3, r3	; 0x03
    21bc:	22 82       	std	Z+2, r2	; 0x02
    21be:	88 27       	eor	r24, r24
    21c0:	99 27       	eor	r25, r25
    21c2:	dc 01       	movw	r26, r24
    21c4:	82 1b       	sub	r24, r18
    21c6:	93 0b       	sbc	r25, r19
    21c8:	a4 0b       	sbc	r26, r20
    21ca:	b5 0b       	sbc	r27, r21
    21cc:	84 83       	std	Z+4, r24	; 0x04
    21ce:	95 83       	std	Z+5, r25	; 0x05
    21d0:	a6 83       	std	Z+6, r26	; 0x06
    21d2:	b7 83       	std	Z+7, r27	; 0x07
    21d4:	0d c0       	rjmp	.+26     	; 0x21f0 <_fpadd_parts+0x20e>
    21d6:	22 0f       	add	r18, r18
    21d8:	33 1f       	adc	r19, r19
    21da:	44 1f       	adc	r20, r20
    21dc:	55 1f       	adc	r21, r21
    21de:	24 83       	std	Z+4, r18	; 0x04
    21e0:	35 83       	std	Z+5, r19	; 0x05
    21e2:	46 83       	std	Z+6, r20	; 0x06
    21e4:	57 83       	std	Z+7, r21	; 0x07
    21e6:	82 81       	ldd	r24, Z+2	; 0x02
    21e8:	93 81       	ldd	r25, Z+3	; 0x03
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	93 83       	std	Z+3, r25	; 0x03
    21ee:	82 83       	std	Z+2, r24	; 0x02
    21f0:	24 81       	ldd	r18, Z+4	; 0x04
    21f2:	35 81       	ldd	r19, Z+5	; 0x05
    21f4:	46 81       	ldd	r20, Z+6	; 0x06
    21f6:	57 81       	ldd	r21, Z+7	; 0x07
    21f8:	da 01       	movw	r26, r20
    21fa:	c9 01       	movw	r24, r18
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	a1 09       	sbc	r26, r1
    2200:	b1 09       	sbc	r27, r1
    2202:	8f 5f       	subi	r24, 0xFF	; 255
    2204:	9f 4f       	sbci	r25, 0xFF	; 255
    2206:	af 4f       	sbci	r26, 0xFF	; 255
    2208:	bf 43       	sbci	r27, 0x3F	; 63
    220a:	28 f3       	brcs	.-54     	; 0x21d6 <_fpadd_parts+0x1f4>
    220c:	0b c0       	rjmp	.+22     	; 0x2224 <_fpadd_parts+0x242>
    220e:	91 83       	std	Z+1, r25	; 0x01
    2210:	33 82       	std	Z+3, r3	; 0x03
    2212:	22 82       	std	Z+2, r2	; 0x02
    2214:	ea 0c       	add	r14, r10
    2216:	fb 1c       	adc	r15, r11
    2218:	0c 1d       	adc	r16, r12
    221a:	1d 1d       	adc	r17, r13
    221c:	e4 82       	std	Z+4, r14	; 0x04
    221e:	f5 82       	std	Z+5, r15	; 0x05
    2220:	06 83       	std	Z+6, r16	; 0x06
    2222:	17 83       	std	Z+7, r17	; 0x07
    2224:	83 e0       	ldi	r24, 0x03	; 3
    2226:	80 83       	st	Z, r24
    2228:	24 81       	ldd	r18, Z+4	; 0x04
    222a:	35 81       	ldd	r19, Z+5	; 0x05
    222c:	46 81       	ldd	r20, Z+6	; 0x06
    222e:	57 81       	ldd	r21, Z+7	; 0x07
    2230:	57 ff       	sbrs	r21, 7
    2232:	1a c0       	rjmp	.+52     	; 0x2268 <_fpadd_parts+0x286>
    2234:	c9 01       	movw	r24, r18
    2236:	aa 27       	eor	r26, r26
    2238:	97 fd       	sbrc	r25, 7
    223a:	a0 95       	com	r26
    223c:	ba 2f       	mov	r27, r26
    223e:	81 70       	andi	r24, 0x01	; 1
    2240:	90 70       	andi	r25, 0x00	; 0
    2242:	a0 70       	andi	r26, 0x00	; 0
    2244:	b0 70       	andi	r27, 0x00	; 0
    2246:	56 95       	lsr	r21
    2248:	47 95       	ror	r20
    224a:	37 95       	ror	r19
    224c:	27 95       	ror	r18
    224e:	82 2b       	or	r24, r18
    2250:	93 2b       	or	r25, r19
    2252:	a4 2b       	or	r26, r20
    2254:	b5 2b       	or	r27, r21
    2256:	84 83       	std	Z+4, r24	; 0x04
    2258:	95 83       	std	Z+5, r25	; 0x05
    225a:	a6 83       	std	Z+6, r26	; 0x06
    225c:	b7 83       	std	Z+7, r27	; 0x07
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	93 81       	ldd	r25, Z+3	; 0x03
    2262:	01 96       	adiw	r24, 0x01	; 1
    2264:	93 83       	std	Z+3, r25	; 0x03
    2266:	82 83       	std	Z+2, r24	; 0x02
    2268:	df 01       	movw	r26, r30
    226a:	01 c0       	rjmp	.+2      	; 0x226e <_fpadd_parts+0x28c>
    226c:	d2 01       	movw	r26, r4
    226e:	cd 01       	movw	r24, r26
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	e2 e1       	ldi	r30, 0x12	; 18
    2276:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__epilogue_restores__>

0000227a <__subsf3>:
    227a:	a0 e2       	ldi	r26, 0x20	; 32
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e3 e4       	ldi	r30, 0x43	; 67
    2280:	f1 e1       	ldi	r31, 0x11	; 17
    2282:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__+0x18>
    2286:	69 83       	std	Y+1, r22	; 0x01
    2288:	7a 83       	std	Y+2, r23	; 0x02
    228a:	8b 83       	std	Y+3, r24	; 0x03
    228c:	9c 83       	std	Y+4, r25	; 0x04
    228e:	2d 83       	std	Y+5, r18	; 0x05
    2290:	3e 83       	std	Y+6, r19	; 0x06
    2292:	4f 83       	std	Y+7, r20	; 0x07
    2294:	58 87       	std	Y+8, r21	; 0x08
    2296:	e9 e0       	ldi	r30, 0x09	; 9
    2298:	ee 2e       	mov	r14, r30
    229a:	f1 2c       	mov	r15, r1
    229c:	ec 0e       	add	r14, r28
    229e:	fd 1e       	adc	r15, r29
    22a0:	ce 01       	movw	r24, r28
    22a2:	01 96       	adiw	r24, 0x01	; 1
    22a4:	b7 01       	movw	r22, r14
    22a6:	0e 94 4e 14 	call	0x289c	; 0x289c <__unpack_f>
    22aa:	8e 01       	movw	r16, r28
    22ac:	0f 5e       	subi	r16, 0xEF	; 239
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	ce 01       	movw	r24, r28
    22b2:	05 96       	adiw	r24, 0x05	; 5
    22b4:	b8 01       	movw	r22, r16
    22b6:	0e 94 4e 14 	call	0x289c	; 0x289c <__unpack_f>
    22ba:	8a 89       	ldd	r24, Y+18	; 0x12
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	89 27       	eor	r24, r25
    22c0:	8a 8b       	std	Y+18, r24	; 0x12
    22c2:	c7 01       	movw	r24, r14
    22c4:	b8 01       	movw	r22, r16
    22c6:	ae 01       	movw	r20, r28
    22c8:	47 5e       	subi	r20, 0xE7	; 231
    22ca:	5f 4f       	sbci	r21, 0xFF	; 255
    22cc:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_fpadd_parts>
    22d0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__pack_f>
    22d4:	a0 96       	adiw	r28, 0x20	; 32
    22d6:	e6 e0       	ldi	r30, 0x06	; 6
    22d8:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__+0x18>

000022dc <__addsf3>:
    22dc:	a0 e2       	ldi	r26, 0x20	; 32
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e4 e7       	ldi	r30, 0x74	; 116
    22e2:	f1 e1       	ldi	r31, 0x11	; 17
    22e4:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__+0x18>
    22e8:	69 83       	std	Y+1, r22	; 0x01
    22ea:	7a 83       	std	Y+2, r23	; 0x02
    22ec:	8b 83       	std	Y+3, r24	; 0x03
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	2d 83       	std	Y+5, r18	; 0x05
    22f2:	3e 83       	std	Y+6, r19	; 0x06
    22f4:	4f 83       	std	Y+7, r20	; 0x07
    22f6:	58 87       	std	Y+8, r21	; 0x08
    22f8:	f9 e0       	ldi	r31, 0x09	; 9
    22fa:	ef 2e       	mov	r14, r31
    22fc:	f1 2c       	mov	r15, r1
    22fe:	ec 0e       	add	r14, r28
    2300:	fd 1e       	adc	r15, r29
    2302:	ce 01       	movw	r24, r28
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	b7 01       	movw	r22, r14
    2308:	0e 94 4e 14 	call	0x289c	; 0x289c <__unpack_f>
    230c:	8e 01       	movw	r16, r28
    230e:	0f 5e       	subi	r16, 0xEF	; 239
    2310:	1f 4f       	sbci	r17, 0xFF	; 255
    2312:	ce 01       	movw	r24, r28
    2314:	05 96       	adiw	r24, 0x05	; 5
    2316:	b8 01       	movw	r22, r16
    2318:	0e 94 4e 14 	call	0x289c	; 0x289c <__unpack_f>
    231c:	c7 01       	movw	r24, r14
    231e:	b8 01       	movw	r22, r16
    2320:	ae 01       	movw	r20, r28
    2322:	47 5e       	subi	r20, 0xE7	; 231
    2324:	5f 4f       	sbci	r21, 0xFF	; 255
    2326:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_fpadd_parts>
    232a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__pack_f>
    232e:	a0 96       	adiw	r28, 0x20	; 32
    2330:	e6 e0       	ldi	r30, 0x06	; 6
    2332:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__+0x18>

00002336 <__mulsf3>:
    2336:	a0 e2       	ldi	r26, 0x20	; 32
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e1 ea       	ldi	r30, 0xA1	; 161
    233c:	f1 e1       	ldi	r31, 0x11	; 17
    233e:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <__prologue_saves__>
    2342:	69 83       	std	Y+1, r22	; 0x01
    2344:	7a 83       	std	Y+2, r23	; 0x02
    2346:	8b 83       	std	Y+3, r24	; 0x03
    2348:	9c 83       	std	Y+4, r25	; 0x04
    234a:	2d 83       	std	Y+5, r18	; 0x05
    234c:	3e 83       	std	Y+6, r19	; 0x06
    234e:	4f 83       	std	Y+7, r20	; 0x07
    2350:	58 87       	std	Y+8, r21	; 0x08
    2352:	ce 01       	movw	r24, r28
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	be 01       	movw	r22, r28
    2358:	67 5f       	subi	r22, 0xF7	; 247
    235a:	7f 4f       	sbci	r23, 0xFF	; 255
    235c:	0e 94 4e 14 	call	0x289c	; 0x289c <__unpack_f>
    2360:	ce 01       	movw	r24, r28
    2362:	05 96       	adiw	r24, 0x05	; 5
    2364:	be 01       	movw	r22, r28
    2366:	6f 5e       	subi	r22, 0xEF	; 239
    2368:	7f 4f       	sbci	r23, 0xFF	; 255
    236a:	0e 94 4e 14 	call	0x289c	; 0x289c <__unpack_f>
    236e:	99 85       	ldd	r25, Y+9	; 0x09
    2370:	92 30       	cpi	r25, 0x02	; 2
    2372:	88 f0       	brcs	.+34     	; 0x2396 <__mulsf3+0x60>
    2374:	89 89       	ldd	r24, Y+17	; 0x11
    2376:	82 30       	cpi	r24, 0x02	; 2
    2378:	c8 f0       	brcs	.+50     	; 0x23ac <__mulsf3+0x76>
    237a:	94 30       	cpi	r25, 0x04	; 4
    237c:	19 f4       	brne	.+6      	; 0x2384 <__mulsf3+0x4e>
    237e:	82 30       	cpi	r24, 0x02	; 2
    2380:	51 f4       	brne	.+20     	; 0x2396 <__mulsf3+0x60>
    2382:	04 c0       	rjmp	.+8      	; 0x238c <__mulsf3+0x56>
    2384:	84 30       	cpi	r24, 0x04	; 4
    2386:	29 f4       	brne	.+10     	; 0x2392 <__mulsf3+0x5c>
    2388:	92 30       	cpi	r25, 0x02	; 2
    238a:	81 f4       	brne	.+32     	; 0x23ac <__mulsf3+0x76>
    238c:	86 e6       	ldi	r24, 0x66	; 102
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	c6 c0       	rjmp	.+396    	; 0x251e <__mulsf3+0x1e8>
    2392:	92 30       	cpi	r25, 0x02	; 2
    2394:	49 f4       	brne	.+18     	; 0x23a8 <__mulsf3+0x72>
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	8a 89       	ldd	r24, Y+18	; 0x12
    239c:	98 13       	cpse	r25, r24
    239e:	21 e0       	ldi	r18, 0x01	; 1
    23a0:	2a 87       	std	Y+10, r18	; 0x0a
    23a2:	ce 01       	movw	r24, r28
    23a4:	09 96       	adiw	r24, 0x09	; 9
    23a6:	bb c0       	rjmp	.+374    	; 0x251e <__mulsf3+0x1e8>
    23a8:	82 30       	cpi	r24, 0x02	; 2
    23aa:	49 f4       	brne	.+18     	; 0x23be <__mulsf3+0x88>
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b0:	8a 89       	ldd	r24, Y+18	; 0x12
    23b2:	98 13       	cpse	r25, r24
    23b4:	21 e0       	ldi	r18, 0x01	; 1
    23b6:	2a 8b       	std	Y+18, r18	; 0x12
    23b8:	ce 01       	movw	r24, r28
    23ba:	41 96       	adiw	r24, 0x11	; 17
    23bc:	b0 c0       	rjmp	.+352    	; 0x251e <__mulsf3+0x1e8>
    23be:	2d 84       	ldd	r2, Y+13	; 0x0d
    23c0:	3e 84       	ldd	r3, Y+14	; 0x0e
    23c2:	4f 84       	ldd	r4, Y+15	; 0x0f
    23c4:	58 88       	ldd	r5, Y+16	; 0x10
    23c6:	6d 88       	ldd	r6, Y+21	; 0x15
    23c8:	7e 88       	ldd	r7, Y+22	; 0x16
    23ca:	8f 88       	ldd	r8, Y+23	; 0x17
    23cc:	98 8c       	ldd	r9, Y+24	; 0x18
    23ce:	ee 24       	eor	r14, r14
    23d0:	ff 24       	eor	r15, r15
    23d2:	87 01       	movw	r16, r14
    23d4:	aa 24       	eor	r10, r10
    23d6:	bb 24       	eor	r11, r11
    23d8:	65 01       	movw	r12, r10
    23da:	40 e0       	ldi	r20, 0x00	; 0
    23dc:	50 e0       	ldi	r21, 0x00	; 0
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	70 e0       	ldi	r23, 0x00	; 0
    23e2:	e0 e0       	ldi	r30, 0x00	; 0
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	c1 01       	movw	r24, r2
    23e8:	81 70       	andi	r24, 0x01	; 1
    23ea:	90 70       	andi	r25, 0x00	; 0
    23ec:	89 2b       	or	r24, r25
    23ee:	e9 f0       	breq	.+58     	; 0x242a <__mulsf3+0xf4>
    23f0:	e6 0c       	add	r14, r6
    23f2:	f7 1c       	adc	r15, r7
    23f4:	08 1d       	adc	r16, r8
    23f6:	19 1d       	adc	r17, r9
    23f8:	9a 01       	movw	r18, r20
    23fa:	ab 01       	movw	r20, r22
    23fc:	2a 0d       	add	r18, r10
    23fe:	3b 1d       	adc	r19, r11
    2400:	4c 1d       	adc	r20, r12
    2402:	5d 1d       	adc	r21, r13
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	a0 e0       	ldi	r26, 0x00	; 0
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e6 14       	cp	r14, r6
    240e:	f7 04       	cpc	r15, r7
    2410:	08 05       	cpc	r16, r8
    2412:	19 05       	cpc	r17, r9
    2414:	20 f4       	brcc	.+8      	; 0x241e <__mulsf3+0xe8>
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	a0 e0       	ldi	r26, 0x00	; 0
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	ba 01       	movw	r22, r20
    2420:	a9 01       	movw	r20, r18
    2422:	48 0f       	add	r20, r24
    2424:	59 1f       	adc	r21, r25
    2426:	6a 1f       	adc	r22, r26
    2428:	7b 1f       	adc	r23, r27
    242a:	aa 0c       	add	r10, r10
    242c:	bb 1c       	adc	r11, r11
    242e:	cc 1c       	adc	r12, r12
    2430:	dd 1c       	adc	r13, r13
    2432:	97 fe       	sbrs	r9, 7
    2434:	08 c0       	rjmp	.+16     	; 0x2446 <__mulsf3+0x110>
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a0 e0       	ldi	r26, 0x00	; 0
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	a8 2a       	or	r10, r24
    2440:	b9 2a       	or	r11, r25
    2442:	ca 2a       	or	r12, r26
    2444:	db 2a       	or	r13, r27
    2446:	31 96       	adiw	r30, 0x01	; 1
    2448:	e0 32       	cpi	r30, 0x20	; 32
    244a:	f1 05       	cpc	r31, r1
    244c:	49 f0       	breq	.+18     	; 0x2460 <__mulsf3+0x12a>
    244e:	66 0c       	add	r6, r6
    2450:	77 1c       	adc	r7, r7
    2452:	88 1c       	adc	r8, r8
    2454:	99 1c       	adc	r9, r9
    2456:	56 94       	lsr	r5
    2458:	47 94       	ror	r4
    245a:	37 94       	ror	r3
    245c:	27 94       	ror	r2
    245e:	c3 cf       	rjmp	.-122    	; 0x23e6 <__mulsf3+0xb0>
    2460:	fa 85       	ldd	r31, Y+10	; 0x0a
    2462:	ea 89       	ldd	r30, Y+18	; 0x12
    2464:	2b 89       	ldd	r18, Y+19	; 0x13
    2466:	3c 89       	ldd	r19, Y+20	; 0x14
    2468:	8b 85       	ldd	r24, Y+11	; 0x0b
    246a:	9c 85       	ldd	r25, Y+12	; 0x0c
    246c:	28 0f       	add	r18, r24
    246e:	39 1f       	adc	r19, r25
    2470:	2e 5f       	subi	r18, 0xFE	; 254
    2472:	3f 4f       	sbci	r19, 0xFF	; 255
    2474:	17 c0       	rjmp	.+46     	; 0x24a4 <__mulsf3+0x16e>
    2476:	ca 01       	movw	r24, r20
    2478:	81 70       	andi	r24, 0x01	; 1
    247a:	90 70       	andi	r25, 0x00	; 0
    247c:	89 2b       	or	r24, r25
    247e:	61 f0       	breq	.+24     	; 0x2498 <__mulsf3+0x162>
    2480:	16 95       	lsr	r17
    2482:	07 95       	ror	r16
    2484:	f7 94       	ror	r15
    2486:	e7 94       	ror	r14
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	a0 e0       	ldi	r26, 0x00	; 0
    248e:	b0 e8       	ldi	r27, 0x80	; 128
    2490:	e8 2a       	or	r14, r24
    2492:	f9 2a       	or	r15, r25
    2494:	0a 2b       	or	r16, r26
    2496:	1b 2b       	or	r17, r27
    2498:	76 95       	lsr	r23
    249a:	67 95       	ror	r22
    249c:	57 95       	ror	r21
    249e:	47 95       	ror	r20
    24a0:	2f 5f       	subi	r18, 0xFF	; 255
    24a2:	3f 4f       	sbci	r19, 0xFF	; 255
    24a4:	77 fd       	sbrc	r23, 7
    24a6:	e7 cf       	rjmp	.-50     	; 0x2476 <__mulsf3+0x140>
    24a8:	0c c0       	rjmp	.+24     	; 0x24c2 <__mulsf3+0x18c>
    24aa:	44 0f       	add	r20, r20
    24ac:	55 1f       	adc	r21, r21
    24ae:	66 1f       	adc	r22, r22
    24b0:	77 1f       	adc	r23, r23
    24b2:	17 fd       	sbrc	r17, 7
    24b4:	41 60       	ori	r20, 0x01	; 1
    24b6:	ee 0c       	add	r14, r14
    24b8:	ff 1c       	adc	r15, r15
    24ba:	00 1f       	adc	r16, r16
    24bc:	11 1f       	adc	r17, r17
    24be:	21 50       	subi	r18, 0x01	; 1
    24c0:	30 40       	sbci	r19, 0x00	; 0
    24c2:	40 30       	cpi	r20, 0x00	; 0
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	59 07       	cpc	r21, r25
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	69 07       	cpc	r22, r25
    24cc:	90 e4       	ldi	r25, 0x40	; 64
    24ce:	79 07       	cpc	r23, r25
    24d0:	60 f3       	brcs	.-40     	; 0x24aa <__mulsf3+0x174>
    24d2:	2b 8f       	std	Y+27, r18	; 0x1b
    24d4:	3c 8f       	std	Y+28, r19	; 0x1c
    24d6:	db 01       	movw	r26, r22
    24d8:	ca 01       	movw	r24, r20
    24da:	8f 77       	andi	r24, 0x7F	; 127
    24dc:	90 70       	andi	r25, 0x00	; 0
    24de:	a0 70       	andi	r26, 0x00	; 0
    24e0:	b0 70       	andi	r27, 0x00	; 0
    24e2:	80 34       	cpi	r24, 0x40	; 64
    24e4:	91 05       	cpc	r25, r1
    24e6:	a1 05       	cpc	r26, r1
    24e8:	b1 05       	cpc	r27, r1
    24ea:	61 f4       	brne	.+24     	; 0x2504 <__mulsf3+0x1ce>
    24ec:	47 fd       	sbrc	r20, 7
    24ee:	0a c0       	rjmp	.+20     	; 0x2504 <__mulsf3+0x1ce>
    24f0:	e1 14       	cp	r14, r1
    24f2:	f1 04       	cpc	r15, r1
    24f4:	01 05       	cpc	r16, r1
    24f6:	11 05       	cpc	r17, r1
    24f8:	29 f0       	breq	.+10     	; 0x2504 <__mulsf3+0x1ce>
    24fa:	40 5c       	subi	r20, 0xC0	; 192
    24fc:	5f 4f       	sbci	r21, 0xFF	; 255
    24fe:	6f 4f       	sbci	r22, 0xFF	; 255
    2500:	7f 4f       	sbci	r23, 0xFF	; 255
    2502:	40 78       	andi	r20, 0x80	; 128
    2504:	1a 8e       	std	Y+26, r1	; 0x1a
    2506:	fe 17       	cp	r31, r30
    2508:	11 f0       	breq	.+4      	; 0x250e <__mulsf3+0x1d8>
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	8a 8f       	std	Y+26, r24	; 0x1a
    250e:	4d 8f       	std	Y+29, r20	; 0x1d
    2510:	5e 8f       	std	Y+30, r21	; 0x1e
    2512:	6f 8f       	std	Y+31, r22	; 0x1f
    2514:	78 a3       	std	Y+32, r23	; 0x20
    2516:	83 e0       	ldi	r24, 0x03	; 3
    2518:	89 8f       	std	Y+25, r24	; 0x19
    251a:	ce 01       	movw	r24, r28
    251c:	49 96       	adiw	r24, 0x19	; 25
    251e:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__pack_f>
    2522:	a0 96       	adiw	r28, 0x20	; 32
    2524:	e2 e1       	ldi	r30, 0x12	; 18
    2526:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__epilogue_restores__>

0000252a <__gtsf2>:
    252a:	a8 e1       	ldi	r26, 0x18	; 24
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	eb e9       	ldi	r30, 0x9B	; 155
    2530:	f2 e1       	ldi	r31, 0x12	; 18
    2532:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__+0x18>
    2536:	69 83       	std	Y+1, r22	; 0x01
    2538:	7a 83       	std	Y+2, r23	; 0x02
    253a:	8b 83       	std	Y+3, r24	; 0x03
    253c:	9c 83       	std	Y+4, r25	; 0x04
    253e:	2d 83       	std	Y+5, r18	; 0x05
    2540:	3e 83       	std	Y+6, r19	; 0x06
    2542:	4f 83       	std	Y+7, r20	; 0x07
    2544:	58 87       	std	Y+8, r21	; 0x08
    2546:	89 e0       	ldi	r24, 0x09	; 9
    2548:	e8 2e       	mov	r14, r24
    254a:	f1 2c       	mov	r15, r1
    254c:	ec 0e       	add	r14, r28
    254e:	fd 1e       	adc	r15, r29
    2550:	ce 01       	movw	r24, r28
    2552:	01 96       	adiw	r24, 0x01	; 1
    2554:	b7 01       	movw	r22, r14
    2556:	0e 94 4e 14 	call	0x289c	; 0x289c <__unpack_f>
    255a:	8e 01       	movw	r16, r28
    255c:	0f 5e       	subi	r16, 0xEF	; 239
    255e:	1f 4f       	sbci	r17, 0xFF	; 255
    2560:	ce 01       	movw	r24, r28
    2562:	05 96       	adiw	r24, 0x05	; 5
    2564:	b8 01       	movw	r22, r16
    2566:	0e 94 4e 14 	call	0x289c	; 0x289c <__unpack_f>
    256a:	89 85       	ldd	r24, Y+9	; 0x09
    256c:	82 30       	cpi	r24, 0x02	; 2
    256e:	40 f0       	brcs	.+16     	; 0x2580 <__gtsf2+0x56>
    2570:	89 89       	ldd	r24, Y+17	; 0x11
    2572:	82 30       	cpi	r24, 0x02	; 2
    2574:	28 f0       	brcs	.+10     	; 0x2580 <__gtsf2+0x56>
    2576:	c7 01       	movw	r24, r14
    2578:	b8 01       	movw	r22, r16
    257a:	0e 94 c6 14 	call	0x298c	; 0x298c <__fpcmp_parts_f>
    257e:	01 c0       	rjmp	.+2      	; 0x2582 <__gtsf2+0x58>
    2580:	8f ef       	ldi	r24, 0xFF	; 255
    2582:	68 96       	adiw	r28, 0x18	; 24
    2584:	e6 e0       	ldi	r30, 0x06	; 6
    2586:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__+0x18>

0000258a <__gesf2>:
    258a:	a8 e1       	ldi	r26, 0x18	; 24
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	eb ec       	ldi	r30, 0xCB	; 203
    2590:	f2 e1       	ldi	r31, 0x12	; 18
    2592:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__+0x18>
    2596:	69 83       	std	Y+1, r22	; 0x01
    2598:	7a 83       	std	Y+2, r23	; 0x02
    259a:	8b 83       	std	Y+3, r24	; 0x03
    259c:	9c 83       	std	Y+4, r25	; 0x04
    259e:	2d 83       	std	Y+5, r18	; 0x05
    25a0:	3e 83       	std	Y+6, r19	; 0x06
    25a2:	4f 83       	std	Y+7, r20	; 0x07
    25a4:	58 87       	std	Y+8, r21	; 0x08
    25a6:	89 e0       	ldi	r24, 0x09	; 9
    25a8:	e8 2e       	mov	r14, r24
    25aa:	f1 2c       	mov	r15, r1
    25ac:	ec 0e       	add	r14, r28
    25ae:	fd 1e       	adc	r15, r29
    25b0:	ce 01       	movw	r24, r28
    25b2:	01 96       	adiw	r24, 0x01	; 1
    25b4:	b7 01       	movw	r22, r14
    25b6:	0e 94 4e 14 	call	0x289c	; 0x289c <__unpack_f>
    25ba:	8e 01       	movw	r16, r28
    25bc:	0f 5e       	subi	r16, 0xEF	; 239
    25be:	1f 4f       	sbci	r17, 0xFF	; 255
    25c0:	ce 01       	movw	r24, r28
    25c2:	05 96       	adiw	r24, 0x05	; 5
    25c4:	b8 01       	movw	r22, r16
    25c6:	0e 94 4e 14 	call	0x289c	; 0x289c <__unpack_f>
    25ca:	89 85       	ldd	r24, Y+9	; 0x09
    25cc:	82 30       	cpi	r24, 0x02	; 2
    25ce:	40 f0       	brcs	.+16     	; 0x25e0 <__gesf2+0x56>
    25d0:	89 89       	ldd	r24, Y+17	; 0x11
    25d2:	82 30       	cpi	r24, 0x02	; 2
    25d4:	28 f0       	brcs	.+10     	; 0x25e0 <__gesf2+0x56>
    25d6:	c7 01       	movw	r24, r14
    25d8:	b8 01       	movw	r22, r16
    25da:	0e 94 c6 14 	call	0x298c	; 0x298c <__fpcmp_parts_f>
    25de:	01 c0       	rjmp	.+2      	; 0x25e2 <__gesf2+0x58>
    25e0:	8f ef       	ldi	r24, 0xFF	; 255
    25e2:	68 96       	adiw	r28, 0x18	; 24
    25e4:	e6 e0       	ldi	r30, 0x06	; 6
    25e6:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__+0x18>

000025ea <__ltsf2>:
    25ea:	a8 e1       	ldi	r26, 0x18	; 24
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	eb ef       	ldi	r30, 0xFB	; 251
    25f0:	f2 e1       	ldi	r31, 0x12	; 18
    25f2:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__+0x18>
    25f6:	69 83       	std	Y+1, r22	; 0x01
    25f8:	7a 83       	std	Y+2, r23	; 0x02
    25fa:	8b 83       	std	Y+3, r24	; 0x03
    25fc:	9c 83       	std	Y+4, r25	; 0x04
    25fe:	2d 83       	std	Y+5, r18	; 0x05
    2600:	3e 83       	std	Y+6, r19	; 0x06
    2602:	4f 83       	std	Y+7, r20	; 0x07
    2604:	58 87       	std	Y+8, r21	; 0x08
    2606:	89 e0       	ldi	r24, 0x09	; 9
    2608:	e8 2e       	mov	r14, r24
    260a:	f1 2c       	mov	r15, r1
    260c:	ec 0e       	add	r14, r28
    260e:	fd 1e       	adc	r15, r29
    2610:	ce 01       	movw	r24, r28
    2612:	01 96       	adiw	r24, 0x01	; 1
    2614:	b7 01       	movw	r22, r14
    2616:	0e 94 4e 14 	call	0x289c	; 0x289c <__unpack_f>
    261a:	8e 01       	movw	r16, r28
    261c:	0f 5e       	subi	r16, 0xEF	; 239
    261e:	1f 4f       	sbci	r17, 0xFF	; 255
    2620:	ce 01       	movw	r24, r28
    2622:	05 96       	adiw	r24, 0x05	; 5
    2624:	b8 01       	movw	r22, r16
    2626:	0e 94 4e 14 	call	0x289c	; 0x289c <__unpack_f>
    262a:	89 85       	ldd	r24, Y+9	; 0x09
    262c:	82 30       	cpi	r24, 0x02	; 2
    262e:	40 f0       	brcs	.+16     	; 0x2640 <__ltsf2+0x56>
    2630:	89 89       	ldd	r24, Y+17	; 0x11
    2632:	82 30       	cpi	r24, 0x02	; 2
    2634:	28 f0       	brcs	.+10     	; 0x2640 <__ltsf2+0x56>
    2636:	c7 01       	movw	r24, r14
    2638:	b8 01       	movw	r22, r16
    263a:	0e 94 c6 14 	call	0x298c	; 0x298c <__fpcmp_parts_f>
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <__ltsf2+0x58>
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	68 96       	adiw	r28, 0x18	; 24
    2644:	e6 e0       	ldi	r30, 0x06	; 6
    2646:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__+0x18>

0000264a <__fixsfsi>:
    264a:	ac e0       	ldi	r26, 0x0C	; 12
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	eb e2       	ldi	r30, 0x2B	; 43
    2650:	f3 e1       	ldi	r31, 0x13	; 19
    2652:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__prologue_saves__+0x20>
    2656:	69 83       	std	Y+1, r22	; 0x01
    2658:	7a 83       	std	Y+2, r23	; 0x02
    265a:	8b 83       	std	Y+3, r24	; 0x03
    265c:	9c 83       	std	Y+4, r25	; 0x04
    265e:	ce 01       	movw	r24, r28
    2660:	01 96       	adiw	r24, 0x01	; 1
    2662:	be 01       	movw	r22, r28
    2664:	6b 5f       	subi	r22, 0xFB	; 251
    2666:	7f 4f       	sbci	r23, 0xFF	; 255
    2668:	0e 94 4e 14 	call	0x289c	; 0x289c <__unpack_f>
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	82 30       	cpi	r24, 0x02	; 2
    2670:	61 f1       	breq	.+88     	; 0x26ca <__fixsfsi+0x80>
    2672:	82 30       	cpi	r24, 0x02	; 2
    2674:	50 f1       	brcs	.+84     	; 0x26ca <__fixsfsi+0x80>
    2676:	84 30       	cpi	r24, 0x04	; 4
    2678:	21 f4       	brne	.+8      	; 0x2682 <__fixsfsi+0x38>
    267a:	8e 81       	ldd	r24, Y+6	; 0x06
    267c:	88 23       	and	r24, r24
    267e:	51 f1       	breq	.+84     	; 0x26d4 <__fixsfsi+0x8a>
    2680:	2e c0       	rjmp	.+92     	; 0x26de <__fixsfsi+0x94>
    2682:	2f 81       	ldd	r18, Y+7	; 0x07
    2684:	38 85       	ldd	r19, Y+8	; 0x08
    2686:	37 fd       	sbrc	r19, 7
    2688:	20 c0       	rjmp	.+64     	; 0x26ca <__fixsfsi+0x80>
    268a:	6e 81       	ldd	r22, Y+6	; 0x06
    268c:	2f 31       	cpi	r18, 0x1F	; 31
    268e:	31 05       	cpc	r19, r1
    2690:	1c f0       	brlt	.+6      	; 0x2698 <__fixsfsi+0x4e>
    2692:	66 23       	and	r22, r22
    2694:	f9 f0       	breq	.+62     	; 0x26d4 <__fixsfsi+0x8a>
    2696:	23 c0       	rjmp	.+70     	; 0x26de <__fixsfsi+0x94>
    2698:	8e e1       	ldi	r24, 0x1E	; 30
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	82 1b       	sub	r24, r18
    269e:	93 0b       	sbc	r25, r19
    26a0:	29 85       	ldd	r18, Y+9	; 0x09
    26a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    26a4:	4b 85       	ldd	r20, Y+11	; 0x0b
    26a6:	5c 85       	ldd	r21, Y+12	; 0x0c
    26a8:	04 c0       	rjmp	.+8      	; 0x26b2 <__fixsfsi+0x68>
    26aa:	56 95       	lsr	r21
    26ac:	47 95       	ror	r20
    26ae:	37 95       	ror	r19
    26b0:	27 95       	ror	r18
    26b2:	8a 95       	dec	r24
    26b4:	d2 f7       	brpl	.-12     	; 0x26aa <__fixsfsi+0x60>
    26b6:	66 23       	and	r22, r22
    26b8:	b1 f0       	breq	.+44     	; 0x26e6 <__fixsfsi+0x9c>
    26ba:	50 95       	com	r21
    26bc:	40 95       	com	r20
    26be:	30 95       	com	r19
    26c0:	21 95       	neg	r18
    26c2:	3f 4f       	sbci	r19, 0xFF	; 255
    26c4:	4f 4f       	sbci	r20, 0xFF	; 255
    26c6:	5f 4f       	sbci	r21, 0xFF	; 255
    26c8:	0e c0       	rjmp	.+28     	; 0x26e6 <__fixsfsi+0x9c>
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	50 e0       	ldi	r21, 0x00	; 0
    26d2:	09 c0       	rjmp	.+18     	; 0x26e6 <__fixsfsi+0x9c>
    26d4:	2f ef       	ldi	r18, 0xFF	; 255
    26d6:	3f ef       	ldi	r19, 0xFF	; 255
    26d8:	4f ef       	ldi	r20, 0xFF	; 255
    26da:	5f e7       	ldi	r21, 0x7F	; 127
    26dc:	04 c0       	rjmp	.+8      	; 0x26e6 <__fixsfsi+0x9c>
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e0       	ldi	r20, 0x00	; 0
    26e4:	50 e8       	ldi	r21, 0x80	; 128
    26e6:	b9 01       	movw	r22, r18
    26e8:	ca 01       	movw	r24, r20
    26ea:	2c 96       	adiw	r28, 0x0c	; 12
    26ec:	e2 e0       	ldi	r30, 0x02	; 2
    26ee:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <__epilogue_restores__+0x20>

000026f2 <__pack_f>:
    26f2:	df 92       	push	r13
    26f4:	ef 92       	push	r14
    26f6:	ff 92       	push	r15
    26f8:	0f 93       	push	r16
    26fa:	1f 93       	push	r17
    26fc:	fc 01       	movw	r30, r24
    26fe:	e4 80       	ldd	r14, Z+4	; 0x04
    2700:	f5 80       	ldd	r15, Z+5	; 0x05
    2702:	06 81       	ldd	r16, Z+6	; 0x06
    2704:	17 81       	ldd	r17, Z+7	; 0x07
    2706:	d1 80       	ldd	r13, Z+1	; 0x01
    2708:	80 81       	ld	r24, Z
    270a:	82 30       	cpi	r24, 0x02	; 2
    270c:	48 f4       	brcc	.+18     	; 0x2720 <__pack_f+0x2e>
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	a0 e1       	ldi	r26, 0x10	; 16
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	e8 2a       	or	r14, r24
    2718:	f9 2a       	or	r15, r25
    271a:	0a 2b       	or	r16, r26
    271c:	1b 2b       	or	r17, r27
    271e:	a5 c0       	rjmp	.+330    	; 0x286a <__pack_f+0x178>
    2720:	84 30       	cpi	r24, 0x04	; 4
    2722:	09 f4       	brne	.+2      	; 0x2726 <__pack_f+0x34>
    2724:	9f c0       	rjmp	.+318    	; 0x2864 <__pack_f+0x172>
    2726:	82 30       	cpi	r24, 0x02	; 2
    2728:	21 f4       	brne	.+8      	; 0x2732 <__pack_f+0x40>
    272a:	ee 24       	eor	r14, r14
    272c:	ff 24       	eor	r15, r15
    272e:	87 01       	movw	r16, r14
    2730:	05 c0       	rjmp	.+10     	; 0x273c <__pack_f+0x4a>
    2732:	e1 14       	cp	r14, r1
    2734:	f1 04       	cpc	r15, r1
    2736:	01 05       	cpc	r16, r1
    2738:	11 05       	cpc	r17, r1
    273a:	19 f4       	brne	.+6      	; 0x2742 <__pack_f+0x50>
    273c:	e0 e0       	ldi	r30, 0x00	; 0
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	96 c0       	rjmp	.+300    	; 0x286e <__pack_f+0x17c>
    2742:	62 81       	ldd	r22, Z+2	; 0x02
    2744:	73 81       	ldd	r23, Z+3	; 0x03
    2746:	9f ef       	ldi	r25, 0xFF	; 255
    2748:	62 38       	cpi	r22, 0x82	; 130
    274a:	79 07       	cpc	r23, r25
    274c:	0c f0       	brlt	.+2      	; 0x2750 <__pack_f+0x5e>
    274e:	5b c0       	rjmp	.+182    	; 0x2806 <__pack_f+0x114>
    2750:	22 e8       	ldi	r18, 0x82	; 130
    2752:	3f ef       	ldi	r19, 0xFF	; 255
    2754:	26 1b       	sub	r18, r22
    2756:	37 0b       	sbc	r19, r23
    2758:	2a 31       	cpi	r18, 0x1A	; 26
    275a:	31 05       	cpc	r19, r1
    275c:	2c f0       	brlt	.+10     	; 0x2768 <__pack_f+0x76>
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	2a c0       	rjmp	.+84     	; 0x27bc <__pack_f+0xca>
    2768:	b8 01       	movw	r22, r16
    276a:	a7 01       	movw	r20, r14
    276c:	02 2e       	mov	r0, r18
    276e:	04 c0       	rjmp	.+8      	; 0x2778 <__pack_f+0x86>
    2770:	76 95       	lsr	r23
    2772:	67 95       	ror	r22
    2774:	57 95       	ror	r21
    2776:	47 95       	ror	r20
    2778:	0a 94       	dec	r0
    277a:	d2 f7       	brpl	.-12     	; 0x2770 <__pack_f+0x7e>
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	a0 e0       	ldi	r26, 0x00	; 0
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	04 c0       	rjmp	.+8      	; 0x278e <__pack_f+0x9c>
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	aa 1f       	adc	r26, r26
    278c:	bb 1f       	adc	r27, r27
    278e:	2a 95       	dec	r18
    2790:	d2 f7       	brpl	.-12     	; 0x2786 <__pack_f+0x94>
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	a1 09       	sbc	r26, r1
    2796:	b1 09       	sbc	r27, r1
    2798:	8e 21       	and	r24, r14
    279a:	9f 21       	and	r25, r15
    279c:	a0 23       	and	r26, r16
    279e:	b1 23       	and	r27, r17
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	a1 05       	cpc	r26, r1
    27a4:	b1 05       	cpc	r27, r1
    27a6:	21 f0       	breq	.+8      	; 0x27b0 <__pack_f+0xbe>
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	a0 e0       	ldi	r26, 0x00	; 0
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	9a 01       	movw	r18, r20
    27b2:	ab 01       	movw	r20, r22
    27b4:	28 2b       	or	r18, r24
    27b6:	39 2b       	or	r19, r25
    27b8:	4a 2b       	or	r20, r26
    27ba:	5b 2b       	or	r21, r27
    27bc:	da 01       	movw	r26, r20
    27be:	c9 01       	movw	r24, r18
    27c0:	8f 77       	andi	r24, 0x7F	; 127
    27c2:	90 70       	andi	r25, 0x00	; 0
    27c4:	a0 70       	andi	r26, 0x00	; 0
    27c6:	b0 70       	andi	r27, 0x00	; 0
    27c8:	80 34       	cpi	r24, 0x40	; 64
    27ca:	91 05       	cpc	r25, r1
    27cc:	a1 05       	cpc	r26, r1
    27ce:	b1 05       	cpc	r27, r1
    27d0:	39 f4       	brne	.+14     	; 0x27e0 <__pack_f+0xee>
    27d2:	27 ff       	sbrs	r18, 7
    27d4:	09 c0       	rjmp	.+18     	; 0x27e8 <__pack_f+0xf6>
    27d6:	20 5c       	subi	r18, 0xC0	; 192
    27d8:	3f 4f       	sbci	r19, 0xFF	; 255
    27da:	4f 4f       	sbci	r20, 0xFF	; 255
    27dc:	5f 4f       	sbci	r21, 0xFF	; 255
    27de:	04 c0       	rjmp	.+8      	; 0x27e8 <__pack_f+0xf6>
    27e0:	21 5c       	subi	r18, 0xC1	; 193
    27e2:	3f 4f       	sbci	r19, 0xFF	; 255
    27e4:	4f 4f       	sbci	r20, 0xFF	; 255
    27e6:	5f 4f       	sbci	r21, 0xFF	; 255
    27e8:	e0 e0       	ldi	r30, 0x00	; 0
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	20 30       	cpi	r18, 0x00	; 0
    27ee:	a0 e0       	ldi	r26, 0x00	; 0
    27f0:	3a 07       	cpc	r19, r26
    27f2:	a0 e0       	ldi	r26, 0x00	; 0
    27f4:	4a 07       	cpc	r20, r26
    27f6:	a0 e4       	ldi	r26, 0x40	; 64
    27f8:	5a 07       	cpc	r21, r26
    27fa:	10 f0       	brcs	.+4      	; 0x2800 <__pack_f+0x10e>
    27fc:	e1 e0       	ldi	r30, 0x01	; 1
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	79 01       	movw	r14, r18
    2802:	8a 01       	movw	r16, r20
    2804:	27 c0       	rjmp	.+78     	; 0x2854 <__pack_f+0x162>
    2806:	60 38       	cpi	r22, 0x80	; 128
    2808:	71 05       	cpc	r23, r1
    280a:	64 f5       	brge	.+88     	; 0x2864 <__pack_f+0x172>
    280c:	fb 01       	movw	r30, r22
    280e:	e1 58       	subi	r30, 0x81	; 129
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	d8 01       	movw	r26, r16
    2814:	c7 01       	movw	r24, r14
    2816:	8f 77       	andi	r24, 0x7F	; 127
    2818:	90 70       	andi	r25, 0x00	; 0
    281a:	a0 70       	andi	r26, 0x00	; 0
    281c:	b0 70       	andi	r27, 0x00	; 0
    281e:	80 34       	cpi	r24, 0x40	; 64
    2820:	91 05       	cpc	r25, r1
    2822:	a1 05       	cpc	r26, r1
    2824:	b1 05       	cpc	r27, r1
    2826:	39 f4       	brne	.+14     	; 0x2836 <__pack_f+0x144>
    2828:	e7 fe       	sbrs	r14, 7
    282a:	0d c0       	rjmp	.+26     	; 0x2846 <__pack_f+0x154>
    282c:	80 e4       	ldi	r24, 0x40	; 64
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	a0 e0       	ldi	r26, 0x00	; 0
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	04 c0       	rjmp	.+8      	; 0x283e <__pack_f+0x14c>
    2836:	8f e3       	ldi	r24, 0x3F	; 63
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	a0 e0       	ldi	r26, 0x00	; 0
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e8 0e       	add	r14, r24
    2840:	f9 1e       	adc	r15, r25
    2842:	0a 1f       	adc	r16, r26
    2844:	1b 1f       	adc	r17, r27
    2846:	17 ff       	sbrs	r17, 7
    2848:	05 c0       	rjmp	.+10     	; 0x2854 <__pack_f+0x162>
    284a:	16 95       	lsr	r17
    284c:	07 95       	ror	r16
    284e:	f7 94       	ror	r15
    2850:	e7 94       	ror	r14
    2852:	31 96       	adiw	r30, 0x01	; 1
    2854:	87 e0       	ldi	r24, 0x07	; 7
    2856:	16 95       	lsr	r17
    2858:	07 95       	ror	r16
    285a:	f7 94       	ror	r15
    285c:	e7 94       	ror	r14
    285e:	8a 95       	dec	r24
    2860:	d1 f7       	brne	.-12     	; 0x2856 <__pack_f+0x164>
    2862:	05 c0       	rjmp	.+10     	; 0x286e <__pack_f+0x17c>
    2864:	ee 24       	eor	r14, r14
    2866:	ff 24       	eor	r15, r15
    2868:	87 01       	movw	r16, r14
    286a:	ef ef       	ldi	r30, 0xFF	; 255
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	6e 2f       	mov	r22, r30
    2870:	67 95       	ror	r22
    2872:	66 27       	eor	r22, r22
    2874:	67 95       	ror	r22
    2876:	90 2f       	mov	r25, r16
    2878:	9f 77       	andi	r25, 0x7F	; 127
    287a:	d7 94       	ror	r13
    287c:	dd 24       	eor	r13, r13
    287e:	d7 94       	ror	r13
    2880:	8e 2f       	mov	r24, r30
    2882:	86 95       	lsr	r24
    2884:	49 2f       	mov	r20, r25
    2886:	46 2b       	or	r20, r22
    2888:	58 2f       	mov	r21, r24
    288a:	5d 29       	or	r21, r13
    288c:	b7 01       	movw	r22, r14
    288e:	ca 01       	movw	r24, r20
    2890:	1f 91       	pop	r17
    2892:	0f 91       	pop	r16
    2894:	ff 90       	pop	r15
    2896:	ef 90       	pop	r14
    2898:	df 90       	pop	r13
    289a:	08 95       	ret

0000289c <__unpack_f>:
    289c:	fc 01       	movw	r30, r24
    289e:	db 01       	movw	r26, r22
    28a0:	40 81       	ld	r20, Z
    28a2:	51 81       	ldd	r21, Z+1	; 0x01
    28a4:	22 81       	ldd	r18, Z+2	; 0x02
    28a6:	62 2f       	mov	r22, r18
    28a8:	6f 77       	andi	r22, 0x7F	; 127
    28aa:	70 e0       	ldi	r23, 0x00	; 0
    28ac:	22 1f       	adc	r18, r18
    28ae:	22 27       	eor	r18, r18
    28b0:	22 1f       	adc	r18, r18
    28b2:	93 81       	ldd	r25, Z+3	; 0x03
    28b4:	89 2f       	mov	r24, r25
    28b6:	88 0f       	add	r24, r24
    28b8:	82 2b       	or	r24, r18
    28ba:	28 2f       	mov	r18, r24
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	99 1f       	adc	r25, r25
    28c0:	99 27       	eor	r25, r25
    28c2:	99 1f       	adc	r25, r25
    28c4:	11 96       	adiw	r26, 0x01	; 1
    28c6:	9c 93       	st	X, r25
    28c8:	11 97       	sbiw	r26, 0x01	; 1
    28ca:	21 15       	cp	r18, r1
    28cc:	31 05       	cpc	r19, r1
    28ce:	a9 f5       	brne	.+106    	; 0x293a <__unpack_f+0x9e>
    28d0:	41 15       	cp	r20, r1
    28d2:	51 05       	cpc	r21, r1
    28d4:	61 05       	cpc	r22, r1
    28d6:	71 05       	cpc	r23, r1
    28d8:	11 f4       	brne	.+4      	; 0x28de <__unpack_f+0x42>
    28da:	82 e0       	ldi	r24, 0x02	; 2
    28dc:	37 c0       	rjmp	.+110    	; 0x294c <__unpack_f+0xb0>
    28de:	82 e8       	ldi	r24, 0x82	; 130
    28e0:	9f ef       	ldi	r25, 0xFF	; 255
    28e2:	13 96       	adiw	r26, 0x03	; 3
    28e4:	9c 93       	st	X, r25
    28e6:	8e 93       	st	-X, r24
    28e8:	12 97       	sbiw	r26, 0x02	; 2
    28ea:	9a 01       	movw	r18, r20
    28ec:	ab 01       	movw	r20, r22
    28ee:	67 e0       	ldi	r22, 0x07	; 7
    28f0:	22 0f       	add	r18, r18
    28f2:	33 1f       	adc	r19, r19
    28f4:	44 1f       	adc	r20, r20
    28f6:	55 1f       	adc	r21, r21
    28f8:	6a 95       	dec	r22
    28fa:	d1 f7       	brne	.-12     	; 0x28f0 <__unpack_f+0x54>
    28fc:	83 e0       	ldi	r24, 0x03	; 3
    28fe:	8c 93       	st	X, r24
    2900:	0d c0       	rjmp	.+26     	; 0x291c <__unpack_f+0x80>
    2902:	22 0f       	add	r18, r18
    2904:	33 1f       	adc	r19, r19
    2906:	44 1f       	adc	r20, r20
    2908:	55 1f       	adc	r21, r21
    290a:	12 96       	adiw	r26, 0x02	; 2
    290c:	8d 91       	ld	r24, X+
    290e:	9c 91       	ld	r25, X
    2910:	13 97       	sbiw	r26, 0x03	; 3
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	13 96       	adiw	r26, 0x03	; 3
    2916:	9c 93       	st	X, r25
    2918:	8e 93       	st	-X, r24
    291a:	12 97       	sbiw	r26, 0x02	; 2
    291c:	20 30       	cpi	r18, 0x00	; 0
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	38 07       	cpc	r19, r24
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	48 07       	cpc	r20, r24
    2926:	80 e4       	ldi	r24, 0x40	; 64
    2928:	58 07       	cpc	r21, r24
    292a:	58 f3       	brcs	.-42     	; 0x2902 <__unpack_f+0x66>
    292c:	14 96       	adiw	r26, 0x04	; 4
    292e:	2d 93       	st	X+, r18
    2930:	3d 93       	st	X+, r19
    2932:	4d 93       	st	X+, r20
    2934:	5c 93       	st	X, r21
    2936:	17 97       	sbiw	r26, 0x07	; 7
    2938:	08 95       	ret
    293a:	2f 3f       	cpi	r18, 0xFF	; 255
    293c:	31 05       	cpc	r19, r1
    293e:	79 f4       	brne	.+30     	; 0x295e <__unpack_f+0xc2>
    2940:	41 15       	cp	r20, r1
    2942:	51 05       	cpc	r21, r1
    2944:	61 05       	cpc	r22, r1
    2946:	71 05       	cpc	r23, r1
    2948:	19 f4       	brne	.+6      	; 0x2950 <__unpack_f+0xb4>
    294a:	84 e0       	ldi	r24, 0x04	; 4
    294c:	8c 93       	st	X, r24
    294e:	08 95       	ret
    2950:	64 ff       	sbrs	r22, 4
    2952:	03 c0       	rjmp	.+6      	; 0x295a <__unpack_f+0xbe>
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	8c 93       	st	X, r24
    2958:	12 c0       	rjmp	.+36     	; 0x297e <__unpack_f+0xe2>
    295a:	1c 92       	st	X, r1
    295c:	10 c0       	rjmp	.+32     	; 0x297e <__unpack_f+0xe2>
    295e:	2f 57       	subi	r18, 0x7F	; 127
    2960:	30 40       	sbci	r19, 0x00	; 0
    2962:	13 96       	adiw	r26, 0x03	; 3
    2964:	3c 93       	st	X, r19
    2966:	2e 93       	st	-X, r18
    2968:	12 97       	sbiw	r26, 0x02	; 2
    296a:	83 e0       	ldi	r24, 0x03	; 3
    296c:	8c 93       	st	X, r24
    296e:	87 e0       	ldi	r24, 0x07	; 7
    2970:	44 0f       	add	r20, r20
    2972:	55 1f       	adc	r21, r21
    2974:	66 1f       	adc	r22, r22
    2976:	77 1f       	adc	r23, r23
    2978:	8a 95       	dec	r24
    297a:	d1 f7       	brne	.-12     	; 0x2970 <__unpack_f+0xd4>
    297c:	70 64       	ori	r23, 0x40	; 64
    297e:	14 96       	adiw	r26, 0x04	; 4
    2980:	4d 93       	st	X+, r20
    2982:	5d 93       	st	X+, r21
    2984:	6d 93       	st	X+, r22
    2986:	7c 93       	st	X, r23
    2988:	17 97       	sbiw	r26, 0x07	; 7
    298a:	08 95       	ret

0000298c <__fpcmp_parts_f>:
    298c:	1f 93       	push	r17
    298e:	dc 01       	movw	r26, r24
    2990:	fb 01       	movw	r30, r22
    2992:	9c 91       	ld	r25, X
    2994:	92 30       	cpi	r25, 0x02	; 2
    2996:	08 f4       	brcc	.+2      	; 0x299a <__fpcmp_parts_f+0xe>
    2998:	47 c0       	rjmp	.+142    	; 0x2a28 <__fpcmp_parts_f+0x9c>
    299a:	80 81       	ld	r24, Z
    299c:	82 30       	cpi	r24, 0x02	; 2
    299e:	08 f4       	brcc	.+2      	; 0x29a2 <__fpcmp_parts_f+0x16>
    29a0:	43 c0       	rjmp	.+134    	; 0x2a28 <__fpcmp_parts_f+0x9c>
    29a2:	94 30       	cpi	r25, 0x04	; 4
    29a4:	51 f4       	brne	.+20     	; 0x29ba <__fpcmp_parts_f+0x2e>
    29a6:	11 96       	adiw	r26, 0x01	; 1
    29a8:	1c 91       	ld	r17, X
    29aa:	84 30       	cpi	r24, 0x04	; 4
    29ac:	99 f5       	brne	.+102    	; 0x2a14 <__fpcmp_parts_f+0x88>
    29ae:	81 81       	ldd	r24, Z+1	; 0x01
    29b0:	68 2f       	mov	r22, r24
    29b2:	70 e0       	ldi	r23, 0x00	; 0
    29b4:	61 1b       	sub	r22, r17
    29b6:	71 09       	sbc	r23, r1
    29b8:	3f c0       	rjmp	.+126    	; 0x2a38 <__fpcmp_parts_f+0xac>
    29ba:	84 30       	cpi	r24, 0x04	; 4
    29bc:	21 f0       	breq	.+8      	; 0x29c6 <__fpcmp_parts_f+0x3a>
    29be:	92 30       	cpi	r25, 0x02	; 2
    29c0:	31 f4       	brne	.+12     	; 0x29ce <__fpcmp_parts_f+0x42>
    29c2:	82 30       	cpi	r24, 0x02	; 2
    29c4:	b9 f1       	breq	.+110    	; 0x2a34 <__fpcmp_parts_f+0xa8>
    29c6:	81 81       	ldd	r24, Z+1	; 0x01
    29c8:	88 23       	and	r24, r24
    29ca:	89 f1       	breq	.+98     	; 0x2a2e <__fpcmp_parts_f+0xa2>
    29cc:	2d c0       	rjmp	.+90     	; 0x2a28 <__fpcmp_parts_f+0x9c>
    29ce:	11 96       	adiw	r26, 0x01	; 1
    29d0:	1c 91       	ld	r17, X
    29d2:	11 97       	sbiw	r26, 0x01	; 1
    29d4:	82 30       	cpi	r24, 0x02	; 2
    29d6:	f1 f0       	breq	.+60     	; 0x2a14 <__fpcmp_parts_f+0x88>
    29d8:	81 81       	ldd	r24, Z+1	; 0x01
    29da:	18 17       	cp	r17, r24
    29dc:	d9 f4       	brne	.+54     	; 0x2a14 <__fpcmp_parts_f+0x88>
    29de:	12 96       	adiw	r26, 0x02	; 2
    29e0:	2d 91       	ld	r18, X+
    29e2:	3c 91       	ld	r19, X
    29e4:	13 97       	sbiw	r26, 0x03	; 3
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	82 17       	cp	r24, r18
    29ec:	93 07       	cpc	r25, r19
    29ee:	94 f0       	brlt	.+36     	; 0x2a14 <__fpcmp_parts_f+0x88>
    29f0:	28 17       	cp	r18, r24
    29f2:	39 07       	cpc	r19, r25
    29f4:	bc f0       	brlt	.+46     	; 0x2a24 <__fpcmp_parts_f+0x98>
    29f6:	14 96       	adiw	r26, 0x04	; 4
    29f8:	8d 91       	ld	r24, X+
    29fa:	9d 91       	ld	r25, X+
    29fc:	0d 90       	ld	r0, X+
    29fe:	bc 91       	ld	r27, X
    2a00:	a0 2d       	mov	r26, r0
    2a02:	24 81       	ldd	r18, Z+4	; 0x04
    2a04:	35 81       	ldd	r19, Z+5	; 0x05
    2a06:	46 81       	ldd	r20, Z+6	; 0x06
    2a08:	57 81       	ldd	r21, Z+7	; 0x07
    2a0a:	28 17       	cp	r18, r24
    2a0c:	39 07       	cpc	r19, r25
    2a0e:	4a 07       	cpc	r20, r26
    2a10:	5b 07       	cpc	r21, r27
    2a12:	18 f4       	brcc	.+6      	; 0x2a1a <__fpcmp_parts_f+0x8e>
    2a14:	11 23       	and	r17, r17
    2a16:	41 f0       	breq	.+16     	; 0x2a28 <__fpcmp_parts_f+0x9c>
    2a18:	0a c0       	rjmp	.+20     	; 0x2a2e <__fpcmp_parts_f+0xa2>
    2a1a:	82 17       	cp	r24, r18
    2a1c:	93 07       	cpc	r25, r19
    2a1e:	a4 07       	cpc	r26, r20
    2a20:	b5 07       	cpc	r27, r21
    2a22:	40 f4       	brcc	.+16     	; 0x2a34 <__fpcmp_parts_f+0xa8>
    2a24:	11 23       	and	r17, r17
    2a26:	19 f0       	breq	.+6      	; 0x2a2e <__fpcmp_parts_f+0xa2>
    2a28:	61 e0       	ldi	r22, 0x01	; 1
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
    2a2c:	05 c0       	rjmp	.+10     	; 0x2a38 <__fpcmp_parts_f+0xac>
    2a2e:	6f ef       	ldi	r22, 0xFF	; 255
    2a30:	7f ef       	ldi	r23, 0xFF	; 255
    2a32:	02 c0       	rjmp	.+4      	; 0x2a38 <__fpcmp_parts_f+0xac>
    2a34:	60 e0       	ldi	r22, 0x00	; 0
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	cb 01       	movw	r24, r22
    2a3a:	1f 91       	pop	r17
    2a3c:	08 95       	ret

00002a3e <__udivmodhi4>:
    2a3e:	aa 1b       	sub	r26, r26
    2a40:	bb 1b       	sub	r27, r27
    2a42:	51 e1       	ldi	r21, 0x11	; 17
    2a44:	07 c0       	rjmp	.+14     	; 0x2a54 <__udivmodhi4_ep>

00002a46 <__udivmodhi4_loop>:
    2a46:	aa 1f       	adc	r26, r26
    2a48:	bb 1f       	adc	r27, r27
    2a4a:	a6 17       	cp	r26, r22
    2a4c:	b7 07       	cpc	r27, r23
    2a4e:	10 f0       	brcs	.+4      	; 0x2a54 <__udivmodhi4_ep>
    2a50:	a6 1b       	sub	r26, r22
    2a52:	b7 0b       	sbc	r27, r23

00002a54 <__udivmodhi4_ep>:
    2a54:	88 1f       	adc	r24, r24
    2a56:	99 1f       	adc	r25, r25
    2a58:	5a 95       	dec	r21
    2a5a:	a9 f7       	brne	.-22     	; 0x2a46 <__udivmodhi4_loop>
    2a5c:	80 95       	com	r24
    2a5e:	90 95       	com	r25
    2a60:	bc 01       	movw	r22, r24
    2a62:	cd 01       	movw	r24, r26
    2a64:	08 95       	ret

00002a66 <__divmodhi4>:
    2a66:	97 fb       	bst	r25, 7
    2a68:	09 2e       	mov	r0, r25
    2a6a:	07 26       	eor	r0, r23
    2a6c:	0a d0       	rcall	.+20     	; 0x2a82 <__divmodhi4_neg1>
    2a6e:	77 fd       	sbrc	r23, 7
    2a70:	04 d0       	rcall	.+8      	; 0x2a7a <__divmodhi4_neg2>
    2a72:	e5 df       	rcall	.-54     	; 0x2a3e <__udivmodhi4>
    2a74:	06 d0       	rcall	.+12     	; 0x2a82 <__divmodhi4_neg1>
    2a76:	00 20       	and	r0, r0
    2a78:	1a f4       	brpl	.+6      	; 0x2a80 <__divmodhi4_exit>

00002a7a <__divmodhi4_neg2>:
    2a7a:	70 95       	com	r23
    2a7c:	61 95       	neg	r22
    2a7e:	7f 4f       	sbci	r23, 0xFF	; 255

00002a80 <__divmodhi4_exit>:
    2a80:	08 95       	ret

00002a82 <__divmodhi4_neg1>:
    2a82:	f6 f7       	brtc	.-4      	; 0x2a80 <__divmodhi4_exit>
    2a84:	90 95       	com	r25
    2a86:	81 95       	neg	r24
    2a88:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8a:	08 95       	ret

00002a8c <__prologue_saves__>:
    2a8c:	2f 92       	push	r2
    2a8e:	3f 92       	push	r3
    2a90:	4f 92       	push	r4
    2a92:	5f 92       	push	r5
    2a94:	6f 92       	push	r6
    2a96:	7f 92       	push	r7
    2a98:	8f 92       	push	r8
    2a9a:	9f 92       	push	r9
    2a9c:	af 92       	push	r10
    2a9e:	bf 92       	push	r11
    2aa0:	cf 92       	push	r12
    2aa2:	df 92       	push	r13
    2aa4:	ef 92       	push	r14
    2aa6:	ff 92       	push	r15
    2aa8:	0f 93       	push	r16
    2aaa:	1f 93       	push	r17
    2aac:	cf 93       	push	r28
    2aae:	df 93       	push	r29
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	ca 1b       	sub	r28, r26
    2ab6:	db 0b       	sbc	r29, r27
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	09 94       	ijmp

00002ac4 <__epilogue_restores__>:
    2ac4:	2a 88       	ldd	r2, Y+18	; 0x12
    2ac6:	39 88       	ldd	r3, Y+17	; 0x11
    2ac8:	48 88       	ldd	r4, Y+16	; 0x10
    2aca:	5f 84       	ldd	r5, Y+15	; 0x0f
    2acc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ace:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ad0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ad2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ad4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ad6:	b9 84       	ldd	r11, Y+9	; 0x09
    2ad8:	c8 84       	ldd	r12, Y+8	; 0x08
    2ada:	df 80       	ldd	r13, Y+7	; 0x07
    2adc:	ee 80       	ldd	r14, Y+6	; 0x06
    2ade:	fd 80       	ldd	r15, Y+5	; 0x05
    2ae0:	0c 81       	ldd	r16, Y+4	; 0x04
    2ae2:	1b 81       	ldd	r17, Y+3	; 0x03
    2ae4:	aa 81       	ldd	r26, Y+2	; 0x02
    2ae6:	b9 81       	ldd	r27, Y+1	; 0x01
    2ae8:	ce 0f       	add	r28, r30
    2aea:	d1 1d       	adc	r29, r1
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	de bf       	out	0x3e, r29	; 62
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	cd bf       	out	0x3d, r28	; 61
    2af6:	ed 01       	movw	r28, r26
    2af8:	08 95       	ret

00002afa <strlen>:
    2afa:	fc 01       	movw	r30, r24
    2afc:	01 90       	ld	r0, Z+
    2afe:	00 20       	and	r0, r0
    2b00:	e9 f7       	brne	.-6      	; 0x2afc <strlen+0x2>
    2b02:	80 95       	com	r24
    2b04:	90 95       	com	r25
    2b06:	8e 0f       	add	r24, r30
    2b08:	9f 1f       	adc	r25, r31
    2b0a:	08 95       	ret

00002b0c <_exit>:
    2b0c:	f8 94       	cli

00002b0e <__stop_program>:
    2b0e:	ff cf       	rjmp	.-2      	; 0x2b0e <__stop_program>
