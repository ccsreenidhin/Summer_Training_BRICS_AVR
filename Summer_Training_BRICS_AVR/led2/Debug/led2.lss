
led2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002308  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002308  0000237c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002178  00000000  00000000  00002384  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dae  00000000  00000000  000044fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000052aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000053ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000555a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000071a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3f  00000000  00000000  0000808e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c6  00000000  00000000  00008f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000091f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000099c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d4 e0       	ldi	r29, 0x04	; 4
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	e8 e0       	ldi	r30, 0x08	; 8
      a8:	f3 e2       	ldi	r31, 0x23	; 35
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
      b0:	a8 36       	cpi	r26, 0x68	; 104
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>
      b6:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
      ba:	0c 94 82 11 	jmp	0x2304	; 0x2304 <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <main>:
#include <avr/io.h>
#include <util/delay.h>

main(){
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
      ca:	2e 97       	sbiw	r28, 0x0e	; 14
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	0f be       	out	0x3f, r0	; 63
      d4:	cd bf       	out	0x3d, r28	; 61
	DDRB=255;
      d6:	e7 e3       	ldi	r30, 0x37	; 55
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	8f ef       	ldi	r24, 0xFF	; 255
      dc:	80 83       	st	Z, r24

	while(1){
		for(PORTB=1;;PORTB=PORTB*2){
      de:	e8 e3       	ldi	r30, 0x38	; 56
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	80 83       	st	Z, r24
			if(PORTB==0)PORTB=1;
      e6:	e8 e3       	ldi	r30, 0x38	; 56
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	80 81       	ld	r24, Z
      ec:	88 23       	and	r24, r24
      ee:	21 f4       	brne	.+8      	; 0xf8 <main+0x36>
      f0:	e8 e3       	ldi	r30, 0x38	; 56
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	80 83       	st	Z, r24
			PORTC=PORTB;
      f8:	a5 e3       	ldi	r26, 0x35	; 53
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	e8 e3       	ldi	r30, 0x38	; 56
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	80 81       	ld	r24, Z
     102:	8c 93       	st	X, r24
			PORTB=0x5C;
     104:	e8 e3       	ldi	r30, 0x38	; 56
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	8c e5       	ldi	r24, 0x5C	; 92
     10a:	80 83       	st	Z, r24
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	a8 ec       	ldi	r26, 0xC8	; 200
     112:	b2 e4       	ldi	r27, 0x42	; 66
     114:	8b 87       	std	Y+11, r24	; 0x0b
     116:	9c 87       	std	Y+12, r25	; 0x0c
     118:	ad 87       	std	Y+13, r26	; 0x0d
     11a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     11c:	6b 85       	ldd	r22, Y+11	; 0x0b
     11e:	7c 85       	ldd	r23, Y+12	; 0x0c
     120:	8d 85       	ldd	r24, Y+13	; 0x0d
     122:	9e 85       	ldd	r25, Y+14	; 0x0e
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	4a e7       	ldi	r20, 0x7A	; 122
     12a:	54 e4       	ldi	r21, 0x44	; 68
     12c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     130:	dc 01       	movw	r26, r24
     132:	cb 01       	movw	r24, r22
     134:	8f 83       	std	Y+7, r24	; 0x07
     136:	98 87       	std	Y+8, r25	; 0x08
     138:	a9 87       	std	Y+9, r26	; 0x09
     13a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     13c:	6f 81       	ldd	r22, Y+7	; 0x07
     13e:	78 85       	ldd	r23, Y+8	; 0x08
     140:	89 85       	ldd	r24, Y+9	; 0x09
     142:	9a 85       	ldd	r25, Y+10	; 0x0a
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	40 e8       	ldi	r20, 0x80	; 128
     14a:	5f e3       	ldi	r21, 0x3F	; 63
     14c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     150:	88 23       	and	r24, r24
     152:	2c f4       	brge	.+10     	; 0x15e <main+0x9c>
		__ticks = 1;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	9e 83       	std	Y+6, r25	; 0x06
     15a:	8d 83       	std	Y+5, r24	; 0x05
     15c:	3f c0       	rjmp	.+126    	; 0x1dc <main+0x11a>
	else if (__tmp > 65535)
     15e:	6f 81       	ldd	r22, Y+7	; 0x07
     160:	78 85       	ldd	r23, Y+8	; 0x08
     162:	89 85       	ldd	r24, Y+9	; 0x09
     164:	9a 85       	ldd	r25, Y+10	; 0x0a
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	3f ef       	ldi	r19, 0xFF	; 255
     16a:	4f e7       	ldi	r20, 0x7F	; 127
     16c:	57 e4       	ldi	r21, 0x47	; 71
     16e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     172:	18 16       	cp	r1, r24
     174:	4c f5       	brge	.+82     	; 0x1c8 <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     176:	6b 85       	ldd	r22, Y+11	; 0x0b
     178:	7c 85       	ldd	r23, Y+12	; 0x0c
     17a:	8d 85       	ldd	r24, Y+13	; 0x0d
     17c:	9e 85       	ldd	r25, Y+14	; 0x0e
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	40 e2       	ldi	r20, 0x20	; 32
     184:	51 e4       	ldi	r21, 0x41	; 65
     186:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     18a:	dc 01       	movw	r26, r24
     18c:	cb 01       	movw	r24, r22
     18e:	bc 01       	movw	r22, r24
     190:	cd 01       	movw	r24, r26
     192:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     196:	dc 01       	movw	r26, r24
     198:	cb 01       	movw	r24, r22
     19a:	9e 83       	std	Y+6, r25	; 0x06
     19c:	8d 83       	std	Y+5, r24	; 0x05
     19e:	0f c0       	rjmp	.+30     	; 0x1be <main+0xfc>
     1a0:	84 e6       	ldi	r24, 0x64	; 100
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	9c 83       	std	Y+4, r25	; 0x04
     1a6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1a8:	8b 81       	ldd	r24, Y+3	; 0x03
     1aa:	9c 81       	ldd	r25, Y+4	; 0x04
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0xea>
     1b0:	9c 83       	std	Y+4, r25	; 0x04
     1b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1b4:	8d 81       	ldd	r24, Y+5	; 0x05
     1b6:	9e 81       	ldd	r25, Y+6	; 0x06
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	9e 83       	std	Y+6, r25	; 0x06
     1bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1be:	8d 81       	ldd	r24, Y+5	; 0x05
     1c0:	9e 81       	ldd	r25, Y+6	; 0x06
     1c2:	00 97       	sbiw	r24, 0x00	; 0
     1c4:	69 f7       	brne	.-38     	; 0x1a0 <main+0xde>
     1c6:	14 c0       	rjmp	.+40     	; 0x1f0 <main+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1c8:	6f 81       	ldd	r22, Y+7	; 0x07
     1ca:	78 85       	ldd	r23, Y+8	; 0x08
     1cc:	89 85       	ldd	r24, Y+9	; 0x09
     1ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     1d0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     1d4:	dc 01       	movw	r26, r24
     1d6:	cb 01       	movw	r24, r22
     1d8:	9e 83       	std	Y+6, r25	; 0x06
     1da:	8d 83       	std	Y+5, r24	; 0x05
     1dc:	8d 81       	ldd	r24, Y+5	; 0x05
     1de:	9e 81       	ldd	r25, Y+6	; 0x06
     1e0:	9a 83       	std	Y+2, r25	; 0x02
     1e2:	89 83       	std	Y+1, r24	; 0x01
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	9a 81       	ldd	r25, Y+2	; 0x02
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0x126>
     1ec:	9a 83       	std	Y+2, r25	; 0x02
     1ee:	89 83       	std	Y+1, r24	; 0x01

main(){
	DDRB=255;

	while(1){
		for(PORTB=1;;PORTB=PORTB*2){
     1f0:	a8 e3       	ldi	r26, 0x38	; 56
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	e8 e3       	ldi	r30, 0x38	; 56
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	88 2f       	mov	r24, r24
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	88 0f       	add	r24, r24
     200:	99 1f       	adc	r25, r25
     202:	8c 93       	st	X, r24
     204:	70 cf       	rjmp	.-288    	; 0xe6 <main+0x24>

00000206 <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     206:	df 93       	push	r29
     208:	cf 93       	push	r28
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	e9 97       	sbiw	r28, 0x39	; 57
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	89 af       	std	Y+57, r24	; 0x39

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     21c:	e5 e3       	ldi	r30, 0x35	; 53
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	89 ad       	ldd	r24, Y+57	; 0x39
     222:	80 7f       	andi	r24, 0xF0	; 240
     224:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     226:	a5 e3       	ldi	r26, 0x35	; 53
     228:	b0 e0       	ldi	r27, 0x00	; 0
     22a:	e5 e3       	ldi	r30, 0x35	; 53
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	81 60       	ori	r24, 0x01	; 1
     232:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     234:	a5 e3       	ldi	r26, 0x35	; 53
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	e5 e3       	ldi	r30, 0x35	; 53
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	84 60       	ori	r24, 0x04	; 4
     240:	8c 93       	st	X, r24
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	a0 e8       	ldi	r26, 0x80	; 128
     248:	bf e3       	ldi	r27, 0x3F	; 63
     24a:	8d ab       	std	Y+53, r24	; 0x35
     24c:	9e ab       	std	Y+54, r25	; 0x36
     24e:	af ab       	std	Y+55, r26	; 0x37
     250:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     252:	6d a9       	ldd	r22, Y+53	; 0x35
     254:	7e a9       	ldd	r23, Y+54	; 0x36
     256:	8f a9       	ldd	r24, Y+55	; 0x37
     258:	98 ad       	ldd	r25, Y+56	; 0x38
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	4a e7       	ldi	r20, 0x7A	; 122
     260:	54 e4       	ldi	r21, 0x44	; 68
     262:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     266:	dc 01       	movw	r26, r24
     268:	cb 01       	movw	r24, r22
     26a:	89 ab       	std	Y+49, r24	; 0x31
     26c:	9a ab       	std	Y+50, r25	; 0x32
     26e:	ab ab       	std	Y+51, r26	; 0x33
     270:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     272:	69 a9       	ldd	r22, Y+49	; 0x31
     274:	7a a9       	ldd	r23, Y+50	; 0x32
     276:	8b a9       	ldd	r24, Y+51	; 0x33
     278:	9c a9       	ldd	r25, Y+52	; 0x34
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e8       	ldi	r20, 0x80	; 128
     280:	5f e3       	ldi	r21, 0x3F	; 63
     282:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     286:	88 23       	and	r24, r24
     288:	2c f4       	brge	.+10     	; 0x294 <LCDsendChar+0x8e>
		__ticks = 1;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	98 ab       	std	Y+48, r25	; 0x30
     290:	8f a7       	std	Y+47, r24	; 0x2f
     292:	3f c0       	rjmp	.+126    	; 0x312 <LCDsendChar+0x10c>
	else if (__tmp > 65535)
     294:	69 a9       	ldd	r22, Y+49	; 0x31
     296:	7a a9       	ldd	r23, Y+50	; 0x32
     298:	8b a9       	ldd	r24, Y+51	; 0x33
     29a:	9c a9       	ldd	r25, Y+52	; 0x34
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	3f ef       	ldi	r19, 0xFF	; 255
     2a0:	4f e7       	ldi	r20, 0x7F	; 127
     2a2:	57 e4       	ldi	r21, 0x47	; 71
     2a4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     2a8:	18 16       	cp	r1, r24
     2aa:	4c f5       	brge	.+82     	; 0x2fe <LCDsendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2ac:	6d a9       	ldd	r22, Y+53	; 0x35
     2ae:	7e a9       	ldd	r23, Y+54	; 0x36
     2b0:	8f a9       	ldd	r24, Y+55	; 0x37
     2b2:	98 ad       	ldd	r25, Y+56	; 0x38
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	40 e2       	ldi	r20, 0x20	; 32
     2ba:	51 e4       	ldi	r21, 0x41	; 65
     2bc:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     2c0:	dc 01       	movw	r26, r24
     2c2:	cb 01       	movw	r24, r22
     2c4:	bc 01       	movw	r22, r24
     2c6:	cd 01       	movw	r24, r26
     2c8:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     2cc:	dc 01       	movw	r26, r24
     2ce:	cb 01       	movw	r24, r22
     2d0:	98 ab       	std	Y+48, r25	; 0x30
     2d2:	8f a7       	std	Y+47, r24	; 0x2f
     2d4:	0f c0       	rjmp	.+30     	; 0x2f4 <LCDsendChar+0xee>
     2d6:	84 e6       	ldi	r24, 0x64	; 100
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	9e a7       	std	Y+46, r25	; 0x2e
     2dc:	8d a7       	std	Y+45, r24	; 0x2d
     2de:	8d a5       	ldd	r24, Y+45	; 0x2d
     2e0:	9e a5       	ldd	r25, Y+46	; 0x2e
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCDsendChar+0xdc>
     2e6:	9e a7       	std	Y+46, r25	; 0x2e
     2e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2ea:	8f a5       	ldd	r24, Y+47	; 0x2f
     2ec:	98 a9       	ldd	r25, Y+48	; 0x30
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	98 ab       	std	Y+48, r25	; 0x30
     2f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2f4:	8f a5       	ldd	r24, Y+47	; 0x2f
     2f6:	98 a9       	ldd	r25, Y+48	; 0x30
     2f8:	00 97       	sbiw	r24, 0x00	; 0
     2fa:	69 f7       	brne	.-38     	; 0x2d6 <LCDsendChar+0xd0>
     2fc:	14 c0       	rjmp	.+40     	; 0x326 <LCDsendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2fe:	69 a9       	ldd	r22, Y+49	; 0x31
     300:	7a a9       	ldd	r23, Y+50	; 0x32
     302:	8b a9       	ldd	r24, Y+51	; 0x33
     304:	9c a9       	ldd	r25, Y+52	; 0x34
     306:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     30a:	dc 01       	movw	r26, r24
     30c:	cb 01       	movw	r24, r22
     30e:	98 ab       	std	Y+48, r25	; 0x30
     310:	8f a7       	std	Y+47, r24	; 0x2f
     312:	8f a5       	ldd	r24, Y+47	; 0x2f
     314:	98 a9       	ldd	r25, Y+48	; 0x30
     316:	9c a7       	std	Y+44, r25	; 0x2c
     318:	8b a7       	std	Y+43, r24	; 0x2b
     31a:	8b a5       	ldd	r24, Y+43	; 0x2b
     31c:	9c a5       	ldd	r25, Y+44	; 0x2c
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <LCDsendChar+0x118>
     322:	9c a7       	std	Y+44, r25	; 0x2c
     324:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     326:	a5 e3       	ldi	r26, 0x35	; 53
     328:	b0 e0       	ldi	r27, 0x00	; 0
     32a:	e5 e3       	ldi	r30, 0x35	; 53
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	8b 7f       	andi	r24, 0xFB	; 251
     332:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     334:	a5 e3       	ldi	r26, 0x35	; 53
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	e5 e3       	ldi	r30, 0x35	; 53
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	8e 7f       	andi	r24, 0xFE	; 254
     340:	8c 93       	st	X, r24
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	a0 e8       	ldi	r26, 0x80	; 128
     348:	bf e3       	ldi	r27, 0x3F	; 63
     34a:	8f a3       	std	Y+39, r24	; 0x27
     34c:	98 a7       	std	Y+40, r25	; 0x28
     34e:	a9 a7       	std	Y+41, r26	; 0x29
     350:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     352:	6f a1       	ldd	r22, Y+39	; 0x27
     354:	78 a5       	ldd	r23, Y+40	; 0x28
     356:	89 a5       	ldd	r24, Y+41	; 0x29
     358:	9a a5       	ldd	r25, Y+42	; 0x2a
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	4a e7       	ldi	r20, 0x7A	; 122
     360:	54 e4       	ldi	r21, 0x44	; 68
     362:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     366:	dc 01       	movw	r26, r24
     368:	cb 01       	movw	r24, r22
     36a:	8b a3       	std	Y+35, r24	; 0x23
     36c:	9c a3       	std	Y+36, r25	; 0x24
     36e:	ad a3       	std	Y+37, r26	; 0x25
     370:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     372:	6b a1       	ldd	r22, Y+35	; 0x23
     374:	7c a1       	ldd	r23, Y+36	; 0x24
     376:	8d a1       	ldd	r24, Y+37	; 0x25
     378:	9e a1       	ldd	r25, Y+38	; 0x26
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	40 e8       	ldi	r20, 0x80	; 128
     380:	5f e3       	ldi	r21, 0x3F	; 63
     382:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     386:	88 23       	and	r24, r24
     388:	2c f4       	brge	.+10     	; 0x394 <LCDsendChar+0x18e>
		__ticks = 1;
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	9a a3       	std	Y+34, r25	; 0x22
     390:	89 a3       	std	Y+33, r24	; 0x21
     392:	3f c0       	rjmp	.+126    	; 0x412 <LCDsendChar+0x20c>
	else if (__tmp > 65535)
     394:	6b a1       	ldd	r22, Y+35	; 0x23
     396:	7c a1       	ldd	r23, Y+36	; 0x24
     398:	8d a1       	ldd	r24, Y+37	; 0x25
     39a:	9e a1       	ldd	r25, Y+38	; 0x26
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	3f ef       	ldi	r19, 0xFF	; 255
     3a0:	4f e7       	ldi	r20, 0x7F	; 127
     3a2:	57 e4       	ldi	r21, 0x47	; 71
     3a4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     3a8:	18 16       	cp	r1, r24
     3aa:	4c f5       	brge	.+82     	; 0x3fe <LCDsendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3ac:	6f a1       	ldd	r22, Y+39	; 0x27
     3ae:	78 a5       	ldd	r23, Y+40	; 0x28
     3b0:	89 a5       	ldd	r24, Y+41	; 0x29
     3b2:	9a a5       	ldd	r25, Y+42	; 0x2a
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	40 e2       	ldi	r20, 0x20	; 32
     3ba:	51 e4       	ldi	r21, 0x41	; 65
     3bc:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     3c0:	dc 01       	movw	r26, r24
     3c2:	cb 01       	movw	r24, r22
     3c4:	bc 01       	movw	r22, r24
     3c6:	cd 01       	movw	r24, r26
     3c8:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     3cc:	dc 01       	movw	r26, r24
     3ce:	cb 01       	movw	r24, r22
     3d0:	9a a3       	std	Y+34, r25	; 0x22
     3d2:	89 a3       	std	Y+33, r24	; 0x21
     3d4:	0f c0       	rjmp	.+30     	; 0x3f4 <LCDsendChar+0x1ee>
     3d6:	84 e6       	ldi	r24, 0x64	; 100
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	98 a3       	std	Y+32, r25	; 0x20
     3dc:	8f 8f       	std	Y+31, r24	; 0x1f
     3de:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3e0:	98 a1       	ldd	r25, Y+32	; 0x20
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	f1 f7       	brne	.-4      	; 0x3e2 <LCDsendChar+0x1dc>
     3e6:	98 a3       	std	Y+32, r25	; 0x20
     3e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ea:	89 a1       	ldd	r24, Y+33	; 0x21
     3ec:	9a a1       	ldd	r25, Y+34	; 0x22
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	9a a3       	std	Y+34, r25	; 0x22
     3f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3f4:	89 a1       	ldd	r24, Y+33	; 0x21
     3f6:	9a a1       	ldd	r25, Y+34	; 0x22
     3f8:	00 97       	sbiw	r24, 0x00	; 0
     3fa:	69 f7       	brne	.-38     	; 0x3d6 <LCDsendChar+0x1d0>
     3fc:	14 c0       	rjmp	.+40     	; 0x426 <LCDsendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3fe:	6b a1       	ldd	r22, Y+35	; 0x23
     400:	7c a1       	ldd	r23, Y+36	; 0x24
     402:	8d a1       	ldd	r24, Y+37	; 0x25
     404:	9e a1       	ldd	r25, Y+38	; 0x26
     406:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	9a a3       	std	Y+34, r25	; 0x22
     410:	89 a3       	std	Y+33, r24	; 0x21
     412:	89 a1       	ldd	r24, Y+33	; 0x21
     414:	9a a1       	ldd	r25, Y+34	; 0x22
     416:	9e 8f       	std	Y+30, r25	; 0x1e
     418:	8d 8f       	std	Y+29, r24	; 0x1d
     41a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     41c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	f1 f7       	brne	.-4      	; 0x41e <LCDsendChar+0x218>
     422:	9e 8f       	std	Y+30, r25	; 0x1e
     424:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     426:	e5 e3       	ldi	r30, 0x35	; 53
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	89 ad       	ldd	r24, Y+57	; 0x39
     42c:	88 2f       	mov	r24, r24
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	82 95       	swap	r24
     432:	92 95       	swap	r25
     434:	90 7f       	andi	r25, 0xF0	; 240
     436:	98 27       	eor	r25, r24
     438:	80 7f       	andi	r24, 0xF0	; 240
     43a:	98 27       	eor	r25, r24
     43c:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     43e:	a5 e3       	ldi	r26, 0x35	; 53
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e3       	ldi	r30, 0x35	; 53
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	81 60       	ori	r24, 0x01	; 1
     44a:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     44c:	a5 e3       	ldi	r26, 0x35	; 53
     44e:	b0 e0       	ldi	r27, 0x00	; 0
     450:	e5 e3       	ldi	r30, 0x35	; 53
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	84 60       	ori	r24, 0x04	; 4
     458:	8c 93       	st	X, r24
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	a0 e8       	ldi	r26, 0x80	; 128
     460:	bf e3       	ldi	r27, 0x3F	; 63
     462:	89 8f       	std	Y+25, r24	; 0x19
     464:	9a 8f       	std	Y+26, r25	; 0x1a
     466:	ab 8f       	std	Y+27, r26	; 0x1b
     468:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     46a:	69 8d       	ldd	r22, Y+25	; 0x19
     46c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     46e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     470:	9c 8d       	ldd	r25, Y+28	; 0x1c
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	4a e7       	ldi	r20, 0x7A	; 122
     478:	54 e4       	ldi	r21, 0x44	; 68
     47a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     47e:	dc 01       	movw	r26, r24
     480:	cb 01       	movw	r24, r22
     482:	8d 8b       	std	Y+21, r24	; 0x15
     484:	9e 8b       	std	Y+22, r25	; 0x16
     486:	af 8b       	std	Y+23, r26	; 0x17
     488:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     48a:	6d 89       	ldd	r22, Y+21	; 0x15
     48c:	7e 89       	ldd	r23, Y+22	; 0x16
     48e:	8f 89       	ldd	r24, Y+23	; 0x17
     490:	98 8d       	ldd	r25, Y+24	; 0x18
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	40 e8       	ldi	r20, 0x80	; 128
     498:	5f e3       	ldi	r21, 0x3F	; 63
     49a:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     49e:	88 23       	and	r24, r24
     4a0:	2c f4       	brge	.+10     	; 0x4ac <__stack+0x4d>
		__ticks = 1;
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	9c 8b       	std	Y+20, r25	; 0x14
     4a8:	8b 8b       	std	Y+19, r24	; 0x13
     4aa:	3f c0       	rjmp	.+126    	; 0x52a <__stack+0xcb>
	else if (__tmp > 65535)
     4ac:	6d 89       	ldd	r22, Y+21	; 0x15
     4ae:	7e 89       	ldd	r23, Y+22	; 0x16
     4b0:	8f 89       	ldd	r24, Y+23	; 0x17
     4b2:	98 8d       	ldd	r25, Y+24	; 0x18
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	3f ef       	ldi	r19, 0xFF	; 255
     4b8:	4f e7       	ldi	r20, 0x7F	; 127
     4ba:	57 e4       	ldi	r21, 0x47	; 71
     4bc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     4c0:	18 16       	cp	r1, r24
     4c2:	4c f5       	brge	.+82     	; 0x516 <__stack+0xb7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4c4:	69 8d       	ldd	r22, Y+25	; 0x19
     4c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     4c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	40 e2       	ldi	r20, 0x20	; 32
     4d2:	51 e4       	ldi	r21, 0x41	; 65
     4d4:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     4d8:	dc 01       	movw	r26, r24
     4da:	cb 01       	movw	r24, r22
     4dc:	bc 01       	movw	r22, r24
     4de:	cd 01       	movw	r24, r26
     4e0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     4e4:	dc 01       	movw	r26, r24
     4e6:	cb 01       	movw	r24, r22
     4e8:	9c 8b       	std	Y+20, r25	; 0x14
     4ea:	8b 8b       	std	Y+19, r24	; 0x13
     4ec:	0f c0       	rjmp	.+30     	; 0x50c <__stack+0xad>
     4ee:	84 e6       	ldi	r24, 0x64	; 100
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	9a 8b       	std	Y+18, r25	; 0x12
     4f4:	89 8b       	std	Y+17, r24	; 0x11
     4f6:	89 89       	ldd	r24, Y+17	; 0x11
     4f8:	9a 89       	ldd	r25, Y+18	; 0x12
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <__stack+0x9b>
     4fe:	9a 8b       	std	Y+18, r25	; 0x12
     500:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     502:	8b 89       	ldd	r24, Y+19	; 0x13
     504:	9c 89       	ldd	r25, Y+20	; 0x14
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	9c 8b       	std	Y+20, r25	; 0x14
     50a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     50c:	8b 89       	ldd	r24, Y+19	; 0x13
     50e:	9c 89       	ldd	r25, Y+20	; 0x14
     510:	00 97       	sbiw	r24, 0x00	; 0
     512:	69 f7       	brne	.-38     	; 0x4ee <__stack+0x8f>
     514:	14 c0       	rjmp	.+40     	; 0x53e <__stack+0xdf>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     516:	6d 89       	ldd	r22, Y+21	; 0x15
     518:	7e 89       	ldd	r23, Y+22	; 0x16
     51a:	8f 89       	ldd	r24, Y+23	; 0x17
     51c:	98 8d       	ldd	r25, Y+24	; 0x18
     51e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     522:	dc 01       	movw	r26, r24
     524:	cb 01       	movw	r24, r22
     526:	9c 8b       	std	Y+20, r25	; 0x14
     528:	8b 8b       	std	Y+19, r24	; 0x13
     52a:	8b 89       	ldd	r24, Y+19	; 0x13
     52c:	9c 89       	ldd	r25, Y+20	; 0x14
     52e:	98 8b       	std	Y+16, r25	; 0x10
     530:	8f 87       	std	Y+15, r24	; 0x0f
     532:	8f 85       	ldd	r24, Y+15	; 0x0f
     534:	98 89       	ldd	r25, Y+16	; 0x10
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <__stack+0xd7>
     53a:	98 8b       	std	Y+16, r25	; 0x10
     53c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     53e:	a5 e3       	ldi	r26, 0x35	; 53
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	e5 e3       	ldi	r30, 0x35	; 53
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	80 81       	ld	r24, Z
     548:	8b 7f       	andi	r24, 0xFB	; 251
     54a:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     54c:	a5 e3       	ldi	r26, 0x35	; 53
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	e5 e3       	ldi	r30, 0x35	; 53
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	80 81       	ld	r24, Z
     556:	8e 7f       	andi	r24, 0xFE	; 254
     558:	8c 93       	st	X, r24
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	a0 e8       	ldi	r26, 0x80	; 128
     560:	bf e3       	ldi	r27, 0x3F	; 63
     562:	8b 87       	std	Y+11, r24	; 0x0b
     564:	9c 87       	std	Y+12, r25	; 0x0c
     566:	ad 87       	std	Y+13, r26	; 0x0d
     568:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     56a:	6b 85       	ldd	r22, Y+11	; 0x0b
     56c:	7c 85       	ldd	r23, Y+12	; 0x0c
     56e:	8d 85       	ldd	r24, Y+13	; 0x0d
     570:	9e 85       	ldd	r25, Y+14	; 0x0e
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	4a e7       	ldi	r20, 0x7A	; 122
     578:	54 e4       	ldi	r21, 0x44	; 68
     57a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	8f 83       	std	Y+7, r24	; 0x07
     584:	98 87       	std	Y+8, r25	; 0x08
     586:	a9 87       	std	Y+9, r26	; 0x09
     588:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     58a:	6f 81       	ldd	r22, Y+7	; 0x07
     58c:	78 85       	ldd	r23, Y+8	; 0x08
     58e:	89 85       	ldd	r24, Y+9	; 0x09
     590:	9a 85       	ldd	r25, Y+10	; 0x0a
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	40 e8       	ldi	r20, 0x80	; 128
     598:	5f e3       	ldi	r21, 0x3F	; 63
     59a:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     59e:	88 23       	and	r24, r24
     5a0:	2c f4       	brge	.+10     	; 0x5ac <__stack+0x14d>
		__ticks = 1;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	9e 83       	std	Y+6, r25	; 0x06
     5a8:	8d 83       	std	Y+5, r24	; 0x05
     5aa:	3f c0       	rjmp	.+126    	; 0x62a <__stack+0x1cb>
	else if (__tmp > 65535)
     5ac:	6f 81       	ldd	r22, Y+7	; 0x07
     5ae:	78 85       	ldd	r23, Y+8	; 0x08
     5b0:	89 85       	ldd	r24, Y+9	; 0x09
     5b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	3f ef       	ldi	r19, 0xFF	; 255
     5b8:	4f e7       	ldi	r20, 0x7F	; 127
     5ba:	57 e4       	ldi	r21, 0x47	; 71
     5bc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     5c0:	18 16       	cp	r1, r24
     5c2:	4c f5       	brge	.+82     	; 0x616 <__stack+0x1b7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5c4:	6b 85       	ldd	r22, Y+11	; 0x0b
     5c6:	7c 85       	ldd	r23, Y+12	; 0x0c
     5c8:	8d 85       	ldd	r24, Y+13	; 0x0d
     5ca:	9e 85       	ldd	r25, Y+14	; 0x0e
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e2       	ldi	r20, 0x20	; 32
     5d2:	51 e4       	ldi	r21, 0x41	; 65
     5d4:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     5d8:	dc 01       	movw	r26, r24
     5da:	cb 01       	movw	r24, r22
     5dc:	bc 01       	movw	r22, r24
     5de:	cd 01       	movw	r24, r26
     5e0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     5e4:	dc 01       	movw	r26, r24
     5e6:	cb 01       	movw	r24, r22
     5e8:	9e 83       	std	Y+6, r25	; 0x06
     5ea:	8d 83       	std	Y+5, r24	; 0x05
     5ec:	0f c0       	rjmp	.+30     	; 0x60c <__stack+0x1ad>
     5ee:	84 e6       	ldi	r24, 0x64	; 100
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	9c 83       	std	Y+4, r25	; 0x04
     5f4:	8b 83       	std	Y+3, r24	; 0x03
     5f6:	8b 81       	ldd	r24, Y+3	; 0x03
     5f8:	9c 81       	ldd	r25, Y+4	; 0x04
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <__stack+0x19b>
     5fe:	9c 83       	std	Y+4, r25	; 0x04
     600:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     602:	8d 81       	ldd	r24, Y+5	; 0x05
     604:	9e 81       	ldd	r25, Y+6	; 0x06
     606:	01 97       	sbiw	r24, 0x01	; 1
     608:	9e 83       	std	Y+6, r25	; 0x06
     60a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     60c:	8d 81       	ldd	r24, Y+5	; 0x05
     60e:	9e 81       	ldd	r25, Y+6	; 0x06
     610:	00 97       	sbiw	r24, 0x00	; 0
     612:	69 f7       	brne	.-38     	; 0x5ee <__stack+0x18f>
     614:	14 c0       	rjmp	.+40     	; 0x63e <__stack+0x1df>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     616:	6f 81       	ldd	r22, Y+7	; 0x07
     618:	78 85       	ldd	r23, Y+8	; 0x08
     61a:	89 85       	ldd	r24, Y+9	; 0x09
     61c:	9a 85       	ldd	r25, Y+10	; 0x0a
     61e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     622:	dc 01       	movw	r26, r24
     624:	cb 01       	movw	r24, r22
     626:	9e 83       	std	Y+6, r25	; 0x06
     628:	8d 83       	std	Y+5, r24	; 0x05
     62a:	8d 81       	ldd	r24, Y+5	; 0x05
     62c:	9e 81       	ldd	r25, Y+6	; 0x06
     62e:	9a 83       	std	Y+2, r25	; 0x02
     630:	89 83       	std	Y+1, r24	; 0x01
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	9a 81       	ldd	r25, Y+2	; 0x02
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <__stack+0x1d7>
     63a:	9a 83       	std	Y+2, r25	; 0x02
     63c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     63e:	e9 96       	adiw	r28, 0x39	; 57
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	cf 91       	pop	r28
     64c:	df 91       	pop	r29
     64e:	08 95       	ret

00000650 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     650:	df 93       	push	r29
     652:	cf 93       	push	r28
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	e9 97       	sbiw	r28, 0x39	; 57
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	89 af       	std	Y+57, r24	; 0x39
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     666:	e5 e3       	ldi	r30, 0x35	; 53
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	89 ad       	ldd	r24, Y+57	; 0x39
     66c:	80 7f       	andi	r24, 0xF0	; 240
     66e:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     670:	a5 e3       	ldi	r26, 0x35	; 53
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	e5 e3       	ldi	r30, 0x35	; 53
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	84 60       	ori	r24, 0x04	; 4
     67c:	8c 93       	st	X, r24
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	a0 e8       	ldi	r26, 0x80	; 128
     684:	bf e3       	ldi	r27, 0x3F	; 63
     686:	8d ab       	std	Y+53, r24	; 0x35
     688:	9e ab       	std	Y+54, r25	; 0x36
     68a:	af ab       	std	Y+55, r26	; 0x37
     68c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     68e:	6d a9       	ldd	r22, Y+53	; 0x35
     690:	7e a9       	ldd	r23, Y+54	; 0x36
     692:	8f a9       	ldd	r24, Y+55	; 0x37
     694:	98 ad       	ldd	r25, Y+56	; 0x38
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	4a e7       	ldi	r20, 0x7A	; 122
     69c:	54 e4       	ldi	r21, 0x44	; 68
     69e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     6a2:	dc 01       	movw	r26, r24
     6a4:	cb 01       	movw	r24, r22
     6a6:	89 ab       	std	Y+49, r24	; 0x31
     6a8:	9a ab       	std	Y+50, r25	; 0x32
     6aa:	ab ab       	std	Y+51, r26	; 0x33
     6ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     6ae:	69 a9       	ldd	r22, Y+49	; 0x31
     6b0:	7a a9       	ldd	r23, Y+50	; 0x32
     6b2:	8b a9       	ldd	r24, Y+51	; 0x33
     6b4:	9c a9       	ldd	r25, Y+52	; 0x34
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e8       	ldi	r20, 0x80	; 128
     6bc:	5f e3       	ldi	r21, 0x3F	; 63
     6be:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     6c2:	88 23       	and	r24, r24
     6c4:	2c f4       	brge	.+10     	; 0x6d0 <LCDsendCommand+0x80>
		__ticks = 1;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	98 ab       	std	Y+48, r25	; 0x30
     6cc:	8f a7       	std	Y+47, r24	; 0x2f
     6ce:	3f c0       	rjmp	.+126    	; 0x74e <LCDsendCommand+0xfe>
	else if (__tmp > 65535)
     6d0:	69 a9       	ldd	r22, Y+49	; 0x31
     6d2:	7a a9       	ldd	r23, Y+50	; 0x32
     6d4:	8b a9       	ldd	r24, Y+51	; 0x33
     6d6:	9c a9       	ldd	r25, Y+52	; 0x34
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	3f ef       	ldi	r19, 0xFF	; 255
     6dc:	4f e7       	ldi	r20, 0x7F	; 127
     6de:	57 e4       	ldi	r21, 0x47	; 71
     6e0:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     6e4:	18 16       	cp	r1, r24
     6e6:	4c f5       	brge	.+82     	; 0x73a <LCDsendCommand+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6e8:	6d a9       	ldd	r22, Y+53	; 0x35
     6ea:	7e a9       	ldd	r23, Y+54	; 0x36
     6ec:	8f a9       	ldd	r24, Y+55	; 0x37
     6ee:	98 ad       	ldd	r25, Y+56	; 0x38
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	40 e2       	ldi	r20, 0x20	; 32
     6f6:	51 e4       	ldi	r21, 0x41	; 65
     6f8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     6fc:	dc 01       	movw	r26, r24
     6fe:	cb 01       	movw	r24, r22
     700:	bc 01       	movw	r22, r24
     702:	cd 01       	movw	r24, r26
     704:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     708:	dc 01       	movw	r26, r24
     70a:	cb 01       	movw	r24, r22
     70c:	98 ab       	std	Y+48, r25	; 0x30
     70e:	8f a7       	std	Y+47, r24	; 0x2f
     710:	0f c0       	rjmp	.+30     	; 0x730 <LCDsendCommand+0xe0>
     712:	84 e6       	ldi	r24, 0x64	; 100
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	9e a7       	std	Y+46, r25	; 0x2e
     718:	8d a7       	std	Y+45, r24	; 0x2d
     71a:	8d a5       	ldd	r24, Y+45	; 0x2d
     71c:	9e a5       	ldd	r25, Y+46	; 0x2e
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	f1 f7       	brne	.-4      	; 0x71e <LCDsendCommand+0xce>
     722:	9e a7       	std	Y+46, r25	; 0x2e
     724:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     726:	8f a5       	ldd	r24, Y+47	; 0x2f
     728:	98 a9       	ldd	r25, Y+48	; 0x30
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	98 ab       	std	Y+48, r25	; 0x30
     72e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     730:	8f a5       	ldd	r24, Y+47	; 0x2f
     732:	98 a9       	ldd	r25, Y+48	; 0x30
     734:	00 97       	sbiw	r24, 0x00	; 0
     736:	69 f7       	brne	.-38     	; 0x712 <LCDsendCommand+0xc2>
     738:	14 c0       	rjmp	.+40     	; 0x762 <LCDsendCommand+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     73a:	69 a9       	ldd	r22, Y+49	; 0x31
     73c:	7a a9       	ldd	r23, Y+50	; 0x32
     73e:	8b a9       	ldd	r24, Y+51	; 0x33
     740:	9c a9       	ldd	r25, Y+52	; 0x34
     742:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     746:	dc 01       	movw	r26, r24
     748:	cb 01       	movw	r24, r22
     74a:	98 ab       	std	Y+48, r25	; 0x30
     74c:	8f a7       	std	Y+47, r24	; 0x2f
     74e:	8f a5       	ldd	r24, Y+47	; 0x2f
     750:	98 a9       	ldd	r25, Y+48	; 0x30
     752:	9c a7       	std	Y+44, r25	; 0x2c
     754:	8b a7       	std	Y+43, r24	; 0x2b
     756:	8b a5       	ldd	r24, Y+43	; 0x2b
     758:	9c a5       	ldd	r25, Y+44	; 0x2c
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <LCDsendCommand+0x10a>
     75e:	9c a7       	std	Y+44, r25	; 0x2c
     760:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     762:	a5 e3       	ldi	r26, 0x35	; 53
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	e5 e3       	ldi	r30, 0x35	; 53
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	8b 7f       	andi	r24, 0xFB	; 251
     76e:	8c 93       	st	X, r24
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	a0 e8       	ldi	r26, 0x80	; 128
     776:	bf e3       	ldi	r27, 0x3F	; 63
     778:	8f a3       	std	Y+39, r24	; 0x27
     77a:	98 a7       	std	Y+40, r25	; 0x28
     77c:	a9 a7       	std	Y+41, r26	; 0x29
     77e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     780:	6f a1       	ldd	r22, Y+39	; 0x27
     782:	78 a5       	ldd	r23, Y+40	; 0x28
     784:	89 a5       	ldd	r24, Y+41	; 0x29
     786:	9a a5       	ldd	r25, Y+42	; 0x2a
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	4a e7       	ldi	r20, 0x7A	; 122
     78e:	54 e4       	ldi	r21, 0x44	; 68
     790:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     794:	dc 01       	movw	r26, r24
     796:	cb 01       	movw	r24, r22
     798:	8b a3       	std	Y+35, r24	; 0x23
     79a:	9c a3       	std	Y+36, r25	; 0x24
     79c:	ad a3       	std	Y+37, r26	; 0x25
     79e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     7a0:	6b a1       	ldd	r22, Y+35	; 0x23
     7a2:	7c a1       	ldd	r23, Y+36	; 0x24
     7a4:	8d a1       	ldd	r24, Y+37	; 0x25
     7a6:	9e a1       	ldd	r25, Y+38	; 0x26
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	40 e8       	ldi	r20, 0x80	; 128
     7ae:	5f e3       	ldi	r21, 0x3F	; 63
     7b0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     7b4:	88 23       	and	r24, r24
     7b6:	2c f4       	brge	.+10     	; 0x7c2 <LCDsendCommand+0x172>
		__ticks = 1;
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	9a a3       	std	Y+34, r25	; 0x22
     7be:	89 a3       	std	Y+33, r24	; 0x21
     7c0:	3f c0       	rjmp	.+126    	; 0x840 <LCDsendCommand+0x1f0>
	else if (__tmp > 65535)
     7c2:	6b a1       	ldd	r22, Y+35	; 0x23
     7c4:	7c a1       	ldd	r23, Y+36	; 0x24
     7c6:	8d a1       	ldd	r24, Y+37	; 0x25
     7c8:	9e a1       	ldd	r25, Y+38	; 0x26
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	3f ef       	ldi	r19, 0xFF	; 255
     7ce:	4f e7       	ldi	r20, 0x7F	; 127
     7d0:	57 e4       	ldi	r21, 0x47	; 71
     7d2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     7d6:	18 16       	cp	r1, r24
     7d8:	4c f5       	brge	.+82     	; 0x82c <LCDsendCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7da:	6f a1       	ldd	r22, Y+39	; 0x27
     7dc:	78 a5       	ldd	r23, Y+40	; 0x28
     7de:	89 a5       	ldd	r24, Y+41	; 0x29
     7e0:	9a a5       	ldd	r25, Y+42	; 0x2a
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e2       	ldi	r20, 0x20	; 32
     7e8:	51 e4       	ldi	r21, 0x41	; 65
     7ea:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     7ee:	dc 01       	movw	r26, r24
     7f0:	cb 01       	movw	r24, r22
     7f2:	bc 01       	movw	r22, r24
     7f4:	cd 01       	movw	r24, r26
     7f6:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     7fa:	dc 01       	movw	r26, r24
     7fc:	cb 01       	movw	r24, r22
     7fe:	9a a3       	std	Y+34, r25	; 0x22
     800:	89 a3       	std	Y+33, r24	; 0x21
     802:	0f c0       	rjmp	.+30     	; 0x822 <LCDsendCommand+0x1d2>
     804:	84 e6       	ldi	r24, 0x64	; 100
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	98 a3       	std	Y+32, r25	; 0x20
     80a:	8f 8f       	std	Y+31, r24	; 0x1f
     80c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     80e:	98 a1       	ldd	r25, Y+32	; 0x20
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	f1 f7       	brne	.-4      	; 0x810 <LCDsendCommand+0x1c0>
     814:	98 a3       	std	Y+32, r25	; 0x20
     816:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     818:	89 a1       	ldd	r24, Y+33	; 0x21
     81a:	9a a1       	ldd	r25, Y+34	; 0x22
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	9a a3       	std	Y+34, r25	; 0x22
     820:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     822:	89 a1       	ldd	r24, Y+33	; 0x21
     824:	9a a1       	ldd	r25, Y+34	; 0x22
     826:	00 97       	sbiw	r24, 0x00	; 0
     828:	69 f7       	brne	.-38     	; 0x804 <LCDsendCommand+0x1b4>
     82a:	14 c0       	rjmp	.+40     	; 0x854 <LCDsendCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     82c:	6b a1       	ldd	r22, Y+35	; 0x23
     82e:	7c a1       	ldd	r23, Y+36	; 0x24
     830:	8d a1       	ldd	r24, Y+37	; 0x25
     832:	9e a1       	ldd	r25, Y+38	; 0x26
     834:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	9a a3       	std	Y+34, r25	; 0x22
     83e:	89 a3       	std	Y+33, r24	; 0x21
     840:	89 a1       	ldd	r24, Y+33	; 0x21
     842:	9a a1       	ldd	r25, Y+34	; 0x22
     844:	9e 8f       	std	Y+30, r25	; 0x1e
     846:	8d 8f       	std	Y+29, r24	; 0x1d
     848:	8d 8d       	ldd	r24, Y+29	; 0x1d
     84a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	f1 f7       	brne	.-4      	; 0x84c <LCDsendCommand+0x1fc>
     850:	9e 8f       	std	Y+30, r25	; 0x1e
     852:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     854:	e5 e3       	ldi	r30, 0x35	; 53
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	89 ad       	ldd	r24, Y+57	; 0x39
     85a:	88 2f       	mov	r24, r24
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	82 95       	swap	r24
     860:	92 95       	swap	r25
     862:	90 7f       	andi	r25, 0xF0	; 240
     864:	98 27       	eor	r25, r24
     866:	80 7f       	andi	r24, 0xF0	; 240
     868:	98 27       	eor	r25, r24
     86a:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     86c:	a5 e3       	ldi	r26, 0x35	; 53
     86e:	b0 e0       	ldi	r27, 0x00	; 0
     870:	e5 e3       	ldi	r30, 0x35	; 53
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	84 60       	ori	r24, 0x04	; 4
     878:	8c 93       	st	X, r24
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	a0 e8       	ldi	r26, 0x80	; 128
     880:	bf e3       	ldi	r27, 0x3F	; 63
     882:	89 8f       	std	Y+25, r24	; 0x19
     884:	9a 8f       	std	Y+26, r25	; 0x1a
     886:	ab 8f       	std	Y+27, r26	; 0x1b
     888:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     88a:	69 8d       	ldd	r22, Y+25	; 0x19
     88c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     88e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     890:	9c 8d       	ldd	r25, Y+28	; 0x1c
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	4a e7       	ldi	r20, 0x7A	; 122
     898:	54 e4       	ldi	r21, 0x44	; 68
     89a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     89e:	dc 01       	movw	r26, r24
     8a0:	cb 01       	movw	r24, r22
     8a2:	8d 8b       	std	Y+21, r24	; 0x15
     8a4:	9e 8b       	std	Y+22, r25	; 0x16
     8a6:	af 8b       	std	Y+23, r26	; 0x17
     8a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     8aa:	6d 89       	ldd	r22, Y+21	; 0x15
     8ac:	7e 89       	ldd	r23, Y+22	; 0x16
     8ae:	8f 89       	ldd	r24, Y+23	; 0x17
     8b0:	98 8d       	ldd	r25, Y+24	; 0x18
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e8       	ldi	r20, 0x80	; 128
     8b8:	5f e3       	ldi	r21, 0x3F	; 63
     8ba:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     8be:	88 23       	and	r24, r24
     8c0:	2c f4       	brge	.+10     	; 0x8cc <LCDsendCommand+0x27c>
		__ticks = 1;
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	9c 8b       	std	Y+20, r25	; 0x14
     8c8:	8b 8b       	std	Y+19, r24	; 0x13
     8ca:	3f c0       	rjmp	.+126    	; 0x94a <LCDsendCommand+0x2fa>
	else if (__tmp > 65535)
     8cc:	6d 89       	ldd	r22, Y+21	; 0x15
     8ce:	7e 89       	ldd	r23, Y+22	; 0x16
     8d0:	8f 89       	ldd	r24, Y+23	; 0x17
     8d2:	98 8d       	ldd	r25, Y+24	; 0x18
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	3f ef       	ldi	r19, 0xFF	; 255
     8d8:	4f e7       	ldi	r20, 0x7F	; 127
     8da:	57 e4       	ldi	r21, 0x47	; 71
     8dc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     8e0:	18 16       	cp	r1, r24
     8e2:	4c f5       	brge	.+82     	; 0x936 <LCDsendCommand+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8e4:	69 8d       	ldd	r22, Y+25	; 0x19
     8e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	40 e2       	ldi	r20, 0x20	; 32
     8f2:	51 e4       	ldi	r21, 0x41	; 65
     8f4:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     8f8:	dc 01       	movw	r26, r24
     8fa:	cb 01       	movw	r24, r22
     8fc:	bc 01       	movw	r22, r24
     8fe:	cd 01       	movw	r24, r26
     900:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     904:	dc 01       	movw	r26, r24
     906:	cb 01       	movw	r24, r22
     908:	9c 8b       	std	Y+20, r25	; 0x14
     90a:	8b 8b       	std	Y+19, r24	; 0x13
     90c:	0f c0       	rjmp	.+30     	; 0x92c <LCDsendCommand+0x2dc>
     90e:	84 e6       	ldi	r24, 0x64	; 100
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	9a 8b       	std	Y+18, r25	; 0x12
     914:	89 8b       	std	Y+17, r24	; 0x11
     916:	89 89       	ldd	r24, Y+17	; 0x11
     918:	9a 89       	ldd	r25, Y+18	; 0x12
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	f1 f7       	brne	.-4      	; 0x91a <LCDsendCommand+0x2ca>
     91e:	9a 8b       	std	Y+18, r25	; 0x12
     920:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     922:	8b 89       	ldd	r24, Y+19	; 0x13
     924:	9c 89       	ldd	r25, Y+20	; 0x14
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	9c 8b       	std	Y+20, r25	; 0x14
     92a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     92c:	8b 89       	ldd	r24, Y+19	; 0x13
     92e:	9c 89       	ldd	r25, Y+20	; 0x14
     930:	00 97       	sbiw	r24, 0x00	; 0
     932:	69 f7       	brne	.-38     	; 0x90e <LCDsendCommand+0x2be>
     934:	14 c0       	rjmp	.+40     	; 0x95e <LCDsendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     936:	6d 89       	ldd	r22, Y+21	; 0x15
     938:	7e 89       	ldd	r23, Y+22	; 0x16
     93a:	8f 89       	ldd	r24, Y+23	; 0x17
     93c:	98 8d       	ldd	r25, Y+24	; 0x18
     93e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     942:	dc 01       	movw	r26, r24
     944:	cb 01       	movw	r24, r22
     946:	9c 8b       	std	Y+20, r25	; 0x14
     948:	8b 8b       	std	Y+19, r24	; 0x13
     94a:	8b 89       	ldd	r24, Y+19	; 0x13
     94c:	9c 89       	ldd	r25, Y+20	; 0x14
     94e:	98 8b       	std	Y+16, r25	; 0x10
     950:	8f 87       	std	Y+15, r24	; 0x0f
     952:	8f 85       	ldd	r24, Y+15	; 0x0f
     954:	98 89       	ldd	r25, Y+16	; 0x10
     956:	01 97       	sbiw	r24, 0x01	; 1
     958:	f1 f7       	brne	.-4      	; 0x956 <LCDsendCommand+0x306>
     95a:	98 8b       	std	Y+16, r25	; 0x10
     95c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     95e:	a5 e3       	ldi	r26, 0x35	; 53
     960:	b0 e0       	ldi	r27, 0x00	; 0
     962:	e5 e3       	ldi	r30, 0x35	; 53
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	80 81       	ld	r24, Z
     968:	8b 7f       	andi	r24, 0xFB	; 251
     96a:	8c 93       	st	X, r24
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	a0 e8       	ldi	r26, 0x80	; 128
     972:	bf e3       	ldi	r27, 0x3F	; 63
     974:	8b 87       	std	Y+11, r24	; 0x0b
     976:	9c 87       	std	Y+12, r25	; 0x0c
     978:	ad 87       	std	Y+13, r26	; 0x0d
     97a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     97c:	6b 85       	ldd	r22, Y+11	; 0x0b
     97e:	7c 85       	ldd	r23, Y+12	; 0x0c
     980:	8d 85       	ldd	r24, Y+13	; 0x0d
     982:	9e 85       	ldd	r25, Y+14	; 0x0e
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	4a e7       	ldi	r20, 0x7A	; 122
     98a:	54 e4       	ldi	r21, 0x44	; 68
     98c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     990:	dc 01       	movw	r26, r24
     992:	cb 01       	movw	r24, r22
     994:	8f 83       	std	Y+7, r24	; 0x07
     996:	98 87       	std	Y+8, r25	; 0x08
     998:	a9 87       	std	Y+9, r26	; 0x09
     99a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     99c:	6f 81       	ldd	r22, Y+7	; 0x07
     99e:	78 85       	ldd	r23, Y+8	; 0x08
     9a0:	89 85       	ldd	r24, Y+9	; 0x09
     9a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	40 e8       	ldi	r20, 0x80	; 128
     9aa:	5f e3       	ldi	r21, 0x3F	; 63
     9ac:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     9b0:	88 23       	and	r24, r24
     9b2:	2c f4       	brge	.+10     	; 0x9be <LCDsendCommand+0x36e>
		__ticks = 1;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	9e 83       	std	Y+6, r25	; 0x06
     9ba:	8d 83       	std	Y+5, r24	; 0x05
     9bc:	3f c0       	rjmp	.+126    	; 0xa3c <LCDsendCommand+0x3ec>
	else if (__tmp > 65535)
     9be:	6f 81       	ldd	r22, Y+7	; 0x07
     9c0:	78 85       	ldd	r23, Y+8	; 0x08
     9c2:	89 85       	ldd	r24, Y+9	; 0x09
     9c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	3f ef       	ldi	r19, 0xFF	; 255
     9ca:	4f e7       	ldi	r20, 0x7F	; 127
     9cc:	57 e4       	ldi	r21, 0x47	; 71
     9ce:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     9d2:	18 16       	cp	r1, r24
     9d4:	4c f5       	brge	.+82     	; 0xa28 <LCDsendCommand+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9d6:	6b 85       	ldd	r22, Y+11	; 0x0b
     9d8:	7c 85       	ldd	r23, Y+12	; 0x0c
     9da:	8d 85       	ldd	r24, Y+13	; 0x0d
     9dc:	9e 85       	ldd	r25, Y+14	; 0x0e
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e2       	ldi	r20, 0x20	; 32
     9e4:	51 e4       	ldi	r21, 0x41	; 65
     9e6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     9ea:	dc 01       	movw	r26, r24
     9ec:	cb 01       	movw	r24, r22
     9ee:	bc 01       	movw	r22, r24
     9f0:	cd 01       	movw	r24, r26
     9f2:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     9f6:	dc 01       	movw	r26, r24
     9f8:	cb 01       	movw	r24, r22
     9fa:	9e 83       	std	Y+6, r25	; 0x06
     9fc:	8d 83       	std	Y+5, r24	; 0x05
     9fe:	0f c0       	rjmp	.+30     	; 0xa1e <LCDsendCommand+0x3ce>
     a00:	84 e6       	ldi	r24, 0x64	; 100
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	9c 83       	std	Y+4, r25	; 0x04
     a06:	8b 83       	std	Y+3, r24	; 0x03
     a08:	8b 81       	ldd	r24, Y+3	; 0x03
     a0a:	9c 81       	ldd	r25, Y+4	; 0x04
     a0c:	01 97       	sbiw	r24, 0x01	; 1
     a0e:	f1 f7       	brne	.-4      	; 0xa0c <LCDsendCommand+0x3bc>
     a10:	9c 83       	std	Y+4, r25	; 0x04
     a12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a14:	8d 81       	ldd	r24, Y+5	; 0x05
     a16:	9e 81       	ldd	r25, Y+6	; 0x06
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	9e 83       	std	Y+6, r25	; 0x06
     a1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a1e:	8d 81       	ldd	r24, Y+5	; 0x05
     a20:	9e 81       	ldd	r25, Y+6	; 0x06
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	69 f7       	brne	.-38     	; 0xa00 <LCDsendCommand+0x3b0>
     a26:	14 c0       	rjmp	.+40     	; 0xa50 <LCDsendCommand+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a28:	6f 81       	ldd	r22, Y+7	; 0x07
     a2a:	78 85       	ldd	r23, Y+8	; 0x08
     a2c:	89 85       	ldd	r24, Y+9	; 0x09
     a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a30:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     a34:	dc 01       	movw	r26, r24
     a36:	cb 01       	movw	r24, r22
     a38:	9e 83       	std	Y+6, r25	; 0x06
     a3a:	8d 83       	std	Y+5, r24	; 0x05
     a3c:	8d 81       	ldd	r24, Y+5	; 0x05
     a3e:	9e 81       	ldd	r25, Y+6	; 0x06
     a40:	9a 83       	std	Y+2, r25	; 0x02
     a42:	89 83       	std	Y+1, r24	; 0x01
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	f1 f7       	brne	.-4      	; 0xa48 <LCDsendCommand+0x3f8>
     a4c:	9a 83       	std	Y+2, r25	; 0x02
     a4e:	89 83       	std	Y+1, r24	; 0x01
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     a50:	e9 96       	adiw	r28, 0x39	; 57
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	cf 91       	pop	r28
     a5e:	df 91       	pop	r29
     a60:	08 95       	ret

00000a62 <LCDinit>:
void LCDinit(void)//Initializes LCD
{
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	df 93       	push	r29
     a68:	cf 93       	push	r28
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
     a6e:	c4 56       	subi	r28, 0x64	; 100
     a70:	d0 40       	sbci	r29, 0x00	; 0
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	fe 01       	movw	r30, r28
     a7e:	e1 5a       	subi	r30, 0xA1	; 161
     a80:	ff 4f       	sbci	r31, 0xFF	; 255
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	a0 e7       	ldi	r26, 0x70	; 112
     a88:	b1 e4       	ldi	r27, 0x41	; 65
     a8a:	80 83       	st	Z, r24
     a8c:	91 83       	std	Z+1, r25	; 0x01
     a8e:	a2 83       	std	Z+2, r26	; 0x02
     a90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a92:	8e 01       	movw	r16, r28
     a94:	05 5a       	subi	r16, 0xA5	; 165
     a96:	1f 4f       	sbci	r17, 0xFF	; 255
     a98:	fe 01       	movw	r30, r28
     a9a:	e1 5a       	subi	r30, 0xA1	; 161
     a9c:	ff 4f       	sbci	r31, 0xFF	; 255
     a9e:	60 81       	ld	r22, Z
     aa0:	71 81       	ldd	r23, Z+1	; 0x01
     aa2:	82 81       	ldd	r24, Z+2	; 0x02
     aa4:	93 81       	ldd	r25, Z+3	; 0x03
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	4a e7       	ldi	r20, 0x7A	; 122
     aac:	54 e4       	ldi	r21, 0x44	; 68
     aae:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     ab2:	dc 01       	movw	r26, r24
     ab4:	cb 01       	movw	r24, r22
     ab6:	f8 01       	movw	r30, r16
     ab8:	80 83       	st	Z, r24
     aba:	91 83       	std	Z+1, r25	; 0x01
     abc:	a2 83       	std	Z+2, r26	; 0x02
     abe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ac0:	fe 01       	movw	r30, r28
     ac2:	e5 5a       	subi	r30, 0xA5	; 165
     ac4:	ff 4f       	sbci	r31, 0xFF	; 255
     ac6:	60 81       	ld	r22, Z
     ac8:	71 81       	ldd	r23, Z+1	; 0x01
     aca:	82 81       	ldd	r24, Z+2	; 0x02
     acc:	93 81       	ldd	r25, Z+3	; 0x03
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	40 e8       	ldi	r20, 0x80	; 128
     ad4:	5f e3       	ldi	r21, 0x3F	; 63
     ad6:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     ada:	88 23       	and	r24, r24
     adc:	44 f4       	brge	.+16     	; 0xaee <LCDinit+0x8c>
		__ticks = 1;
     ade:	fe 01       	movw	r30, r28
     ae0:	e7 5a       	subi	r30, 0xA7	; 167
     ae2:	ff 4f       	sbci	r31, 0xFF	; 255
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	91 83       	std	Z+1, r25	; 0x01
     aea:	80 83       	st	Z, r24
     aec:	64 c0       	rjmp	.+200    	; 0xbb6 <LCDinit+0x154>
	else if (__tmp > 65535)
     aee:	fe 01       	movw	r30, r28
     af0:	e5 5a       	subi	r30, 0xA5	; 165
     af2:	ff 4f       	sbci	r31, 0xFF	; 255
     af4:	60 81       	ld	r22, Z
     af6:	71 81       	ldd	r23, Z+1	; 0x01
     af8:	82 81       	ldd	r24, Z+2	; 0x02
     afa:	93 81       	ldd	r25, Z+3	; 0x03
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	3f ef       	ldi	r19, 0xFF	; 255
     b00:	4f e7       	ldi	r20, 0x7F	; 127
     b02:	57 e4       	ldi	r21, 0x47	; 71
     b04:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     b08:	18 16       	cp	r1, r24
     b0a:	0c f0       	brlt	.+2      	; 0xb0e <LCDinit+0xac>
     b0c:	43 c0       	rjmp	.+134    	; 0xb94 <LCDinit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b0e:	fe 01       	movw	r30, r28
     b10:	e1 5a       	subi	r30, 0xA1	; 161
     b12:	ff 4f       	sbci	r31, 0xFF	; 255
     b14:	60 81       	ld	r22, Z
     b16:	71 81       	ldd	r23, Z+1	; 0x01
     b18:	82 81       	ldd	r24, Z+2	; 0x02
     b1a:	93 81       	ldd	r25, Z+3	; 0x03
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e2       	ldi	r20, 0x20	; 32
     b22:	51 e4       	ldi	r21, 0x41	; 65
     b24:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     b28:	dc 01       	movw	r26, r24
     b2a:	cb 01       	movw	r24, r22
     b2c:	8e 01       	movw	r16, r28
     b2e:	07 5a       	subi	r16, 0xA7	; 167
     b30:	1f 4f       	sbci	r17, 0xFF	; 255
     b32:	bc 01       	movw	r22, r24
     b34:	cd 01       	movw	r24, r26
     b36:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     b3a:	dc 01       	movw	r26, r24
     b3c:	cb 01       	movw	r24, r22
     b3e:	f8 01       	movw	r30, r16
     b40:	91 83       	std	Z+1, r25	; 0x01
     b42:	80 83       	st	Z, r24
     b44:	1f c0       	rjmp	.+62     	; 0xb84 <LCDinit+0x122>
     b46:	fe 01       	movw	r30, r28
     b48:	e9 5a       	subi	r30, 0xA9	; 169
     b4a:	ff 4f       	sbci	r31, 0xFF	; 255
     b4c:	84 e6       	ldi	r24, 0x64	; 100
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	91 83       	std	Z+1, r25	; 0x01
     b52:	80 83       	st	Z, r24
     b54:	fe 01       	movw	r30, r28
     b56:	e9 5a       	subi	r30, 0xA9	; 169
     b58:	ff 4f       	sbci	r31, 0xFF	; 255
     b5a:	80 81       	ld	r24, Z
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	01 97       	sbiw	r24, 0x01	; 1
     b60:	f1 f7       	brne	.-4      	; 0xb5e <LCDinit+0xfc>
     b62:	fe 01       	movw	r30, r28
     b64:	e9 5a       	subi	r30, 0xA9	; 169
     b66:	ff 4f       	sbci	r31, 0xFF	; 255
     b68:	91 83       	std	Z+1, r25	; 0x01
     b6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b6c:	de 01       	movw	r26, r28
     b6e:	a7 5a       	subi	r26, 0xA7	; 167
     b70:	bf 4f       	sbci	r27, 0xFF	; 255
     b72:	fe 01       	movw	r30, r28
     b74:	e7 5a       	subi	r30, 0xA7	; 167
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	91 81       	ldd	r25, Z+1	; 0x01
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	11 96       	adiw	r26, 0x01	; 1
     b80:	9c 93       	st	X, r25
     b82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b84:	fe 01       	movw	r30, r28
     b86:	e7 5a       	subi	r30, 0xA7	; 167
     b88:	ff 4f       	sbci	r31, 0xFF	; 255
     b8a:	80 81       	ld	r24, Z
     b8c:	91 81       	ldd	r25, Z+1	; 0x01
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	d1 f6       	brne	.-76     	; 0xb46 <LCDinit+0xe4>
     b92:	27 c0       	rjmp	.+78     	; 0xbe2 <LCDinit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b94:	8e 01       	movw	r16, r28
     b96:	07 5a       	subi	r16, 0xA7	; 167
     b98:	1f 4f       	sbci	r17, 0xFF	; 255
     b9a:	fe 01       	movw	r30, r28
     b9c:	e5 5a       	subi	r30, 0xA5	; 165
     b9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ba0:	60 81       	ld	r22, Z
     ba2:	71 81       	ldd	r23, Z+1	; 0x01
     ba4:	82 81       	ldd	r24, Z+2	; 0x02
     ba6:	93 81       	ldd	r25, Z+3	; 0x03
     ba8:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     bac:	dc 01       	movw	r26, r24
     bae:	cb 01       	movw	r24, r22
     bb0:	f8 01       	movw	r30, r16
     bb2:	91 83       	std	Z+1, r25	; 0x01
     bb4:	80 83       	st	Z, r24
     bb6:	de 01       	movw	r26, r28
     bb8:	ab 5a       	subi	r26, 0xAB	; 171
     bba:	bf 4f       	sbci	r27, 0xFF	; 255
     bbc:	fe 01       	movw	r30, r28
     bbe:	e7 5a       	subi	r30, 0xA7	; 167
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	80 81       	ld	r24, Z
     bc4:	91 81       	ldd	r25, Z+1	; 0x01
     bc6:	8d 93       	st	X+, r24
     bc8:	9c 93       	st	X, r25
     bca:	fe 01       	movw	r30, r28
     bcc:	eb 5a       	subi	r30, 0xAB	; 171
     bce:	ff 4f       	sbci	r31, 0xFF	; 255
     bd0:	80 81       	ld	r24, Z
     bd2:	91 81       	ldd	r25, Z+1	; 0x01
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	f1 f7       	brne	.-4      	; 0xbd4 <LCDinit+0x172>
     bd8:	fe 01       	movw	r30, r28
     bda:	eb 5a       	subi	r30, 0xAB	; 171
     bdc:	ff 4f       	sbci	r31, 0xFF	; 255
     bde:	91 83       	std	Z+1, r25	; 0x01
     be0:	80 83       	st	Z, r24
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     be2:	e5 e3       	ldi	r30, 0x35	; 53
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	10 82       	st	Z, r1
	LCP=0x00;
     be8:	e5 e3       	ldi	r30, 0x35	; 53
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	10 82       	st	Z, r1
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     bee:	a4 e3       	ldi	r26, 0x34	; 52
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e4 e3       	ldi	r30, 0x34	; 52
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	80 6f       	ori	r24, 0xF0	; 240
     bfa:	8c 93       	st	X, r24
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     bfc:	a4 e3       	ldi	r26, 0x34	; 52
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e4 e3       	ldi	r30, 0x34	; 52
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	87 60       	ori	r24, 0x07	; 7
     c08:	8c 93       	st	X, r24
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     c0a:	e5 e3       	ldi	r30, 0x35	; 53
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 e3       	ldi	r24, 0x30	; 48
     c10:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     c12:	a5 e3       	ldi	r26, 0x35	; 53
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e5 e3       	ldi	r30, 0x35	; 53
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	84 60       	ori	r24, 0x04	; 4
     c1e:	8c 93       	st	X, r24
     c20:	fe 01       	movw	r30, r28
     c22:	ef 5a       	subi	r30, 0xAF	; 175
     c24:	ff 4f       	sbci	r31, 0xFF	; 255
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e8       	ldi	r26, 0x80	; 128
     c2c:	bf e3       	ldi	r27, 0x3F	; 63
     c2e:	80 83       	st	Z, r24
     c30:	91 83       	std	Z+1, r25	; 0x01
     c32:	a2 83       	std	Z+2, r26	; 0x02
     c34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c36:	8e 01       	movw	r16, r28
     c38:	03 5b       	subi	r16, 0xB3	; 179
     c3a:	1f 4f       	sbci	r17, 0xFF	; 255
     c3c:	fe 01       	movw	r30, r28
     c3e:	ef 5a       	subi	r30, 0xAF	; 175
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	60 81       	ld	r22, Z
     c44:	71 81       	ldd	r23, Z+1	; 0x01
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	4a e7       	ldi	r20, 0x7A	; 122
     c50:	54 e4       	ldi	r21, 0x44	; 68
     c52:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	f8 01       	movw	r30, r16
     c5c:	80 83       	st	Z, r24
     c5e:	91 83       	std	Z+1, r25	; 0x01
     c60:	a2 83       	std	Z+2, r26	; 0x02
     c62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c64:	fe 01       	movw	r30, r28
     c66:	e3 5b       	subi	r30, 0xB3	; 179
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	60 81       	ld	r22, Z
     c6c:	71 81       	ldd	r23, Z+1	; 0x01
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e8       	ldi	r20, 0x80	; 128
     c78:	5f e3       	ldi	r21, 0x3F	; 63
     c7a:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     c7e:	88 23       	and	r24, r24
     c80:	44 f4       	brge	.+16     	; 0xc92 <LCDinit+0x230>
		__ticks = 1;
     c82:	fe 01       	movw	r30, r28
     c84:	e5 5b       	subi	r30, 0xB5	; 181
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	91 83       	std	Z+1, r25	; 0x01
     c8e:	80 83       	st	Z, r24
     c90:	64 c0       	rjmp	.+200    	; 0xd5a <LCDinit+0x2f8>
	else if (__tmp > 65535)
     c92:	fe 01       	movw	r30, r28
     c94:	e3 5b       	subi	r30, 0xB3	; 179
     c96:	ff 4f       	sbci	r31, 0xFF	; 255
     c98:	60 81       	ld	r22, Z
     c9a:	71 81       	ldd	r23, Z+1	; 0x01
     c9c:	82 81       	ldd	r24, Z+2	; 0x02
     c9e:	93 81       	ldd	r25, Z+3	; 0x03
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	3f ef       	ldi	r19, 0xFF	; 255
     ca4:	4f e7       	ldi	r20, 0x7F	; 127
     ca6:	57 e4       	ldi	r21, 0x47	; 71
     ca8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     cac:	18 16       	cp	r1, r24
     cae:	0c f0       	brlt	.+2      	; 0xcb2 <LCDinit+0x250>
     cb0:	43 c0       	rjmp	.+134    	; 0xd38 <LCDinit+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cb2:	fe 01       	movw	r30, r28
     cb4:	ef 5a       	subi	r30, 0xAF	; 175
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	60 81       	ld	r22, Z
     cba:	71 81       	ldd	r23, Z+1	; 0x01
     cbc:	82 81       	ldd	r24, Z+2	; 0x02
     cbe:	93 81       	ldd	r25, Z+3	; 0x03
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e2       	ldi	r20, 0x20	; 32
     cc6:	51 e4       	ldi	r21, 0x41	; 65
     cc8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     ccc:	dc 01       	movw	r26, r24
     cce:	cb 01       	movw	r24, r22
     cd0:	8e 01       	movw	r16, r28
     cd2:	05 5b       	subi	r16, 0xB5	; 181
     cd4:	1f 4f       	sbci	r17, 0xFF	; 255
     cd6:	bc 01       	movw	r22, r24
     cd8:	cd 01       	movw	r24, r26
     cda:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	f8 01       	movw	r30, r16
     ce4:	91 83       	std	Z+1, r25	; 0x01
     ce6:	80 83       	st	Z, r24
     ce8:	1f c0       	rjmp	.+62     	; 0xd28 <LCDinit+0x2c6>
     cea:	fe 01       	movw	r30, r28
     cec:	e7 5b       	subi	r30, 0xB7	; 183
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	84 e6       	ldi	r24, 0x64	; 100
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	91 83       	std	Z+1, r25	; 0x01
     cf6:	80 83       	st	Z, r24
     cf8:	fe 01       	movw	r30, r28
     cfa:	e7 5b       	subi	r30, 0xB7	; 183
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	80 81       	ld	r24, Z
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	f1 f7       	brne	.-4      	; 0xd02 <LCDinit+0x2a0>
     d06:	fe 01       	movw	r30, r28
     d08:	e7 5b       	subi	r30, 0xB7	; 183
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	91 83       	std	Z+1, r25	; 0x01
     d0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d10:	de 01       	movw	r26, r28
     d12:	a5 5b       	subi	r26, 0xB5	; 181
     d14:	bf 4f       	sbci	r27, 0xFF	; 255
     d16:	fe 01       	movw	r30, r28
     d18:	e5 5b       	subi	r30, 0xB5	; 181
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	80 81       	ld	r24, Z
     d1e:	91 81       	ldd	r25, Z+1	; 0x01
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	9c 93       	st	X, r25
     d26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d28:	fe 01       	movw	r30, r28
     d2a:	e5 5b       	subi	r30, 0xB5	; 181
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	80 81       	ld	r24, Z
     d30:	91 81       	ldd	r25, Z+1	; 0x01
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	d1 f6       	brne	.-76     	; 0xcea <LCDinit+0x288>
     d36:	27 c0       	rjmp	.+78     	; 0xd86 <LCDinit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d38:	8e 01       	movw	r16, r28
     d3a:	05 5b       	subi	r16, 0xB5	; 181
     d3c:	1f 4f       	sbci	r17, 0xFF	; 255
     d3e:	fe 01       	movw	r30, r28
     d40:	e3 5b       	subi	r30, 0xB3	; 179
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	60 81       	ld	r22, Z
     d46:	71 81       	ldd	r23, Z+1	; 0x01
     d48:	82 81       	ldd	r24, Z+2	; 0x02
     d4a:	93 81       	ldd	r25, Z+3	; 0x03
     d4c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	f8 01       	movw	r30, r16
     d56:	91 83       	std	Z+1, r25	; 0x01
     d58:	80 83       	st	Z, r24
     d5a:	de 01       	movw	r26, r28
     d5c:	a9 5b       	subi	r26, 0xB9	; 185
     d5e:	bf 4f       	sbci	r27, 0xFF	; 255
     d60:	fe 01       	movw	r30, r28
     d62:	e5 5b       	subi	r30, 0xB5	; 181
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	80 81       	ld	r24, Z
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	8d 93       	st	X+, r24
     d6c:	9c 93       	st	X, r25
     d6e:	fe 01       	movw	r30, r28
     d70:	e9 5b       	subi	r30, 0xB9	; 185
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	80 81       	ld	r24, Z
     d76:	91 81       	ldd	r25, Z+1	; 0x01
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <LCDinit+0x316>
     d7c:	fe 01       	movw	r30, r28
     d7e:	e9 5b       	subi	r30, 0xB9	; 185
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	91 83       	std	Z+1, r25	; 0x01
     d84:	80 83       	st	Z, r24
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     d86:	a5 e3       	ldi	r26, 0x35	; 53
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e5 e3       	ldi	r30, 0x35	; 53
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	8b 7f       	andi	r24, 0xFB	; 251
     d92:	8c 93       	st	X, r24
     d94:	fe 01       	movw	r30, r28
     d96:	ed 5b       	subi	r30, 0xBD	; 189
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	a0 e8       	ldi	r26, 0x80	; 128
     da0:	bf e3       	ldi	r27, 0x3F	; 63
     da2:	80 83       	st	Z, r24
     da4:	91 83       	std	Z+1, r25	; 0x01
     da6:	a2 83       	std	Z+2, r26	; 0x02
     da8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     daa:	8e 01       	movw	r16, r28
     dac:	01 5c       	subi	r16, 0xC1	; 193
     dae:	1f 4f       	sbci	r17, 0xFF	; 255
     db0:	fe 01       	movw	r30, r28
     db2:	ed 5b       	subi	r30, 0xBD	; 189
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	60 81       	ld	r22, Z
     db8:	71 81       	ldd	r23, Z+1	; 0x01
     dba:	82 81       	ldd	r24, Z+2	; 0x02
     dbc:	93 81       	ldd	r25, Z+3	; 0x03
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	4a e7       	ldi	r20, 0x7A	; 122
     dc4:	54 e4       	ldi	r21, 0x44	; 68
     dc6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	f8 01       	movw	r30, r16
     dd0:	80 83       	st	Z, r24
     dd2:	91 83       	std	Z+1, r25	; 0x01
     dd4:	a2 83       	std	Z+2, r26	; 0x02
     dd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dd8:	fe 01       	movw	r30, r28
     dda:	ff 96       	adiw	r30, 0x3f	; 63
     ddc:	60 81       	ld	r22, Z
     dde:	71 81       	ldd	r23, Z+1	; 0x01
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	93 81       	ldd	r25, Z+3	; 0x03
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e8       	ldi	r20, 0x80	; 128
     dea:	5f e3       	ldi	r21, 0x3F	; 63
     dec:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     df0:	88 23       	and	r24, r24
     df2:	2c f4       	brge	.+10     	; 0xdfe <LCDinit+0x39c>
		__ticks = 1;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	9e af       	std	Y+62, r25	; 0x3e
     dfa:	8d af       	std	Y+61, r24	; 0x3d
     dfc:	46 c0       	rjmp	.+140    	; 0xe8a <LCDinit+0x428>
	else if (__tmp > 65535)
     dfe:	fe 01       	movw	r30, r28
     e00:	ff 96       	adiw	r30, 0x3f	; 63
     e02:	60 81       	ld	r22, Z
     e04:	71 81       	ldd	r23, Z+1	; 0x01
     e06:	82 81       	ldd	r24, Z+2	; 0x02
     e08:	93 81       	ldd	r25, Z+3	; 0x03
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	3f ef       	ldi	r19, 0xFF	; 255
     e0e:	4f e7       	ldi	r20, 0x7F	; 127
     e10:	57 e4       	ldi	r21, 0x47	; 71
     e12:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     e16:	18 16       	cp	r1, r24
     e18:	64 f5       	brge	.+88     	; 0xe72 <LCDinit+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1a:	fe 01       	movw	r30, r28
     e1c:	ed 5b       	subi	r30, 0xBD	; 189
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	60 81       	ld	r22, Z
     e22:	71 81       	ldd	r23, Z+1	; 0x01
     e24:	82 81       	ldd	r24, Z+2	; 0x02
     e26:	93 81       	ldd	r25, Z+3	; 0x03
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	40 e2       	ldi	r20, 0x20	; 32
     e2e:	51 e4       	ldi	r21, 0x41	; 65
     e30:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	9e af       	std	Y+62, r25	; 0x3e
     e46:	8d af       	std	Y+61, r24	; 0x3d
     e48:	0f c0       	rjmp	.+30     	; 0xe68 <LCDinit+0x406>
     e4a:	84 e6       	ldi	r24, 0x64	; 100
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9c af       	std	Y+60, r25	; 0x3c
     e50:	8b af       	std	Y+59, r24	; 0x3b
     e52:	8b ad       	ldd	r24, Y+59	; 0x3b
     e54:	9c ad       	ldd	r25, Y+60	; 0x3c
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <LCDinit+0x3f4>
     e5a:	9c af       	std	Y+60, r25	; 0x3c
     e5c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5e:	8d ad       	ldd	r24, Y+61	; 0x3d
     e60:	9e ad       	ldd	r25, Y+62	; 0x3e
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	9e af       	std	Y+62, r25	; 0x3e
     e66:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e68:	8d ad       	ldd	r24, Y+61	; 0x3d
     e6a:	9e ad       	ldd	r25, Y+62	; 0x3e
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	69 f7       	brne	.-38     	; 0xe4a <LCDinit+0x3e8>
     e70:	16 c0       	rjmp	.+44     	; 0xe9e <LCDinit+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e72:	fe 01       	movw	r30, r28
     e74:	ff 96       	adiw	r30, 0x3f	; 63
     e76:	60 81       	ld	r22, Z
     e78:	71 81       	ldd	r23, Z+1	; 0x01
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	93 81       	ldd	r25, Z+3	; 0x03
     e7e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	9e af       	std	Y+62, r25	; 0x3e
     e88:	8d af       	std	Y+61, r24	; 0x3d
     e8a:	8d ad       	ldd	r24, Y+61	; 0x3d
     e8c:	9e ad       	ldd	r25, Y+62	; 0x3e
     e8e:	9a af       	std	Y+58, r25	; 0x3a
     e90:	89 af       	std	Y+57, r24	; 0x39
     e92:	89 ad       	ldd	r24, Y+57	; 0x39
     e94:	9a ad       	ldd	r25, Y+58	; 0x3a
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <LCDinit+0x434>
     e9a:	9a af       	std	Y+58, r25	; 0x3a
     e9c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     e9e:	e5 e3       	ldi	r30, 0x35	; 53
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 e3       	ldi	r24, 0x30	; 48
     ea4:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ea6:	a5 e3       	ldi	r26, 0x35	; 53
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e5 e3       	ldi	r30, 0x35	; 53
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	84 60       	ori	r24, 0x04	; 4
     eb2:	8c 93       	st	X, r24
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	a0 e8       	ldi	r26, 0x80	; 128
     eba:	bf e3       	ldi	r27, 0x3F	; 63
     ebc:	8d ab       	std	Y+53, r24	; 0x35
     ebe:	9e ab       	std	Y+54, r25	; 0x36
     ec0:	af ab       	std	Y+55, r26	; 0x37
     ec2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec4:	6d a9       	ldd	r22, Y+53	; 0x35
     ec6:	7e a9       	ldd	r23, Y+54	; 0x36
     ec8:	8f a9       	ldd	r24, Y+55	; 0x37
     eca:	98 ad       	ldd	r25, Y+56	; 0x38
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	4a e7       	ldi	r20, 0x7A	; 122
     ed2:	54 e4       	ldi	r21, 0x44	; 68
     ed4:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	89 ab       	std	Y+49, r24	; 0x31
     ede:	9a ab       	std	Y+50, r25	; 0x32
     ee0:	ab ab       	std	Y+51, r26	; 0x33
     ee2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ee4:	69 a9       	ldd	r22, Y+49	; 0x31
     ee6:	7a a9       	ldd	r23, Y+50	; 0x32
     ee8:	8b a9       	ldd	r24, Y+51	; 0x33
     eea:	9c a9       	ldd	r25, Y+52	; 0x34
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e8       	ldi	r20, 0x80	; 128
     ef2:	5f e3       	ldi	r21, 0x3F	; 63
     ef4:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     ef8:	88 23       	and	r24, r24
     efa:	2c f4       	brge	.+10     	; 0xf06 <LCDinit+0x4a4>
		__ticks = 1;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	98 ab       	std	Y+48, r25	; 0x30
     f02:	8f a7       	std	Y+47, r24	; 0x2f
     f04:	3f c0       	rjmp	.+126    	; 0xf84 <LCDinit+0x522>
	else if (__tmp > 65535)
     f06:	69 a9       	ldd	r22, Y+49	; 0x31
     f08:	7a a9       	ldd	r23, Y+50	; 0x32
     f0a:	8b a9       	ldd	r24, Y+51	; 0x33
     f0c:	9c a9       	ldd	r25, Y+52	; 0x34
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	3f ef       	ldi	r19, 0xFF	; 255
     f12:	4f e7       	ldi	r20, 0x7F	; 127
     f14:	57 e4       	ldi	r21, 0x47	; 71
     f16:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     f1a:	18 16       	cp	r1, r24
     f1c:	4c f5       	brge	.+82     	; 0xf70 <LCDinit+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f1e:	6d a9       	ldd	r22, Y+53	; 0x35
     f20:	7e a9       	ldd	r23, Y+54	; 0x36
     f22:	8f a9       	ldd	r24, Y+55	; 0x37
     f24:	98 ad       	ldd	r25, Y+56	; 0x38
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e2       	ldi	r20, 0x20	; 32
     f2c:	51 e4       	ldi	r21, 0x41	; 65
     f2e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	bc 01       	movw	r22, r24
     f38:	cd 01       	movw	r24, r26
     f3a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	98 ab       	std	Y+48, r25	; 0x30
     f44:	8f a7       	std	Y+47, r24	; 0x2f
     f46:	0f c0       	rjmp	.+30     	; 0xf66 <LCDinit+0x504>
     f48:	84 e6       	ldi	r24, 0x64	; 100
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	9e a7       	std	Y+46, r25	; 0x2e
     f4e:	8d a7       	std	Y+45, r24	; 0x2d
     f50:	8d a5       	ldd	r24, Y+45	; 0x2d
     f52:	9e a5       	ldd	r25, Y+46	; 0x2e
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <LCDinit+0x4f2>
     f58:	9e a7       	std	Y+46, r25	; 0x2e
     f5a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f5e:	98 a9       	ldd	r25, Y+48	; 0x30
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	98 ab       	std	Y+48, r25	; 0x30
     f64:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f66:	8f a5       	ldd	r24, Y+47	; 0x2f
     f68:	98 a9       	ldd	r25, Y+48	; 0x30
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	69 f7       	brne	.-38     	; 0xf48 <LCDinit+0x4e6>
     f6e:	14 c0       	rjmp	.+40     	; 0xf98 <LCDinit+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f70:	69 a9       	ldd	r22, Y+49	; 0x31
     f72:	7a a9       	ldd	r23, Y+50	; 0x32
     f74:	8b a9       	ldd	r24, Y+51	; 0x33
     f76:	9c a9       	ldd	r25, Y+52	; 0x34
     f78:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	98 ab       	std	Y+48, r25	; 0x30
     f82:	8f a7       	std	Y+47, r24	; 0x2f
     f84:	8f a5       	ldd	r24, Y+47	; 0x2f
     f86:	98 a9       	ldd	r25, Y+48	; 0x30
     f88:	9c a7       	std	Y+44, r25	; 0x2c
     f8a:	8b a7       	std	Y+43, r24	; 0x2b
     f8c:	8b a5       	ldd	r24, Y+43	; 0x2b
     f8e:	9c a5       	ldd	r25, Y+44	; 0x2c
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	f1 f7       	brne	.-4      	; 0xf90 <LCDinit+0x52e>
     f94:	9c a7       	std	Y+44, r25	; 0x2c
     f96:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     f98:	a5 e3       	ldi	r26, 0x35	; 53
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e5 e3       	ldi	r30, 0x35	; 53
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8b 7f       	andi	r24, 0xFB	; 251
     fa4:	8c 93       	st	X, r24
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a0 e8       	ldi	r26, 0x80	; 128
     fac:	bf e3       	ldi	r27, 0x3F	; 63
     fae:	8f a3       	std	Y+39, r24	; 0x27
     fb0:	98 a7       	std	Y+40, r25	; 0x28
     fb2:	a9 a7       	std	Y+41, r26	; 0x29
     fb4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb6:	6f a1       	ldd	r22, Y+39	; 0x27
     fb8:	78 a5       	ldd	r23, Y+40	; 0x28
     fba:	89 a5       	ldd	r24, Y+41	; 0x29
     fbc:	9a a5       	ldd	r25, Y+42	; 0x2a
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4a e7       	ldi	r20, 0x7A	; 122
     fc4:	54 e4       	ldi	r21, 0x44	; 68
     fc6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	8b a3       	std	Y+35, r24	; 0x23
     fd0:	9c a3       	std	Y+36, r25	; 0x24
     fd2:	ad a3       	std	Y+37, r26	; 0x25
     fd4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fd6:	6b a1       	ldd	r22, Y+35	; 0x23
     fd8:	7c a1       	ldd	r23, Y+36	; 0x24
     fda:	8d a1       	ldd	r24, Y+37	; 0x25
     fdc:	9e a1       	ldd	r25, Y+38	; 0x26
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e8       	ldi	r20, 0x80	; 128
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     fea:	88 23       	and	r24, r24
     fec:	2c f4       	brge	.+10     	; 0xff8 <LCDinit+0x596>
		__ticks = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	9a a3       	std	Y+34, r25	; 0x22
     ff4:	89 a3       	std	Y+33, r24	; 0x21
     ff6:	3f c0       	rjmp	.+126    	; 0x1076 <LCDinit+0x614>
	else if (__tmp > 65535)
     ff8:	6b a1       	ldd	r22, Y+35	; 0x23
     ffa:	7c a1       	ldd	r23, Y+36	; 0x24
     ffc:	8d a1       	ldd	r24, Y+37	; 0x25
     ffe:	9e a1       	ldd	r25, Y+38	; 0x26
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	3f ef       	ldi	r19, 0xFF	; 255
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	57 e4       	ldi	r21, 0x47	; 71
    1008:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
    100c:	18 16       	cp	r1, r24
    100e:	4c f5       	brge	.+82     	; 0x1062 <LCDinit+0x600>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1010:	6f a1       	ldd	r22, Y+39	; 0x27
    1012:	78 a5       	ldd	r23, Y+40	; 0x28
    1014:	89 a5       	ldd	r24, Y+41	; 0x29
    1016:	9a a5       	ldd	r25, Y+42	; 0x2a
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e2       	ldi	r20, 0x20	; 32
    101e:	51 e4       	ldi	r21, 0x41	; 65
    1020:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	9a a3       	std	Y+34, r25	; 0x22
    1036:	89 a3       	std	Y+33, r24	; 0x21
    1038:	0f c0       	rjmp	.+30     	; 0x1058 <LCDinit+0x5f6>
    103a:	84 e6       	ldi	r24, 0x64	; 100
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	98 a3       	std	Y+32, r25	; 0x20
    1040:	8f 8f       	std	Y+31, r24	; 0x1f
    1042:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1044:	98 a1       	ldd	r25, Y+32	; 0x20
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <LCDinit+0x5e4>
    104a:	98 a3       	std	Y+32, r25	; 0x20
    104c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104e:	89 a1       	ldd	r24, Y+33	; 0x21
    1050:	9a a1       	ldd	r25, Y+34	; 0x22
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	9a a3       	std	Y+34, r25	; 0x22
    1056:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1058:	89 a1       	ldd	r24, Y+33	; 0x21
    105a:	9a a1       	ldd	r25, Y+34	; 0x22
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	69 f7       	brne	.-38     	; 0x103a <LCDinit+0x5d8>
    1060:	14 c0       	rjmp	.+40     	; 0x108a <LCDinit+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1062:	6b a1       	ldd	r22, Y+35	; 0x23
    1064:	7c a1       	ldd	r23, Y+36	; 0x24
    1066:	8d a1       	ldd	r24, Y+37	; 0x25
    1068:	9e a1       	ldd	r25, Y+38	; 0x26
    106a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	9a a3       	std	Y+34, r25	; 0x22
    1074:	89 a3       	std	Y+33, r24	; 0x21
    1076:	89 a1       	ldd	r24, Y+33	; 0x21
    1078:	9a a1       	ldd	r25, Y+34	; 0x22
    107a:	9e 8f       	std	Y+30, r25	; 0x1e
    107c:	8d 8f       	std	Y+29, r24	; 0x1d
    107e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1080:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <LCDinit+0x620>
    1086:	9e 8f       	std	Y+30, r25	; 0x1e
    1088:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    108a:	e5 e3       	ldi	r30, 0x35	; 53
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 e2       	ldi	r24, 0x20	; 32
    1090:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1092:	a5 e3       	ldi	r26, 0x35	; 53
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e5 e3       	ldi	r30, 0x35	; 53
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	84 60       	ori	r24, 0x04	; 4
    109e:	8c 93       	st	X, r24
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	a0 e8       	ldi	r26, 0x80	; 128
    10a6:	bf e3       	ldi	r27, 0x3F	; 63
    10a8:	89 8f       	std	Y+25, r24	; 0x19
    10aa:	9a 8f       	std	Y+26, r25	; 0x1a
    10ac:	ab 8f       	std	Y+27, r26	; 0x1b
    10ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b0:	69 8d       	ldd	r22, Y+25	; 0x19
    10b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	4a e7       	ldi	r20, 0x7A	; 122
    10be:	54 e4       	ldi	r21, 0x44	; 68
    10c0:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	8d 8b       	std	Y+21, r24	; 0x15
    10ca:	9e 8b       	std	Y+22, r25	; 0x16
    10cc:	af 8b       	std	Y+23, r26	; 0x17
    10ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10d0:	6d 89       	ldd	r22, Y+21	; 0x15
    10d2:	7e 89       	ldd	r23, Y+22	; 0x16
    10d4:	8f 89       	ldd	r24, Y+23	; 0x17
    10d6:	98 8d       	ldd	r25, Y+24	; 0x18
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 e8       	ldi	r20, 0x80	; 128
    10de:	5f e3       	ldi	r21, 0x3F	; 63
    10e0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
    10e4:	88 23       	and	r24, r24
    10e6:	2c f4       	brge	.+10     	; 0x10f2 <LCDinit+0x690>
		__ticks = 1;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	9c 8b       	std	Y+20, r25	; 0x14
    10ee:	8b 8b       	std	Y+19, r24	; 0x13
    10f0:	3f c0       	rjmp	.+126    	; 0x1170 <LCDinit+0x70e>
	else if (__tmp > 65535)
    10f2:	6d 89       	ldd	r22, Y+21	; 0x15
    10f4:	7e 89       	ldd	r23, Y+22	; 0x16
    10f6:	8f 89       	ldd	r24, Y+23	; 0x17
    10f8:	98 8d       	ldd	r25, Y+24	; 0x18
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	3f ef       	ldi	r19, 0xFF	; 255
    10fe:	4f e7       	ldi	r20, 0x7F	; 127
    1100:	57 e4       	ldi	r21, 0x47	; 71
    1102:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
    1106:	18 16       	cp	r1, r24
    1108:	4c f5       	brge	.+82     	; 0x115c <LCDinit+0x6fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    110a:	69 8d       	ldd	r22, Y+25	; 0x19
    110c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    110e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1110:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e2       	ldi	r20, 0x20	; 32
    1118:	51 e4       	ldi	r21, 0x41	; 65
    111a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	bc 01       	movw	r22, r24
    1124:	cd 01       	movw	r24, r26
    1126:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	9c 8b       	std	Y+20, r25	; 0x14
    1130:	8b 8b       	std	Y+19, r24	; 0x13
    1132:	0f c0       	rjmp	.+30     	; 0x1152 <LCDinit+0x6f0>
    1134:	84 e6       	ldi	r24, 0x64	; 100
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	9a 8b       	std	Y+18, r25	; 0x12
    113a:	89 8b       	std	Y+17, r24	; 0x11
    113c:	89 89       	ldd	r24, Y+17	; 0x11
    113e:	9a 89       	ldd	r25, Y+18	; 0x12
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	f1 f7       	brne	.-4      	; 0x1140 <LCDinit+0x6de>
    1144:	9a 8b       	std	Y+18, r25	; 0x12
    1146:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1148:	8b 89       	ldd	r24, Y+19	; 0x13
    114a:	9c 89       	ldd	r25, Y+20	; 0x14
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	9c 8b       	std	Y+20, r25	; 0x14
    1150:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1152:	8b 89       	ldd	r24, Y+19	; 0x13
    1154:	9c 89       	ldd	r25, Y+20	; 0x14
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	69 f7       	brne	.-38     	; 0x1134 <LCDinit+0x6d2>
    115a:	14 c0       	rjmp	.+40     	; 0x1184 <LCDinit+0x722>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115c:	6d 89       	ldd	r22, Y+21	; 0x15
    115e:	7e 89       	ldd	r23, Y+22	; 0x16
    1160:	8f 89       	ldd	r24, Y+23	; 0x17
    1162:	98 8d       	ldd	r25, Y+24	; 0x18
    1164:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	9c 8b       	std	Y+20, r25	; 0x14
    116e:	8b 8b       	std	Y+19, r24	; 0x13
    1170:	8b 89       	ldd	r24, Y+19	; 0x13
    1172:	9c 89       	ldd	r25, Y+20	; 0x14
    1174:	98 8b       	std	Y+16, r25	; 0x10
    1176:	8f 87       	std	Y+15, r24	; 0x0f
    1178:	8f 85       	ldd	r24, Y+15	; 0x0f
    117a:	98 89       	ldd	r25, Y+16	; 0x10
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <LCDinit+0x71a>
    1180:	98 8b       	std	Y+16, r25	; 0x10
    1182:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1184:	a5 e3       	ldi	r26, 0x35	; 53
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e5 e3       	ldi	r30, 0x35	; 53
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8b 7f       	andi	r24, 0xFB	; 251
    1190:	8c 93       	st	X, r24
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	a0 e8       	ldi	r26, 0x80	; 128
    1198:	bf e3       	ldi	r27, 0x3F	; 63
    119a:	8b 87       	std	Y+11, r24	; 0x0b
    119c:	9c 87       	std	Y+12, r25	; 0x0c
    119e:	ad 87       	std	Y+13, r26	; 0x0d
    11a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	4a e7       	ldi	r20, 0x7A	; 122
    11b0:	54 e4       	ldi	r21, 0x44	; 68
    11b2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	8f 83       	std	Y+7, r24	; 0x07
    11bc:	98 87       	std	Y+8, r25	; 0x08
    11be:	a9 87       	std	Y+9, r26	; 0x09
    11c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11c2:	6f 81       	ldd	r22, Y+7	; 0x07
    11c4:	78 85       	ldd	r23, Y+8	; 0x08
    11c6:	89 85       	ldd	r24, Y+9	; 0x09
    11c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e8       	ldi	r20, 0x80	; 128
    11d0:	5f e3       	ldi	r21, 0x3F	; 63
    11d2:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
    11d6:	88 23       	and	r24, r24
    11d8:	2c f4       	brge	.+10     	; 0x11e4 <LCDinit+0x782>
		__ticks = 1;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	9e 83       	std	Y+6, r25	; 0x06
    11e0:	8d 83       	std	Y+5, r24	; 0x05
    11e2:	3f c0       	rjmp	.+126    	; 0x1262 <LCDinit+0x800>
	else if (__tmp > 65535)
    11e4:	6f 81       	ldd	r22, Y+7	; 0x07
    11e6:	78 85       	ldd	r23, Y+8	; 0x08
    11e8:	89 85       	ldd	r24, Y+9	; 0x09
    11ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	3f ef       	ldi	r19, 0xFF	; 255
    11f0:	4f e7       	ldi	r20, 0x7F	; 127
    11f2:	57 e4       	ldi	r21, 0x47	; 71
    11f4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
    11f8:	18 16       	cp	r1, r24
    11fa:	4c f5       	brge	.+82     	; 0x124e <LCDinit+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    11fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1200:	8d 85       	ldd	r24, Y+13	; 0x0d
    1202:	9e 85       	ldd	r25, Y+14	; 0x0e
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e2       	ldi	r20, 0x20	; 32
    120a:	51 e4       	ldi	r21, 0x41	; 65
    120c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__mulsf3>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	9e 83       	std	Y+6, r25	; 0x06
    1222:	8d 83       	std	Y+5, r24	; 0x05
    1224:	0f c0       	rjmp	.+30     	; 0x1244 <LCDinit+0x7e2>
    1226:	84 e6       	ldi	r24, 0x64	; 100
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	9c 83       	std	Y+4, r25	; 0x04
    122c:	8b 83       	std	Y+3, r24	; 0x03
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <LCDinit+0x7d0>
    1236:	9c 83       	std	Y+4, r25	; 0x04
    1238:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123a:	8d 81       	ldd	r24, Y+5	; 0x05
    123c:	9e 81       	ldd	r25, Y+6	; 0x06
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	9e 83       	std	Y+6, r25	; 0x06
    1242:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1244:	8d 81       	ldd	r24, Y+5	; 0x05
    1246:	9e 81       	ldd	r25, Y+6	; 0x06
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	69 f7       	brne	.-38     	; 0x1226 <LCDinit+0x7c4>
    124c:	14 c0       	rjmp	.+40     	; 0x1276 <LCDinit+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124e:	6f 81       	ldd	r22, Y+7	; 0x07
    1250:	78 85       	ldd	r23, Y+8	; 0x08
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	9e 83       	std	Y+6, r25	; 0x06
    1260:	8d 83       	std	Y+5, r24	; 0x05
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	9e 81       	ldd	r25, Y+6	; 0x06
    1266:	9a 83       	std	Y+2, r25	; 0x02
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <LCDinit+0x80c>
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1276:	88 e2       	ldi	r24, 0x28	; 40
    1278:	0e 94 28 03 	call	0x650	; 0x650 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    127c:	8c e0       	ldi	r24, 0x0C	; 12
    127e:	0e 94 28 03 	call	0x650	; 0x650 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
    1282:	fe 01       	movw	r30, r28
    1284:	ec 59       	subi	r30, 0x9C	; 156
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	10 82       	st	Z, r1
    128a:	fe 01       	movw	r30, r28
    128c:	ed 59       	subi	r30, 0x9D	; 157
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	10 82       	st	Z, r1
    1292:	23 c0       	rjmp	.+70     	; 0x12da <LCDinit+0x878>
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1294:	fe 01       	movw	r30, r28
    1296:	ec 59       	subi	r30, 0x9C	; 156
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	80 81       	ld	r24, Z
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	9c 01       	movw	r18, r24
    12a2:	2c 5a       	subi	r18, 0xAC	; 172
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	fe 01       	movw	r30, r28
    12a8:	ed 59       	subi	r30, 0x9D	; 157
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	40 81       	ld	r20, Z
    12ae:	de 01       	movw	r26, r28
    12b0:	ad 59       	subi	r26, 0x9D	; 157
    12b2:	bf 4f       	sbci	r27, 0xFF	; 255
    12b4:	fe 01       	movw	r30, r28
    12b6:	ed 59       	subi	r30, 0x9D	; 157
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	80 81       	ld	r24, Z
    12bc:	8f 5f       	subi	r24, 0xFF	; 255
    12be:	8c 93       	st	X, r24
    12c0:	c9 01       	movw	r24, r18
    12c2:	64 2f       	mov	r22, r20
    12c4:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCDdefinechar>
		ch=ch+8;
    12c8:	de 01       	movw	r26, r28
    12ca:	ac 59       	subi	r26, 0x9C	; 156
    12cc:	bf 4f       	sbci	r27, 0xFF	; 255
    12ce:	fe 01       	movw	r30, r28
    12d0:	ec 59       	subi	r30, 0x9C	; 156
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	80 81       	ld	r24, Z
    12d6:	88 5f       	subi	r24, 0xF8	; 248
    12d8:	8c 93       	st	X, r24
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    12da:	fe 01       	movw	r30, r28
    12dc:	ec 59       	subi	r30, 0x9C	; 156
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	80 81       	ld	r24, Z
    12e2:	80 34       	cpi	r24, 0x40	; 64
    12e4:	b8 f2       	brcs	.-82     	; 0x1294 <LCDinit+0x832>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    12e6:	cc 59       	subi	r28, 0x9C	; 156
    12e8:	df 4f       	sbci	r29, 0xFF	; 255
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	08 95       	ret

000012fe <LCDclr>:
void LCDclr(void)				//Clears LCD
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_CLR);
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	0e 94 28 03 	call	0x650	; 0x650 <LCDsendCommand>
}
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_HOME);
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	0e 94 28 03 	call	0x650	; 0x650 <LCDsendCommand>
}
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <LCDstring+0x6>
    132c:	00 d0       	rcall	.+0      	; 0x132e <LCDstring+0x8>
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	9a 83       	std	Y+2, r25	; 0x02
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	6b 83       	std	Y+3, r22	; 0x03
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	a1 f0       	breq	.+40     	; 0x1368 <LCDstring+0x42>

	// print data
	for(i=0; i<nBytes; i++)
    1340:	1c 82       	std	Y+4, r1	; 0x04
    1342:	0e c0       	rjmp	.+28     	; 0x1360 <LCDstring+0x3a>
	{
		LCDsendChar(data[i]);
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	fc 01       	movw	r30, r24
    1350:	e2 0f       	add	r30, r18
    1352:	f3 1f       	adc	r31, r19
    1354:	80 81       	ld	r24, Z
    1356:	0e 94 03 01 	call	0x206	; 0x206 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	9f 5f       	subi	r25, 0xFF	; 255
    135e:	9c 83       	std	Y+4, r25	; 0x04
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	98 17       	cp	r25, r24
    1366:	70 f3       	brcs	.-36     	; 0x1344 <LCDstring+0x1e>
	{
		LCDsendChar(data[i]);
	}
}
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <LCDGotoXY+0x6>
    137c:	00 d0       	rcall	.+0      	; 0x137e <LCDGotoXY+0x8>
    137e:	0f 92       	push	r0
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	6a 83       	std	Y+2, r22	; 0x02
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	3d 83       	std	Y+5, r19	; 0x05
    1390:	2c 83       	std	Y+4, r18	; 0x04
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 05       	cpc	r25, r1
    139a:	c1 f0       	breq	.+48     	; 0x13cc <LCDGotoXY+0x56>
    139c:	2c 81       	ldd	r18, Y+4	; 0x04
    139e:	3d 81       	ldd	r19, Y+5	; 0x05
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <LCDGotoXY+0x3a>
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	9d 81       	ldd	r25, Y+5	; 0x05
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	61 f0       	breq	.+24     	; 0x13c6 <LCDGotoXY+0x50>
    13ae:	1d c0       	rjmp	.+58     	; 0x13ea <LCDGotoXY+0x74>
    13b0:	2c 81       	ldd	r18, Y+4	; 0x04
    13b2:	3d 81       	ldd	r19, Y+5	; 0x05
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	71 f0       	breq	.+28     	; 0x13d6 <LCDGotoXY+0x60>
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	83 30       	cpi	r24, 0x03	; 3
    13c0:	91 05       	cpc	r25, r1
    13c2:	71 f0       	breq	.+28     	; 0x13e0 <LCDGotoXY+0x6a>
    13c4:	12 c0       	rjmp	.+36     	; 0x13ea <LCDGotoXY+0x74>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
    13c6:	99 81       	ldd	r25, Y+1	; 0x01
    13c8:	9b 83       	std	Y+3, r25	; 0x03
    13ca:	11 c0       	rjmp	.+34     	; 0x13ee <LCDGotoXY+0x78>
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	28 2f       	mov	r18, r24
    13d0:	20 5c       	subi	r18, 0xC0	; 192
    13d2:	2b 83       	std	Y+3, r18	; 0x03
    13d4:	0c c0       	rjmp	.+24     	; 0x13ee <LCDGotoXY+0x78>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	38 2f       	mov	r19, r24
    13da:	3c 5e       	subi	r19, 0xEC	; 236
    13dc:	3b 83       	std	Y+3, r19	; 0x03
    13de:	07 c0       	rjmp	.+14     	; 0x13ee <LCDGotoXY+0x78>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	98 2f       	mov	r25, r24
    13e4:	9c 5a       	subi	r25, 0xAC	; 172
    13e6:	9b 83       	std	Y+3, r25	; 0x03
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <LCDGotoXY+0x78>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
    13ea:	29 81       	ldd	r18, Y+1	; 0x01
    13ec:	2b 83       	std	Y+3, r18	; 0x03
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	80 68       	ori	r24, 0x80	; 128
    13f2:	0e 94 28 03 	call	0x650	; 0x650 <LCDsendCommand>
	
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	2b 97       	sbiw	r28, 0x0b	; 11
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	99 87       	std	Y+9, r25	; 0x09
    141c:	88 87       	std	Y+8, r24	; 0x08
    141e:	6a 87       	std	Y+10, r22	; 0x0a
    1420:	4b 87       	std	Y+11, r20	; 0x0b
	uint8_t i;
	LCDGotoXY(x,y);
    1422:	8a 85       	ldd	r24, Y+10	; 0x0a
    1424:	6b 85       	ldd	r22, Y+11	; 0x0b
    1426:	0e 94 bb 09 	call	0x1376	; 0x1376 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    142a:	1f 82       	std	Y+7, r1	; 0x07
    142c:	13 c0       	rjmp	.+38     	; 0x1454 <CopyStringtoLCD+0x4e>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    142e:	8f 81       	ldd	r24, Y+7	; 0x07
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	88 85       	ldd	r24, Y+8	; 0x08
    1436:	99 85       	ldd	r25, Y+9	; 0x09
    1438:	82 0f       	add	r24, r18
    143a:	93 1f       	adc	r25, r19
    143c:	9e 83       	std	Y+6, r25	; 0x06
    143e:	8d 83       	std	Y+5, r24	; 0x05
    1440:	ed 81       	ldd	r30, Y+5	; 0x05
    1442:	fe 81       	ldd	r31, Y+6	; 0x06
    1444:	84 91       	lpm	r24, Z+
    1446:	8c 83       	std	Y+4, r24	; 0x04
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	0e 94 03 01 	call	0x206	; 0x206 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    144e:	8f 81       	ldd	r24, Y+7	; 0x07
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	8f 83       	std	Y+7, r24	; 0x07
    1454:	8f 81       	ldd	r24, Y+7	; 0x07
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	88 85       	ldd	r24, Y+8	; 0x08
    145c:	99 85       	ldd	r25, Y+9	; 0x09
    145e:	82 0f       	add	r24, r18
    1460:	93 1f       	adc	r25, r19
    1462:	9b 83       	std	Y+3, r25	; 0x03
    1464:	8a 83       	std	Y+2, r24	; 0x02
    1466:	ea 81       	ldd	r30, Y+2	; 0x02
    1468:	fb 81       	ldd	r31, Y+3	; 0x03
    146a:	84 91       	lpm	r24, Z+
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	88 23       	and	r24, r24
    1472:	e9 f6       	brne	.-70     	; 0x142e <CopyStringtoLCD+0x28>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1474:	2b 96       	adiw	r28, 0x0b	; 11
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	2a 97       	sbiw	r28, 0x0a	; 10
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	99 87       	std	Y+9, r25	; 0x09
    149c:	88 87       	std	Y+8, r24	; 0x08
    149e:	6a 87       	std	Y+10, r22	; 0x0a
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    14a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    14a2:	88 2f       	mov	r24, r24
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	80 64       	ori	r24, 0x40	; 64
    14b4:	8f 83       	std	Y+7, r24	; 0x07
	for (i=0; i<8; i++){
    14b6:	1d 82       	std	Y+5, r1	; 0x05
    14b8:	1c 82       	std	Y+4, r1	; 0x04
    14ba:	1d c0       	rjmp	.+58     	; 0x14f6 <LCDdefinechar+0x70>
		pcc=pgm_read_byte(&pc[i]);
    14bc:	28 85       	ldd	r18, Y+8	; 0x08
    14be:	39 85       	ldd	r19, Y+9	; 0x09
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	9d 81       	ldd	r25, Y+5	; 0x05
    14c4:	82 0f       	add	r24, r18
    14c6:	93 1f       	adc	r25, r19
    14c8:	9b 83       	std	Y+3, r25	; 0x03
    14ca:	8a 83       	std	Y+2, r24	; 0x02
    14cc:	ea 81       	ldd	r30, Y+2	; 0x02
    14ce:	fb 81       	ldd	r31, Y+3	; 0x03
    14d0:	84 91       	lpm	r24, Z+
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	8e 83       	std	Y+6, r24	; 0x06
		LCDsendCommand(a++);
    14d8:	9f 81       	ldd	r25, Y+7	; 0x07
    14da:	8f 81       	ldd	r24, Y+7	; 0x07
    14dc:	8f 5f       	subi	r24, 0xFF	; 255
    14de:	8f 83       	std	Y+7, r24	; 0x07
    14e0:	89 2f       	mov	r24, r25
    14e2:	0e 94 28 03 	call	0x650	; 0x650 <LCDsendCommand>
		LCDsendChar(pcc);
    14e6:	8e 81       	ldd	r24, Y+6	; 0x06
    14e8:	0e 94 03 01 	call	0x206	; 0x206 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    14ec:	8c 81       	ldd	r24, Y+4	; 0x04
    14ee:	9d 81       	ldd	r25, Y+5	; 0x05
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	9d 83       	std	Y+5, r25	; 0x05
    14f4:	8c 83       	std	Y+4, r24	; 0x04
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	88 30       	cpi	r24, 0x08	; 8
    14fc:	91 05       	cpc	r25, r1
    14fe:	f0 f2       	brcs	.-68     	; 0x14bc <LCDdefinechar+0x36>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    1500:	2a 96       	adiw	r28, 0x0a	; 10
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <LCDshiftLeft>:

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <LCDshiftLeft+0x6>
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    1520:	1a 82       	std	Y+2, r1	; 0x02
    1522:	19 82       	std	Y+1, r1	; 0x01
    1524:	08 c0       	rjmp	.+16     	; 0x1536 <LCDshiftLeft+0x24>
	{
		LCDsendCommand(0x1E);
    1526:	8e e1       	ldi	r24, 0x1E	; 30
    1528:	0e 94 28 03 	call	0x650	; 0x650 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	82 17       	cp	r24, r18
    1542:	93 07       	cpc	r25, r19
    1544:	84 f3       	brlt	.-32     	; 0x1526 <LCDshiftLeft+0x14>
	{
		LCDsendCommand(0x1E);
	}
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	00 d0       	rcall	.+0      	; 0x1558 <LCDshiftRight+0x6>
    1558:	0f 92       	push	r0
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    1560:	1a 82       	std	Y+2, r1	; 0x02
    1562:	19 82       	std	Y+1, r1	; 0x01
    1564:	08 c0       	rjmp	.+16     	; 0x1576 <LCDshiftRight+0x24>
	{
		LCDsendCommand(0x18);
    1566:	88 e1       	ldi	r24, 0x18	; 24
    1568:	0e 94 28 03 	call	0x650	; 0x650 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	9a 81       	ldd	r25, Y+2	; 0x02
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	9a 83       	std	Y+2, r25	; 0x02
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	82 17       	cp	r24, r18
    1582:	93 07       	cpc	r25, r19
    1584:	84 f3       	brlt	.-32     	; 0x1566 <LCDshiftRight+0x14>
	{
		LCDsendCommand(0x18);
	}
}
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0E);
    159a:	8e e0       	ldi	r24, 0x0E	; 14
    159c:	0e 94 28 03 	call	0x650	; 0x650 <LCDsendCommand>
}
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0F);
    15ae:	8f e0       	ldi	r24, 0x0F	; 15
    15b0:	0e 94 28 03 	call	0x650	; 0x650 <LCDsendCommand>
}
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    15c2:	8c e0       	ldi	r24, 0x0C	; 12
    15c4:	0e 94 28 03 	call	0x650	; 0x650 <LCDsendCommand>
}
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <LCDblank>:
void LCDblank(void)		//blanks LCD
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x08);
    15d6:	88 e0       	ldi	r24, 0x08	; 8
    15d8:	0e 94 28 03 	call	0x650	; 0x650 <LCDsendCommand>
}
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    15ea:	8c e0       	ldi	r24, 0x0C	; 12
    15ec:	0e 94 28 03 	call	0x650	; 0x650 <LCDsendCommand>
}
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <LCDcursorLeft+0x6>
    15fc:	0f 92       	push	r0
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    1604:	1a 82       	std	Y+2, r1	; 0x02
    1606:	19 82       	std	Y+1, r1	; 0x01
    1608:	08 c0       	rjmp	.+16     	; 0x161a <LCDcursorLeft+0x24>
	{
		LCDsendCommand(0x10);
    160a:	80 e1       	ldi	r24, 0x10	; 16
    160c:	0e 94 28 03 	call	0x650	; 0x650 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	01 96       	adiw	r24, 0x01	; 1
    1616:	9a 83       	std	Y+2, r25	; 0x02
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	82 17       	cp	r24, r18
    1626:	93 07       	cpc	r25, r19
    1628:	84 f3       	brlt	.-32     	; 0x160a <LCDcursorLeft+0x14>
	{
		LCDsendCommand(0x10);
	}
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <LCDcursorRight+0x6>
    163c:	0f 92       	push	r0
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	8b 83       	std	Y+3, r24	; 0x03
	for (i=0;i<n;i++)
    1644:	1a 82       	std	Y+2, r1	; 0x02
    1646:	19 82       	std	Y+1, r1	; 0x01
    1648:	08 c0       	rjmp	.+16     	; 0x165a <LCDcursorRight+0x24>
	{
		LCDsendCommand(0x14);
    164a:	84 e1       	ldi	r24, 0x14	; 20
    164c:	0e 94 28 03 	call	0x650	; 0x650 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	9a 81       	ldd	r25, Y+2	; 0x02
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	9a 83       	std	Y+2, r25	; 0x02
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	9a 81       	ldd	r25, Y+2	; 0x02
    1664:	82 17       	cp	r24, r18
    1666:	93 07       	cpc	r25, r19
    1668:	84 f3       	brlt	.-32     	; 0x164a <LCDcursorRight+0x14>
	{
		LCDsendCommand(0x14);
	}
}
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	27 97       	sbiw	r28, 0x07	; 7
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	8d 83       	std	Y+5, r24	; 0x05
    168c:	6e 83       	std	Y+6, r22	; 0x06
    168e:	4f 83       	std	Y+7, r20	; 0x07
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	48 2f       	mov	r20, r24
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	8f 81       	ldd	r24, Y+7	; 0x07
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	c9 01       	movw	r24, r18
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	82 0f       	add	r24, r18
    16a4:	93 1f       	adc	r25, r19
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	9a 01       	movw	r18, r20
    16ac:	28 9f       	mul	r18, r24
    16ae:	a0 01       	movw	r20, r0
    16b0:	29 9f       	mul	r18, r25
    16b2:	50 0d       	add	r21, r0
    16b4:	38 9f       	mul	r19, r24
    16b6:	50 0d       	add	r21, r0
    16b8:	11 24       	eor	r1, r1
    16ba:	8e 81       	ldd	r24, Y+6	; 0x06
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	ca 01       	movw	r24, r20
    16c2:	b9 01       	movw	r22, r18
    16c4:	0e 94 2f 11 	call	0x225e	; 0x225e <__divmodhi4>
    16c8:	cb 01       	movw	r24, r22
    16ca:	9b 83       	std	Y+3, r25	; 0x03
    16cc:	8a 83       	std	Y+2, r24	; 0x02
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    16ce:	1c 82       	std	Y+4, r1	; 0x04
    16d0:	35 c0       	rjmp	.+106    	; 0x173c <LCDprogressBar+0xc6>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    16d2:	8c 81       	ldd	r24, Y+4	; 0x04
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	c9 01       	movw	r24, r18
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	82 0f       	add	r24, r18
    16e0:	93 1f       	adc	r25, r19
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	9c 01       	movw	r18, r24
    16e8:	2b 5f       	subi	r18, 0xFB	; 251
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	9b 81       	ldd	r25, Y+3	; 0x03
    16f0:	82 17       	cp	r24, r18
    16f2:	93 07       	cpc	r25, r19
    16f4:	d8 f4       	brcc	.+54     	; 0x172c <LCDprogressBar+0xb6>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	c9 01       	movw	r24, r18
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	82 0f       	add	r24, r18
    1704:	93 1f       	adc	r25, r19
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	9c 01       	movw	r18, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	9b 81       	ldd	r25, Y+3	; 0x03
    1710:	82 17       	cp	r24, r18
    1712:	93 07       	cpc	r25, r19
    1714:	10 f4       	brcc	.+4      	; 0x171a <LCDprogressBar+0xa4>
			{
				// this is an empty block
				// use space character?
				c = 0;
    1716:	19 82       	std	Y+1, r1	; 0x01
    1718:	0b c0       	rjmp	.+22     	; 0x1730 <LCDprogressBar+0xba>
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	9b 81       	ldd	r25, Y+3	; 0x03
    171e:	26 e0       	ldi	r18, 0x06	; 6
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	b9 01       	movw	r22, r18
    1724:	0e 94 1b 11 	call	0x2236	; 0x2236 <__udivmodhi4>
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <LCDprogressBar+0xba>
			}
		}
		else
		{
			// this is a full block
			c = 5;
    172c:	85 e0       	ldi	r24, 0x05	; 5
    172e:	89 83       	std	Y+1, r24	; 0x01
		}
		
		// write character to display
		LCDsendChar(c);
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	0e 94 03 01 	call	0x206	; 0x206 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1736:	8c 81       	ldd	r24, Y+4	; 0x04
    1738:	8f 5f       	subi	r24, 0xFF	; 255
    173a:	8c 83       	std	Y+4, r24	; 0x04
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	8f 81       	ldd	r24, Y+7	; 0x07
    1740:	98 17       	cp	r25, r24
    1742:	38 f2       	brcs	.-114    	; 0x16d2 <LCDprogressBar+0x5c>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1744:	27 96       	adiw	r28, 0x07	; 7
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <LCDdisplay>:

void LCDdisplay(char a[])
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	00 d0       	rcall	.+0      	; 0x175c <LCDdisplay+0x6>
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	9a 83       	std	Y+2, r25	; 0x02
    1762:	89 83       	std	Y+1, r24	; 0x01
	LCDstring(a,strlen(a));
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	9a 81       	ldd	r25, Y+2	; 0x02
    1768:	0e 94 79 11 	call	0x22f2	; 0x22f2 <strlen>
    176c:	28 2f       	mov	r18, r24
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	9a 81       	ldd	r25, Y+2	; 0x02
    1772:	62 2f       	mov	r22, r18
    1774:	0e 94 93 09 	call	0x1326	; 0x1326 <LCDstring>
}
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <__fixunssfsi>:
    1782:	ef 92       	push	r14
    1784:	ff 92       	push	r15
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	7b 01       	movw	r14, r22
    178c:	8c 01       	movw	r16, r24
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	5f e4       	ldi	r21, 0x4F	; 79
    1796:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__gesf2>
    179a:	88 23       	and	r24, r24
    179c:	8c f0       	brlt	.+34     	; 0x17c0 <__fixunssfsi+0x3e>
    179e:	c8 01       	movw	r24, r16
    17a0:	b7 01       	movw	r22, r14
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	5f e4       	ldi	r21, 0x4F	; 79
    17aa:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__subsf3>
    17ae:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__fixsfsi>
    17b2:	9b 01       	movw	r18, r22
    17b4:	ac 01       	movw	r20, r24
    17b6:	20 50       	subi	r18, 0x00	; 0
    17b8:	30 40       	sbci	r19, 0x00	; 0
    17ba:	40 40       	sbci	r20, 0x00	; 0
    17bc:	50 48       	sbci	r21, 0x80	; 128
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <__fixunssfsi+0x4a>
    17c0:	c8 01       	movw	r24, r16
    17c2:	b7 01       	movw	r22, r14
    17c4:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__fixsfsi>
    17c8:	9b 01       	movw	r18, r22
    17ca:	ac 01       	movw	r20, r24
    17cc:	b9 01       	movw	r22, r18
    17ce:	ca 01       	movw	r24, r20
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	ff 90       	pop	r15
    17d6:	ef 90       	pop	r14
    17d8:	08 95       	ret

000017da <_fpadd_parts>:
    17da:	a0 e0       	ldi	r26, 0x00	; 0
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e3 ef       	ldi	r30, 0xF3	; 243
    17e0:	fb e0       	ldi	r31, 0x0B	; 11
    17e2:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__prologue_saves__>
    17e6:	dc 01       	movw	r26, r24
    17e8:	2b 01       	movw	r4, r22
    17ea:	fa 01       	movw	r30, r20
    17ec:	9c 91       	ld	r25, X
    17ee:	92 30       	cpi	r25, 0x02	; 2
    17f0:	08 f4       	brcc	.+2      	; 0x17f4 <_fpadd_parts+0x1a>
    17f2:	39 c1       	rjmp	.+626    	; 0x1a66 <_fpadd_parts+0x28c>
    17f4:	eb 01       	movw	r28, r22
    17f6:	88 81       	ld	r24, Y
    17f8:	82 30       	cpi	r24, 0x02	; 2
    17fa:	08 f4       	brcc	.+2      	; 0x17fe <_fpadd_parts+0x24>
    17fc:	33 c1       	rjmp	.+614    	; 0x1a64 <_fpadd_parts+0x28a>
    17fe:	94 30       	cpi	r25, 0x04	; 4
    1800:	69 f4       	brne	.+26     	; 0x181c <_fpadd_parts+0x42>
    1802:	84 30       	cpi	r24, 0x04	; 4
    1804:	09 f0       	breq	.+2      	; 0x1808 <_fpadd_parts+0x2e>
    1806:	2f c1       	rjmp	.+606    	; 0x1a66 <_fpadd_parts+0x28c>
    1808:	11 96       	adiw	r26, 0x01	; 1
    180a:	9c 91       	ld	r25, X
    180c:	11 97       	sbiw	r26, 0x01	; 1
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	98 17       	cp	r25, r24
    1812:	09 f4       	brne	.+2      	; 0x1816 <_fpadd_parts+0x3c>
    1814:	28 c1       	rjmp	.+592    	; 0x1a66 <_fpadd_parts+0x28c>
    1816:	a0 e6       	ldi	r26, 0x60	; 96
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	25 c1       	rjmp	.+586    	; 0x1a66 <_fpadd_parts+0x28c>
    181c:	84 30       	cpi	r24, 0x04	; 4
    181e:	09 f4       	brne	.+2      	; 0x1822 <_fpadd_parts+0x48>
    1820:	21 c1       	rjmp	.+578    	; 0x1a64 <_fpadd_parts+0x28a>
    1822:	82 30       	cpi	r24, 0x02	; 2
    1824:	a9 f4       	brne	.+42     	; 0x1850 <_fpadd_parts+0x76>
    1826:	92 30       	cpi	r25, 0x02	; 2
    1828:	09 f0       	breq	.+2      	; 0x182c <_fpadd_parts+0x52>
    182a:	1d c1       	rjmp	.+570    	; 0x1a66 <_fpadd_parts+0x28c>
    182c:	9a 01       	movw	r18, r20
    182e:	ad 01       	movw	r20, r26
    1830:	88 e0       	ldi	r24, 0x08	; 8
    1832:	ea 01       	movw	r28, r20
    1834:	09 90       	ld	r0, Y+
    1836:	ae 01       	movw	r20, r28
    1838:	e9 01       	movw	r28, r18
    183a:	09 92       	st	Y+, r0
    183c:	9e 01       	movw	r18, r28
    183e:	81 50       	subi	r24, 0x01	; 1
    1840:	c1 f7       	brne	.-16     	; 0x1832 <_fpadd_parts+0x58>
    1842:	e2 01       	movw	r28, r4
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	11 96       	adiw	r26, 0x01	; 1
    1848:	9c 91       	ld	r25, X
    184a:	89 23       	and	r24, r25
    184c:	81 83       	std	Z+1, r24	; 0x01
    184e:	08 c1       	rjmp	.+528    	; 0x1a60 <_fpadd_parts+0x286>
    1850:	92 30       	cpi	r25, 0x02	; 2
    1852:	09 f4       	brne	.+2      	; 0x1856 <_fpadd_parts+0x7c>
    1854:	07 c1       	rjmp	.+526    	; 0x1a64 <_fpadd_parts+0x28a>
    1856:	12 96       	adiw	r26, 0x02	; 2
    1858:	2d 90       	ld	r2, X+
    185a:	3c 90       	ld	r3, X
    185c:	13 97       	sbiw	r26, 0x03	; 3
    185e:	eb 01       	movw	r28, r22
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	9b 81       	ldd	r25, Y+3	; 0x03
    1864:	14 96       	adiw	r26, 0x04	; 4
    1866:	ad 90       	ld	r10, X+
    1868:	bd 90       	ld	r11, X+
    186a:	cd 90       	ld	r12, X+
    186c:	dc 90       	ld	r13, X
    186e:	17 97       	sbiw	r26, 0x07	; 7
    1870:	ec 80       	ldd	r14, Y+4	; 0x04
    1872:	fd 80       	ldd	r15, Y+5	; 0x05
    1874:	0e 81       	ldd	r16, Y+6	; 0x06
    1876:	1f 81       	ldd	r17, Y+7	; 0x07
    1878:	91 01       	movw	r18, r2
    187a:	28 1b       	sub	r18, r24
    187c:	39 0b       	sbc	r19, r25
    187e:	b9 01       	movw	r22, r18
    1880:	37 ff       	sbrs	r19, 7
    1882:	04 c0       	rjmp	.+8      	; 0x188c <_fpadd_parts+0xb2>
    1884:	66 27       	eor	r22, r22
    1886:	77 27       	eor	r23, r23
    1888:	62 1b       	sub	r22, r18
    188a:	73 0b       	sbc	r23, r19
    188c:	60 32       	cpi	r22, 0x20	; 32
    188e:	71 05       	cpc	r23, r1
    1890:	0c f0       	brlt	.+2      	; 0x1894 <_fpadd_parts+0xba>
    1892:	61 c0       	rjmp	.+194    	; 0x1956 <_fpadd_parts+0x17c>
    1894:	12 16       	cp	r1, r18
    1896:	13 06       	cpc	r1, r19
    1898:	6c f5       	brge	.+90     	; 0x18f4 <_fpadd_parts+0x11a>
    189a:	37 01       	movw	r6, r14
    189c:	48 01       	movw	r8, r16
    189e:	06 2e       	mov	r0, r22
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <_fpadd_parts+0xd0>
    18a2:	96 94       	lsr	r9
    18a4:	87 94       	ror	r8
    18a6:	77 94       	ror	r7
    18a8:	67 94       	ror	r6
    18aa:	0a 94       	dec	r0
    18ac:	d2 f7       	brpl	.-12     	; 0x18a2 <_fpadd_parts+0xc8>
    18ae:	21 e0       	ldi	r18, 0x01	; 1
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	04 c0       	rjmp	.+8      	; 0x18c0 <_fpadd_parts+0xe6>
    18b8:	22 0f       	add	r18, r18
    18ba:	33 1f       	adc	r19, r19
    18bc:	44 1f       	adc	r20, r20
    18be:	55 1f       	adc	r21, r21
    18c0:	6a 95       	dec	r22
    18c2:	d2 f7       	brpl	.-12     	; 0x18b8 <_fpadd_parts+0xde>
    18c4:	21 50       	subi	r18, 0x01	; 1
    18c6:	30 40       	sbci	r19, 0x00	; 0
    18c8:	40 40       	sbci	r20, 0x00	; 0
    18ca:	50 40       	sbci	r21, 0x00	; 0
    18cc:	2e 21       	and	r18, r14
    18ce:	3f 21       	and	r19, r15
    18d0:	40 23       	and	r20, r16
    18d2:	51 23       	and	r21, r17
    18d4:	21 15       	cp	r18, r1
    18d6:	31 05       	cpc	r19, r1
    18d8:	41 05       	cpc	r20, r1
    18da:	51 05       	cpc	r21, r1
    18dc:	21 f0       	breq	.+8      	; 0x18e6 <_fpadd_parts+0x10c>
    18de:	21 e0       	ldi	r18, 0x01	; 1
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	50 e0       	ldi	r21, 0x00	; 0
    18e6:	79 01       	movw	r14, r18
    18e8:	8a 01       	movw	r16, r20
    18ea:	e6 28       	or	r14, r6
    18ec:	f7 28       	or	r15, r7
    18ee:	08 29       	or	r16, r8
    18f0:	19 29       	or	r17, r9
    18f2:	3c c0       	rjmp	.+120    	; 0x196c <_fpadd_parts+0x192>
    18f4:	23 2b       	or	r18, r19
    18f6:	d1 f1       	breq	.+116    	; 0x196c <_fpadd_parts+0x192>
    18f8:	26 0e       	add	r2, r22
    18fa:	37 1e       	adc	r3, r23
    18fc:	35 01       	movw	r6, r10
    18fe:	46 01       	movw	r8, r12
    1900:	06 2e       	mov	r0, r22
    1902:	04 c0       	rjmp	.+8      	; 0x190c <_fpadd_parts+0x132>
    1904:	96 94       	lsr	r9
    1906:	87 94       	ror	r8
    1908:	77 94       	ror	r7
    190a:	67 94       	ror	r6
    190c:	0a 94       	dec	r0
    190e:	d2 f7       	brpl	.-12     	; 0x1904 <_fpadd_parts+0x12a>
    1910:	21 e0       	ldi	r18, 0x01	; 1
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e0       	ldi	r20, 0x00	; 0
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <_fpadd_parts+0x148>
    191a:	22 0f       	add	r18, r18
    191c:	33 1f       	adc	r19, r19
    191e:	44 1f       	adc	r20, r20
    1920:	55 1f       	adc	r21, r21
    1922:	6a 95       	dec	r22
    1924:	d2 f7       	brpl	.-12     	; 0x191a <_fpadd_parts+0x140>
    1926:	21 50       	subi	r18, 0x01	; 1
    1928:	30 40       	sbci	r19, 0x00	; 0
    192a:	40 40       	sbci	r20, 0x00	; 0
    192c:	50 40       	sbci	r21, 0x00	; 0
    192e:	2a 21       	and	r18, r10
    1930:	3b 21       	and	r19, r11
    1932:	4c 21       	and	r20, r12
    1934:	5d 21       	and	r21, r13
    1936:	21 15       	cp	r18, r1
    1938:	31 05       	cpc	r19, r1
    193a:	41 05       	cpc	r20, r1
    193c:	51 05       	cpc	r21, r1
    193e:	21 f0       	breq	.+8      	; 0x1948 <_fpadd_parts+0x16e>
    1940:	21 e0       	ldi	r18, 0x01	; 1
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	59 01       	movw	r10, r18
    194a:	6a 01       	movw	r12, r20
    194c:	a6 28       	or	r10, r6
    194e:	b7 28       	or	r11, r7
    1950:	c8 28       	or	r12, r8
    1952:	d9 28       	or	r13, r9
    1954:	0b c0       	rjmp	.+22     	; 0x196c <_fpadd_parts+0x192>
    1956:	82 15       	cp	r24, r2
    1958:	93 05       	cpc	r25, r3
    195a:	2c f0       	brlt	.+10     	; 0x1966 <_fpadd_parts+0x18c>
    195c:	1c 01       	movw	r2, r24
    195e:	aa 24       	eor	r10, r10
    1960:	bb 24       	eor	r11, r11
    1962:	65 01       	movw	r12, r10
    1964:	03 c0       	rjmp	.+6      	; 0x196c <_fpadd_parts+0x192>
    1966:	ee 24       	eor	r14, r14
    1968:	ff 24       	eor	r15, r15
    196a:	87 01       	movw	r16, r14
    196c:	11 96       	adiw	r26, 0x01	; 1
    196e:	9c 91       	ld	r25, X
    1970:	d2 01       	movw	r26, r4
    1972:	11 96       	adiw	r26, 0x01	; 1
    1974:	8c 91       	ld	r24, X
    1976:	98 17       	cp	r25, r24
    1978:	09 f4       	brne	.+2      	; 0x197c <_fpadd_parts+0x1a2>
    197a:	45 c0       	rjmp	.+138    	; 0x1a06 <_fpadd_parts+0x22c>
    197c:	99 23       	and	r25, r25
    197e:	39 f0       	breq	.+14     	; 0x198e <_fpadd_parts+0x1b4>
    1980:	a8 01       	movw	r20, r16
    1982:	97 01       	movw	r18, r14
    1984:	2a 19       	sub	r18, r10
    1986:	3b 09       	sbc	r19, r11
    1988:	4c 09       	sbc	r20, r12
    198a:	5d 09       	sbc	r21, r13
    198c:	06 c0       	rjmp	.+12     	; 0x199a <_fpadd_parts+0x1c0>
    198e:	a6 01       	movw	r20, r12
    1990:	95 01       	movw	r18, r10
    1992:	2e 19       	sub	r18, r14
    1994:	3f 09       	sbc	r19, r15
    1996:	40 0b       	sbc	r20, r16
    1998:	51 0b       	sbc	r21, r17
    199a:	57 fd       	sbrc	r21, 7
    199c:	08 c0       	rjmp	.+16     	; 0x19ae <_fpadd_parts+0x1d4>
    199e:	11 82       	std	Z+1, r1	; 0x01
    19a0:	33 82       	std	Z+3, r3	; 0x03
    19a2:	22 82       	std	Z+2, r2	; 0x02
    19a4:	24 83       	std	Z+4, r18	; 0x04
    19a6:	35 83       	std	Z+5, r19	; 0x05
    19a8:	46 83       	std	Z+6, r20	; 0x06
    19aa:	57 83       	std	Z+7, r21	; 0x07
    19ac:	1d c0       	rjmp	.+58     	; 0x19e8 <_fpadd_parts+0x20e>
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	81 83       	std	Z+1, r24	; 0x01
    19b2:	33 82       	std	Z+3, r3	; 0x03
    19b4:	22 82       	std	Z+2, r2	; 0x02
    19b6:	88 27       	eor	r24, r24
    19b8:	99 27       	eor	r25, r25
    19ba:	dc 01       	movw	r26, r24
    19bc:	82 1b       	sub	r24, r18
    19be:	93 0b       	sbc	r25, r19
    19c0:	a4 0b       	sbc	r26, r20
    19c2:	b5 0b       	sbc	r27, r21
    19c4:	84 83       	std	Z+4, r24	; 0x04
    19c6:	95 83       	std	Z+5, r25	; 0x05
    19c8:	a6 83       	std	Z+6, r26	; 0x06
    19ca:	b7 83       	std	Z+7, r27	; 0x07
    19cc:	0d c0       	rjmp	.+26     	; 0x19e8 <_fpadd_parts+0x20e>
    19ce:	22 0f       	add	r18, r18
    19d0:	33 1f       	adc	r19, r19
    19d2:	44 1f       	adc	r20, r20
    19d4:	55 1f       	adc	r21, r21
    19d6:	24 83       	std	Z+4, r18	; 0x04
    19d8:	35 83       	std	Z+5, r19	; 0x05
    19da:	46 83       	std	Z+6, r20	; 0x06
    19dc:	57 83       	std	Z+7, r21	; 0x07
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	93 83       	std	Z+3, r25	; 0x03
    19e6:	82 83       	std	Z+2, r24	; 0x02
    19e8:	24 81       	ldd	r18, Z+4	; 0x04
    19ea:	35 81       	ldd	r19, Z+5	; 0x05
    19ec:	46 81       	ldd	r20, Z+6	; 0x06
    19ee:	57 81       	ldd	r21, Z+7	; 0x07
    19f0:	da 01       	movw	r26, r20
    19f2:	c9 01       	movw	r24, r18
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	a1 09       	sbc	r26, r1
    19f8:	b1 09       	sbc	r27, r1
    19fa:	8f 5f       	subi	r24, 0xFF	; 255
    19fc:	9f 4f       	sbci	r25, 0xFF	; 255
    19fe:	af 4f       	sbci	r26, 0xFF	; 255
    1a00:	bf 43       	sbci	r27, 0x3F	; 63
    1a02:	28 f3       	brcs	.-54     	; 0x19ce <_fpadd_parts+0x1f4>
    1a04:	0b c0       	rjmp	.+22     	; 0x1a1c <_fpadd_parts+0x242>
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	33 82       	std	Z+3, r3	; 0x03
    1a0a:	22 82       	std	Z+2, r2	; 0x02
    1a0c:	ea 0c       	add	r14, r10
    1a0e:	fb 1c       	adc	r15, r11
    1a10:	0c 1d       	adc	r16, r12
    1a12:	1d 1d       	adc	r17, r13
    1a14:	e4 82       	std	Z+4, r14	; 0x04
    1a16:	f5 82       	std	Z+5, r15	; 0x05
    1a18:	06 83       	std	Z+6, r16	; 0x06
    1a1a:	17 83       	std	Z+7, r17	; 0x07
    1a1c:	83 e0       	ldi	r24, 0x03	; 3
    1a1e:	80 83       	st	Z, r24
    1a20:	24 81       	ldd	r18, Z+4	; 0x04
    1a22:	35 81       	ldd	r19, Z+5	; 0x05
    1a24:	46 81       	ldd	r20, Z+6	; 0x06
    1a26:	57 81       	ldd	r21, Z+7	; 0x07
    1a28:	57 ff       	sbrs	r21, 7
    1a2a:	1a c0       	rjmp	.+52     	; 0x1a60 <_fpadd_parts+0x286>
    1a2c:	c9 01       	movw	r24, r18
    1a2e:	aa 27       	eor	r26, r26
    1a30:	97 fd       	sbrc	r25, 7
    1a32:	a0 95       	com	r26
    1a34:	ba 2f       	mov	r27, r26
    1a36:	81 70       	andi	r24, 0x01	; 1
    1a38:	90 70       	andi	r25, 0x00	; 0
    1a3a:	a0 70       	andi	r26, 0x00	; 0
    1a3c:	b0 70       	andi	r27, 0x00	; 0
    1a3e:	56 95       	lsr	r21
    1a40:	47 95       	ror	r20
    1a42:	37 95       	ror	r19
    1a44:	27 95       	ror	r18
    1a46:	82 2b       	or	r24, r18
    1a48:	93 2b       	or	r25, r19
    1a4a:	a4 2b       	or	r26, r20
    1a4c:	b5 2b       	or	r27, r21
    1a4e:	84 83       	std	Z+4, r24	; 0x04
    1a50:	95 83       	std	Z+5, r25	; 0x05
    1a52:	a6 83       	std	Z+6, r26	; 0x06
    1a54:	b7 83       	std	Z+7, r27	; 0x07
    1a56:	82 81       	ldd	r24, Z+2	; 0x02
    1a58:	93 81       	ldd	r25, Z+3	; 0x03
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	93 83       	std	Z+3, r25	; 0x03
    1a5e:	82 83       	std	Z+2, r24	; 0x02
    1a60:	df 01       	movw	r26, r30
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <_fpadd_parts+0x28c>
    1a64:	d2 01       	movw	r26, r4
    1a66:	cd 01       	movw	r24, r26
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	e2 e1       	ldi	r30, 0x12	; 18
    1a6e:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <__epilogue_restores__>

00001a72 <__subsf3>:
    1a72:	a0 e2       	ldi	r26, 0x20	; 32
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	ef e3       	ldi	r30, 0x3F	; 63
    1a78:	fd e0       	ldi	r31, 0x0D	; 13
    1a7a:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__prologue_saves__+0x18>
    1a7e:	69 83       	std	Y+1, r22	; 0x01
    1a80:	7a 83       	std	Y+2, r23	; 0x02
    1a82:	8b 83       	std	Y+3, r24	; 0x03
    1a84:	9c 83       	std	Y+4, r25	; 0x04
    1a86:	2d 83       	std	Y+5, r18	; 0x05
    1a88:	3e 83       	std	Y+6, r19	; 0x06
    1a8a:	4f 83       	std	Y+7, r20	; 0x07
    1a8c:	58 87       	std	Y+8, r21	; 0x08
    1a8e:	e9 e0       	ldi	r30, 0x09	; 9
    1a90:	ee 2e       	mov	r14, r30
    1a92:	f1 2c       	mov	r15, r1
    1a94:	ec 0e       	add	r14, r28
    1a96:	fd 1e       	adc	r15, r29
    1a98:	ce 01       	movw	r24, r28
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	b7 01       	movw	r22, r14
    1a9e:	0e 94 4a 10 	call	0x2094	; 0x2094 <__unpack_f>
    1aa2:	8e 01       	movw	r16, r28
    1aa4:	0f 5e       	subi	r16, 0xEF	; 239
    1aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	05 96       	adiw	r24, 0x05	; 5
    1aac:	b8 01       	movw	r22, r16
    1aae:	0e 94 4a 10 	call	0x2094	; 0x2094 <__unpack_f>
    1ab2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ab4:	91 e0       	ldi	r25, 0x01	; 1
    1ab6:	89 27       	eor	r24, r25
    1ab8:	8a 8b       	std	Y+18, r24	; 0x12
    1aba:	c7 01       	movw	r24, r14
    1abc:	b8 01       	movw	r22, r16
    1abe:	ae 01       	movw	r20, r28
    1ac0:	47 5e       	subi	r20, 0xE7	; 231
    1ac2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac4:	0e 94 ed 0b 	call	0x17da	; 0x17da <_fpadd_parts>
    1ac8:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__pack_f>
    1acc:	a0 96       	adiw	r28, 0x20	; 32
    1ace:	e6 e0       	ldi	r30, 0x06	; 6
    1ad0:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__epilogue_restores__+0x18>

00001ad4 <__addsf3>:
    1ad4:	a0 e2       	ldi	r26, 0x20	; 32
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e0 e7       	ldi	r30, 0x70	; 112
    1ada:	fd e0       	ldi	r31, 0x0D	; 13
    1adc:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__prologue_saves__+0x18>
    1ae0:	69 83       	std	Y+1, r22	; 0x01
    1ae2:	7a 83       	std	Y+2, r23	; 0x02
    1ae4:	8b 83       	std	Y+3, r24	; 0x03
    1ae6:	9c 83       	std	Y+4, r25	; 0x04
    1ae8:	2d 83       	std	Y+5, r18	; 0x05
    1aea:	3e 83       	std	Y+6, r19	; 0x06
    1aec:	4f 83       	std	Y+7, r20	; 0x07
    1aee:	58 87       	std	Y+8, r21	; 0x08
    1af0:	f9 e0       	ldi	r31, 0x09	; 9
    1af2:	ef 2e       	mov	r14, r31
    1af4:	f1 2c       	mov	r15, r1
    1af6:	ec 0e       	add	r14, r28
    1af8:	fd 1e       	adc	r15, r29
    1afa:	ce 01       	movw	r24, r28
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	b7 01       	movw	r22, r14
    1b00:	0e 94 4a 10 	call	0x2094	; 0x2094 <__unpack_f>
    1b04:	8e 01       	movw	r16, r28
    1b06:	0f 5e       	subi	r16, 0xEF	; 239
    1b08:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	05 96       	adiw	r24, 0x05	; 5
    1b0e:	b8 01       	movw	r22, r16
    1b10:	0e 94 4a 10 	call	0x2094	; 0x2094 <__unpack_f>
    1b14:	c7 01       	movw	r24, r14
    1b16:	b8 01       	movw	r22, r16
    1b18:	ae 01       	movw	r20, r28
    1b1a:	47 5e       	subi	r20, 0xE7	; 231
    1b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b1e:	0e 94 ed 0b 	call	0x17da	; 0x17da <_fpadd_parts>
    1b22:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__pack_f>
    1b26:	a0 96       	adiw	r28, 0x20	; 32
    1b28:	e6 e0       	ldi	r30, 0x06	; 6
    1b2a:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__epilogue_restores__+0x18>

00001b2e <__mulsf3>:
    1b2e:	a0 e2       	ldi	r26, 0x20	; 32
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	ed e9       	ldi	r30, 0x9D	; 157
    1b34:	fd e0       	ldi	r31, 0x0D	; 13
    1b36:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__prologue_saves__>
    1b3a:	69 83       	std	Y+1, r22	; 0x01
    1b3c:	7a 83       	std	Y+2, r23	; 0x02
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
    1b40:	9c 83       	std	Y+4, r25	; 0x04
    1b42:	2d 83       	std	Y+5, r18	; 0x05
    1b44:	3e 83       	std	Y+6, r19	; 0x06
    1b46:	4f 83       	std	Y+7, r20	; 0x07
    1b48:	58 87       	std	Y+8, r21	; 0x08
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	be 01       	movw	r22, r28
    1b50:	67 5f       	subi	r22, 0xF7	; 247
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	0e 94 4a 10 	call	0x2094	; 0x2094 <__unpack_f>
    1b58:	ce 01       	movw	r24, r28
    1b5a:	05 96       	adiw	r24, 0x05	; 5
    1b5c:	be 01       	movw	r22, r28
    1b5e:	6f 5e       	subi	r22, 0xEF	; 239
    1b60:	7f 4f       	sbci	r23, 0xFF	; 255
    1b62:	0e 94 4a 10 	call	0x2094	; 0x2094 <__unpack_f>
    1b66:	99 85       	ldd	r25, Y+9	; 0x09
    1b68:	92 30       	cpi	r25, 0x02	; 2
    1b6a:	88 f0       	brcs	.+34     	; 0x1b8e <__mulsf3+0x60>
    1b6c:	89 89       	ldd	r24, Y+17	; 0x11
    1b6e:	82 30       	cpi	r24, 0x02	; 2
    1b70:	c8 f0       	brcs	.+50     	; 0x1ba4 <__mulsf3+0x76>
    1b72:	94 30       	cpi	r25, 0x04	; 4
    1b74:	19 f4       	brne	.+6      	; 0x1b7c <__mulsf3+0x4e>
    1b76:	82 30       	cpi	r24, 0x02	; 2
    1b78:	51 f4       	brne	.+20     	; 0x1b8e <__mulsf3+0x60>
    1b7a:	04 c0       	rjmp	.+8      	; 0x1b84 <__mulsf3+0x56>
    1b7c:	84 30       	cpi	r24, 0x04	; 4
    1b7e:	29 f4       	brne	.+10     	; 0x1b8a <__mulsf3+0x5c>
    1b80:	92 30       	cpi	r25, 0x02	; 2
    1b82:	81 f4       	brne	.+32     	; 0x1ba4 <__mulsf3+0x76>
    1b84:	80 e6       	ldi	r24, 0x60	; 96
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	c6 c0       	rjmp	.+396    	; 0x1d16 <__mulsf3+0x1e8>
    1b8a:	92 30       	cpi	r25, 0x02	; 2
    1b8c:	49 f4       	brne	.+18     	; 0x1ba0 <__mulsf3+0x72>
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b92:	8a 89       	ldd	r24, Y+18	; 0x12
    1b94:	98 13       	cpse	r25, r24
    1b96:	21 e0       	ldi	r18, 0x01	; 1
    1b98:	2a 87       	std	Y+10, r18	; 0x0a
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	09 96       	adiw	r24, 0x09	; 9
    1b9e:	bb c0       	rjmp	.+374    	; 0x1d16 <__mulsf3+0x1e8>
    1ba0:	82 30       	cpi	r24, 0x02	; 2
    1ba2:	49 f4       	brne	.+18     	; 0x1bb6 <__mulsf3+0x88>
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba8:	8a 89       	ldd	r24, Y+18	; 0x12
    1baa:	98 13       	cpse	r25, r24
    1bac:	21 e0       	ldi	r18, 0x01	; 1
    1bae:	2a 8b       	std	Y+18, r18	; 0x12
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	41 96       	adiw	r24, 0x11	; 17
    1bb4:	b0 c0       	rjmp	.+352    	; 0x1d16 <__mulsf3+0x1e8>
    1bb6:	2d 84       	ldd	r2, Y+13	; 0x0d
    1bb8:	3e 84       	ldd	r3, Y+14	; 0x0e
    1bba:	4f 84       	ldd	r4, Y+15	; 0x0f
    1bbc:	58 88       	ldd	r5, Y+16	; 0x10
    1bbe:	6d 88       	ldd	r6, Y+21	; 0x15
    1bc0:	7e 88       	ldd	r7, Y+22	; 0x16
    1bc2:	8f 88       	ldd	r8, Y+23	; 0x17
    1bc4:	98 8c       	ldd	r9, Y+24	; 0x18
    1bc6:	ee 24       	eor	r14, r14
    1bc8:	ff 24       	eor	r15, r15
    1bca:	87 01       	movw	r16, r14
    1bcc:	aa 24       	eor	r10, r10
    1bce:	bb 24       	eor	r11, r11
    1bd0:	65 01       	movw	r12, r10
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	e0 e0       	ldi	r30, 0x00	; 0
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	c1 01       	movw	r24, r2
    1be0:	81 70       	andi	r24, 0x01	; 1
    1be2:	90 70       	andi	r25, 0x00	; 0
    1be4:	89 2b       	or	r24, r25
    1be6:	e9 f0       	breq	.+58     	; 0x1c22 <__mulsf3+0xf4>
    1be8:	e6 0c       	add	r14, r6
    1bea:	f7 1c       	adc	r15, r7
    1bec:	08 1d       	adc	r16, r8
    1bee:	19 1d       	adc	r17, r9
    1bf0:	9a 01       	movw	r18, r20
    1bf2:	ab 01       	movw	r20, r22
    1bf4:	2a 0d       	add	r18, r10
    1bf6:	3b 1d       	adc	r19, r11
    1bf8:	4c 1d       	adc	r20, r12
    1bfa:	5d 1d       	adc	r21, r13
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	a0 e0       	ldi	r26, 0x00	; 0
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e6 14       	cp	r14, r6
    1c06:	f7 04       	cpc	r15, r7
    1c08:	08 05       	cpc	r16, r8
    1c0a:	19 05       	cpc	r17, r9
    1c0c:	20 f4       	brcc	.+8      	; 0x1c16 <__mulsf3+0xe8>
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a0 e0       	ldi	r26, 0x00	; 0
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	ba 01       	movw	r22, r20
    1c18:	a9 01       	movw	r20, r18
    1c1a:	48 0f       	add	r20, r24
    1c1c:	59 1f       	adc	r21, r25
    1c1e:	6a 1f       	adc	r22, r26
    1c20:	7b 1f       	adc	r23, r27
    1c22:	aa 0c       	add	r10, r10
    1c24:	bb 1c       	adc	r11, r11
    1c26:	cc 1c       	adc	r12, r12
    1c28:	dd 1c       	adc	r13, r13
    1c2a:	97 fe       	sbrs	r9, 7
    1c2c:	08 c0       	rjmp	.+16     	; 0x1c3e <__mulsf3+0x110>
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	a0 e0       	ldi	r26, 0x00	; 0
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	a8 2a       	or	r10, r24
    1c38:	b9 2a       	or	r11, r25
    1c3a:	ca 2a       	or	r12, r26
    1c3c:	db 2a       	or	r13, r27
    1c3e:	31 96       	adiw	r30, 0x01	; 1
    1c40:	e0 32       	cpi	r30, 0x20	; 32
    1c42:	f1 05       	cpc	r31, r1
    1c44:	49 f0       	breq	.+18     	; 0x1c58 <__mulsf3+0x12a>
    1c46:	66 0c       	add	r6, r6
    1c48:	77 1c       	adc	r7, r7
    1c4a:	88 1c       	adc	r8, r8
    1c4c:	99 1c       	adc	r9, r9
    1c4e:	56 94       	lsr	r5
    1c50:	47 94       	ror	r4
    1c52:	37 94       	ror	r3
    1c54:	27 94       	ror	r2
    1c56:	c3 cf       	rjmp	.-122    	; 0x1bde <__mulsf3+0xb0>
    1c58:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c5a:	ea 89       	ldd	r30, Y+18	; 0x12
    1c5c:	2b 89       	ldd	r18, Y+19	; 0x13
    1c5e:	3c 89       	ldd	r19, Y+20	; 0x14
    1c60:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c62:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c64:	28 0f       	add	r18, r24
    1c66:	39 1f       	adc	r19, r25
    1c68:	2e 5f       	subi	r18, 0xFE	; 254
    1c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6c:	17 c0       	rjmp	.+46     	; 0x1c9c <__mulsf3+0x16e>
    1c6e:	ca 01       	movw	r24, r20
    1c70:	81 70       	andi	r24, 0x01	; 1
    1c72:	90 70       	andi	r25, 0x00	; 0
    1c74:	89 2b       	or	r24, r25
    1c76:	61 f0       	breq	.+24     	; 0x1c90 <__mulsf3+0x162>
    1c78:	16 95       	lsr	r17
    1c7a:	07 95       	ror	r16
    1c7c:	f7 94       	ror	r15
    1c7e:	e7 94       	ror	r14
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	a0 e0       	ldi	r26, 0x00	; 0
    1c86:	b0 e8       	ldi	r27, 0x80	; 128
    1c88:	e8 2a       	or	r14, r24
    1c8a:	f9 2a       	or	r15, r25
    1c8c:	0a 2b       	or	r16, r26
    1c8e:	1b 2b       	or	r17, r27
    1c90:	76 95       	lsr	r23
    1c92:	67 95       	ror	r22
    1c94:	57 95       	ror	r21
    1c96:	47 95       	ror	r20
    1c98:	2f 5f       	subi	r18, 0xFF	; 255
    1c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9c:	77 fd       	sbrc	r23, 7
    1c9e:	e7 cf       	rjmp	.-50     	; 0x1c6e <__mulsf3+0x140>
    1ca0:	0c c0       	rjmp	.+24     	; 0x1cba <__mulsf3+0x18c>
    1ca2:	44 0f       	add	r20, r20
    1ca4:	55 1f       	adc	r21, r21
    1ca6:	66 1f       	adc	r22, r22
    1ca8:	77 1f       	adc	r23, r23
    1caa:	17 fd       	sbrc	r17, 7
    1cac:	41 60       	ori	r20, 0x01	; 1
    1cae:	ee 0c       	add	r14, r14
    1cb0:	ff 1c       	adc	r15, r15
    1cb2:	00 1f       	adc	r16, r16
    1cb4:	11 1f       	adc	r17, r17
    1cb6:	21 50       	subi	r18, 0x01	; 1
    1cb8:	30 40       	sbci	r19, 0x00	; 0
    1cba:	40 30       	cpi	r20, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	59 07       	cpc	r21, r25
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	69 07       	cpc	r22, r25
    1cc4:	90 e4       	ldi	r25, 0x40	; 64
    1cc6:	79 07       	cpc	r23, r25
    1cc8:	60 f3       	brcs	.-40     	; 0x1ca2 <__mulsf3+0x174>
    1cca:	2b 8f       	std	Y+27, r18	; 0x1b
    1ccc:	3c 8f       	std	Y+28, r19	; 0x1c
    1cce:	db 01       	movw	r26, r22
    1cd0:	ca 01       	movw	r24, r20
    1cd2:	8f 77       	andi	r24, 0x7F	; 127
    1cd4:	90 70       	andi	r25, 0x00	; 0
    1cd6:	a0 70       	andi	r26, 0x00	; 0
    1cd8:	b0 70       	andi	r27, 0x00	; 0
    1cda:	80 34       	cpi	r24, 0x40	; 64
    1cdc:	91 05       	cpc	r25, r1
    1cde:	a1 05       	cpc	r26, r1
    1ce0:	b1 05       	cpc	r27, r1
    1ce2:	61 f4       	brne	.+24     	; 0x1cfc <__mulsf3+0x1ce>
    1ce4:	47 fd       	sbrc	r20, 7
    1ce6:	0a c0       	rjmp	.+20     	; 0x1cfc <__mulsf3+0x1ce>
    1ce8:	e1 14       	cp	r14, r1
    1cea:	f1 04       	cpc	r15, r1
    1cec:	01 05       	cpc	r16, r1
    1cee:	11 05       	cpc	r17, r1
    1cf0:	29 f0       	breq	.+10     	; 0x1cfc <__mulsf3+0x1ce>
    1cf2:	40 5c       	subi	r20, 0xC0	; 192
    1cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf6:	6f 4f       	sbci	r22, 0xFF	; 255
    1cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfa:	40 78       	andi	r20, 0x80	; 128
    1cfc:	1a 8e       	std	Y+26, r1	; 0x1a
    1cfe:	fe 17       	cp	r31, r30
    1d00:	11 f0       	breq	.+4      	; 0x1d06 <__mulsf3+0x1d8>
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	8a 8f       	std	Y+26, r24	; 0x1a
    1d06:	4d 8f       	std	Y+29, r20	; 0x1d
    1d08:	5e 8f       	std	Y+30, r21	; 0x1e
    1d0a:	6f 8f       	std	Y+31, r22	; 0x1f
    1d0c:	78 a3       	std	Y+32, r23	; 0x20
    1d0e:	83 e0       	ldi	r24, 0x03	; 3
    1d10:	89 8f       	std	Y+25, r24	; 0x19
    1d12:	ce 01       	movw	r24, r28
    1d14:	49 96       	adiw	r24, 0x19	; 25
    1d16:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__pack_f>
    1d1a:	a0 96       	adiw	r28, 0x20	; 32
    1d1c:	e2 e1       	ldi	r30, 0x12	; 18
    1d1e:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <__epilogue_restores__>

00001d22 <__gtsf2>:
    1d22:	a8 e1       	ldi	r26, 0x18	; 24
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e7 e9       	ldi	r30, 0x97	; 151
    1d28:	fe e0       	ldi	r31, 0x0E	; 14
    1d2a:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__prologue_saves__+0x18>
    1d2e:	69 83       	std	Y+1, r22	; 0x01
    1d30:	7a 83       	std	Y+2, r23	; 0x02
    1d32:	8b 83       	std	Y+3, r24	; 0x03
    1d34:	9c 83       	std	Y+4, r25	; 0x04
    1d36:	2d 83       	std	Y+5, r18	; 0x05
    1d38:	3e 83       	std	Y+6, r19	; 0x06
    1d3a:	4f 83       	std	Y+7, r20	; 0x07
    1d3c:	58 87       	std	Y+8, r21	; 0x08
    1d3e:	89 e0       	ldi	r24, 0x09	; 9
    1d40:	e8 2e       	mov	r14, r24
    1d42:	f1 2c       	mov	r15, r1
    1d44:	ec 0e       	add	r14, r28
    1d46:	fd 1e       	adc	r15, r29
    1d48:	ce 01       	movw	r24, r28
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	b7 01       	movw	r22, r14
    1d4e:	0e 94 4a 10 	call	0x2094	; 0x2094 <__unpack_f>
    1d52:	8e 01       	movw	r16, r28
    1d54:	0f 5e       	subi	r16, 0xEF	; 239
    1d56:	1f 4f       	sbci	r17, 0xFF	; 255
    1d58:	ce 01       	movw	r24, r28
    1d5a:	05 96       	adiw	r24, 0x05	; 5
    1d5c:	b8 01       	movw	r22, r16
    1d5e:	0e 94 4a 10 	call	0x2094	; 0x2094 <__unpack_f>
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	82 30       	cpi	r24, 0x02	; 2
    1d66:	40 f0       	brcs	.+16     	; 0x1d78 <__gtsf2+0x56>
    1d68:	89 89       	ldd	r24, Y+17	; 0x11
    1d6a:	82 30       	cpi	r24, 0x02	; 2
    1d6c:	28 f0       	brcs	.+10     	; 0x1d78 <__gtsf2+0x56>
    1d6e:	c7 01       	movw	r24, r14
    1d70:	b8 01       	movw	r22, r16
    1d72:	0e 94 c2 10 	call	0x2184	; 0x2184 <__fpcmp_parts_f>
    1d76:	01 c0       	rjmp	.+2      	; 0x1d7a <__gtsf2+0x58>
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	68 96       	adiw	r28, 0x18	; 24
    1d7c:	e6 e0       	ldi	r30, 0x06	; 6
    1d7e:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__epilogue_restores__+0x18>

00001d82 <__gesf2>:
    1d82:	a8 e1       	ldi	r26, 0x18	; 24
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e7 ec       	ldi	r30, 0xC7	; 199
    1d88:	fe e0       	ldi	r31, 0x0E	; 14
    1d8a:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__prologue_saves__+0x18>
    1d8e:	69 83       	std	Y+1, r22	; 0x01
    1d90:	7a 83       	std	Y+2, r23	; 0x02
    1d92:	8b 83       	std	Y+3, r24	; 0x03
    1d94:	9c 83       	std	Y+4, r25	; 0x04
    1d96:	2d 83       	std	Y+5, r18	; 0x05
    1d98:	3e 83       	std	Y+6, r19	; 0x06
    1d9a:	4f 83       	std	Y+7, r20	; 0x07
    1d9c:	58 87       	std	Y+8, r21	; 0x08
    1d9e:	89 e0       	ldi	r24, 0x09	; 9
    1da0:	e8 2e       	mov	r14, r24
    1da2:	f1 2c       	mov	r15, r1
    1da4:	ec 0e       	add	r14, r28
    1da6:	fd 1e       	adc	r15, r29
    1da8:	ce 01       	movw	r24, r28
    1daa:	01 96       	adiw	r24, 0x01	; 1
    1dac:	b7 01       	movw	r22, r14
    1dae:	0e 94 4a 10 	call	0x2094	; 0x2094 <__unpack_f>
    1db2:	8e 01       	movw	r16, r28
    1db4:	0f 5e       	subi	r16, 0xEF	; 239
    1db6:	1f 4f       	sbci	r17, 0xFF	; 255
    1db8:	ce 01       	movw	r24, r28
    1dba:	05 96       	adiw	r24, 0x05	; 5
    1dbc:	b8 01       	movw	r22, r16
    1dbe:	0e 94 4a 10 	call	0x2094	; 0x2094 <__unpack_f>
    1dc2:	89 85       	ldd	r24, Y+9	; 0x09
    1dc4:	82 30       	cpi	r24, 0x02	; 2
    1dc6:	40 f0       	brcs	.+16     	; 0x1dd8 <__gesf2+0x56>
    1dc8:	89 89       	ldd	r24, Y+17	; 0x11
    1dca:	82 30       	cpi	r24, 0x02	; 2
    1dcc:	28 f0       	brcs	.+10     	; 0x1dd8 <__gesf2+0x56>
    1dce:	c7 01       	movw	r24, r14
    1dd0:	b8 01       	movw	r22, r16
    1dd2:	0e 94 c2 10 	call	0x2184	; 0x2184 <__fpcmp_parts_f>
    1dd6:	01 c0       	rjmp	.+2      	; 0x1dda <__gesf2+0x58>
    1dd8:	8f ef       	ldi	r24, 0xFF	; 255
    1dda:	68 96       	adiw	r28, 0x18	; 24
    1ddc:	e6 e0       	ldi	r30, 0x06	; 6
    1dde:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__epilogue_restores__+0x18>

00001de2 <__ltsf2>:
    1de2:	a8 e1       	ldi	r26, 0x18	; 24
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e7 ef       	ldi	r30, 0xF7	; 247
    1de8:	fe e0       	ldi	r31, 0x0E	; 14
    1dea:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__prologue_saves__+0x18>
    1dee:	69 83       	std	Y+1, r22	; 0x01
    1df0:	7a 83       	std	Y+2, r23	; 0x02
    1df2:	8b 83       	std	Y+3, r24	; 0x03
    1df4:	9c 83       	std	Y+4, r25	; 0x04
    1df6:	2d 83       	std	Y+5, r18	; 0x05
    1df8:	3e 83       	std	Y+6, r19	; 0x06
    1dfa:	4f 83       	std	Y+7, r20	; 0x07
    1dfc:	58 87       	std	Y+8, r21	; 0x08
    1dfe:	89 e0       	ldi	r24, 0x09	; 9
    1e00:	e8 2e       	mov	r14, r24
    1e02:	f1 2c       	mov	r15, r1
    1e04:	ec 0e       	add	r14, r28
    1e06:	fd 1e       	adc	r15, r29
    1e08:	ce 01       	movw	r24, r28
    1e0a:	01 96       	adiw	r24, 0x01	; 1
    1e0c:	b7 01       	movw	r22, r14
    1e0e:	0e 94 4a 10 	call	0x2094	; 0x2094 <__unpack_f>
    1e12:	8e 01       	movw	r16, r28
    1e14:	0f 5e       	subi	r16, 0xEF	; 239
    1e16:	1f 4f       	sbci	r17, 0xFF	; 255
    1e18:	ce 01       	movw	r24, r28
    1e1a:	05 96       	adiw	r24, 0x05	; 5
    1e1c:	b8 01       	movw	r22, r16
    1e1e:	0e 94 4a 10 	call	0x2094	; 0x2094 <__unpack_f>
    1e22:	89 85       	ldd	r24, Y+9	; 0x09
    1e24:	82 30       	cpi	r24, 0x02	; 2
    1e26:	40 f0       	brcs	.+16     	; 0x1e38 <__ltsf2+0x56>
    1e28:	89 89       	ldd	r24, Y+17	; 0x11
    1e2a:	82 30       	cpi	r24, 0x02	; 2
    1e2c:	28 f0       	brcs	.+10     	; 0x1e38 <__ltsf2+0x56>
    1e2e:	c7 01       	movw	r24, r14
    1e30:	b8 01       	movw	r22, r16
    1e32:	0e 94 c2 10 	call	0x2184	; 0x2184 <__fpcmp_parts_f>
    1e36:	01 c0       	rjmp	.+2      	; 0x1e3a <__ltsf2+0x58>
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	68 96       	adiw	r28, 0x18	; 24
    1e3c:	e6 e0       	ldi	r30, 0x06	; 6
    1e3e:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__epilogue_restores__+0x18>

00001e42 <__fixsfsi>:
    1e42:	ac e0       	ldi	r26, 0x0C	; 12
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e7 e2       	ldi	r30, 0x27	; 39
    1e48:	ff e0       	ldi	r31, 0x0F	; 15
    1e4a:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__prologue_saves__+0x20>
    1e4e:	69 83       	std	Y+1, r22	; 0x01
    1e50:	7a 83       	std	Y+2, r23	; 0x02
    1e52:	8b 83       	std	Y+3, r24	; 0x03
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	ce 01       	movw	r24, r28
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	be 01       	movw	r22, r28
    1e5c:	6b 5f       	subi	r22, 0xFB	; 251
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e60:	0e 94 4a 10 	call	0x2094	; 0x2094 <__unpack_f>
    1e64:	8d 81       	ldd	r24, Y+5	; 0x05
    1e66:	82 30       	cpi	r24, 0x02	; 2
    1e68:	61 f1       	breq	.+88     	; 0x1ec2 <__fixsfsi+0x80>
    1e6a:	82 30       	cpi	r24, 0x02	; 2
    1e6c:	50 f1       	brcs	.+84     	; 0x1ec2 <__fixsfsi+0x80>
    1e6e:	84 30       	cpi	r24, 0x04	; 4
    1e70:	21 f4       	brne	.+8      	; 0x1e7a <__fixsfsi+0x38>
    1e72:	8e 81       	ldd	r24, Y+6	; 0x06
    1e74:	88 23       	and	r24, r24
    1e76:	51 f1       	breq	.+84     	; 0x1ecc <__fixsfsi+0x8a>
    1e78:	2e c0       	rjmp	.+92     	; 0x1ed6 <__fixsfsi+0x94>
    1e7a:	2f 81       	ldd	r18, Y+7	; 0x07
    1e7c:	38 85       	ldd	r19, Y+8	; 0x08
    1e7e:	37 fd       	sbrc	r19, 7
    1e80:	20 c0       	rjmp	.+64     	; 0x1ec2 <__fixsfsi+0x80>
    1e82:	6e 81       	ldd	r22, Y+6	; 0x06
    1e84:	2f 31       	cpi	r18, 0x1F	; 31
    1e86:	31 05       	cpc	r19, r1
    1e88:	1c f0       	brlt	.+6      	; 0x1e90 <__fixsfsi+0x4e>
    1e8a:	66 23       	and	r22, r22
    1e8c:	f9 f0       	breq	.+62     	; 0x1ecc <__fixsfsi+0x8a>
    1e8e:	23 c0       	rjmp	.+70     	; 0x1ed6 <__fixsfsi+0x94>
    1e90:	8e e1       	ldi	r24, 0x1E	; 30
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	82 1b       	sub	r24, r18
    1e96:	93 0b       	sbc	r25, r19
    1e98:	29 85       	ldd	r18, Y+9	; 0x09
    1e9a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e9c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e9e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ea0:	04 c0       	rjmp	.+8      	; 0x1eaa <__fixsfsi+0x68>
    1ea2:	56 95       	lsr	r21
    1ea4:	47 95       	ror	r20
    1ea6:	37 95       	ror	r19
    1ea8:	27 95       	ror	r18
    1eaa:	8a 95       	dec	r24
    1eac:	d2 f7       	brpl	.-12     	; 0x1ea2 <__fixsfsi+0x60>
    1eae:	66 23       	and	r22, r22
    1eb0:	b1 f0       	breq	.+44     	; 0x1ede <__fixsfsi+0x9c>
    1eb2:	50 95       	com	r21
    1eb4:	40 95       	com	r20
    1eb6:	30 95       	com	r19
    1eb8:	21 95       	neg	r18
    1eba:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebc:	4f 4f       	sbci	r20, 0xFF	; 255
    1ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec0:	0e c0       	rjmp	.+28     	; 0x1ede <__fixsfsi+0x9c>
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	09 c0       	rjmp	.+18     	; 0x1ede <__fixsfsi+0x9c>
    1ecc:	2f ef       	ldi	r18, 0xFF	; 255
    1ece:	3f ef       	ldi	r19, 0xFF	; 255
    1ed0:	4f ef       	ldi	r20, 0xFF	; 255
    1ed2:	5f e7       	ldi	r21, 0x7F	; 127
    1ed4:	04 c0       	rjmp	.+8      	; 0x1ede <__fixsfsi+0x9c>
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	50 e8       	ldi	r21, 0x80	; 128
    1ede:	b9 01       	movw	r22, r18
    1ee0:	ca 01       	movw	r24, r20
    1ee2:	2c 96       	adiw	r28, 0x0c	; 12
    1ee4:	e2 e0       	ldi	r30, 0x02	; 2
    1ee6:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__epilogue_restores__+0x20>

00001eea <__pack_f>:
    1eea:	df 92       	push	r13
    1eec:	ef 92       	push	r14
    1eee:	ff 92       	push	r15
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	e4 80       	ldd	r14, Z+4	; 0x04
    1ef8:	f5 80       	ldd	r15, Z+5	; 0x05
    1efa:	06 81       	ldd	r16, Z+6	; 0x06
    1efc:	17 81       	ldd	r17, Z+7	; 0x07
    1efe:	d1 80       	ldd	r13, Z+1	; 0x01
    1f00:	80 81       	ld	r24, Z
    1f02:	82 30       	cpi	r24, 0x02	; 2
    1f04:	48 f4       	brcc	.+18     	; 0x1f18 <__pack_f+0x2e>
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	a0 e1       	ldi	r26, 0x10	; 16
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e8 2a       	or	r14, r24
    1f10:	f9 2a       	or	r15, r25
    1f12:	0a 2b       	or	r16, r26
    1f14:	1b 2b       	or	r17, r27
    1f16:	a5 c0       	rjmp	.+330    	; 0x2062 <__pack_f+0x178>
    1f18:	84 30       	cpi	r24, 0x04	; 4
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <__pack_f+0x34>
    1f1c:	9f c0       	rjmp	.+318    	; 0x205c <__pack_f+0x172>
    1f1e:	82 30       	cpi	r24, 0x02	; 2
    1f20:	21 f4       	brne	.+8      	; 0x1f2a <__pack_f+0x40>
    1f22:	ee 24       	eor	r14, r14
    1f24:	ff 24       	eor	r15, r15
    1f26:	87 01       	movw	r16, r14
    1f28:	05 c0       	rjmp	.+10     	; 0x1f34 <__pack_f+0x4a>
    1f2a:	e1 14       	cp	r14, r1
    1f2c:	f1 04       	cpc	r15, r1
    1f2e:	01 05       	cpc	r16, r1
    1f30:	11 05       	cpc	r17, r1
    1f32:	19 f4       	brne	.+6      	; 0x1f3a <__pack_f+0x50>
    1f34:	e0 e0       	ldi	r30, 0x00	; 0
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	96 c0       	rjmp	.+300    	; 0x2066 <__pack_f+0x17c>
    1f3a:	62 81       	ldd	r22, Z+2	; 0x02
    1f3c:	73 81       	ldd	r23, Z+3	; 0x03
    1f3e:	9f ef       	ldi	r25, 0xFF	; 255
    1f40:	62 38       	cpi	r22, 0x82	; 130
    1f42:	79 07       	cpc	r23, r25
    1f44:	0c f0       	brlt	.+2      	; 0x1f48 <__pack_f+0x5e>
    1f46:	5b c0       	rjmp	.+182    	; 0x1ffe <__pack_f+0x114>
    1f48:	22 e8       	ldi	r18, 0x82	; 130
    1f4a:	3f ef       	ldi	r19, 0xFF	; 255
    1f4c:	26 1b       	sub	r18, r22
    1f4e:	37 0b       	sbc	r19, r23
    1f50:	2a 31       	cpi	r18, 0x1A	; 26
    1f52:	31 05       	cpc	r19, r1
    1f54:	2c f0       	brlt	.+10     	; 0x1f60 <__pack_f+0x76>
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	50 e0       	ldi	r21, 0x00	; 0
    1f5e:	2a c0       	rjmp	.+84     	; 0x1fb4 <__pack_f+0xca>
    1f60:	b8 01       	movw	r22, r16
    1f62:	a7 01       	movw	r20, r14
    1f64:	02 2e       	mov	r0, r18
    1f66:	04 c0       	rjmp	.+8      	; 0x1f70 <__pack_f+0x86>
    1f68:	76 95       	lsr	r23
    1f6a:	67 95       	ror	r22
    1f6c:	57 95       	ror	r21
    1f6e:	47 95       	ror	r20
    1f70:	0a 94       	dec	r0
    1f72:	d2 f7       	brpl	.-12     	; 0x1f68 <__pack_f+0x7e>
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	a0 e0       	ldi	r26, 0x00	; 0
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	04 c0       	rjmp	.+8      	; 0x1f86 <__pack_f+0x9c>
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	aa 1f       	adc	r26, r26
    1f84:	bb 1f       	adc	r27, r27
    1f86:	2a 95       	dec	r18
    1f88:	d2 f7       	brpl	.-12     	; 0x1f7e <__pack_f+0x94>
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	a1 09       	sbc	r26, r1
    1f8e:	b1 09       	sbc	r27, r1
    1f90:	8e 21       	and	r24, r14
    1f92:	9f 21       	and	r25, r15
    1f94:	a0 23       	and	r26, r16
    1f96:	b1 23       	and	r27, r17
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	a1 05       	cpc	r26, r1
    1f9c:	b1 05       	cpc	r27, r1
    1f9e:	21 f0       	breq	.+8      	; 0x1fa8 <__pack_f+0xbe>
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	a0 e0       	ldi	r26, 0x00	; 0
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	9a 01       	movw	r18, r20
    1faa:	ab 01       	movw	r20, r22
    1fac:	28 2b       	or	r18, r24
    1fae:	39 2b       	or	r19, r25
    1fb0:	4a 2b       	or	r20, r26
    1fb2:	5b 2b       	or	r21, r27
    1fb4:	da 01       	movw	r26, r20
    1fb6:	c9 01       	movw	r24, r18
    1fb8:	8f 77       	andi	r24, 0x7F	; 127
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	a0 70       	andi	r26, 0x00	; 0
    1fbe:	b0 70       	andi	r27, 0x00	; 0
    1fc0:	80 34       	cpi	r24, 0x40	; 64
    1fc2:	91 05       	cpc	r25, r1
    1fc4:	a1 05       	cpc	r26, r1
    1fc6:	b1 05       	cpc	r27, r1
    1fc8:	39 f4       	brne	.+14     	; 0x1fd8 <__pack_f+0xee>
    1fca:	27 ff       	sbrs	r18, 7
    1fcc:	09 c0       	rjmp	.+18     	; 0x1fe0 <__pack_f+0xf6>
    1fce:	20 5c       	subi	r18, 0xC0	; 192
    1fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd2:	4f 4f       	sbci	r20, 0xFF	; 255
    1fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd6:	04 c0       	rjmp	.+8      	; 0x1fe0 <__pack_f+0xf6>
    1fd8:	21 5c       	subi	r18, 0xC1	; 193
    1fda:	3f 4f       	sbci	r19, 0xFF	; 255
    1fdc:	4f 4f       	sbci	r20, 0xFF	; 255
    1fde:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe0:	e0 e0       	ldi	r30, 0x00	; 0
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	20 30       	cpi	r18, 0x00	; 0
    1fe6:	a0 e0       	ldi	r26, 0x00	; 0
    1fe8:	3a 07       	cpc	r19, r26
    1fea:	a0 e0       	ldi	r26, 0x00	; 0
    1fec:	4a 07       	cpc	r20, r26
    1fee:	a0 e4       	ldi	r26, 0x40	; 64
    1ff0:	5a 07       	cpc	r21, r26
    1ff2:	10 f0       	brcs	.+4      	; 0x1ff8 <__pack_f+0x10e>
    1ff4:	e1 e0       	ldi	r30, 0x01	; 1
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	79 01       	movw	r14, r18
    1ffa:	8a 01       	movw	r16, r20
    1ffc:	27 c0       	rjmp	.+78     	; 0x204c <__pack_f+0x162>
    1ffe:	60 38       	cpi	r22, 0x80	; 128
    2000:	71 05       	cpc	r23, r1
    2002:	64 f5       	brge	.+88     	; 0x205c <__pack_f+0x172>
    2004:	fb 01       	movw	r30, r22
    2006:	e1 58       	subi	r30, 0x81	; 129
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	d8 01       	movw	r26, r16
    200c:	c7 01       	movw	r24, r14
    200e:	8f 77       	andi	r24, 0x7F	; 127
    2010:	90 70       	andi	r25, 0x00	; 0
    2012:	a0 70       	andi	r26, 0x00	; 0
    2014:	b0 70       	andi	r27, 0x00	; 0
    2016:	80 34       	cpi	r24, 0x40	; 64
    2018:	91 05       	cpc	r25, r1
    201a:	a1 05       	cpc	r26, r1
    201c:	b1 05       	cpc	r27, r1
    201e:	39 f4       	brne	.+14     	; 0x202e <__pack_f+0x144>
    2020:	e7 fe       	sbrs	r14, 7
    2022:	0d c0       	rjmp	.+26     	; 0x203e <__pack_f+0x154>
    2024:	80 e4       	ldi	r24, 0x40	; 64
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a0 e0       	ldi	r26, 0x00	; 0
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	04 c0       	rjmp	.+8      	; 0x2036 <__pack_f+0x14c>
    202e:	8f e3       	ldi	r24, 0x3F	; 63
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a0 e0       	ldi	r26, 0x00	; 0
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e8 0e       	add	r14, r24
    2038:	f9 1e       	adc	r15, r25
    203a:	0a 1f       	adc	r16, r26
    203c:	1b 1f       	adc	r17, r27
    203e:	17 ff       	sbrs	r17, 7
    2040:	05 c0       	rjmp	.+10     	; 0x204c <__pack_f+0x162>
    2042:	16 95       	lsr	r17
    2044:	07 95       	ror	r16
    2046:	f7 94       	ror	r15
    2048:	e7 94       	ror	r14
    204a:	31 96       	adiw	r30, 0x01	; 1
    204c:	87 e0       	ldi	r24, 0x07	; 7
    204e:	16 95       	lsr	r17
    2050:	07 95       	ror	r16
    2052:	f7 94       	ror	r15
    2054:	e7 94       	ror	r14
    2056:	8a 95       	dec	r24
    2058:	d1 f7       	brne	.-12     	; 0x204e <__pack_f+0x164>
    205a:	05 c0       	rjmp	.+10     	; 0x2066 <__pack_f+0x17c>
    205c:	ee 24       	eor	r14, r14
    205e:	ff 24       	eor	r15, r15
    2060:	87 01       	movw	r16, r14
    2062:	ef ef       	ldi	r30, 0xFF	; 255
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	6e 2f       	mov	r22, r30
    2068:	67 95       	ror	r22
    206a:	66 27       	eor	r22, r22
    206c:	67 95       	ror	r22
    206e:	90 2f       	mov	r25, r16
    2070:	9f 77       	andi	r25, 0x7F	; 127
    2072:	d7 94       	ror	r13
    2074:	dd 24       	eor	r13, r13
    2076:	d7 94       	ror	r13
    2078:	8e 2f       	mov	r24, r30
    207a:	86 95       	lsr	r24
    207c:	49 2f       	mov	r20, r25
    207e:	46 2b       	or	r20, r22
    2080:	58 2f       	mov	r21, r24
    2082:	5d 29       	or	r21, r13
    2084:	b7 01       	movw	r22, r14
    2086:	ca 01       	movw	r24, r20
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	ff 90       	pop	r15
    208e:	ef 90       	pop	r14
    2090:	df 90       	pop	r13
    2092:	08 95       	ret

00002094 <__unpack_f>:
    2094:	fc 01       	movw	r30, r24
    2096:	db 01       	movw	r26, r22
    2098:	40 81       	ld	r20, Z
    209a:	51 81       	ldd	r21, Z+1	; 0x01
    209c:	22 81       	ldd	r18, Z+2	; 0x02
    209e:	62 2f       	mov	r22, r18
    20a0:	6f 77       	andi	r22, 0x7F	; 127
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	22 1f       	adc	r18, r18
    20a6:	22 27       	eor	r18, r18
    20a8:	22 1f       	adc	r18, r18
    20aa:	93 81       	ldd	r25, Z+3	; 0x03
    20ac:	89 2f       	mov	r24, r25
    20ae:	88 0f       	add	r24, r24
    20b0:	82 2b       	or	r24, r18
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	99 1f       	adc	r25, r25
    20b8:	99 27       	eor	r25, r25
    20ba:	99 1f       	adc	r25, r25
    20bc:	11 96       	adiw	r26, 0x01	; 1
    20be:	9c 93       	st	X, r25
    20c0:	11 97       	sbiw	r26, 0x01	; 1
    20c2:	21 15       	cp	r18, r1
    20c4:	31 05       	cpc	r19, r1
    20c6:	a9 f5       	brne	.+106    	; 0x2132 <__unpack_f+0x9e>
    20c8:	41 15       	cp	r20, r1
    20ca:	51 05       	cpc	r21, r1
    20cc:	61 05       	cpc	r22, r1
    20ce:	71 05       	cpc	r23, r1
    20d0:	11 f4       	brne	.+4      	; 0x20d6 <__unpack_f+0x42>
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	37 c0       	rjmp	.+110    	; 0x2144 <__unpack_f+0xb0>
    20d6:	82 e8       	ldi	r24, 0x82	; 130
    20d8:	9f ef       	ldi	r25, 0xFF	; 255
    20da:	13 96       	adiw	r26, 0x03	; 3
    20dc:	9c 93       	st	X, r25
    20de:	8e 93       	st	-X, r24
    20e0:	12 97       	sbiw	r26, 0x02	; 2
    20e2:	9a 01       	movw	r18, r20
    20e4:	ab 01       	movw	r20, r22
    20e6:	67 e0       	ldi	r22, 0x07	; 7
    20e8:	22 0f       	add	r18, r18
    20ea:	33 1f       	adc	r19, r19
    20ec:	44 1f       	adc	r20, r20
    20ee:	55 1f       	adc	r21, r21
    20f0:	6a 95       	dec	r22
    20f2:	d1 f7       	brne	.-12     	; 0x20e8 <__unpack_f+0x54>
    20f4:	83 e0       	ldi	r24, 0x03	; 3
    20f6:	8c 93       	st	X, r24
    20f8:	0d c0       	rjmp	.+26     	; 0x2114 <__unpack_f+0x80>
    20fa:	22 0f       	add	r18, r18
    20fc:	33 1f       	adc	r19, r19
    20fe:	44 1f       	adc	r20, r20
    2100:	55 1f       	adc	r21, r21
    2102:	12 96       	adiw	r26, 0x02	; 2
    2104:	8d 91       	ld	r24, X+
    2106:	9c 91       	ld	r25, X
    2108:	13 97       	sbiw	r26, 0x03	; 3
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	13 96       	adiw	r26, 0x03	; 3
    210e:	9c 93       	st	X, r25
    2110:	8e 93       	st	-X, r24
    2112:	12 97       	sbiw	r26, 0x02	; 2
    2114:	20 30       	cpi	r18, 0x00	; 0
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	38 07       	cpc	r19, r24
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	48 07       	cpc	r20, r24
    211e:	80 e4       	ldi	r24, 0x40	; 64
    2120:	58 07       	cpc	r21, r24
    2122:	58 f3       	brcs	.-42     	; 0x20fa <__unpack_f+0x66>
    2124:	14 96       	adiw	r26, 0x04	; 4
    2126:	2d 93       	st	X+, r18
    2128:	3d 93       	st	X+, r19
    212a:	4d 93       	st	X+, r20
    212c:	5c 93       	st	X, r21
    212e:	17 97       	sbiw	r26, 0x07	; 7
    2130:	08 95       	ret
    2132:	2f 3f       	cpi	r18, 0xFF	; 255
    2134:	31 05       	cpc	r19, r1
    2136:	79 f4       	brne	.+30     	; 0x2156 <__unpack_f+0xc2>
    2138:	41 15       	cp	r20, r1
    213a:	51 05       	cpc	r21, r1
    213c:	61 05       	cpc	r22, r1
    213e:	71 05       	cpc	r23, r1
    2140:	19 f4       	brne	.+6      	; 0x2148 <__unpack_f+0xb4>
    2142:	84 e0       	ldi	r24, 0x04	; 4
    2144:	8c 93       	st	X, r24
    2146:	08 95       	ret
    2148:	64 ff       	sbrs	r22, 4
    214a:	03 c0       	rjmp	.+6      	; 0x2152 <__unpack_f+0xbe>
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	8c 93       	st	X, r24
    2150:	12 c0       	rjmp	.+36     	; 0x2176 <__unpack_f+0xe2>
    2152:	1c 92       	st	X, r1
    2154:	10 c0       	rjmp	.+32     	; 0x2176 <__unpack_f+0xe2>
    2156:	2f 57       	subi	r18, 0x7F	; 127
    2158:	30 40       	sbci	r19, 0x00	; 0
    215a:	13 96       	adiw	r26, 0x03	; 3
    215c:	3c 93       	st	X, r19
    215e:	2e 93       	st	-X, r18
    2160:	12 97       	sbiw	r26, 0x02	; 2
    2162:	83 e0       	ldi	r24, 0x03	; 3
    2164:	8c 93       	st	X, r24
    2166:	87 e0       	ldi	r24, 0x07	; 7
    2168:	44 0f       	add	r20, r20
    216a:	55 1f       	adc	r21, r21
    216c:	66 1f       	adc	r22, r22
    216e:	77 1f       	adc	r23, r23
    2170:	8a 95       	dec	r24
    2172:	d1 f7       	brne	.-12     	; 0x2168 <__unpack_f+0xd4>
    2174:	70 64       	ori	r23, 0x40	; 64
    2176:	14 96       	adiw	r26, 0x04	; 4
    2178:	4d 93       	st	X+, r20
    217a:	5d 93       	st	X+, r21
    217c:	6d 93       	st	X+, r22
    217e:	7c 93       	st	X, r23
    2180:	17 97       	sbiw	r26, 0x07	; 7
    2182:	08 95       	ret

00002184 <__fpcmp_parts_f>:
    2184:	1f 93       	push	r17
    2186:	dc 01       	movw	r26, r24
    2188:	fb 01       	movw	r30, r22
    218a:	9c 91       	ld	r25, X
    218c:	92 30       	cpi	r25, 0x02	; 2
    218e:	08 f4       	brcc	.+2      	; 0x2192 <__fpcmp_parts_f+0xe>
    2190:	47 c0       	rjmp	.+142    	; 0x2220 <__fpcmp_parts_f+0x9c>
    2192:	80 81       	ld	r24, Z
    2194:	82 30       	cpi	r24, 0x02	; 2
    2196:	08 f4       	brcc	.+2      	; 0x219a <__fpcmp_parts_f+0x16>
    2198:	43 c0       	rjmp	.+134    	; 0x2220 <__fpcmp_parts_f+0x9c>
    219a:	94 30       	cpi	r25, 0x04	; 4
    219c:	51 f4       	brne	.+20     	; 0x21b2 <__fpcmp_parts_f+0x2e>
    219e:	11 96       	adiw	r26, 0x01	; 1
    21a0:	1c 91       	ld	r17, X
    21a2:	84 30       	cpi	r24, 0x04	; 4
    21a4:	99 f5       	brne	.+102    	; 0x220c <__fpcmp_parts_f+0x88>
    21a6:	81 81       	ldd	r24, Z+1	; 0x01
    21a8:	68 2f       	mov	r22, r24
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	61 1b       	sub	r22, r17
    21ae:	71 09       	sbc	r23, r1
    21b0:	3f c0       	rjmp	.+126    	; 0x2230 <__fpcmp_parts_f+0xac>
    21b2:	84 30       	cpi	r24, 0x04	; 4
    21b4:	21 f0       	breq	.+8      	; 0x21be <__fpcmp_parts_f+0x3a>
    21b6:	92 30       	cpi	r25, 0x02	; 2
    21b8:	31 f4       	brne	.+12     	; 0x21c6 <__fpcmp_parts_f+0x42>
    21ba:	82 30       	cpi	r24, 0x02	; 2
    21bc:	b9 f1       	breq	.+110    	; 0x222c <__fpcmp_parts_f+0xa8>
    21be:	81 81       	ldd	r24, Z+1	; 0x01
    21c0:	88 23       	and	r24, r24
    21c2:	89 f1       	breq	.+98     	; 0x2226 <__fpcmp_parts_f+0xa2>
    21c4:	2d c0       	rjmp	.+90     	; 0x2220 <__fpcmp_parts_f+0x9c>
    21c6:	11 96       	adiw	r26, 0x01	; 1
    21c8:	1c 91       	ld	r17, X
    21ca:	11 97       	sbiw	r26, 0x01	; 1
    21cc:	82 30       	cpi	r24, 0x02	; 2
    21ce:	f1 f0       	breq	.+60     	; 0x220c <__fpcmp_parts_f+0x88>
    21d0:	81 81       	ldd	r24, Z+1	; 0x01
    21d2:	18 17       	cp	r17, r24
    21d4:	d9 f4       	brne	.+54     	; 0x220c <__fpcmp_parts_f+0x88>
    21d6:	12 96       	adiw	r26, 0x02	; 2
    21d8:	2d 91       	ld	r18, X+
    21da:	3c 91       	ld	r19, X
    21dc:	13 97       	sbiw	r26, 0x03	; 3
    21de:	82 81       	ldd	r24, Z+2	; 0x02
    21e0:	93 81       	ldd	r25, Z+3	; 0x03
    21e2:	82 17       	cp	r24, r18
    21e4:	93 07       	cpc	r25, r19
    21e6:	94 f0       	brlt	.+36     	; 0x220c <__fpcmp_parts_f+0x88>
    21e8:	28 17       	cp	r18, r24
    21ea:	39 07       	cpc	r19, r25
    21ec:	bc f0       	brlt	.+46     	; 0x221c <__fpcmp_parts_f+0x98>
    21ee:	14 96       	adiw	r26, 0x04	; 4
    21f0:	8d 91       	ld	r24, X+
    21f2:	9d 91       	ld	r25, X+
    21f4:	0d 90       	ld	r0, X+
    21f6:	bc 91       	ld	r27, X
    21f8:	a0 2d       	mov	r26, r0
    21fa:	24 81       	ldd	r18, Z+4	; 0x04
    21fc:	35 81       	ldd	r19, Z+5	; 0x05
    21fe:	46 81       	ldd	r20, Z+6	; 0x06
    2200:	57 81       	ldd	r21, Z+7	; 0x07
    2202:	28 17       	cp	r18, r24
    2204:	39 07       	cpc	r19, r25
    2206:	4a 07       	cpc	r20, r26
    2208:	5b 07       	cpc	r21, r27
    220a:	18 f4       	brcc	.+6      	; 0x2212 <__fpcmp_parts_f+0x8e>
    220c:	11 23       	and	r17, r17
    220e:	41 f0       	breq	.+16     	; 0x2220 <__fpcmp_parts_f+0x9c>
    2210:	0a c0       	rjmp	.+20     	; 0x2226 <__fpcmp_parts_f+0xa2>
    2212:	82 17       	cp	r24, r18
    2214:	93 07       	cpc	r25, r19
    2216:	a4 07       	cpc	r26, r20
    2218:	b5 07       	cpc	r27, r21
    221a:	40 f4       	brcc	.+16     	; 0x222c <__fpcmp_parts_f+0xa8>
    221c:	11 23       	and	r17, r17
    221e:	19 f0       	breq	.+6      	; 0x2226 <__fpcmp_parts_f+0xa2>
    2220:	61 e0       	ldi	r22, 0x01	; 1
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	05 c0       	rjmp	.+10     	; 0x2230 <__fpcmp_parts_f+0xac>
    2226:	6f ef       	ldi	r22, 0xFF	; 255
    2228:	7f ef       	ldi	r23, 0xFF	; 255
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <__fpcmp_parts_f+0xac>
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	cb 01       	movw	r24, r22
    2232:	1f 91       	pop	r17
    2234:	08 95       	ret

00002236 <__udivmodhi4>:
    2236:	aa 1b       	sub	r26, r26
    2238:	bb 1b       	sub	r27, r27
    223a:	51 e1       	ldi	r21, 0x11	; 17
    223c:	07 c0       	rjmp	.+14     	; 0x224c <__udivmodhi4_ep>

0000223e <__udivmodhi4_loop>:
    223e:	aa 1f       	adc	r26, r26
    2240:	bb 1f       	adc	r27, r27
    2242:	a6 17       	cp	r26, r22
    2244:	b7 07       	cpc	r27, r23
    2246:	10 f0       	brcs	.+4      	; 0x224c <__udivmodhi4_ep>
    2248:	a6 1b       	sub	r26, r22
    224a:	b7 0b       	sbc	r27, r23

0000224c <__udivmodhi4_ep>:
    224c:	88 1f       	adc	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	5a 95       	dec	r21
    2252:	a9 f7       	brne	.-22     	; 0x223e <__udivmodhi4_loop>
    2254:	80 95       	com	r24
    2256:	90 95       	com	r25
    2258:	bc 01       	movw	r22, r24
    225a:	cd 01       	movw	r24, r26
    225c:	08 95       	ret

0000225e <__divmodhi4>:
    225e:	97 fb       	bst	r25, 7
    2260:	09 2e       	mov	r0, r25
    2262:	07 26       	eor	r0, r23
    2264:	0a d0       	rcall	.+20     	; 0x227a <__divmodhi4_neg1>
    2266:	77 fd       	sbrc	r23, 7
    2268:	04 d0       	rcall	.+8      	; 0x2272 <__divmodhi4_neg2>
    226a:	e5 df       	rcall	.-54     	; 0x2236 <__udivmodhi4>
    226c:	06 d0       	rcall	.+12     	; 0x227a <__divmodhi4_neg1>
    226e:	00 20       	and	r0, r0
    2270:	1a f4       	brpl	.+6      	; 0x2278 <__divmodhi4_exit>

00002272 <__divmodhi4_neg2>:
    2272:	70 95       	com	r23
    2274:	61 95       	neg	r22
    2276:	7f 4f       	sbci	r23, 0xFF	; 255

00002278 <__divmodhi4_exit>:
    2278:	08 95       	ret

0000227a <__divmodhi4_neg1>:
    227a:	f6 f7       	brtc	.-4      	; 0x2278 <__divmodhi4_exit>
    227c:	90 95       	com	r25
    227e:	81 95       	neg	r24
    2280:	9f 4f       	sbci	r25, 0xFF	; 255
    2282:	08 95       	ret

00002284 <__prologue_saves__>:
    2284:	2f 92       	push	r2
    2286:	3f 92       	push	r3
    2288:	4f 92       	push	r4
    228a:	5f 92       	push	r5
    228c:	6f 92       	push	r6
    228e:	7f 92       	push	r7
    2290:	8f 92       	push	r8
    2292:	9f 92       	push	r9
    2294:	af 92       	push	r10
    2296:	bf 92       	push	r11
    2298:	cf 92       	push	r12
    229a:	df 92       	push	r13
    229c:	ef 92       	push	r14
    229e:	ff 92       	push	r15
    22a0:	0f 93       	push	r16
    22a2:	1f 93       	push	r17
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	ca 1b       	sub	r28, r26
    22ae:	db 0b       	sbc	r29, r27
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	09 94       	ijmp

000022bc <__epilogue_restores__>:
    22bc:	2a 88       	ldd	r2, Y+18	; 0x12
    22be:	39 88       	ldd	r3, Y+17	; 0x11
    22c0:	48 88       	ldd	r4, Y+16	; 0x10
    22c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    22c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    22c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    22c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    22ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    22cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    22ce:	b9 84       	ldd	r11, Y+9	; 0x09
    22d0:	c8 84       	ldd	r12, Y+8	; 0x08
    22d2:	df 80       	ldd	r13, Y+7	; 0x07
    22d4:	ee 80       	ldd	r14, Y+6	; 0x06
    22d6:	fd 80       	ldd	r15, Y+5	; 0x05
    22d8:	0c 81       	ldd	r16, Y+4	; 0x04
    22da:	1b 81       	ldd	r17, Y+3	; 0x03
    22dc:	aa 81       	ldd	r26, Y+2	; 0x02
    22de:	b9 81       	ldd	r27, Y+1	; 0x01
    22e0:	ce 0f       	add	r28, r30
    22e2:	d1 1d       	adc	r29, r1
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	ed 01       	movw	r28, r26
    22f0:	08 95       	ret

000022f2 <strlen>:
    22f2:	fc 01       	movw	r30, r24
    22f4:	01 90       	ld	r0, Z+
    22f6:	00 20       	and	r0, r0
    22f8:	e9 f7       	brne	.-6      	; 0x22f4 <strlen+0x2>
    22fa:	80 95       	com	r24
    22fc:	90 95       	com	r25
    22fe:	8e 0f       	add	r24, r30
    2300:	9f 1f       	adc	r25, r31
    2302:	08 95       	ret

00002304 <_exit>:
    2304:	f8 94       	cli

00002306 <__stop_program>:
    2306:	ff cf       	rjmp	.-2      	; 0x2306 <__stop_program>
