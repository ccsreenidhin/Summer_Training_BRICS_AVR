
lcd2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002834  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00002834  000028a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000291c  00000000  00000000  000028cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010c4  00000000  00000000  000051e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000062ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001c9  00000000  00000000  0000644c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022af  00000000  00000000  00006615  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001267  00000000  00000000  000088c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013c7  00000000  00000000  00009b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000aef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  0000b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c9d  00000000  00000000  0000b4db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000c178  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d4 e0       	ldi	r29, 0x04	; 4
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	e4 e3       	ldi	r30, 0x34	; 52
      a8:	f8 e2       	ldi	r31, 0x28	; 40
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
      b0:	a2 38       	cpi	r26, 0x82	; 130
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>
      b6:	0e 94 98 00 	call	0x130	; 0x130 <main>
      ba:	0c 94 18 14 	jmp	0x2830	; 0x2830 <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <read_adc>:

#define ADC_VREF_TYPE 0x00

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	0f 92       	push	r0
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
      cc:	89 83       	std	Y+1, r24	; 0x01
ADMUX=adc_input|ADC_VREF_TYPE;
      ce:	e7 e2       	ldi	r30, 0x27	; 39
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	89 81       	ldd	r24, Y+1	; 0x01
      d4:	80 83       	st	Z, r24
// Start the AD conversion
ADCSRA|=0x40;
      d6:	a6 e2       	ldi	r26, 0x26	; 38
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e6 e2       	ldi	r30, 0x26	; 38
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	80 64       	ori	r24, 0x40	; 64
      e2:	8c 93       	st	X, r24
// Wait for the AD conversion to complete
while ((ADCSRA & 0x10)==0);
      e4:	e6 e2       	ldi	r30, 0x26	; 38
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	88 2f       	mov	r24, r24
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	80 71       	andi	r24, 0x10	; 16
      f0:	90 70       	andi	r25, 0x00	; 0
      f2:	00 97       	sbiw	r24, 0x00	; 0
      f4:	b9 f3       	breq	.-18     	; 0xe4 <read_adc+0x22>
ADCSRA|=0x10;
      f6:	a6 e2       	ldi	r26, 0x26	; 38
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e6 e2       	ldi	r30, 0x26	; 38
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	80 81       	ld	r24, Z
     100:	80 61       	ori	r24, 0x10	; 16
     102:	8c 93       	st	X, r24
return ADCW;
     104:	e4 e2       	ldi	r30, 0x24	; 36
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	80 81       	ld	r24, Z
     10a:	91 81       	ldd	r25, Z+1	; 0x01
}
     10c:	0f 90       	pop	r0
     10e:	cf 91       	pop	r28
     110:	df 91       	pop	r29
     112:	08 95       	ret

00000114 <ADCinit>:




void ADCinit()
{
     114:	df 93       	push	r29
     116:	cf 93       	push	r28
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
ADMUX=0b00000000;
     11c:	e7 e2       	ldi	r30, 0x27	; 39
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	10 82       	st	Z, r1
ADCSRA=0x85;
     122:	e6 e2       	ldi	r30, 0x26	; 38
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	85 e8       	ldi	r24, 0x85	; 133
     128:	80 83       	st	Z, r24
}
     12a:	cf 91       	pop	r28
     12c:	df 91       	pop	r29
     12e:	08 95       	ret

00000130 <main>:
 */

#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>
int main(void) {
     130:	df 93       	push	r29
     132:	cf 93       	push	r28
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	a0 97       	sbiw	r28, 0x20	; 32
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
	LCDinit();
     144:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCDinit>
	LCDclr();
     148:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCDclr>
	ADCinit();
     14c:	0e 94 8a 00 	call	0x114	; 0x114 <ADCinit>
	int i = 0;
     150:	1a 82       	std	Y+2, r1	; 0x02
     152:	19 82       	std	Y+1, r1	; 0x01
	char A[30] = "";
     154:	1b 82       	std	Y+3, r1	; 0x03
     156:	1c 82       	std	Y+4, r1	; 0x04
     158:	1d 82       	std	Y+5, r1	; 0x05
     15a:	1e 82       	std	Y+6, r1	; 0x06
     15c:	8a e1       	ldi	r24, 0x1A	; 26
     15e:	fe 01       	movw	r30, r28
     160:	37 96       	adiw	r30, 0x07	; 7
     162:	df 01       	movw	r26, r30
     164:	28 2f       	mov	r18, r24
     166:	1d 92       	st	X+, r1
     168:	2a 95       	dec	r18
     16a:	e9 f7       	brne	.-6      	; 0x166 <main+0x36>
	while (1) {
		i = read_adc(0);
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 61 00 	call	0xc2	; 0xc2 <read_adc>
     174:	9a 83       	std	Y+2, r25	; 0x02
     176:	89 83       	std	Y+1, r24	; 0x01
		sprintf(A, "value= %d ", i);
     178:	00 d0       	rcall	.+0      	; 0x17a <main+0x4a>
     17a:	00 d0       	rcall	.+0      	; 0x17c <main+0x4c>
     17c:	00 d0       	rcall	.+0      	; 0x17e <main+0x4e>
     17e:	ed b7       	in	r30, 0x3d	; 61
     180:	fe b7       	in	r31, 0x3e	; 62
     182:	31 96       	adiw	r30, 0x01	; 1
     184:	ce 01       	movw	r24, r28
     186:	03 96       	adiw	r24, 0x03	; 3
     188:	91 83       	std	Z+1, r25	; 0x01
     18a:	80 83       	st	Z, r24
     18c:	80 e6       	ldi	r24, 0x60	; 96
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	93 83       	std	Z+3, r25	; 0x03
     192:	82 83       	std	Z+2, r24	; 0x02
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	9a 81       	ldd	r25, Y+2	; 0x02
     198:	95 83       	std	Z+5, r25	; 0x05
     19a:	84 83       	std	Z+4, r24	; 0x04
     19c:	0e 94 77 11 	call	0x22ee	; 0x22ee <sprintf>
     1a0:	8d b7       	in	r24, 0x3d	; 61
     1a2:	9e b7       	in	r25, 0x3e	; 62
     1a4:	06 96       	adiw	r24, 0x06	; 6
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	f8 94       	cli
     1aa:	9e bf       	out	0x3e, r25	; 62
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	8d bf       	out	0x3d, r24	; 61
		LCDGotoXY(0, 0);
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCDGotoXY>
		LCDdisplay(A);
     1bc:	ce 01       	movw	r24, r28
     1be:	03 96       	adiw	r24, 0x03	; 3
     1c0:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCDdisplay>
		LCDGotoXY(0, 1);
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	61 e0       	ldi	r22, 0x01	; 1
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCDGotoXY>
		if (i > 500)
     1d0:	89 81       	ldd	r24, Y+1	; 0x01
     1d2:	9a 81       	ldd	r25, Y+2	; 0x02
     1d4:	a1 e0       	ldi	r26, 0x01	; 1
     1d6:	85 3f       	cpi	r24, 0xF5	; 245
     1d8:	9a 07       	cpc	r25, r26
     1da:	2c f0       	brlt	.+10     	; 0x1e6 <main+0xb6>
			LCDdisplay("BLACK ");
     1dc:	8b e6       	ldi	r24, 0x6B	; 107
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCDdisplay>
     1e4:	c3 cf       	rjmp	.-122    	; 0x16c <main+0x3c>
		else
			LCDdisplay("WHITE ");
     1e6:	82 e7       	ldi	r24, 0x72	; 114
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCDdisplay>
     1ee:	be cf       	rjmp	.-132    	; 0x16c <main+0x3c>

000001f0 <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     1f0:	df 93       	push	r29
     1f2:	cf 93       	push	r28
     1f4:	cd b7       	in	r28, 0x3d	; 61
     1f6:	de b7       	in	r29, 0x3e	; 62
     1f8:	e9 97       	sbiw	r28, 0x39	; 57
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	f8 94       	cli
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	0f be       	out	0x3f, r0	; 63
     202:	cd bf       	out	0x3d, r28	; 61
     204:	89 af       	std	Y+57, r24	; 0x39

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     206:	e5 e3       	ldi	r30, 0x35	; 53
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	89 ad       	ldd	r24, Y+57	; 0x39
     20c:	80 7f       	andi	r24, 0xF0	; 240
     20e:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     210:	a5 e3       	ldi	r26, 0x35	; 53
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	e5 e3       	ldi	r30, 0x35	; 53
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	80 81       	ld	r24, Z
     21a:	81 60       	ori	r24, 0x01	; 1
     21c:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     21e:	a5 e3       	ldi	r26, 0x35	; 53
     220:	b0 e0       	ldi	r27, 0x00	; 0
     222:	e5 e3       	ldi	r30, 0x35	; 53
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 81       	ld	r24, Z
     228:	84 60       	ori	r24, 0x04	; 4
     22a:	8c 93       	st	X, r24
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	a0 e8       	ldi	r26, 0x80	; 128
     232:	bf e3       	ldi	r27, 0x3F	; 63
     234:	8d ab       	std	Y+53, r24	; 0x35
     236:	9e ab       	std	Y+54, r25	; 0x36
     238:	af ab       	std	Y+55, r26	; 0x37
     23a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     23c:	6d a9       	ldd	r22, Y+53	; 0x35
     23e:	7e a9       	ldd	r23, Y+54	; 0x36
     240:	8f a9       	ldd	r24, Y+55	; 0x37
     242:	98 ad       	ldd	r25, Y+56	; 0x38
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	4a e7       	ldi	r20, 0x7A	; 122
     24a:	54 e4       	ldi	r21, 0x44	; 68
     24c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     250:	dc 01       	movw	r26, r24
     252:	cb 01       	movw	r24, r22
     254:	89 ab       	std	Y+49, r24	; 0x31
     256:	9a ab       	std	Y+50, r25	; 0x32
     258:	ab ab       	std	Y+51, r26	; 0x33
     25a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     25c:	69 a9       	ldd	r22, Y+49	; 0x31
     25e:	7a a9       	ldd	r23, Y+50	; 0x32
     260:	8b a9       	ldd	r24, Y+51	; 0x33
     262:	9c a9       	ldd	r25, Y+52	; 0x34
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e8       	ldi	r20, 0x80	; 128
     26a:	5f e3       	ldi	r21, 0x3F	; 63
     26c:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
     270:	88 23       	and	r24, r24
     272:	2c f4       	brge	.+10     	; 0x27e <LCDsendChar+0x8e>
		__ticks = 1;
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	98 ab       	std	Y+48, r25	; 0x30
     27a:	8f a7       	std	Y+47, r24	; 0x2f
     27c:	3f c0       	rjmp	.+126    	; 0x2fc <LCDsendChar+0x10c>
	else if (__tmp > 65535)
     27e:	69 a9       	ldd	r22, Y+49	; 0x31
     280:	7a a9       	ldd	r23, Y+50	; 0x32
     282:	8b a9       	ldd	r24, Y+51	; 0x33
     284:	9c a9       	ldd	r25, Y+52	; 0x34
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	3f ef       	ldi	r19, 0xFF	; 255
     28a:	4f e7       	ldi	r20, 0x7F	; 127
     28c:	57 e4       	ldi	r21, 0x47	; 71
     28e:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
     292:	18 16       	cp	r1, r24
     294:	4c f5       	brge	.+82     	; 0x2e8 <LCDsendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     296:	6d a9       	ldd	r22, Y+53	; 0x35
     298:	7e a9       	ldd	r23, Y+54	; 0x36
     29a:	8f a9       	ldd	r24, Y+55	; 0x37
     29c:	98 ad       	ldd	r25, Y+56	; 0x38
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e2       	ldi	r20, 0x20	; 32
     2a4:	51 e4       	ldi	r21, 0x41	; 65
     2a6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	bc 01       	movw	r22, r24
     2b0:	cd 01       	movw	r24, r26
     2b2:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     2b6:	dc 01       	movw	r26, r24
     2b8:	cb 01       	movw	r24, r22
     2ba:	98 ab       	std	Y+48, r25	; 0x30
     2bc:	8f a7       	std	Y+47, r24	; 0x2f
     2be:	0f c0       	rjmp	.+30     	; 0x2de <LCDsendChar+0xee>
     2c0:	84 e6       	ldi	r24, 0x64	; 100
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	9e a7       	std	Y+46, r25	; 0x2e
     2c6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2c8:	8d a5       	ldd	r24, Y+45	; 0x2d
     2ca:	9e a5       	ldd	r25, Y+46	; 0x2e
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCDsendChar+0xdc>
     2d0:	9e a7       	std	Y+46, r25	; 0x2e
     2d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2d4:	8f a5       	ldd	r24, Y+47	; 0x2f
     2d6:	98 a9       	ldd	r25, Y+48	; 0x30
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	98 ab       	std	Y+48, r25	; 0x30
     2dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2de:	8f a5       	ldd	r24, Y+47	; 0x2f
     2e0:	98 a9       	ldd	r25, Y+48	; 0x30
     2e2:	00 97       	sbiw	r24, 0x00	; 0
     2e4:	69 f7       	brne	.-38     	; 0x2c0 <LCDsendChar+0xd0>
     2e6:	14 c0       	rjmp	.+40     	; 0x310 <LCDsendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2e8:	69 a9       	ldd	r22, Y+49	; 0x31
     2ea:	7a a9       	ldd	r23, Y+50	; 0x32
     2ec:	8b a9       	ldd	r24, Y+51	; 0x33
     2ee:	9c a9       	ldd	r25, Y+52	; 0x34
     2f0:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     2f4:	dc 01       	movw	r26, r24
     2f6:	cb 01       	movw	r24, r22
     2f8:	98 ab       	std	Y+48, r25	; 0x30
     2fa:	8f a7       	std	Y+47, r24	; 0x2f
     2fc:	8f a5       	ldd	r24, Y+47	; 0x2f
     2fe:	98 a9       	ldd	r25, Y+48	; 0x30
     300:	9c a7       	std	Y+44, r25	; 0x2c
     302:	8b a7       	std	Y+43, r24	; 0x2b
     304:	8b a5       	ldd	r24, Y+43	; 0x2b
     306:	9c a5       	ldd	r25, Y+44	; 0x2c
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	f1 f7       	brne	.-4      	; 0x308 <LCDsendChar+0x118>
     30c:	9c a7       	std	Y+44, r25	; 0x2c
     30e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     310:	a5 e3       	ldi	r26, 0x35	; 53
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	e5 e3       	ldi	r30, 0x35	; 53
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	8b 7f       	andi	r24, 0xFB	; 251
     31c:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     31e:	a5 e3       	ldi	r26, 0x35	; 53
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	e5 e3       	ldi	r30, 0x35	; 53
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	8e 7f       	andi	r24, 0xFE	; 254
     32a:	8c 93       	st	X, r24
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	a0 e8       	ldi	r26, 0x80	; 128
     332:	bf e3       	ldi	r27, 0x3F	; 63
     334:	8f a3       	std	Y+39, r24	; 0x27
     336:	98 a7       	std	Y+40, r25	; 0x28
     338:	a9 a7       	std	Y+41, r26	; 0x29
     33a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     33c:	6f a1       	ldd	r22, Y+39	; 0x27
     33e:	78 a5       	ldd	r23, Y+40	; 0x28
     340:	89 a5       	ldd	r24, Y+41	; 0x29
     342:	9a a5       	ldd	r25, Y+42	; 0x2a
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	4a e7       	ldi	r20, 0x7A	; 122
     34a:	54 e4       	ldi	r21, 0x44	; 68
     34c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     350:	dc 01       	movw	r26, r24
     352:	cb 01       	movw	r24, r22
     354:	8b a3       	std	Y+35, r24	; 0x23
     356:	9c a3       	std	Y+36, r25	; 0x24
     358:	ad a3       	std	Y+37, r26	; 0x25
     35a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     35c:	6b a1       	ldd	r22, Y+35	; 0x23
     35e:	7c a1       	ldd	r23, Y+36	; 0x24
     360:	8d a1       	ldd	r24, Y+37	; 0x25
     362:	9e a1       	ldd	r25, Y+38	; 0x26
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e8       	ldi	r20, 0x80	; 128
     36a:	5f e3       	ldi	r21, 0x3F	; 63
     36c:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
     370:	88 23       	and	r24, r24
     372:	2c f4       	brge	.+10     	; 0x37e <LCDsendChar+0x18e>
		__ticks = 1;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	9a a3       	std	Y+34, r25	; 0x22
     37a:	89 a3       	std	Y+33, r24	; 0x21
     37c:	3f c0       	rjmp	.+126    	; 0x3fc <LCDsendChar+0x20c>
	else if (__tmp > 65535)
     37e:	6b a1       	ldd	r22, Y+35	; 0x23
     380:	7c a1       	ldd	r23, Y+36	; 0x24
     382:	8d a1       	ldd	r24, Y+37	; 0x25
     384:	9e a1       	ldd	r25, Y+38	; 0x26
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	3f ef       	ldi	r19, 0xFF	; 255
     38a:	4f e7       	ldi	r20, 0x7F	; 127
     38c:	57 e4       	ldi	r21, 0x47	; 71
     38e:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
     392:	18 16       	cp	r1, r24
     394:	4c f5       	brge	.+82     	; 0x3e8 <LCDsendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     396:	6f a1       	ldd	r22, Y+39	; 0x27
     398:	78 a5       	ldd	r23, Y+40	; 0x28
     39a:	89 a5       	ldd	r24, Y+41	; 0x29
     39c:	9a a5       	ldd	r25, Y+42	; 0x2a
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	40 e2       	ldi	r20, 0x20	; 32
     3a4:	51 e4       	ldi	r21, 0x41	; 65
     3a6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     3aa:	dc 01       	movw	r26, r24
     3ac:	cb 01       	movw	r24, r22
     3ae:	bc 01       	movw	r22, r24
     3b0:	cd 01       	movw	r24, r26
     3b2:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     3b6:	dc 01       	movw	r26, r24
     3b8:	cb 01       	movw	r24, r22
     3ba:	9a a3       	std	Y+34, r25	; 0x22
     3bc:	89 a3       	std	Y+33, r24	; 0x21
     3be:	0f c0       	rjmp	.+30     	; 0x3de <LCDsendChar+0x1ee>
     3c0:	84 e6       	ldi	r24, 0x64	; 100
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	98 a3       	std	Y+32, r25	; 0x20
     3c6:	8f 8f       	std	Y+31, r24	; 0x1f
     3c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3ca:	98 a1       	ldd	r25, Y+32	; 0x20
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <LCDsendChar+0x1dc>
     3d0:	98 a3       	std	Y+32, r25	; 0x20
     3d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3d4:	89 a1       	ldd	r24, Y+33	; 0x21
     3d6:	9a a1       	ldd	r25, Y+34	; 0x22
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	9a a3       	std	Y+34, r25	; 0x22
     3dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3de:	89 a1       	ldd	r24, Y+33	; 0x21
     3e0:	9a a1       	ldd	r25, Y+34	; 0x22
     3e2:	00 97       	sbiw	r24, 0x00	; 0
     3e4:	69 f7       	brne	.-38     	; 0x3c0 <LCDsendChar+0x1d0>
     3e6:	14 c0       	rjmp	.+40     	; 0x410 <LCDsendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3e8:	6b a1       	ldd	r22, Y+35	; 0x23
     3ea:	7c a1       	ldd	r23, Y+36	; 0x24
     3ec:	8d a1       	ldd	r24, Y+37	; 0x25
     3ee:	9e a1       	ldd	r25, Y+38	; 0x26
     3f0:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     3f4:	dc 01       	movw	r26, r24
     3f6:	cb 01       	movw	r24, r22
     3f8:	9a a3       	std	Y+34, r25	; 0x22
     3fa:	89 a3       	std	Y+33, r24	; 0x21
     3fc:	89 a1       	ldd	r24, Y+33	; 0x21
     3fe:	9a a1       	ldd	r25, Y+34	; 0x22
     400:	9e 8f       	std	Y+30, r25	; 0x1e
     402:	8d 8f       	std	Y+29, r24	; 0x1d
     404:	8d 8d       	ldd	r24, Y+29	; 0x1d
     406:	9e 8d       	ldd	r25, Y+30	; 0x1e
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <LCDsendChar+0x218>
     40c:	9e 8f       	std	Y+30, r25	; 0x1e
     40e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     410:	e5 e3       	ldi	r30, 0x35	; 53
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	89 ad       	ldd	r24, Y+57	; 0x39
     416:	88 2f       	mov	r24, r24
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	82 95       	swap	r24
     41c:	92 95       	swap	r25
     41e:	90 7f       	andi	r25, 0xF0	; 240
     420:	98 27       	eor	r25, r24
     422:	80 7f       	andi	r24, 0xF0	; 240
     424:	98 27       	eor	r25, r24
     426:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     428:	a5 e3       	ldi	r26, 0x35	; 53
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	e5 e3       	ldi	r30, 0x35	; 53
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	81 60       	ori	r24, 0x01	; 1
     434:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     436:	a5 e3       	ldi	r26, 0x35	; 53
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	e5 e3       	ldi	r30, 0x35	; 53
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	84 60       	ori	r24, 0x04	; 4
     442:	8c 93       	st	X, r24
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	a0 e8       	ldi	r26, 0x80	; 128
     44a:	bf e3       	ldi	r27, 0x3F	; 63
     44c:	89 8f       	std	Y+25, r24	; 0x19
     44e:	9a 8f       	std	Y+26, r25	; 0x1a
     450:	ab 8f       	std	Y+27, r26	; 0x1b
     452:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     454:	69 8d       	ldd	r22, Y+25	; 0x19
     456:	7a 8d       	ldd	r23, Y+26	; 0x1a
     458:	8b 8d       	ldd	r24, Y+27	; 0x1b
     45a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	4a e7       	ldi	r20, 0x7A	; 122
     462:	54 e4       	ldi	r21, 0x44	; 68
     464:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     468:	dc 01       	movw	r26, r24
     46a:	cb 01       	movw	r24, r22
     46c:	8d 8b       	std	Y+21, r24	; 0x15
     46e:	9e 8b       	std	Y+22, r25	; 0x16
     470:	af 8b       	std	Y+23, r26	; 0x17
     472:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     474:	6d 89       	ldd	r22, Y+21	; 0x15
     476:	7e 89       	ldd	r23, Y+22	; 0x16
     478:	8f 89       	ldd	r24, Y+23	; 0x17
     47a:	98 8d       	ldd	r25, Y+24	; 0x18
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	40 e8       	ldi	r20, 0x80	; 128
     482:	5f e3       	ldi	r21, 0x3F	; 63
     484:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
     488:	88 23       	and	r24, r24
     48a:	2c f4       	brge	.+10     	; 0x496 <__stack+0x37>
		__ticks = 1;
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	9c 8b       	std	Y+20, r25	; 0x14
     492:	8b 8b       	std	Y+19, r24	; 0x13
     494:	3f c0       	rjmp	.+126    	; 0x514 <__stack+0xb5>
	else if (__tmp > 65535)
     496:	6d 89       	ldd	r22, Y+21	; 0x15
     498:	7e 89       	ldd	r23, Y+22	; 0x16
     49a:	8f 89       	ldd	r24, Y+23	; 0x17
     49c:	98 8d       	ldd	r25, Y+24	; 0x18
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	3f ef       	ldi	r19, 0xFF	; 255
     4a2:	4f e7       	ldi	r20, 0x7F	; 127
     4a4:	57 e4       	ldi	r21, 0x47	; 71
     4a6:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
     4aa:	18 16       	cp	r1, r24
     4ac:	4c f5       	brge	.+82     	; 0x500 <__stack+0xa1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ae:	69 8d       	ldd	r22, Y+25	; 0x19
     4b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     4b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e2       	ldi	r20, 0x20	; 32
     4bc:	51 e4       	ldi	r21, 0x41	; 65
     4be:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     4c2:	dc 01       	movw	r26, r24
     4c4:	cb 01       	movw	r24, r22
     4c6:	bc 01       	movw	r22, r24
     4c8:	cd 01       	movw	r24, r26
     4ca:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     4ce:	dc 01       	movw	r26, r24
     4d0:	cb 01       	movw	r24, r22
     4d2:	9c 8b       	std	Y+20, r25	; 0x14
     4d4:	8b 8b       	std	Y+19, r24	; 0x13
     4d6:	0f c0       	rjmp	.+30     	; 0x4f6 <__stack+0x97>
     4d8:	84 e6       	ldi	r24, 0x64	; 100
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	9a 8b       	std	Y+18, r25	; 0x12
     4de:	89 8b       	std	Y+17, r24	; 0x11
     4e0:	89 89       	ldd	r24, Y+17	; 0x11
     4e2:	9a 89       	ldd	r25, Y+18	; 0x12
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <__stack+0x85>
     4e8:	9a 8b       	std	Y+18, r25	; 0x12
     4ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4ec:	8b 89       	ldd	r24, Y+19	; 0x13
     4ee:	9c 89       	ldd	r25, Y+20	; 0x14
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	9c 8b       	std	Y+20, r25	; 0x14
     4f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4f6:	8b 89       	ldd	r24, Y+19	; 0x13
     4f8:	9c 89       	ldd	r25, Y+20	; 0x14
     4fa:	00 97       	sbiw	r24, 0x00	; 0
     4fc:	69 f7       	brne	.-38     	; 0x4d8 <__stack+0x79>
     4fe:	14 c0       	rjmp	.+40     	; 0x528 <__stack+0xc9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     500:	6d 89       	ldd	r22, Y+21	; 0x15
     502:	7e 89       	ldd	r23, Y+22	; 0x16
     504:	8f 89       	ldd	r24, Y+23	; 0x17
     506:	98 8d       	ldd	r25, Y+24	; 0x18
     508:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     50c:	dc 01       	movw	r26, r24
     50e:	cb 01       	movw	r24, r22
     510:	9c 8b       	std	Y+20, r25	; 0x14
     512:	8b 8b       	std	Y+19, r24	; 0x13
     514:	8b 89       	ldd	r24, Y+19	; 0x13
     516:	9c 89       	ldd	r25, Y+20	; 0x14
     518:	98 8b       	std	Y+16, r25	; 0x10
     51a:	8f 87       	std	Y+15, r24	; 0x0f
     51c:	8f 85       	ldd	r24, Y+15	; 0x0f
     51e:	98 89       	ldd	r25, Y+16	; 0x10
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <__stack+0xc1>
     524:	98 8b       	std	Y+16, r25	; 0x10
     526:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     528:	a5 e3       	ldi	r26, 0x35	; 53
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	e5 e3       	ldi	r30, 0x35	; 53
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	8b 7f       	andi	r24, 0xFB	; 251
     534:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     536:	a5 e3       	ldi	r26, 0x35	; 53
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	e5 e3       	ldi	r30, 0x35	; 53
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	80 81       	ld	r24, Z
     540:	8e 7f       	andi	r24, 0xFE	; 254
     542:	8c 93       	st	X, r24
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	a0 e8       	ldi	r26, 0x80	; 128
     54a:	bf e3       	ldi	r27, 0x3F	; 63
     54c:	8b 87       	std	Y+11, r24	; 0x0b
     54e:	9c 87       	std	Y+12, r25	; 0x0c
     550:	ad 87       	std	Y+13, r26	; 0x0d
     552:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     554:	6b 85       	ldd	r22, Y+11	; 0x0b
     556:	7c 85       	ldd	r23, Y+12	; 0x0c
     558:	8d 85       	ldd	r24, Y+13	; 0x0d
     55a:	9e 85       	ldd	r25, Y+14	; 0x0e
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	4a e7       	ldi	r20, 0x7A	; 122
     562:	54 e4       	ldi	r21, 0x44	; 68
     564:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     568:	dc 01       	movw	r26, r24
     56a:	cb 01       	movw	r24, r22
     56c:	8f 83       	std	Y+7, r24	; 0x07
     56e:	98 87       	std	Y+8, r25	; 0x08
     570:	a9 87       	std	Y+9, r26	; 0x09
     572:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     574:	6f 81       	ldd	r22, Y+7	; 0x07
     576:	78 85       	ldd	r23, Y+8	; 0x08
     578:	89 85       	ldd	r24, Y+9	; 0x09
     57a:	9a 85       	ldd	r25, Y+10	; 0x0a
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	40 e8       	ldi	r20, 0x80	; 128
     582:	5f e3       	ldi	r21, 0x3F	; 63
     584:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
     588:	88 23       	and	r24, r24
     58a:	2c f4       	brge	.+10     	; 0x596 <__stack+0x137>
		__ticks = 1;
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	9e 83       	std	Y+6, r25	; 0x06
     592:	8d 83       	std	Y+5, r24	; 0x05
     594:	3f c0       	rjmp	.+126    	; 0x614 <__stack+0x1b5>
	else if (__tmp > 65535)
     596:	6f 81       	ldd	r22, Y+7	; 0x07
     598:	78 85       	ldd	r23, Y+8	; 0x08
     59a:	89 85       	ldd	r24, Y+9	; 0x09
     59c:	9a 85       	ldd	r25, Y+10	; 0x0a
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	3f ef       	ldi	r19, 0xFF	; 255
     5a2:	4f e7       	ldi	r20, 0x7F	; 127
     5a4:	57 e4       	ldi	r21, 0x47	; 71
     5a6:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
     5aa:	18 16       	cp	r1, r24
     5ac:	4c f5       	brge	.+82     	; 0x600 <__stack+0x1a1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5ae:	6b 85       	ldd	r22, Y+11	; 0x0b
     5b0:	7c 85       	ldd	r23, Y+12	; 0x0c
     5b2:	8d 85       	ldd	r24, Y+13	; 0x0d
     5b4:	9e 85       	ldd	r25, Y+14	; 0x0e
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	40 e2       	ldi	r20, 0x20	; 32
     5bc:	51 e4       	ldi	r21, 0x41	; 65
     5be:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     5c2:	dc 01       	movw	r26, r24
     5c4:	cb 01       	movw	r24, r22
     5c6:	bc 01       	movw	r22, r24
     5c8:	cd 01       	movw	r24, r26
     5ca:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     5ce:	dc 01       	movw	r26, r24
     5d0:	cb 01       	movw	r24, r22
     5d2:	9e 83       	std	Y+6, r25	; 0x06
     5d4:	8d 83       	std	Y+5, r24	; 0x05
     5d6:	0f c0       	rjmp	.+30     	; 0x5f6 <__stack+0x197>
     5d8:	84 e6       	ldi	r24, 0x64	; 100
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	9c 83       	std	Y+4, r25	; 0x04
     5de:	8b 83       	std	Y+3, r24	; 0x03
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	9c 81       	ldd	r25, Y+4	; 0x04
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <__stack+0x185>
     5e8:	9c 83       	std	Y+4, r25	; 0x04
     5ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ec:	8d 81       	ldd	r24, Y+5	; 0x05
     5ee:	9e 81       	ldd	r25, Y+6	; 0x06
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	9e 83       	std	Y+6, r25	; 0x06
     5f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f6:	8d 81       	ldd	r24, Y+5	; 0x05
     5f8:	9e 81       	ldd	r25, Y+6	; 0x06
     5fa:	00 97       	sbiw	r24, 0x00	; 0
     5fc:	69 f7       	brne	.-38     	; 0x5d8 <__stack+0x179>
     5fe:	14 c0       	rjmp	.+40     	; 0x628 <__stack+0x1c9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     600:	6f 81       	ldd	r22, Y+7	; 0x07
     602:	78 85       	ldd	r23, Y+8	; 0x08
     604:	89 85       	ldd	r24, Y+9	; 0x09
     606:	9a 85       	ldd	r25, Y+10	; 0x0a
     608:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     60c:	dc 01       	movw	r26, r24
     60e:	cb 01       	movw	r24, r22
     610:	9e 83       	std	Y+6, r25	; 0x06
     612:	8d 83       	std	Y+5, r24	; 0x05
     614:	8d 81       	ldd	r24, Y+5	; 0x05
     616:	9e 81       	ldd	r25, Y+6	; 0x06
     618:	9a 83       	std	Y+2, r25	; 0x02
     61a:	89 83       	std	Y+1, r24	; 0x01
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	9a 81       	ldd	r25, Y+2	; 0x02
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <__stack+0x1c1>
     624:	9a 83       	std	Y+2, r25	; 0x02
     626:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     628:	e9 96       	adiw	r28, 0x39	; 57
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
     634:	cf 91       	pop	r28
     636:	df 91       	pop	r29
     638:	08 95       	ret

0000063a <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     63a:	df 93       	push	r29
     63c:	cf 93       	push	r28
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	e9 97       	sbiw	r28, 0x39	; 57
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	89 af       	std	Y+57, r24	; 0x39
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     650:	e5 e3       	ldi	r30, 0x35	; 53
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	89 ad       	ldd	r24, Y+57	; 0x39
     656:	80 7f       	andi	r24, 0xF0	; 240
     658:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     65a:	a5 e3       	ldi	r26, 0x35	; 53
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	e5 e3       	ldi	r30, 0x35	; 53
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	84 60       	ori	r24, 0x04	; 4
     666:	8c 93       	st	X, r24
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	a0 e8       	ldi	r26, 0x80	; 128
     66e:	bf e3       	ldi	r27, 0x3F	; 63
     670:	8d ab       	std	Y+53, r24	; 0x35
     672:	9e ab       	std	Y+54, r25	; 0x36
     674:	af ab       	std	Y+55, r26	; 0x37
     676:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     678:	6d a9       	ldd	r22, Y+53	; 0x35
     67a:	7e a9       	ldd	r23, Y+54	; 0x36
     67c:	8f a9       	ldd	r24, Y+55	; 0x37
     67e:	98 ad       	ldd	r25, Y+56	; 0x38
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	4a e7       	ldi	r20, 0x7A	; 122
     686:	54 e4       	ldi	r21, 0x44	; 68
     688:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	89 ab       	std	Y+49, r24	; 0x31
     692:	9a ab       	std	Y+50, r25	; 0x32
     694:	ab ab       	std	Y+51, r26	; 0x33
     696:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     698:	69 a9       	ldd	r22, Y+49	; 0x31
     69a:	7a a9       	ldd	r23, Y+50	; 0x32
     69c:	8b a9       	ldd	r24, Y+51	; 0x33
     69e:	9c a9       	ldd	r25, Y+52	; 0x34
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e8       	ldi	r20, 0x80	; 128
     6a6:	5f e3       	ldi	r21, 0x3F	; 63
     6a8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
     6ac:	88 23       	and	r24, r24
     6ae:	2c f4       	brge	.+10     	; 0x6ba <LCDsendCommand+0x80>
		__ticks = 1;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	98 ab       	std	Y+48, r25	; 0x30
     6b6:	8f a7       	std	Y+47, r24	; 0x2f
     6b8:	3f c0       	rjmp	.+126    	; 0x738 <LCDsendCommand+0xfe>
	else if (__tmp > 65535)
     6ba:	69 a9       	ldd	r22, Y+49	; 0x31
     6bc:	7a a9       	ldd	r23, Y+50	; 0x32
     6be:	8b a9       	ldd	r24, Y+51	; 0x33
     6c0:	9c a9       	ldd	r25, Y+52	; 0x34
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	3f ef       	ldi	r19, 0xFF	; 255
     6c6:	4f e7       	ldi	r20, 0x7F	; 127
     6c8:	57 e4       	ldi	r21, 0x47	; 71
     6ca:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
     6ce:	18 16       	cp	r1, r24
     6d0:	4c f5       	brge	.+82     	; 0x724 <LCDsendCommand+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6d2:	6d a9       	ldd	r22, Y+53	; 0x35
     6d4:	7e a9       	ldd	r23, Y+54	; 0x36
     6d6:	8f a9       	ldd	r24, Y+55	; 0x37
     6d8:	98 ad       	ldd	r25, Y+56	; 0x38
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	40 e2       	ldi	r20, 0x20	; 32
     6e0:	51 e4       	ldi	r21, 0x41	; 65
     6e2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     6e6:	dc 01       	movw	r26, r24
     6e8:	cb 01       	movw	r24, r22
     6ea:	bc 01       	movw	r22, r24
     6ec:	cd 01       	movw	r24, r26
     6ee:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	98 ab       	std	Y+48, r25	; 0x30
     6f8:	8f a7       	std	Y+47, r24	; 0x2f
     6fa:	0f c0       	rjmp	.+30     	; 0x71a <LCDsendCommand+0xe0>
     6fc:	84 e6       	ldi	r24, 0x64	; 100
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	9e a7       	std	Y+46, r25	; 0x2e
     702:	8d a7       	std	Y+45, r24	; 0x2d
     704:	8d a5       	ldd	r24, Y+45	; 0x2d
     706:	9e a5       	ldd	r25, Y+46	; 0x2e
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <LCDsendCommand+0xce>
     70c:	9e a7       	std	Y+46, r25	; 0x2e
     70e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     710:	8f a5       	ldd	r24, Y+47	; 0x2f
     712:	98 a9       	ldd	r25, Y+48	; 0x30
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	98 ab       	std	Y+48, r25	; 0x30
     718:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     71a:	8f a5       	ldd	r24, Y+47	; 0x2f
     71c:	98 a9       	ldd	r25, Y+48	; 0x30
     71e:	00 97       	sbiw	r24, 0x00	; 0
     720:	69 f7       	brne	.-38     	; 0x6fc <LCDsendCommand+0xc2>
     722:	14 c0       	rjmp	.+40     	; 0x74c <LCDsendCommand+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     724:	69 a9       	ldd	r22, Y+49	; 0x31
     726:	7a a9       	ldd	r23, Y+50	; 0x32
     728:	8b a9       	ldd	r24, Y+51	; 0x33
     72a:	9c a9       	ldd	r25, Y+52	; 0x34
     72c:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	98 ab       	std	Y+48, r25	; 0x30
     736:	8f a7       	std	Y+47, r24	; 0x2f
     738:	8f a5       	ldd	r24, Y+47	; 0x2f
     73a:	98 a9       	ldd	r25, Y+48	; 0x30
     73c:	9c a7       	std	Y+44, r25	; 0x2c
     73e:	8b a7       	std	Y+43, r24	; 0x2b
     740:	8b a5       	ldd	r24, Y+43	; 0x2b
     742:	9c a5       	ldd	r25, Y+44	; 0x2c
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <LCDsendCommand+0x10a>
     748:	9c a7       	std	Y+44, r25	; 0x2c
     74a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     74c:	a5 e3       	ldi	r26, 0x35	; 53
     74e:	b0 e0       	ldi	r27, 0x00	; 0
     750:	e5 e3       	ldi	r30, 0x35	; 53
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	80 81       	ld	r24, Z
     756:	8b 7f       	andi	r24, 0xFB	; 251
     758:	8c 93       	st	X, r24
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	a0 e8       	ldi	r26, 0x80	; 128
     760:	bf e3       	ldi	r27, 0x3F	; 63
     762:	8f a3       	std	Y+39, r24	; 0x27
     764:	98 a7       	std	Y+40, r25	; 0x28
     766:	a9 a7       	std	Y+41, r26	; 0x29
     768:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     76a:	6f a1       	ldd	r22, Y+39	; 0x27
     76c:	78 a5       	ldd	r23, Y+40	; 0x28
     76e:	89 a5       	ldd	r24, Y+41	; 0x29
     770:	9a a5       	ldd	r25, Y+42	; 0x2a
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	4a e7       	ldi	r20, 0x7A	; 122
     778:	54 e4       	ldi	r21, 0x44	; 68
     77a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	8b a3       	std	Y+35, r24	; 0x23
     784:	9c a3       	std	Y+36, r25	; 0x24
     786:	ad a3       	std	Y+37, r26	; 0x25
     788:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     78a:	6b a1       	ldd	r22, Y+35	; 0x23
     78c:	7c a1       	ldd	r23, Y+36	; 0x24
     78e:	8d a1       	ldd	r24, Y+37	; 0x25
     790:	9e a1       	ldd	r25, Y+38	; 0x26
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	40 e8       	ldi	r20, 0x80	; 128
     798:	5f e3       	ldi	r21, 0x3F	; 63
     79a:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
     79e:	88 23       	and	r24, r24
     7a0:	2c f4       	brge	.+10     	; 0x7ac <LCDsendCommand+0x172>
		__ticks = 1;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	9a a3       	std	Y+34, r25	; 0x22
     7a8:	89 a3       	std	Y+33, r24	; 0x21
     7aa:	3f c0       	rjmp	.+126    	; 0x82a <LCDsendCommand+0x1f0>
	else if (__tmp > 65535)
     7ac:	6b a1       	ldd	r22, Y+35	; 0x23
     7ae:	7c a1       	ldd	r23, Y+36	; 0x24
     7b0:	8d a1       	ldd	r24, Y+37	; 0x25
     7b2:	9e a1       	ldd	r25, Y+38	; 0x26
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	3f ef       	ldi	r19, 0xFF	; 255
     7b8:	4f e7       	ldi	r20, 0x7F	; 127
     7ba:	57 e4       	ldi	r21, 0x47	; 71
     7bc:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
     7c0:	18 16       	cp	r1, r24
     7c2:	4c f5       	brge	.+82     	; 0x816 <LCDsendCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7c4:	6f a1       	ldd	r22, Y+39	; 0x27
     7c6:	78 a5       	ldd	r23, Y+40	; 0x28
     7c8:	89 a5       	ldd	r24, Y+41	; 0x29
     7ca:	9a a5       	ldd	r25, Y+42	; 0x2a
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	40 e2       	ldi	r20, 0x20	; 32
     7d2:	51 e4       	ldi	r21, 0x41	; 65
     7d4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     7d8:	dc 01       	movw	r26, r24
     7da:	cb 01       	movw	r24, r22
     7dc:	bc 01       	movw	r22, r24
     7de:	cd 01       	movw	r24, r26
     7e0:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     7e4:	dc 01       	movw	r26, r24
     7e6:	cb 01       	movw	r24, r22
     7e8:	9a a3       	std	Y+34, r25	; 0x22
     7ea:	89 a3       	std	Y+33, r24	; 0x21
     7ec:	0f c0       	rjmp	.+30     	; 0x80c <LCDsendCommand+0x1d2>
     7ee:	84 e6       	ldi	r24, 0x64	; 100
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	98 a3       	std	Y+32, r25	; 0x20
     7f4:	8f 8f       	std	Y+31, r24	; 0x1f
     7f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7f8:	98 a1       	ldd	r25, Y+32	; 0x20
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <LCDsendCommand+0x1c0>
     7fe:	98 a3       	std	Y+32, r25	; 0x20
     800:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     802:	89 a1       	ldd	r24, Y+33	; 0x21
     804:	9a a1       	ldd	r25, Y+34	; 0x22
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	9a a3       	std	Y+34, r25	; 0x22
     80a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     80c:	89 a1       	ldd	r24, Y+33	; 0x21
     80e:	9a a1       	ldd	r25, Y+34	; 0x22
     810:	00 97       	sbiw	r24, 0x00	; 0
     812:	69 f7       	brne	.-38     	; 0x7ee <LCDsendCommand+0x1b4>
     814:	14 c0       	rjmp	.+40     	; 0x83e <LCDsendCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     816:	6b a1       	ldd	r22, Y+35	; 0x23
     818:	7c a1       	ldd	r23, Y+36	; 0x24
     81a:	8d a1       	ldd	r24, Y+37	; 0x25
     81c:	9e a1       	ldd	r25, Y+38	; 0x26
     81e:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     822:	dc 01       	movw	r26, r24
     824:	cb 01       	movw	r24, r22
     826:	9a a3       	std	Y+34, r25	; 0x22
     828:	89 a3       	std	Y+33, r24	; 0x21
     82a:	89 a1       	ldd	r24, Y+33	; 0x21
     82c:	9a a1       	ldd	r25, Y+34	; 0x22
     82e:	9e 8f       	std	Y+30, r25	; 0x1e
     830:	8d 8f       	std	Y+29, r24	; 0x1d
     832:	8d 8d       	ldd	r24, Y+29	; 0x1d
     834:	9e 8d       	ldd	r25, Y+30	; 0x1e
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <LCDsendCommand+0x1fc>
     83a:	9e 8f       	std	Y+30, r25	; 0x1e
     83c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     83e:	e5 e3       	ldi	r30, 0x35	; 53
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	89 ad       	ldd	r24, Y+57	; 0x39
     844:	88 2f       	mov	r24, r24
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	82 95       	swap	r24
     84a:	92 95       	swap	r25
     84c:	90 7f       	andi	r25, 0xF0	; 240
     84e:	98 27       	eor	r25, r24
     850:	80 7f       	andi	r24, 0xF0	; 240
     852:	98 27       	eor	r25, r24
     854:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     856:	a5 e3       	ldi	r26, 0x35	; 53
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	e5 e3       	ldi	r30, 0x35	; 53
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	84 60       	ori	r24, 0x04	; 4
     862:	8c 93       	st	X, r24
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e8       	ldi	r26, 0x80	; 128
     86a:	bf e3       	ldi	r27, 0x3F	; 63
     86c:	89 8f       	std	Y+25, r24	; 0x19
     86e:	9a 8f       	std	Y+26, r25	; 0x1a
     870:	ab 8f       	std	Y+27, r26	; 0x1b
     872:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     874:	69 8d       	ldd	r22, Y+25	; 0x19
     876:	7a 8d       	ldd	r23, Y+26	; 0x1a
     878:	8b 8d       	ldd	r24, Y+27	; 0x1b
     87a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	4a e7       	ldi	r20, 0x7A	; 122
     882:	54 e4       	ldi	r21, 0x44	; 68
     884:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	8d 8b       	std	Y+21, r24	; 0x15
     88e:	9e 8b       	std	Y+22, r25	; 0x16
     890:	af 8b       	std	Y+23, r26	; 0x17
     892:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     894:	6d 89       	ldd	r22, Y+21	; 0x15
     896:	7e 89       	ldd	r23, Y+22	; 0x16
     898:	8f 89       	ldd	r24, Y+23	; 0x17
     89a:	98 8d       	ldd	r25, Y+24	; 0x18
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	40 e8       	ldi	r20, 0x80	; 128
     8a2:	5f e3       	ldi	r21, 0x3F	; 63
     8a4:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
     8a8:	88 23       	and	r24, r24
     8aa:	2c f4       	brge	.+10     	; 0x8b6 <LCDsendCommand+0x27c>
		__ticks = 1;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	9c 8b       	std	Y+20, r25	; 0x14
     8b2:	8b 8b       	std	Y+19, r24	; 0x13
     8b4:	3f c0       	rjmp	.+126    	; 0x934 <LCDsendCommand+0x2fa>
	else if (__tmp > 65535)
     8b6:	6d 89       	ldd	r22, Y+21	; 0x15
     8b8:	7e 89       	ldd	r23, Y+22	; 0x16
     8ba:	8f 89       	ldd	r24, Y+23	; 0x17
     8bc:	98 8d       	ldd	r25, Y+24	; 0x18
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	3f ef       	ldi	r19, 0xFF	; 255
     8c2:	4f e7       	ldi	r20, 0x7F	; 127
     8c4:	57 e4       	ldi	r21, 0x47	; 71
     8c6:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
     8ca:	18 16       	cp	r1, r24
     8cc:	4c f5       	brge	.+82     	; 0x920 <LCDsendCommand+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8ce:	69 8d       	ldd	r22, Y+25	; 0x19
     8d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e2       	ldi	r20, 0x20	; 32
     8dc:	51 e4       	ldi	r21, 0x41	; 65
     8de:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     8e2:	dc 01       	movw	r26, r24
     8e4:	cb 01       	movw	r24, r22
     8e6:	bc 01       	movw	r22, r24
     8e8:	cd 01       	movw	r24, r26
     8ea:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     8ee:	dc 01       	movw	r26, r24
     8f0:	cb 01       	movw	r24, r22
     8f2:	9c 8b       	std	Y+20, r25	; 0x14
     8f4:	8b 8b       	std	Y+19, r24	; 0x13
     8f6:	0f c0       	rjmp	.+30     	; 0x916 <LCDsendCommand+0x2dc>
     8f8:	84 e6       	ldi	r24, 0x64	; 100
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	9a 8b       	std	Y+18, r25	; 0x12
     8fe:	89 8b       	std	Y+17, r24	; 0x11
     900:	89 89       	ldd	r24, Y+17	; 0x11
     902:	9a 89       	ldd	r25, Y+18	; 0x12
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	f1 f7       	brne	.-4      	; 0x904 <LCDsendCommand+0x2ca>
     908:	9a 8b       	std	Y+18, r25	; 0x12
     90a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     90c:	8b 89       	ldd	r24, Y+19	; 0x13
     90e:	9c 89       	ldd	r25, Y+20	; 0x14
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	9c 8b       	std	Y+20, r25	; 0x14
     914:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     916:	8b 89       	ldd	r24, Y+19	; 0x13
     918:	9c 89       	ldd	r25, Y+20	; 0x14
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	69 f7       	brne	.-38     	; 0x8f8 <LCDsendCommand+0x2be>
     91e:	14 c0       	rjmp	.+40     	; 0x948 <LCDsendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     920:	6d 89       	ldd	r22, Y+21	; 0x15
     922:	7e 89       	ldd	r23, Y+22	; 0x16
     924:	8f 89       	ldd	r24, Y+23	; 0x17
     926:	98 8d       	ldd	r25, Y+24	; 0x18
     928:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	9c 8b       	std	Y+20, r25	; 0x14
     932:	8b 8b       	std	Y+19, r24	; 0x13
     934:	8b 89       	ldd	r24, Y+19	; 0x13
     936:	9c 89       	ldd	r25, Y+20	; 0x14
     938:	98 8b       	std	Y+16, r25	; 0x10
     93a:	8f 87       	std	Y+15, r24	; 0x0f
     93c:	8f 85       	ldd	r24, Y+15	; 0x0f
     93e:	98 89       	ldd	r25, Y+16	; 0x10
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <LCDsendCommand+0x306>
     944:	98 8b       	std	Y+16, r25	; 0x10
     946:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     948:	a5 e3       	ldi	r26, 0x35	; 53
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	e5 e3       	ldi	r30, 0x35	; 53
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	8b 7f       	andi	r24, 0xFB	; 251
     954:	8c 93       	st	X, r24
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	a0 e8       	ldi	r26, 0x80	; 128
     95c:	bf e3       	ldi	r27, 0x3F	; 63
     95e:	8b 87       	std	Y+11, r24	; 0x0b
     960:	9c 87       	std	Y+12, r25	; 0x0c
     962:	ad 87       	std	Y+13, r26	; 0x0d
     964:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     966:	6b 85       	ldd	r22, Y+11	; 0x0b
     968:	7c 85       	ldd	r23, Y+12	; 0x0c
     96a:	8d 85       	ldd	r24, Y+13	; 0x0d
     96c:	9e 85       	ldd	r25, Y+14	; 0x0e
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	4a e7       	ldi	r20, 0x7A	; 122
     974:	54 e4       	ldi	r21, 0x44	; 68
     976:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     97a:	dc 01       	movw	r26, r24
     97c:	cb 01       	movw	r24, r22
     97e:	8f 83       	std	Y+7, r24	; 0x07
     980:	98 87       	std	Y+8, r25	; 0x08
     982:	a9 87       	std	Y+9, r26	; 0x09
     984:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     986:	6f 81       	ldd	r22, Y+7	; 0x07
     988:	78 85       	ldd	r23, Y+8	; 0x08
     98a:	89 85       	ldd	r24, Y+9	; 0x09
     98c:	9a 85       	ldd	r25, Y+10	; 0x0a
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	40 e8       	ldi	r20, 0x80	; 128
     994:	5f e3       	ldi	r21, 0x3F	; 63
     996:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
     99a:	88 23       	and	r24, r24
     99c:	2c f4       	brge	.+10     	; 0x9a8 <LCDsendCommand+0x36e>
		__ticks = 1;
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	9e 83       	std	Y+6, r25	; 0x06
     9a4:	8d 83       	std	Y+5, r24	; 0x05
     9a6:	3f c0       	rjmp	.+126    	; 0xa26 <LCDsendCommand+0x3ec>
	else if (__tmp > 65535)
     9a8:	6f 81       	ldd	r22, Y+7	; 0x07
     9aa:	78 85       	ldd	r23, Y+8	; 0x08
     9ac:	89 85       	ldd	r24, Y+9	; 0x09
     9ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	4f e7       	ldi	r20, 0x7F	; 127
     9b6:	57 e4       	ldi	r21, 0x47	; 71
     9b8:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
     9bc:	18 16       	cp	r1, r24
     9be:	4c f5       	brge	.+82     	; 0xa12 <LCDsendCommand+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9c0:	6b 85       	ldd	r22, Y+11	; 0x0b
     9c2:	7c 85       	ldd	r23, Y+12	; 0x0c
     9c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     9c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	40 e2       	ldi	r20, 0x20	; 32
     9ce:	51 e4       	ldi	r21, 0x41	; 65
     9d0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     9d4:	dc 01       	movw	r26, r24
     9d6:	cb 01       	movw	r24, r22
     9d8:	bc 01       	movw	r22, r24
     9da:	cd 01       	movw	r24, r26
     9dc:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     9e0:	dc 01       	movw	r26, r24
     9e2:	cb 01       	movw	r24, r22
     9e4:	9e 83       	std	Y+6, r25	; 0x06
     9e6:	8d 83       	std	Y+5, r24	; 0x05
     9e8:	0f c0       	rjmp	.+30     	; 0xa08 <LCDsendCommand+0x3ce>
     9ea:	84 e6       	ldi	r24, 0x64	; 100
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	9c 83       	std	Y+4, r25	; 0x04
     9f0:	8b 83       	std	Y+3, r24	; 0x03
     9f2:	8b 81       	ldd	r24, Y+3	; 0x03
     9f4:	9c 81       	ldd	r25, Y+4	; 0x04
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <LCDsendCommand+0x3bc>
     9fa:	9c 83       	std	Y+4, r25	; 0x04
     9fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9fe:	8d 81       	ldd	r24, Y+5	; 0x05
     a00:	9e 81       	ldd	r25, Y+6	; 0x06
     a02:	01 97       	sbiw	r24, 0x01	; 1
     a04:	9e 83       	std	Y+6, r25	; 0x06
     a06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a08:	8d 81       	ldd	r24, Y+5	; 0x05
     a0a:	9e 81       	ldd	r25, Y+6	; 0x06
     a0c:	00 97       	sbiw	r24, 0x00	; 0
     a0e:	69 f7       	brne	.-38     	; 0x9ea <LCDsendCommand+0x3b0>
     a10:	14 c0       	rjmp	.+40     	; 0xa3a <LCDsendCommand+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a12:	6f 81       	ldd	r22, Y+7	; 0x07
     a14:	78 85       	ldd	r23, Y+8	; 0x08
     a16:	89 85       	ldd	r24, Y+9	; 0x09
     a18:	9a 85       	ldd	r25, Y+10	; 0x0a
     a1a:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     a1e:	dc 01       	movw	r26, r24
     a20:	cb 01       	movw	r24, r22
     a22:	9e 83       	std	Y+6, r25	; 0x06
     a24:	8d 83       	std	Y+5, r24	; 0x05
     a26:	8d 81       	ldd	r24, Y+5	; 0x05
     a28:	9e 81       	ldd	r25, Y+6	; 0x06
     a2a:	9a 83       	std	Y+2, r25	; 0x02
     a2c:	89 83       	std	Y+1, r24	; 0x01
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	9a 81       	ldd	r25, Y+2	; 0x02
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <LCDsendCommand+0x3f8>
     a36:	9a 83       	std	Y+2, r25	; 0x02
     a38:	89 83       	std	Y+1, r24	; 0x01
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     a3a:	e9 96       	adiw	r28, 0x39	; 57
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	cf 91       	pop	r28
     a48:	df 91       	pop	r29
     a4a:	08 95       	ret

00000a4c <LCDinit>:
void LCDinit(void)//Initializes LCD
{
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	c4 56       	subi	r28, 0x64	; 100
     a5a:	d0 40       	sbci	r29, 0x00	; 0
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	cd bf       	out	0x3d, r28	; 61
     a66:	fe 01       	movw	r30, r28
     a68:	e1 5a       	subi	r30, 0xA1	; 161
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e7       	ldi	r26, 0x70	; 112
     a72:	b1 e4       	ldi	r27, 0x41	; 65
     a74:	80 83       	st	Z, r24
     a76:	91 83       	std	Z+1, r25	; 0x01
     a78:	a2 83       	std	Z+2, r26	; 0x02
     a7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a7c:	8e 01       	movw	r16, r28
     a7e:	05 5a       	subi	r16, 0xA5	; 165
     a80:	1f 4f       	sbci	r17, 0xFF	; 255
     a82:	fe 01       	movw	r30, r28
     a84:	e1 5a       	subi	r30, 0xA1	; 161
     a86:	ff 4f       	sbci	r31, 0xFF	; 255
     a88:	60 81       	ld	r22, Z
     a8a:	71 81       	ldd	r23, Z+1	; 0x01
     a8c:	82 81       	ldd	r24, Z+2	; 0x02
     a8e:	93 81       	ldd	r25, Z+3	; 0x03
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	4a e7       	ldi	r20, 0x7A	; 122
     a96:	54 e4       	ldi	r21, 0x44	; 68
     a98:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	f8 01       	movw	r30, r16
     aa2:	80 83       	st	Z, r24
     aa4:	91 83       	std	Z+1, r25	; 0x01
     aa6:	a2 83       	std	Z+2, r26	; 0x02
     aa8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     aaa:	fe 01       	movw	r30, r28
     aac:	e5 5a       	subi	r30, 0xA5	; 165
     aae:	ff 4f       	sbci	r31, 0xFF	; 255
     ab0:	60 81       	ld	r22, Z
     ab2:	71 81       	ldd	r23, Z+1	; 0x01
     ab4:	82 81       	ldd	r24, Z+2	; 0x02
     ab6:	93 81       	ldd	r25, Z+3	; 0x03
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	40 e8       	ldi	r20, 0x80	; 128
     abe:	5f e3       	ldi	r21, 0x3F	; 63
     ac0:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
     ac4:	88 23       	and	r24, r24
     ac6:	44 f4       	brge	.+16     	; 0xad8 <LCDinit+0x8c>
		__ticks = 1;
     ac8:	fe 01       	movw	r30, r28
     aca:	e7 5a       	subi	r30, 0xA7	; 167
     acc:	ff 4f       	sbci	r31, 0xFF	; 255
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	91 83       	std	Z+1, r25	; 0x01
     ad4:	80 83       	st	Z, r24
     ad6:	64 c0       	rjmp	.+200    	; 0xba0 <LCDinit+0x154>
	else if (__tmp > 65535)
     ad8:	fe 01       	movw	r30, r28
     ada:	e5 5a       	subi	r30, 0xA5	; 165
     adc:	ff 4f       	sbci	r31, 0xFF	; 255
     ade:	60 81       	ld	r22, Z
     ae0:	71 81       	ldd	r23, Z+1	; 0x01
     ae2:	82 81       	ldd	r24, Z+2	; 0x02
     ae4:	93 81       	ldd	r25, Z+3	; 0x03
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	3f ef       	ldi	r19, 0xFF	; 255
     aea:	4f e7       	ldi	r20, 0x7F	; 127
     aec:	57 e4       	ldi	r21, 0x47	; 71
     aee:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
     af2:	18 16       	cp	r1, r24
     af4:	0c f0       	brlt	.+2      	; 0xaf8 <LCDinit+0xac>
     af6:	43 c0       	rjmp	.+134    	; 0xb7e <LCDinit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     af8:	fe 01       	movw	r30, r28
     afa:	e1 5a       	subi	r30, 0xA1	; 161
     afc:	ff 4f       	sbci	r31, 0xFF	; 255
     afe:	60 81       	ld	r22, Z
     b00:	71 81       	ldd	r23, Z+1	; 0x01
     b02:	82 81       	ldd	r24, Z+2	; 0x02
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e2       	ldi	r20, 0x20	; 32
     b0c:	51 e4       	ldi	r21, 0x41	; 65
     b0e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     b12:	dc 01       	movw	r26, r24
     b14:	cb 01       	movw	r24, r22
     b16:	8e 01       	movw	r16, r28
     b18:	07 5a       	subi	r16, 0xA7	; 167
     b1a:	1f 4f       	sbci	r17, 0xFF	; 255
     b1c:	bc 01       	movw	r22, r24
     b1e:	cd 01       	movw	r24, r26
     b20:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	f8 01       	movw	r30, r16
     b2a:	91 83       	std	Z+1, r25	; 0x01
     b2c:	80 83       	st	Z, r24
     b2e:	1f c0       	rjmp	.+62     	; 0xb6e <LCDinit+0x122>
     b30:	fe 01       	movw	r30, r28
     b32:	e9 5a       	subi	r30, 0xA9	; 169
     b34:	ff 4f       	sbci	r31, 0xFF	; 255
     b36:	84 e6       	ldi	r24, 0x64	; 100
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	91 83       	std	Z+1, r25	; 0x01
     b3c:	80 83       	st	Z, r24
     b3e:	fe 01       	movw	r30, r28
     b40:	e9 5a       	subi	r30, 0xA9	; 169
     b42:	ff 4f       	sbci	r31, 0xFF	; 255
     b44:	80 81       	ld	r24, Z
     b46:	91 81       	ldd	r25, Z+1	; 0x01
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <LCDinit+0xfc>
     b4c:	fe 01       	movw	r30, r28
     b4e:	e9 5a       	subi	r30, 0xA9	; 169
     b50:	ff 4f       	sbci	r31, 0xFF	; 255
     b52:	91 83       	std	Z+1, r25	; 0x01
     b54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b56:	de 01       	movw	r26, r28
     b58:	a7 5a       	subi	r26, 0xA7	; 167
     b5a:	bf 4f       	sbci	r27, 0xFF	; 255
     b5c:	fe 01       	movw	r30, r28
     b5e:	e7 5a       	subi	r30, 0xA7	; 167
     b60:	ff 4f       	sbci	r31, 0xFF	; 255
     b62:	80 81       	ld	r24, Z
     b64:	91 81       	ldd	r25, Z+1	; 0x01
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	11 96       	adiw	r26, 0x01	; 1
     b6a:	9c 93       	st	X, r25
     b6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b6e:	fe 01       	movw	r30, r28
     b70:	e7 5a       	subi	r30, 0xA7	; 167
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	80 81       	ld	r24, Z
     b76:	91 81       	ldd	r25, Z+1	; 0x01
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	d1 f6       	brne	.-76     	; 0xb30 <LCDinit+0xe4>
     b7c:	27 c0       	rjmp	.+78     	; 0xbcc <LCDinit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b7e:	8e 01       	movw	r16, r28
     b80:	07 5a       	subi	r16, 0xA7	; 167
     b82:	1f 4f       	sbci	r17, 0xFF	; 255
     b84:	fe 01       	movw	r30, r28
     b86:	e5 5a       	subi	r30, 0xA5	; 165
     b88:	ff 4f       	sbci	r31, 0xFF	; 255
     b8a:	60 81       	ld	r22, Z
     b8c:	71 81       	ldd	r23, Z+1	; 0x01
     b8e:	82 81       	ldd	r24, Z+2	; 0x02
     b90:	93 81       	ldd	r25, Z+3	; 0x03
     b92:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	f8 01       	movw	r30, r16
     b9c:	91 83       	std	Z+1, r25	; 0x01
     b9e:	80 83       	st	Z, r24
     ba0:	de 01       	movw	r26, r28
     ba2:	ab 5a       	subi	r26, 0xAB	; 171
     ba4:	bf 4f       	sbci	r27, 0xFF	; 255
     ba6:	fe 01       	movw	r30, r28
     ba8:	e7 5a       	subi	r30, 0xA7	; 167
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	80 81       	ld	r24, Z
     bae:	91 81       	ldd	r25, Z+1	; 0x01
     bb0:	8d 93       	st	X+, r24
     bb2:	9c 93       	st	X, r25
     bb4:	fe 01       	movw	r30, r28
     bb6:	eb 5a       	subi	r30, 0xAB	; 171
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <LCDinit+0x172>
     bc2:	fe 01       	movw	r30, r28
     bc4:	eb 5a       	subi	r30, 0xAB	; 171
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	91 83       	std	Z+1, r25	; 0x01
     bca:	80 83       	st	Z, r24
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     bcc:	e5 e3       	ldi	r30, 0x35	; 53
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	10 82       	st	Z, r1
	LCP=0x00;
     bd2:	e5 e3       	ldi	r30, 0x35	; 53
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	10 82       	st	Z, r1
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     bd8:	a4 e3       	ldi	r26, 0x34	; 52
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e4 e3       	ldi	r30, 0x34	; 52
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	80 6f       	ori	r24, 0xF0	; 240
     be4:	8c 93       	st	X, r24
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     be6:	a4 e3       	ldi	r26, 0x34	; 52
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e4 e3       	ldi	r30, 0x34	; 52
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	87 60       	ori	r24, 0x07	; 7
     bf2:	8c 93       	st	X, r24
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     bf4:	e5 e3       	ldi	r30, 0x35	; 53
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 e3       	ldi	r24, 0x30	; 48
     bfa:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     bfc:	a5 e3       	ldi	r26, 0x35	; 53
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e5 e3       	ldi	r30, 0x35	; 53
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	84 60       	ori	r24, 0x04	; 4
     c08:	8c 93       	st	X, r24
     c0a:	fe 01       	movw	r30, r28
     c0c:	ef 5a       	subi	r30, 0xAF	; 175
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	a0 e8       	ldi	r26, 0x80	; 128
     c16:	bf e3       	ldi	r27, 0x3F	; 63
     c18:	80 83       	st	Z, r24
     c1a:	91 83       	std	Z+1, r25	; 0x01
     c1c:	a2 83       	std	Z+2, r26	; 0x02
     c1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c20:	8e 01       	movw	r16, r28
     c22:	03 5b       	subi	r16, 0xB3	; 179
     c24:	1f 4f       	sbci	r17, 0xFF	; 255
     c26:	fe 01       	movw	r30, r28
     c28:	ef 5a       	subi	r30, 0xAF	; 175
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	60 81       	ld	r22, Z
     c2e:	71 81       	ldd	r23, Z+1	; 0x01
     c30:	82 81       	ldd	r24, Z+2	; 0x02
     c32:	93 81       	ldd	r25, Z+3	; 0x03
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	4a e7       	ldi	r20, 0x7A	; 122
     c3a:	54 e4       	ldi	r21, 0x44	; 68
     c3c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	f8 01       	movw	r30, r16
     c46:	80 83       	st	Z, r24
     c48:	91 83       	std	Z+1, r25	; 0x01
     c4a:	a2 83       	std	Z+2, r26	; 0x02
     c4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c4e:	fe 01       	movw	r30, r28
     c50:	e3 5b       	subi	r30, 0xB3	; 179
     c52:	ff 4f       	sbci	r31, 0xFF	; 255
     c54:	60 81       	ld	r22, Z
     c56:	71 81       	ldd	r23, Z+1	; 0x01
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	93 81       	ldd	r25, Z+3	; 0x03
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e8       	ldi	r20, 0x80	; 128
     c62:	5f e3       	ldi	r21, 0x3F	; 63
     c64:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
     c68:	88 23       	and	r24, r24
     c6a:	44 f4       	brge	.+16     	; 0xc7c <LCDinit+0x230>
		__ticks = 1;
     c6c:	fe 01       	movw	r30, r28
     c6e:	e5 5b       	subi	r30, 0xB5	; 181
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	91 83       	std	Z+1, r25	; 0x01
     c78:	80 83       	st	Z, r24
     c7a:	64 c0       	rjmp	.+200    	; 0xd44 <LCDinit+0x2f8>
	else if (__tmp > 65535)
     c7c:	fe 01       	movw	r30, r28
     c7e:	e3 5b       	subi	r30, 0xB3	; 179
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	60 81       	ld	r22, Z
     c84:	71 81       	ldd	r23, Z+1	; 0x01
     c86:	82 81       	ldd	r24, Z+2	; 0x02
     c88:	93 81       	ldd	r25, Z+3	; 0x03
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	3f ef       	ldi	r19, 0xFF	; 255
     c8e:	4f e7       	ldi	r20, 0x7F	; 127
     c90:	57 e4       	ldi	r21, 0x47	; 71
     c92:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
     c96:	18 16       	cp	r1, r24
     c98:	0c f0       	brlt	.+2      	; 0xc9c <LCDinit+0x250>
     c9a:	43 c0       	rjmp	.+134    	; 0xd22 <LCDinit+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c9c:	fe 01       	movw	r30, r28
     c9e:	ef 5a       	subi	r30, 0xAF	; 175
     ca0:	ff 4f       	sbci	r31, 0xFF	; 255
     ca2:	60 81       	ld	r22, Z
     ca4:	71 81       	ldd	r23, Z+1	; 0x01
     ca6:	82 81       	ldd	r24, Z+2	; 0x02
     ca8:	93 81       	ldd	r25, Z+3	; 0x03
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 e2       	ldi	r20, 0x20	; 32
     cb0:	51 e4       	ldi	r21, 0x41	; 65
     cb2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	8e 01       	movw	r16, r28
     cbc:	05 5b       	subi	r16, 0xB5	; 181
     cbe:	1f 4f       	sbci	r17, 0xFF	; 255
     cc0:	bc 01       	movw	r22, r24
     cc2:	cd 01       	movw	r24, r26
     cc4:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	f8 01       	movw	r30, r16
     cce:	91 83       	std	Z+1, r25	; 0x01
     cd0:	80 83       	st	Z, r24
     cd2:	1f c0       	rjmp	.+62     	; 0xd12 <LCDinit+0x2c6>
     cd4:	fe 01       	movw	r30, r28
     cd6:	e7 5b       	subi	r30, 0xB7	; 183
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	84 e6       	ldi	r24, 0x64	; 100
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	91 83       	std	Z+1, r25	; 0x01
     ce0:	80 83       	st	Z, r24
     ce2:	fe 01       	movw	r30, r28
     ce4:	e7 5b       	subi	r30, 0xB7	; 183
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	80 81       	ld	r24, Z
     cea:	91 81       	ldd	r25, Z+1	; 0x01
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	f1 f7       	brne	.-4      	; 0xcec <LCDinit+0x2a0>
     cf0:	fe 01       	movw	r30, r28
     cf2:	e7 5b       	subi	r30, 0xB7	; 183
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	91 83       	std	Z+1, r25	; 0x01
     cf8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfa:	de 01       	movw	r26, r28
     cfc:	a5 5b       	subi	r26, 0xB5	; 181
     cfe:	bf 4f       	sbci	r27, 0xFF	; 255
     d00:	fe 01       	movw	r30, r28
     d02:	e5 5b       	subi	r30, 0xB5	; 181
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	80 81       	ld	r24, Z
     d08:	91 81       	ldd	r25, Z+1	; 0x01
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	11 96       	adiw	r26, 0x01	; 1
     d0e:	9c 93       	st	X, r25
     d10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d12:	fe 01       	movw	r30, r28
     d14:	e5 5b       	subi	r30, 0xB5	; 181
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	80 81       	ld	r24, Z
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	d1 f6       	brne	.-76     	; 0xcd4 <LCDinit+0x288>
     d20:	27 c0       	rjmp	.+78     	; 0xd70 <LCDinit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d22:	8e 01       	movw	r16, r28
     d24:	05 5b       	subi	r16, 0xB5	; 181
     d26:	1f 4f       	sbci	r17, 0xFF	; 255
     d28:	fe 01       	movw	r30, r28
     d2a:	e3 5b       	subi	r30, 0xB3	; 179
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	60 81       	ld	r22, Z
     d30:	71 81       	ldd	r23, Z+1	; 0x01
     d32:	82 81       	ldd	r24, Z+2	; 0x02
     d34:	93 81       	ldd	r25, Z+3	; 0x03
     d36:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	f8 01       	movw	r30, r16
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	80 83       	st	Z, r24
     d44:	de 01       	movw	r26, r28
     d46:	a9 5b       	subi	r26, 0xB9	; 185
     d48:	bf 4f       	sbci	r27, 0xFF	; 255
     d4a:	fe 01       	movw	r30, r28
     d4c:	e5 5b       	subi	r30, 0xB5	; 181
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	80 81       	ld	r24, Z
     d52:	91 81       	ldd	r25, Z+1	; 0x01
     d54:	8d 93       	st	X+, r24
     d56:	9c 93       	st	X, r25
     d58:	fe 01       	movw	r30, r28
     d5a:	e9 5b       	subi	r30, 0xB9	; 185
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <LCDinit+0x316>
     d66:	fe 01       	movw	r30, r28
     d68:	e9 5b       	subi	r30, 0xB9	; 185
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	80 83       	st	Z, r24
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     d70:	a5 e3       	ldi	r26, 0x35	; 53
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e5 e3       	ldi	r30, 0x35	; 53
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8b 7f       	andi	r24, 0xFB	; 251
     d7c:	8c 93       	st	X, r24
     d7e:	fe 01       	movw	r30, r28
     d80:	ed 5b       	subi	r30, 0xBD	; 189
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	a0 e8       	ldi	r26, 0x80	; 128
     d8a:	bf e3       	ldi	r27, 0x3F	; 63
     d8c:	80 83       	st	Z, r24
     d8e:	91 83       	std	Z+1, r25	; 0x01
     d90:	a2 83       	std	Z+2, r26	; 0x02
     d92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d94:	8e 01       	movw	r16, r28
     d96:	01 5c       	subi	r16, 0xC1	; 193
     d98:	1f 4f       	sbci	r17, 0xFF	; 255
     d9a:	fe 01       	movw	r30, r28
     d9c:	ed 5b       	subi	r30, 0xBD	; 189
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	60 81       	ld	r22, Z
     da2:	71 81       	ldd	r23, Z+1	; 0x01
     da4:	82 81       	ldd	r24, Z+2	; 0x02
     da6:	93 81       	ldd	r25, Z+3	; 0x03
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	4a e7       	ldi	r20, 0x7A	; 122
     dae:	54 e4       	ldi	r21, 0x44	; 68
     db0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     db4:	dc 01       	movw	r26, r24
     db6:	cb 01       	movw	r24, r22
     db8:	f8 01       	movw	r30, r16
     dba:	80 83       	st	Z, r24
     dbc:	91 83       	std	Z+1, r25	; 0x01
     dbe:	a2 83       	std	Z+2, r26	; 0x02
     dc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dc2:	fe 01       	movw	r30, r28
     dc4:	ff 96       	adiw	r30, 0x3f	; 63
     dc6:	60 81       	ld	r22, Z
     dc8:	71 81       	ldd	r23, Z+1	; 0x01
     dca:	82 81       	ldd	r24, Z+2	; 0x02
     dcc:	93 81       	ldd	r25, Z+3	; 0x03
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e8       	ldi	r20, 0x80	; 128
     dd4:	5f e3       	ldi	r21, 0x3F	; 63
     dd6:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
     dda:	88 23       	and	r24, r24
     ddc:	2c f4       	brge	.+10     	; 0xde8 <LCDinit+0x39c>
		__ticks = 1;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	9e af       	std	Y+62, r25	; 0x3e
     de4:	8d af       	std	Y+61, r24	; 0x3d
     de6:	46 c0       	rjmp	.+140    	; 0xe74 <LCDinit+0x428>
	else if (__tmp > 65535)
     de8:	fe 01       	movw	r30, r28
     dea:	ff 96       	adiw	r30, 0x3f	; 63
     dec:	60 81       	ld	r22, Z
     dee:	71 81       	ldd	r23, Z+1	; 0x01
     df0:	82 81       	ldd	r24, Z+2	; 0x02
     df2:	93 81       	ldd	r25, Z+3	; 0x03
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	3f ef       	ldi	r19, 0xFF	; 255
     df8:	4f e7       	ldi	r20, 0x7F	; 127
     dfa:	57 e4       	ldi	r21, 0x47	; 71
     dfc:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
     e00:	18 16       	cp	r1, r24
     e02:	64 f5       	brge	.+88     	; 0xe5c <LCDinit+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e04:	fe 01       	movw	r30, r28
     e06:	ed 5b       	subi	r30, 0xBD	; 189
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	60 81       	ld	r22, Z
     e0c:	71 81       	ldd	r23, Z+1	; 0x01
     e0e:	82 81       	ldd	r24, Z+2	; 0x02
     e10:	93 81       	ldd	r25, Z+3	; 0x03
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e2       	ldi	r20, 0x20	; 32
     e18:	51 e4       	ldi	r21, 0x41	; 65
     e1a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	bc 01       	movw	r22, r24
     e24:	cd 01       	movw	r24, r26
     e26:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	9e af       	std	Y+62, r25	; 0x3e
     e30:	8d af       	std	Y+61, r24	; 0x3d
     e32:	0f c0       	rjmp	.+30     	; 0xe52 <LCDinit+0x406>
     e34:	84 e6       	ldi	r24, 0x64	; 100
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	9c af       	std	Y+60, r25	; 0x3c
     e3a:	8b af       	std	Y+59, r24	; 0x3b
     e3c:	8b ad       	ldd	r24, Y+59	; 0x3b
     e3e:	9c ad       	ldd	r25, Y+60	; 0x3c
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	f1 f7       	brne	.-4      	; 0xe40 <LCDinit+0x3f4>
     e44:	9c af       	std	Y+60, r25	; 0x3c
     e46:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e48:	8d ad       	ldd	r24, Y+61	; 0x3d
     e4a:	9e ad       	ldd	r25, Y+62	; 0x3e
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	9e af       	std	Y+62, r25	; 0x3e
     e50:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e52:	8d ad       	ldd	r24, Y+61	; 0x3d
     e54:	9e ad       	ldd	r25, Y+62	; 0x3e
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	69 f7       	brne	.-38     	; 0xe34 <LCDinit+0x3e8>
     e5a:	16 c0       	rjmp	.+44     	; 0xe88 <LCDinit+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e5c:	fe 01       	movw	r30, r28
     e5e:	ff 96       	adiw	r30, 0x3f	; 63
     e60:	60 81       	ld	r22, Z
     e62:	71 81       	ldd	r23, Z+1	; 0x01
     e64:	82 81       	ldd	r24, Z+2	; 0x02
     e66:	93 81       	ldd	r25, Z+3	; 0x03
     e68:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	9e af       	std	Y+62, r25	; 0x3e
     e72:	8d af       	std	Y+61, r24	; 0x3d
     e74:	8d ad       	ldd	r24, Y+61	; 0x3d
     e76:	9e ad       	ldd	r25, Y+62	; 0x3e
     e78:	9a af       	std	Y+58, r25	; 0x3a
     e7a:	89 af       	std	Y+57, r24	; 0x39
     e7c:	89 ad       	ldd	r24, Y+57	; 0x39
     e7e:	9a ad       	ldd	r25, Y+58	; 0x3a
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	f1 f7       	brne	.-4      	; 0xe80 <LCDinit+0x434>
     e84:	9a af       	std	Y+58, r25	; 0x3a
     e86:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     e88:	e5 e3       	ldi	r30, 0x35	; 53
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 e3       	ldi	r24, 0x30	; 48
     e8e:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e90:	a5 e3       	ldi	r26, 0x35	; 53
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e5 e3       	ldi	r30, 0x35	; 53
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	84 60       	ori	r24, 0x04	; 4
     e9c:	8c 93       	st	X, r24
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	a0 e8       	ldi	r26, 0x80	; 128
     ea4:	bf e3       	ldi	r27, 0x3F	; 63
     ea6:	8d ab       	std	Y+53, r24	; 0x35
     ea8:	9e ab       	std	Y+54, r25	; 0x36
     eaa:	af ab       	std	Y+55, r26	; 0x37
     eac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eae:	6d a9       	ldd	r22, Y+53	; 0x35
     eb0:	7e a9       	ldd	r23, Y+54	; 0x36
     eb2:	8f a9       	ldd	r24, Y+55	; 0x37
     eb4:	98 ad       	ldd	r25, Y+56	; 0x38
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	4a e7       	ldi	r20, 0x7A	; 122
     ebc:	54 e4       	ldi	r21, 0x44	; 68
     ebe:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	89 ab       	std	Y+49, r24	; 0x31
     ec8:	9a ab       	std	Y+50, r25	; 0x32
     eca:	ab ab       	std	Y+51, r26	; 0x33
     ecc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ece:	69 a9       	ldd	r22, Y+49	; 0x31
     ed0:	7a a9       	ldd	r23, Y+50	; 0x32
     ed2:	8b a9       	ldd	r24, Y+51	; 0x33
     ed4:	9c a9       	ldd	r25, Y+52	; 0x34
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	40 e8       	ldi	r20, 0x80	; 128
     edc:	5f e3       	ldi	r21, 0x3F	; 63
     ede:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
     ee2:	88 23       	and	r24, r24
     ee4:	2c f4       	brge	.+10     	; 0xef0 <LCDinit+0x4a4>
		__ticks = 1;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	98 ab       	std	Y+48, r25	; 0x30
     eec:	8f a7       	std	Y+47, r24	; 0x2f
     eee:	3f c0       	rjmp	.+126    	; 0xf6e <LCDinit+0x522>
	else if (__tmp > 65535)
     ef0:	69 a9       	ldd	r22, Y+49	; 0x31
     ef2:	7a a9       	ldd	r23, Y+50	; 0x32
     ef4:	8b a9       	ldd	r24, Y+51	; 0x33
     ef6:	9c a9       	ldd	r25, Y+52	; 0x34
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	3f ef       	ldi	r19, 0xFF	; 255
     efc:	4f e7       	ldi	r20, 0x7F	; 127
     efe:	57 e4       	ldi	r21, 0x47	; 71
     f00:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
     f04:	18 16       	cp	r1, r24
     f06:	4c f5       	brge	.+82     	; 0xf5a <LCDinit+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f08:	6d a9       	ldd	r22, Y+53	; 0x35
     f0a:	7e a9       	ldd	r23, Y+54	; 0x36
     f0c:	8f a9       	ldd	r24, Y+55	; 0x37
     f0e:	98 ad       	ldd	r25, Y+56	; 0x38
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e2       	ldi	r20, 0x20	; 32
     f16:	51 e4       	ldi	r21, 0x41	; 65
     f18:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	bc 01       	movw	r22, r24
     f22:	cd 01       	movw	r24, r26
     f24:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	98 ab       	std	Y+48, r25	; 0x30
     f2e:	8f a7       	std	Y+47, r24	; 0x2f
     f30:	0f c0       	rjmp	.+30     	; 0xf50 <LCDinit+0x504>
     f32:	84 e6       	ldi	r24, 0x64	; 100
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	9e a7       	std	Y+46, r25	; 0x2e
     f38:	8d a7       	std	Y+45, r24	; 0x2d
     f3a:	8d a5       	ldd	r24, Y+45	; 0x2d
     f3c:	9e a5       	ldd	r25, Y+46	; 0x2e
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	f1 f7       	brne	.-4      	; 0xf3e <LCDinit+0x4f2>
     f42:	9e a7       	std	Y+46, r25	; 0x2e
     f44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f46:	8f a5       	ldd	r24, Y+47	; 0x2f
     f48:	98 a9       	ldd	r25, Y+48	; 0x30
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	98 ab       	std	Y+48, r25	; 0x30
     f4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f50:	8f a5       	ldd	r24, Y+47	; 0x2f
     f52:	98 a9       	ldd	r25, Y+48	; 0x30
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	69 f7       	brne	.-38     	; 0xf32 <LCDinit+0x4e6>
     f58:	14 c0       	rjmp	.+40     	; 0xf82 <LCDinit+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f5a:	69 a9       	ldd	r22, Y+49	; 0x31
     f5c:	7a a9       	ldd	r23, Y+50	; 0x32
     f5e:	8b a9       	ldd	r24, Y+51	; 0x33
     f60:	9c a9       	ldd	r25, Y+52	; 0x34
     f62:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	98 ab       	std	Y+48, r25	; 0x30
     f6c:	8f a7       	std	Y+47, r24	; 0x2f
     f6e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f70:	98 a9       	ldd	r25, Y+48	; 0x30
     f72:	9c a7       	std	Y+44, r25	; 0x2c
     f74:	8b a7       	std	Y+43, r24	; 0x2b
     f76:	8b a5       	ldd	r24, Y+43	; 0x2b
     f78:	9c a5       	ldd	r25, Y+44	; 0x2c
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	f1 f7       	brne	.-4      	; 0xf7a <LCDinit+0x52e>
     f7e:	9c a7       	std	Y+44, r25	; 0x2c
     f80:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     f82:	a5 e3       	ldi	r26, 0x35	; 53
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e5 e3       	ldi	r30, 0x35	; 53
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8b 7f       	andi	r24, 0xFB	; 251
     f8e:	8c 93       	st	X, r24
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a0 e8       	ldi	r26, 0x80	; 128
     f96:	bf e3       	ldi	r27, 0x3F	; 63
     f98:	8f a3       	std	Y+39, r24	; 0x27
     f9a:	98 a7       	std	Y+40, r25	; 0x28
     f9c:	a9 a7       	std	Y+41, r26	; 0x29
     f9e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa0:	6f a1       	ldd	r22, Y+39	; 0x27
     fa2:	78 a5       	ldd	r23, Y+40	; 0x28
     fa4:	89 a5       	ldd	r24, Y+41	; 0x29
     fa6:	9a a5       	ldd	r25, Y+42	; 0x2a
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	4a e7       	ldi	r20, 0x7A	; 122
     fae:	54 e4       	ldi	r21, 0x44	; 68
     fb0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	8b a3       	std	Y+35, r24	; 0x23
     fba:	9c a3       	std	Y+36, r25	; 0x24
     fbc:	ad a3       	std	Y+37, r26	; 0x25
     fbe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fc0:	6b a1       	ldd	r22, Y+35	; 0x23
     fc2:	7c a1       	ldd	r23, Y+36	; 0x24
     fc4:	8d a1       	ldd	r24, Y+37	; 0x25
     fc6:	9e a1       	ldd	r25, Y+38	; 0x26
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e8       	ldi	r20, 0x80	; 128
     fce:	5f e3       	ldi	r21, 0x3F	; 63
     fd0:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
     fd4:	88 23       	and	r24, r24
     fd6:	2c f4       	brge	.+10     	; 0xfe2 <LCDinit+0x596>
		__ticks = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	9a a3       	std	Y+34, r25	; 0x22
     fde:	89 a3       	std	Y+33, r24	; 0x21
     fe0:	3f c0       	rjmp	.+126    	; 0x1060 <LCDinit+0x614>
	else if (__tmp > 65535)
     fe2:	6b a1       	ldd	r22, Y+35	; 0x23
     fe4:	7c a1       	ldd	r23, Y+36	; 0x24
     fe6:	8d a1       	ldd	r24, Y+37	; 0x25
     fe8:	9e a1       	ldd	r25, Y+38	; 0x26
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	3f ef       	ldi	r19, 0xFF	; 255
     fee:	4f e7       	ldi	r20, 0x7F	; 127
     ff0:	57 e4       	ldi	r21, 0x47	; 71
     ff2:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
     ff6:	18 16       	cp	r1, r24
     ff8:	4c f5       	brge	.+82     	; 0x104c <LCDinit+0x600>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffa:	6f a1       	ldd	r22, Y+39	; 0x27
     ffc:	78 a5       	ldd	r23, Y+40	; 0x28
     ffe:	89 a5       	ldd	r24, Y+41	; 0x29
    1000:	9a a5       	ldd	r25, Y+42	; 0x2a
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e2       	ldi	r20, 0x20	; 32
    1008:	51 e4       	ldi	r21, 0x41	; 65
    100a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	9a a3       	std	Y+34, r25	; 0x22
    1020:	89 a3       	std	Y+33, r24	; 0x21
    1022:	0f c0       	rjmp	.+30     	; 0x1042 <LCDinit+0x5f6>
    1024:	84 e6       	ldi	r24, 0x64	; 100
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	98 a3       	std	Y+32, r25	; 0x20
    102a:	8f 8f       	std	Y+31, r24	; 0x1f
    102c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    102e:	98 a1       	ldd	r25, Y+32	; 0x20
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <LCDinit+0x5e4>
    1034:	98 a3       	std	Y+32, r25	; 0x20
    1036:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1038:	89 a1       	ldd	r24, Y+33	; 0x21
    103a:	9a a1       	ldd	r25, Y+34	; 0x22
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	9a a3       	std	Y+34, r25	; 0x22
    1040:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1042:	89 a1       	ldd	r24, Y+33	; 0x21
    1044:	9a a1       	ldd	r25, Y+34	; 0x22
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	69 f7       	brne	.-38     	; 0x1024 <LCDinit+0x5d8>
    104a:	14 c0       	rjmp	.+40     	; 0x1074 <LCDinit+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    104c:	6b a1       	ldd	r22, Y+35	; 0x23
    104e:	7c a1       	ldd	r23, Y+36	; 0x24
    1050:	8d a1       	ldd	r24, Y+37	; 0x25
    1052:	9e a1       	ldd	r25, Y+38	; 0x26
    1054:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	9a a3       	std	Y+34, r25	; 0x22
    105e:	89 a3       	std	Y+33, r24	; 0x21
    1060:	89 a1       	ldd	r24, Y+33	; 0x21
    1062:	9a a1       	ldd	r25, Y+34	; 0x22
    1064:	9e 8f       	std	Y+30, r25	; 0x1e
    1066:	8d 8f       	std	Y+29, r24	; 0x1d
    1068:	8d 8d       	ldd	r24, Y+29	; 0x1d
    106a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <LCDinit+0x620>
    1070:	9e 8f       	std	Y+30, r25	; 0x1e
    1072:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1074:	e5 e3       	ldi	r30, 0x35	; 53
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 e2       	ldi	r24, 0x20	; 32
    107a:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    107c:	a5 e3       	ldi	r26, 0x35	; 53
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e5 e3       	ldi	r30, 0x35	; 53
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	84 60       	ori	r24, 0x04	; 4
    1088:	8c 93       	st	X, r24
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	a0 e8       	ldi	r26, 0x80	; 128
    1090:	bf e3       	ldi	r27, 0x3F	; 63
    1092:	89 8f       	std	Y+25, r24	; 0x19
    1094:	9a 8f       	std	Y+26, r25	; 0x1a
    1096:	ab 8f       	std	Y+27, r26	; 0x1b
    1098:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    109a:	69 8d       	ldd	r22, Y+25	; 0x19
    109c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    109e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	4a e7       	ldi	r20, 0x7A	; 122
    10a8:	54 e4       	ldi	r21, 0x44	; 68
    10aa:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	8d 8b       	std	Y+21, r24	; 0x15
    10b4:	9e 8b       	std	Y+22, r25	; 0x16
    10b6:	af 8b       	std	Y+23, r26	; 0x17
    10b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10ba:	6d 89       	ldd	r22, Y+21	; 0x15
    10bc:	7e 89       	ldd	r23, Y+22	; 0x16
    10be:	8f 89       	ldd	r24, Y+23	; 0x17
    10c0:	98 8d       	ldd	r25, Y+24	; 0x18
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e8       	ldi	r20, 0x80	; 128
    10c8:	5f e3       	ldi	r21, 0x3F	; 63
    10ca:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
    10ce:	88 23       	and	r24, r24
    10d0:	2c f4       	brge	.+10     	; 0x10dc <LCDinit+0x690>
		__ticks = 1;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9c 8b       	std	Y+20, r25	; 0x14
    10d8:	8b 8b       	std	Y+19, r24	; 0x13
    10da:	3f c0       	rjmp	.+126    	; 0x115a <LCDinit+0x70e>
	else if (__tmp > 65535)
    10dc:	6d 89       	ldd	r22, Y+21	; 0x15
    10de:	7e 89       	ldd	r23, Y+22	; 0x16
    10e0:	8f 89       	ldd	r24, Y+23	; 0x17
    10e2:	98 8d       	ldd	r25, Y+24	; 0x18
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	3f ef       	ldi	r19, 0xFF	; 255
    10e8:	4f e7       	ldi	r20, 0x7F	; 127
    10ea:	57 e4       	ldi	r21, 0x47	; 71
    10ec:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
    10f0:	18 16       	cp	r1, r24
    10f2:	4c f5       	brge	.+82     	; 0x1146 <LCDinit+0x6fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f4:	69 8d       	ldd	r22, Y+25	; 0x19
    10f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e2       	ldi	r20, 0x20	; 32
    1102:	51 e4       	ldi	r21, 0x41	; 65
    1104:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	bc 01       	movw	r22, r24
    110e:	cd 01       	movw	r24, r26
    1110:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	9c 8b       	std	Y+20, r25	; 0x14
    111a:	8b 8b       	std	Y+19, r24	; 0x13
    111c:	0f c0       	rjmp	.+30     	; 0x113c <LCDinit+0x6f0>
    111e:	84 e6       	ldi	r24, 0x64	; 100
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	9a 8b       	std	Y+18, r25	; 0x12
    1124:	89 8b       	std	Y+17, r24	; 0x11
    1126:	89 89       	ldd	r24, Y+17	; 0x11
    1128:	9a 89       	ldd	r25, Y+18	; 0x12
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <LCDinit+0x6de>
    112e:	9a 8b       	std	Y+18, r25	; 0x12
    1130:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1132:	8b 89       	ldd	r24, Y+19	; 0x13
    1134:	9c 89       	ldd	r25, Y+20	; 0x14
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	9c 8b       	std	Y+20, r25	; 0x14
    113a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113c:	8b 89       	ldd	r24, Y+19	; 0x13
    113e:	9c 89       	ldd	r25, Y+20	; 0x14
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	69 f7       	brne	.-38     	; 0x111e <LCDinit+0x6d2>
    1144:	14 c0       	rjmp	.+40     	; 0x116e <LCDinit+0x722>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1146:	6d 89       	ldd	r22, Y+21	; 0x15
    1148:	7e 89       	ldd	r23, Y+22	; 0x16
    114a:	8f 89       	ldd	r24, Y+23	; 0x17
    114c:	98 8d       	ldd	r25, Y+24	; 0x18
    114e:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	9c 8b       	std	Y+20, r25	; 0x14
    1158:	8b 8b       	std	Y+19, r24	; 0x13
    115a:	8b 89       	ldd	r24, Y+19	; 0x13
    115c:	9c 89       	ldd	r25, Y+20	; 0x14
    115e:	98 8b       	std	Y+16, r25	; 0x10
    1160:	8f 87       	std	Y+15, r24	; 0x0f
    1162:	8f 85       	ldd	r24, Y+15	; 0x0f
    1164:	98 89       	ldd	r25, Y+16	; 0x10
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <LCDinit+0x71a>
    116a:	98 8b       	std	Y+16, r25	; 0x10
    116c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    116e:	a5 e3       	ldi	r26, 0x35	; 53
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e5 e3       	ldi	r30, 0x35	; 53
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	8b 7f       	andi	r24, 0xFB	; 251
    117a:	8c 93       	st	X, r24
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a0 e8       	ldi	r26, 0x80	; 128
    1182:	bf e3       	ldi	r27, 0x3F	; 63
    1184:	8b 87       	std	Y+11, r24	; 0x0b
    1186:	9c 87       	std	Y+12, r25	; 0x0c
    1188:	ad 87       	std	Y+13, r26	; 0x0d
    118a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118c:	6b 85       	ldd	r22, Y+11	; 0x0b
    118e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1190:	8d 85       	ldd	r24, Y+13	; 0x0d
    1192:	9e 85       	ldd	r25, Y+14	; 0x0e
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	4a e7       	ldi	r20, 0x7A	; 122
    119a:	54 e4       	ldi	r21, 0x44	; 68
    119c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	8f 83       	std	Y+7, r24	; 0x07
    11a6:	98 87       	std	Y+8, r25	; 0x08
    11a8:	a9 87       	std	Y+9, r26	; 0x09
    11aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ac:	6f 81       	ldd	r22, Y+7	; 0x07
    11ae:	78 85       	ldd	r23, Y+8	; 0x08
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e8       	ldi	r20, 0x80	; 128
    11ba:	5f e3       	ldi	r21, 0x3F	; 63
    11bc:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
    11c0:	88 23       	and	r24, r24
    11c2:	2c f4       	brge	.+10     	; 0x11ce <LCDinit+0x782>
		__ticks = 1;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05
    11cc:	3f c0       	rjmp	.+126    	; 0x124c <LCDinit+0x800>
	else if (__tmp > 65535)
    11ce:	6f 81       	ldd	r22, Y+7	; 0x07
    11d0:	78 85       	ldd	r23, Y+8	; 0x08
    11d2:	89 85       	ldd	r24, Y+9	; 0x09
    11d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	3f ef       	ldi	r19, 0xFF	; 255
    11da:	4f e7       	ldi	r20, 0x7F	; 127
    11dc:	57 e4       	ldi	r21, 0x47	; 71
    11de:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
    11e2:	18 16       	cp	r1, r24
    11e4:	4c f5       	brge	.+82     	; 0x1238 <LCDinit+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 e2       	ldi	r20, 0x20	; 32
    11f4:	51 e4       	ldi	r21, 0x41	; 65
    11f6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	0f c0       	rjmp	.+30     	; 0x122e <LCDinit+0x7e2>
    1210:	84 e6       	ldi	r24, 0x64	; 100
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	9c 83       	std	Y+4, r25	; 0x04
    1216:	8b 83       	std	Y+3, r24	; 0x03
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <LCDinit+0x7d0>
    1220:	9c 83       	std	Y+4, r25	; 0x04
    1222:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	9e 83       	std	Y+6, r25	; 0x06
    122c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	69 f7       	brne	.-38     	; 0x1210 <LCDinit+0x7c4>
    1236:	14 c0       	rjmp	.+40     	; 0x1260 <LCDinit+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1238:	6f 81       	ldd	r22, Y+7	; 0x07
    123a:	78 85       	ldd	r23, Y+8	; 0x08
    123c:	89 85       	ldd	r24, Y+9	; 0x09
    123e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1240:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixunssfsi>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	9e 83       	std	Y+6, r25	; 0x06
    124a:	8d 83       	std	Y+5, r24	; 0x05
    124c:	8d 81       	ldd	r24, Y+5	; 0x05
    124e:	9e 81       	ldd	r25, Y+6	; 0x06
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <LCDinit+0x80c>
    125c:	9a 83       	std	Y+2, r25	; 0x02
    125e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1260:	88 e2       	ldi	r24, 0x28	; 40
    1262:	0e 94 1d 03 	call	0x63a	; 0x63a <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    1266:	8c e0       	ldi	r24, 0x0C	; 12
    1268:	0e 94 1d 03 	call	0x63a	; 0x63a <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
    126c:	fe 01       	movw	r30, r28
    126e:	ec 59       	subi	r30, 0x9C	; 156
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	10 82       	st	Z, r1
    1274:	fe 01       	movw	r30, r28
    1276:	ed 59       	subi	r30, 0x9D	; 157
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	10 82       	st	Z, r1
    127c:	23 c0       	rjmp	.+70     	; 0x12c4 <LCDinit+0x878>
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    127e:	fe 01       	movw	r30, r28
    1280:	ec 59       	subi	r30, 0x9C	; 156
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	80 81       	ld	r24, Z
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9c 01       	movw	r18, r24
    128c:	2c 5a       	subi	r18, 0xAC	; 172
    128e:	3f 4f       	sbci	r19, 0xFF	; 255
    1290:	fe 01       	movw	r30, r28
    1292:	ed 59       	subi	r30, 0x9D	; 157
    1294:	ff 4f       	sbci	r31, 0xFF	; 255
    1296:	40 81       	ld	r20, Z
    1298:	de 01       	movw	r26, r28
    129a:	ad 59       	subi	r26, 0x9D	; 157
    129c:	bf 4f       	sbci	r27, 0xFF	; 255
    129e:	fe 01       	movw	r30, r28
    12a0:	ed 59       	subi	r30, 0x9D	; 157
    12a2:	ff 4f       	sbci	r31, 0xFF	; 255
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 5f       	subi	r24, 0xFF	; 255
    12a8:	8c 93       	st	X, r24
    12aa:	c9 01       	movw	r24, r18
    12ac:	64 2f       	mov	r22, r20
    12ae:	0e 94 38 0a 	call	0x1470	; 0x1470 <LCDdefinechar>
		ch=ch+8;
    12b2:	de 01       	movw	r26, r28
    12b4:	ac 59       	subi	r26, 0x9C	; 156
    12b6:	bf 4f       	sbci	r27, 0xFF	; 255
    12b8:	fe 01       	movw	r30, r28
    12ba:	ec 59       	subi	r30, 0x9C	; 156
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	80 81       	ld	r24, Z
    12c0:	88 5f       	subi	r24, 0xF8	; 248
    12c2:	8c 93       	st	X, r24
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    12c4:	fe 01       	movw	r30, r28
    12c6:	ec 59       	subi	r30, 0x9C	; 156
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	80 81       	ld	r24, Z
    12cc:	80 34       	cpi	r24, 0x40	; 64
    12ce:	b8 f2       	brcs	.-82     	; 0x127e <LCDinit+0x832>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    12d0:	cc 59       	subi	r28, 0x9C	; 156
    12d2:	df 4f       	sbci	r29, 0xFF	; 255
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	08 95       	ret

000012e8 <LCDclr>:
void LCDclr(void)				//Clears LCD
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_CLR);
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	0e 94 1d 03 	call	0x63a	; 0x63a <LCDsendCommand>
}
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_HOME);
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	0e 94 1d 03 	call	0x63a	; 0x63a <LCDsendCommand>
}
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <LCDstring+0x6>
    1316:	00 d0       	rcall	.+0      	; 0x1318 <LCDstring+0x8>
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	6b 83       	std	Y+3, r22	; 0x03
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	9a 81       	ldd	r25, Y+2	; 0x02
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	a1 f0       	breq	.+40     	; 0x1352 <LCDstring+0x42>

	// print data
	for(i=0; i<nBytes; i++)
    132a:	1c 82       	std	Y+4, r1	; 0x04
    132c:	0e c0       	rjmp	.+28     	; 0x134a <LCDstring+0x3a>
	{
		LCDsendChar(data[i]);
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	fc 01       	movw	r30, r24
    133a:	e2 0f       	add	r30, r18
    133c:	f3 1f       	adc	r31, r19
    133e:	80 81       	ld	r24, Z
    1340:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1344:	9c 81       	ldd	r25, Y+4	; 0x04
    1346:	9f 5f       	subi	r25, 0xFF	; 255
    1348:	9c 83       	std	Y+4, r25	; 0x04
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	98 17       	cp	r25, r24
    1350:	70 f3       	brcs	.-36     	; 0x132e <LCDstring+0x1e>
	{
		LCDsendChar(data[i]);
	}
}
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <LCDGotoXY+0x6>
    1366:	00 d0       	rcall	.+0      	; 0x1368 <LCDGotoXY+0x8>
    1368:	0f 92       	push	r0
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	6a 83       	std	Y+2, r22	; 0x02
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	3d 83       	std	Y+5, r19	; 0x05
    137a:	2c 83       	std	Y+4, r18	; 0x04
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	91 05       	cpc	r25, r1
    1384:	c1 f0       	breq	.+48     	; 0x13b6 <LCDGotoXY+0x56>
    1386:	2c 81       	ldd	r18, Y+4	; 0x04
    1388:	3d 81       	ldd	r19, Y+5	; 0x05
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	2c f4       	brge	.+10     	; 0x139a <LCDGotoXY+0x3a>
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	9d 81       	ldd	r25, Y+5	; 0x05
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	61 f0       	breq	.+24     	; 0x13b0 <LCDGotoXY+0x50>
    1398:	1d c0       	rjmp	.+58     	; 0x13d4 <LCDGotoXY+0x74>
    139a:	2c 81       	ldd	r18, Y+4	; 0x04
    139c:	3d 81       	ldd	r19, Y+5	; 0x05
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	71 f0       	breq	.+28     	; 0x13c0 <LCDGotoXY+0x60>
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	9d 81       	ldd	r25, Y+5	; 0x05
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	91 05       	cpc	r25, r1
    13ac:	71 f0       	breq	.+28     	; 0x13ca <LCDGotoXY+0x6a>
    13ae:	12 c0       	rjmp	.+36     	; 0x13d4 <LCDGotoXY+0x74>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
    13b0:	99 81       	ldd	r25, Y+1	; 0x01
    13b2:	9b 83       	std	Y+3, r25	; 0x03
    13b4:	11 c0       	rjmp	.+34     	; 0x13d8 <LCDGotoXY+0x78>
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	28 2f       	mov	r18, r24
    13ba:	20 5c       	subi	r18, 0xC0	; 192
    13bc:	2b 83       	std	Y+3, r18	; 0x03
    13be:	0c c0       	rjmp	.+24     	; 0x13d8 <LCDGotoXY+0x78>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	38 2f       	mov	r19, r24
    13c4:	3c 5e       	subi	r19, 0xEC	; 236
    13c6:	3b 83       	std	Y+3, r19	; 0x03
    13c8:	07 c0       	rjmp	.+14     	; 0x13d8 <LCDGotoXY+0x78>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	98 2f       	mov	r25, r24
    13ce:	9c 5a       	subi	r25, 0xAC	; 172
    13d0:	9b 83       	std	Y+3, r25	; 0x03
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <LCDGotoXY+0x78>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
    13d4:	29 81       	ldd	r18, Y+1	; 0x01
    13d6:	2b 83       	std	Y+3, r18	; 0x03
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	80 68       	ori	r24, 0x80	; 128
    13dc:	0e 94 1d 03 	call	0x63a	; 0x63a <LCDsendCommand>
	
}
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	2b 97       	sbiw	r28, 0x0b	; 11
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	99 87       	std	Y+9, r25	; 0x09
    1406:	88 87       	std	Y+8, r24	; 0x08
    1408:	6a 87       	std	Y+10, r22	; 0x0a
    140a:	4b 87       	std	Y+11, r20	; 0x0b
	uint8_t i;
	LCDGotoXY(x,y);
    140c:	8a 85       	ldd	r24, Y+10	; 0x0a
    140e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1410:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1414:	1f 82       	std	Y+7, r1	; 0x07
    1416:	13 c0       	rjmp	.+38     	; 0x143e <CopyStringtoLCD+0x4e>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1418:	8f 81       	ldd	r24, Y+7	; 0x07
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	88 85       	ldd	r24, Y+8	; 0x08
    1420:	99 85       	ldd	r25, Y+9	; 0x09
    1422:	82 0f       	add	r24, r18
    1424:	93 1f       	adc	r25, r19
    1426:	9e 83       	std	Y+6, r25	; 0x06
    1428:	8d 83       	std	Y+5, r24	; 0x05
    142a:	ed 81       	ldd	r30, Y+5	; 0x05
    142c:	fe 81       	ldd	r31, Y+6	; 0x06
    142e:	84 91       	lpm	r24, Z+
    1430:	8c 83       	std	Y+4, r24	; 0x04
    1432:	8c 81       	ldd	r24, Y+4	; 0x04
    1434:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1438:	8f 81       	ldd	r24, Y+7	; 0x07
    143a:	8f 5f       	subi	r24, 0xFF	; 255
    143c:	8f 83       	std	Y+7, r24	; 0x07
    143e:	8f 81       	ldd	r24, Y+7	; 0x07
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	88 85       	ldd	r24, Y+8	; 0x08
    1446:	99 85       	ldd	r25, Y+9	; 0x09
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	9b 83       	std	Y+3, r25	; 0x03
    144e:	8a 83       	std	Y+2, r24	; 0x02
    1450:	ea 81       	ldd	r30, Y+2	; 0x02
    1452:	fb 81       	ldd	r31, Y+3	; 0x03
    1454:	84 91       	lpm	r24, Z+
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	88 23       	and	r24, r24
    145c:	e9 f6       	brne	.-70     	; 0x1418 <CopyStringtoLCD+0x28>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    145e:	2b 96       	adiw	r28, 0x0b	; 11
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	2a 97       	sbiw	r28, 0x0a	; 10
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	99 87       	std	Y+9, r25	; 0x09
    1486:	88 87       	std	Y+8, r24	; 0x08
    1488:	6a 87       	std	Y+10, r22	; 0x0a
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    148a:	8a 85       	ldd	r24, Y+10	; 0x0a
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	80 64       	ori	r24, 0x40	; 64
    149e:	8f 83       	std	Y+7, r24	; 0x07
	for (i=0; i<8; i++){
    14a0:	1d 82       	std	Y+5, r1	; 0x05
    14a2:	1c 82       	std	Y+4, r1	; 0x04
    14a4:	1d c0       	rjmp	.+58     	; 0x14e0 <LCDdefinechar+0x70>
		pcc=pgm_read_byte(&pc[i]);
    14a6:	28 85       	ldd	r18, Y+8	; 0x08
    14a8:	39 85       	ldd	r19, Y+9	; 0x09
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	9d 81       	ldd	r25, Y+5	; 0x05
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	9b 83       	std	Y+3, r25	; 0x03
    14b4:	8a 83       	std	Y+2, r24	; 0x02
    14b6:	ea 81       	ldd	r30, Y+2	; 0x02
    14b8:	fb 81       	ldd	r31, Y+3	; 0x03
    14ba:	84 91       	lpm	r24, Z+
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	8e 83       	std	Y+6, r24	; 0x06
		LCDsendCommand(a++);
    14c2:	9f 81       	ldd	r25, Y+7	; 0x07
    14c4:	8f 81       	ldd	r24, Y+7	; 0x07
    14c6:	8f 5f       	subi	r24, 0xFF	; 255
    14c8:	8f 83       	std	Y+7, r24	; 0x07
    14ca:	89 2f       	mov	r24, r25
    14cc:	0e 94 1d 03 	call	0x63a	; 0x63a <LCDsendCommand>
		LCDsendChar(pcc);
    14d0:	8e 81       	ldd	r24, Y+6	; 0x06
    14d2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	9d 83       	std	Y+5, r25	; 0x05
    14de:	8c 83       	std	Y+4, r24	; 0x04
    14e0:	8c 81       	ldd	r24, Y+4	; 0x04
    14e2:	9d 81       	ldd	r25, Y+5	; 0x05
    14e4:	88 30       	cpi	r24, 0x08	; 8
    14e6:	91 05       	cpc	r25, r1
    14e8:	f0 f2       	brcs	.-68     	; 0x14a6 <LCDdefinechar+0x36>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    14ea:	2a 96       	adiw	r28, 0x0a	; 10
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <LCDshiftLeft>:

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <LCDshiftLeft+0x6>
    1502:	0f 92       	push	r0
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    150a:	1a 82       	std	Y+2, r1	; 0x02
    150c:	19 82       	std	Y+1, r1	; 0x01
    150e:	08 c0       	rjmp	.+16     	; 0x1520 <LCDshiftLeft+0x24>
	{
		LCDsendCommand(0x1E);
    1510:	8e e1       	ldi	r24, 0x1E	; 30
    1512:	0e 94 1d 03 	call	0x63a	; 0x63a <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	9a 81       	ldd	r25, Y+2	; 0x02
    151a:	01 96       	adiw	r24, 0x01	; 1
    151c:	9a 83       	std	Y+2, r25	; 0x02
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	9a 81       	ldd	r25, Y+2	; 0x02
    152a:	82 17       	cp	r24, r18
    152c:	93 07       	cpc	r25, r19
    152e:	84 f3       	brlt	.-32     	; 0x1510 <LCDshiftLeft+0x14>
	{
		LCDsendCommand(0x1E);
	}
}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <LCDshiftRight+0x6>
    1542:	0f 92       	push	r0
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    154a:	1a 82       	std	Y+2, r1	; 0x02
    154c:	19 82       	std	Y+1, r1	; 0x01
    154e:	08 c0       	rjmp	.+16     	; 0x1560 <LCDshiftRight+0x24>
	{
		LCDsendCommand(0x18);
    1550:	88 e1       	ldi	r24, 0x18	; 24
    1552:	0e 94 1d 03 	call	0x63a	; 0x63a <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	01 96       	adiw	r24, 0x01	; 1
    155c:	9a 83       	std	Y+2, r25	; 0x02
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	82 17       	cp	r24, r18
    156c:	93 07       	cpc	r25, r19
    156e:	84 f3       	brlt	.-32     	; 0x1550 <LCDshiftRight+0x14>
	{
		LCDsendCommand(0x18);
	}
}
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0E);
    1584:	8e e0       	ldi	r24, 0x0E	; 14
    1586:	0e 94 1d 03 	call	0x63a	; 0x63a <LCDsendCommand>
}
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0F);
    1598:	8f e0       	ldi	r24, 0x0F	; 15
    159a:	0e 94 1d 03 	call	0x63a	; 0x63a <LCDsendCommand>
}
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    15ac:	8c e0       	ldi	r24, 0x0C	; 12
    15ae:	0e 94 1d 03 	call	0x63a	; 0x63a <LCDsendCommand>
}
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x08);
    15c0:	88 e0       	ldi	r24, 0x08	; 8
    15c2:	0e 94 1d 03 	call	0x63a	; 0x63a <LCDsendCommand>
}
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    15d4:	8c e0       	ldi	r24, 0x0C	; 12
    15d6:	0e 94 1d 03 	call	0x63a	; 0x63a <LCDsendCommand>
}
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <LCDcursorLeft+0x6>
    15e6:	0f 92       	push	r0
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    15ee:	1a 82       	std	Y+2, r1	; 0x02
    15f0:	19 82       	std	Y+1, r1	; 0x01
    15f2:	08 c0       	rjmp	.+16     	; 0x1604 <LCDcursorLeft+0x24>
	{
		LCDsendCommand(0x10);
    15f4:	80 e1       	ldi	r24, 0x10	; 16
    15f6:	0e 94 1d 03 	call	0x63a	; 0x63a <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	9a 81       	ldd	r25, Y+2	; 0x02
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	9a 83       	std	Y+2, r25	; 0x02
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	9a 81       	ldd	r25, Y+2	; 0x02
    160e:	82 17       	cp	r24, r18
    1610:	93 07       	cpc	r25, r19
    1612:	84 f3       	brlt	.-32     	; 0x15f4 <LCDcursorLeft+0x14>
	{
		LCDsendCommand(0x10);
	}
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	00 d0       	rcall	.+0      	; 0x1626 <LCDcursorRight+0x6>
    1626:	0f 92       	push	r0
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	8b 83       	std	Y+3, r24	; 0x03
	for (i=0;i<n;i++)
    162e:	1a 82       	std	Y+2, r1	; 0x02
    1630:	19 82       	std	Y+1, r1	; 0x01
    1632:	08 c0       	rjmp	.+16     	; 0x1644 <LCDcursorRight+0x24>
	{
		LCDsendCommand(0x14);
    1634:	84 e1       	ldi	r24, 0x14	; 20
    1636:	0e 94 1d 03 	call	0x63a	; 0x63a <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	9a 83       	std	Y+2, r25	; 0x02
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	82 17       	cp	r24, r18
    1650:	93 07       	cpc	r25, r19
    1652:	84 f3       	brlt	.-32     	; 0x1634 <LCDcursorRight+0x14>
	{
		LCDsendCommand(0x14);
	}
}
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	27 97       	sbiw	r28, 0x07	; 7
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	8d 83       	std	Y+5, r24	; 0x05
    1676:	6e 83       	std	Y+6, r22	; 0x06
    1678:	4f 83       	std	Y+7, r20	; 0x07
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	48 2f       	mov	r20, r24
    167e:	50 e0       	ldi	r21, 0x00	; 0
    1680:	8f 81       	ldd	r24, Y+7	; 0x07
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	c9 01       	movw	r24, r18
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	82 0f       	add	r24, r18
    168e:	93 1f       	adc	r25, r19
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	9a 01       	movw	r18, r20
    1696:	28 9f       	mul	r18, r24
    1698:	a0 01       	movw	r20, r0
    169a:	29 9f       	mul	r18, r25
    169c:	50 0d       	add	r21, r0
    169e:	38 9f       	mul	r19, r24
    16a0:	50 0d       	add	r21, r0
    16a2:	11 24       	eor	r1, r1
    16a4:	8e 81       	ldd	r24, Y+6	; 0x06
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	ca 01       	movw	r24, r20
    16ac:	b9 01       	movw	r22, r18
    16ae:	0e 94 24 11 	call	0x2248	; 0x2248 <__divmodhi4>
    16b2:	cb 01       	movw	r24, r22
    16b4:	9b 83       	std	Y+3, r25	; 0x03
    16b6:	8a 83       	std	Y+2, r24	; 0x02
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    16b8:	1c 82       	std	Y+4, r1	; 0x04
    16ba:	35 c0       	rjmp	.+106    	; 0x1726 <LCDprogressBar+0xc6>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	c9 01       	movw	r24, r18
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	82 0f       	add	r24, r18
    16ca:	93 1f       	adc	r25, r19
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	9c 01       	movw	r18, r24
    16d2:	2b 5f       	subi	r18, 0xFB	; 251
    16d4:	3f 4f       	sbci	r19, 0xFF	; 255
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	9b 81       	ldd	r25, Y+3	; 0x03
    16da:	82 17       	cp	r24, r18
    16dc:	93 07       	cpc	r25, r19
    16de:	d8 f4       	brcc	.+54     	; 0x1716 <LCDprogressBar+0xb6>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	c9 01       	movw	r24, r18
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	82 0f       	add	r24, r18
    16ee:	93 1f       	adc	r25, r19
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	9c 01       	movw	r18, r24
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	9b 81       	ldd	r25, Y+3	; 0x03
    16fa:	82 17       	cp	r24, r18
    16fc:	93 07       	cpc	r25, r19
    16fe:	10 f4       	brcc	.+4      	; 0x1704 <LCDprogressBar+0xa4>
			{
				// this is an empty block
				// use space character?
				c = 0;
    1700:	19 82       	std	Y+1, r1	; 0x01
    1702:	0b c0       	rjmp	.+22     	; 0x171a <LCDprogressBar+0xba>
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	9b 81       	ldd	r25, Y+3	; 0x03
    1708:	26 e0       	ldi	r18, 0x06	; 6
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	b9 01       	movw	r22, r18
    170e:	0e 94 10 11 	call	0x2220	; 0x2220 <__udivmodhi4>
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	02 c0       	rjmp	.+4      	; 0x171a <LCDprogressBar+0xba>
			}
		}
		else
		{
			// this is a full block
			c = 5;
    1716:	85 e0       	ldi	r24, 0x05	; 5
    1718:	89 83       	std	Y+1, r24	; 0x01
		}
		
		// write character to display
		LCDsendChar(c);
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	8f 5f       	subi	r24, 0xFF	; 255
    1724:	8c 83       	std	Y+4, r24	; 0x04
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	8f 81       	ldd	r24, Y+7	; 0x07
    172a:	98 17       	cp	r25, r24
    172c:	38 f2       	brcs	.-114    	; 0x16bc <LCDprogressBar+0x5c>
		
		// write character to display
		LCDsendChar(c);
	}

}
    172e:	27 96       	adiw	r28, 0x07	; 7
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <LCDdisplay>:

void LCDdisplay(char a[])
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	00 d0       	rcall	.+0      	; 0x1746 <LCDdisplay+0x6>
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01
	LCDstring(a,strlen(a));
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	0e 94 6e 11 	call	0x22dc	; 0x22dc <strlen>
    1756:	28 2f       	mov	r18, r24
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	9a 81       	ldd	r25, Y+2	; 0x02
    175c:	62 2f       	mov	r22, r18
    175e:	0e 94 88 09 	call	0x1310	; 0x1310 <LCDstring>
}
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <__fixunssfsi>:
    176c:	ef 92       	push	r14
    176e:	ff 92       	push	r15
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	7b 01       	movw	r14, r22
    1776:	8c 01       	movw	r16, r24
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	5f e4       	ldi	r21, 0x4F	; 79
    1780:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__gesf2>
    1784:	88 23       	and	r24, r24
    1786:	8c f0       	brlt	.+34     	; 0x17aa <__fixunssfsi+0x3e>
    1788:	c8 01       	movw	r24, r16
    178a:	b7 01       	movw	r22, r14
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	5f e4       	ldi	r21, 0x4F	; 79
    1794:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__subsf3>
    1798:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__fixsfsi>
    179c:	9b 01       	movw	r18, r22
    179e:	ac 01       	movw	r20, r24
    17a0:	20 50       	subi	r18, 0x00	; 0
    17a2:	30 40       	sbci	r19, 0x00	; 0
    17a4:	40 40       	sbci	r20, 0x00	; 0
    17a6:	50 48       	sbci	r21, 0x80	; 128
    17a8:	06 c0       	rjmp	.+12     	; 0x17b6 <__fixunssfsi+0x4a>
    17aa:	c8 01       	movw	r24, r16
    17ac:	b7 01       	movw	r22, r14
    17ae:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__fixsfsi>
    17b2:	9b 01       	movw	r18, r22
    17b4:	ac 01       	movw	r20, r24
    17b6:	b9 01       	movw	r22, r18
    17b8:	ca 01       	movw	r24, r20
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	08 95       	ret

000017c4 <_fpadd_parts>:
    17c4:	a0 e0       	ldi	r26, 0x00	; 0
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e8 ee       	ldi	r30, 0xE8	; 232
    17ca:	fb e0       	ldi	r31, 0x0B	; 11
    17cc:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__>
    17d0:	dc 01       	movw	r26, r24
    17d2:	2b 01       	movw	r4, r22
    17d4:	fa 01       	movw	r30, r20
    17d6:	9c 91       	ld	r25, X
    17d8:	92 30       	cpi	r25, 0x02	; 2
    17da:	08 f4       	brcc	.+2      	; 0x17de <_fpadd_parts+0x1a>
    17dc:	39 c1       	rjmp	.+626    	; 0x1a50 <_fpadd_parts+0x28c>
    17de:	eb 01       	movw	r28, r22
    17e0:	88 81       	ld	r24, Y
    17e2:	82 30       	cpi	r24, 0x02	; 2
    17e4:	08 f4       	brcc	.+2      	; 0x17e8 <_fpadd_parts+0x24>
    17e6:	33 c1       	rjmp	.+614    	; 0x1a4e <_fpadd_parts+0x28a>
    17e8:	94 30       	cpi	r25, 0x04	; 4
    17ea:	69 f4       	brne	.+26     	; 0x1806 <_fpadd_parts+0x42>
    17ec:	84 30       	cpi	r24, 0x04	; 4
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <_fpadd_parts+0x2e>
    17f0:	2f c1       	rjmp	.+606    	; 0x1a50 <_fpadd_parts+0x28c>
    17f2:	11 96       	adiw	r26, 0x01	; 1
    17f4:	9c 91       	ld	r25, X
    17f6:	11 97       	sbiw	r26, 0x01	; 1
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	98 17       	cp	r25, r24
    17fc:	09 f4       	brne	.+2      	; 0x1800 <_fpadd_parts+0x3c>
    17fe:	28 c1       	rjmp	.+592    	; 0x1a50 <_fpadd_parts+0x28c>
    1800:	a9 e7       	ldi	r26, 0x79	; 121
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	25 c1       	rjmp	.+586    	; 0x1a50 <_fpadd_parts+0x28c>
    1806:	84 30       	cpi	r24, 0x04	; 4
    1808:	09 f4       	brne	.+2      	; 0x180c <_fpadd_parts+0x48>
    180a:	21 c1       	rjmp	.+578    	; 0x1a4e <_fpadd_parts+0x28a>
    180c:	82 30       	cpi	r24, 0x02	; 2
    180e:	a9 f4       	brne	.+42     	; 0x183a <_fpadd_parts+0x76>
    1810:	92 30       	cpi	r25, 0x02	; 2
    1812:	09 f0       	breq	.+2      	; 0x1816 <_fpadd_parts+0x52>
    1814:	1d c1       	rjmp	.+570    	; 0x1a50 <_fpadd_parts+0x28c>
    1816:	9a 01       	movw	r18, r20
    1818:	ad 01       	movw	r20, r26
    181a:	88 e0       	ldi	r24, 0x08	; 8
    181c:	ea 01       	movw	r28, r20
    181e:	09 90       	ld	r0, Y+
    1820:	ae 01       	movw	r20, r28
    1822:	e9 01       	movw	r28, r18
    1824:	09 92       	st	Y+, r0
    1826:	9e 01       	movw	r18, r28
    1828:	81 50       	subi	r24, 0x01	; 1
    182a:	c1 f7       	brne	.-16     	; 0x181c <_fpadd_parts+0x58>
    182c:	e2 01       	movw	r28, r4
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	11 96       	adiw	r26, 0x01	; 1
    1832:	9c 91       	ld	r25, X
    1834:	89 23       	and	r24, r25
    1836:	81 83       	std	Z+1, r24	; 0x01
    1838:	08 c1       	rjmp	.+528    	; 0x1a4a <_fpadd_parts+0x286>
    183a:	92 30       	cpi	r25, 0x02	; 2
    183c:	09 f4       	brne	.+2      	; 0x1840 <_fpadd_parts+0x7c>
    183e:	07 c1       	rjmp	.+526    	; 0x1a4e <_fpadd_parts+0x28a>
    1840:	12 96       	adiw	r26, 0x02	; 2
    1842:	2d 90       	ld	r2, X+
    1844:	3c 90       	ld	r3, X
    1846:	13 97       	sbiw	r26, 0x03	; 3
    1848:	eb 01       	movw	r28, r22
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	9b 81       	ldd	r25, Y+3	; 0x03
    184e:	14 96       	adiw	r26, 0x04	; 4
    1850:	ad 90       	ld	r10, X+
    1852:	bd 90       	ld	r11, X+
    1854:	cd 90       	ld	r12, X+
    1856:	dc 90       	ld	r13, X
    1858:	17 97       	sbiw	r26, 0x07	; 7
    185a:	ec 80       	ldd	r14, Y+4	; 0x04
    185c:	fd 80       	ldd	r15, Y+5	; 0x05
    185e:	0e 81       	ldd	r16, Y+6	; 0x06
    1860:	1f 81       	ldd	r17, Y+7	; 0x07
    1862:	91 01       	movw	r18, r2
    1864:	28 1b       	sub	r18, r24
    1866:	39 0b       	sbc	r19, r25
    1868:	b9 01       	movw	r22, r18
    186a:	37 ff       	sbrs	r19, 7
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <_fpadd_parts+0xb2>
    186e:	66 27       	eor	r22, r22
    1870:	77 27       	eor	r23, r23
    1872:	62 1b       	sub	r22, r18
    1874:	73 0b       	sbc	r23, r19
    1876:	60 32       	cpi	r22, 0x20	; 32
    1878:	71 05       	cpc	r23, r1
    187a:	0c f0       	brlt	.+2      	; 0x187e <_fpadd_parts+0xba>
    187c:	61 c0       	rjmp	.+194    	; 0x1940 <_fpadd_parts+0x17c>
    187e:	12 16       	cp	r1, r18
    1880:	13 06       	cpc	r1, r19
    1882:	6c f5       	brge	.+90     	; 0x18de <_fpadd_parts+0x11a>
    1884:	37 01       	movw	r6, r14
    1886:	48 01       	movw	r8, r16
    1888:	06 2e       	mov	r0, r22
    188a:	04 c0       	rjmp	.+8      	; 0x1894 <_fpadd_parts+0xd0>
    188c:	96 94       	lsr	r9
    188e:	87 94       	ror	r8
    1890:	77 94       	ror	r7
    1892:	67 94       	ror	r6
    1894:	0a 94       	dec	r0
    1896:	d2 f7       	brpl	.-12     	; 0x188c <_fpadd_parts+0xc8>
    1898:	21 e0       	ldi	r18, 0x01	; 1
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e0       	ldi	r20, 0x00	; 0
    189e:	50 e0       	ldi	r21, 0x00	; 0
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <_fpadd_parts+0xe6>
    18a2:	22 0f       	add	r18, r18
    18a4:	33 1f       	adc	r19, r19
    18a6:	44 1f       	adc	r20, r20
    18a8:	55 1f       	adc	r21, r21
    18aa:	6a 95       	dec	r22
    18ac:	d2 f7       	brpl	.-12     	; 0x18a2 <_fpadd_parts+0xde>
    18ae:	21 50       	subi	r18, 0x01	; 1
    18b0:	30 40       	sbci	r19, 0x00	; 0
    18b2:	40 40       	sbci	r20, 0x00	; 0
    18b4:	50 40       	sbci	r21, 0x00	; 0
    18b6:	2e 21       	and	r18, r14
    18b8:	3f 21       	and	r19, r15
    18ba:	40 23       	and	r20, r16
    18bc:	51 23       	and	r21, r17
    18be:	21 15       	cp	r18, r1
    18c0:	31 05       	cpc	r19, r1
    18c2:	41 05       	cpc	r20, r1
    18c4:	51 05       	cpc	r21, r1
    18c6:	21 f0       	breq	.+8      	; 0x18d0 <_fpadd_parts+0x10c>
    18c8:	21 e0       	ldi	r18, 0x01	; 1
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e0       	ldi	r20, 0x00	; 0
    18ce:	50 e0       	ldi	r21, 0x00	; 0
    18d0:	79 01       	movw	r14, r18
    18d2:	8a 01       	movw	r16, r20
    18d4:	e6 28       	or	r14, r6
    18d6:	f7 28       	or	r15, r7
    18d8:	08 29       	or	r16, r8
    18da:	19 29       	or	r17, r9
    18dc:	3c c0       	rjmp	.+120    	; 0x1956 <_fpadd_parts+0x192>
    18de:	23 2b       	or	r18, r19
    18e0:	d1 f1       	breq	.+116    	; 0x1956 <_fpadd_parts+0x192>
    18e2:	26 0e       	add	r2, r22
    18e4:	37 1e       	adc	r3, r23
    18e6:	35 01       	movw	r6, r10
    18e8:	46 01       	movw	r8, r12
    18ea:	06 2e       	mov	r0, r22
    18ec:	04 c0       	rjmp	.+8      	; 0x18f6 <_fpadd_parts+0x132>
    18ee:	96 94       	lsr	r9
    18f0:	87 94       	ror	r8
    18f2:	77 94       	ror	r7
    18f4:	67 94       	ror	r6
    18f6:	0a 94       	dec	r0
    18f8:	d2 f7       	brpl	.-12     	; 0x18ee <_fpadd_parts+0x12a>
    18fa:	21 e0       	ldi	r18, 0x01	; 1
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	04 c0       	rjmp	.+8      	; 0x190c <_fpadd_parts+0x148>
    1904:	22 0f       	add	r18, r18
    1906:	33 1f       	adc	r19, r19
    1908:	44 1f       	adc	r20, r20
    190a:	55 1f       	adc	r21, r21
    190c:	6a 95       	dec	r22
    190e:	d2 f7       	brpl	.-12     	; 0x1904 <_fpadd_parts+0x140>
    1910:	21 50       	subi	r18, 0x01	; 1
    1912:	30 40       	sbci	r19, 0x00	; 0
    1914:	40 40       	sbci	r20, 0x00	; 0
    1916:	50 40       	sbci	r21, 0x00	; 0
    1918:	2a 21       	and	r18, r10
    191a:	3b 21       	and	r19, r11
    191c:	4c 21       	and	r20, r12
    191e:	5d 21       	and	r21, r13
    1920:	21 15       	cp	r18, r1
    1922:	31 05       	cpc	r19, r1
    1924:	41 05       	cpc	r20, r1
    1926:	51 05       	cpc	r21, r1
    1928:	21 f0       	breq	.+8      	; 0x1932 <_fpadd_parts+0x16e>
    192a:	21 e0       	ldi	r18, 0x01	; 1
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	59 01       	movw	r10, r18
    1934:	6a 01       	movw	r12, r20
    1936:	a6 28       	or	r10, r6
    1938:	b7 28       	or	r11, r7
    193a:	c8 28       	or	r12, r8
    193c:	d9 28       	or	r13, r9
    193e:	0b c0       	rjmp	.+22     	; 0x1956 <_fpadd_parts+0x192>
    1940:	82 15       	cp	r24, r2
    1942:	93 05       	cpc	r25, r3
    1944:	2c f0       	brlt	.+10     	; 0x1950 <_fpadd_parts+0x18c>
    1946:	1c 01       	movw	r2, r24
    1948:	aa 24       	eor	r10, r10
    194a:	bb 24       	eor	r11, r11
    194c:	65 01       	movw	r12, r10
    194e:	03 c0       	rjmp	.+6      	; 0x1956 <_fpadd_parts+0x192>
    1950:	ee 24       	eor	r14, r14
    1952:	ff 24       	eor	r15, r15
    1954:	87 01       	movw	r16, r14
    1956:	11 96       	adiw	r26, 0x01	; 1
    1958:	9c 91       	ld	r25, X
    195a:	d2 01       	movw	r26, r4
    195c:	11 96       	adiw	r26, 0x01	; 1
    195e:	8c 91       	ld	r24, X
    1960:	98 17       	cp	r25, r24
    1962:	09 f4       	brne	.+2      	; 0x1966 <_fpadd_parts+0x1a2>
    1964:	45 c0       	rjmp	.+138    	; 0x19f0 <_fpadd_parts+0x22c>
    1966:	99 23       	and	r25, r25
    1968:	39 f0       	breq	.+14     	; 0x1978 <_fpadd_parts+0x1b4>
    196a:	a8 01       	movw	r20, r16
    196c:	97 01       	movw	r18, r14
    196e:	2a 19       	sub	r18, r10
    1970:	3b 09       	sbc	r19, r11
    1972:	4c 09       	sbc	r20, r12
    1974:	5d 09       	sbc	r21, r13
    1976:	06 c0       	rjmp	.+12     	; 0x1984 <_fpadd_parts+0x1c0>
    1978:	a6 01       	movw	r20, r12
    197a:	95 01       	movw	r18, r10
    197c:	2e 19       	sub	r18, r14
    197e:	3f 09       	sbc	r19, r15
    1980:	40 0b       	sbc	r20, r16
    1982:	51 0b       	sbc	r21, r17
    1984:	57 fd       	sbrc	r21, 7
    1986:	08 c0       	rjmp	.+16     	; 0x1998 <_fpadd_parts+0x1d4>
    1988:	11 82       	std	Z+1, r1	; 0x01
    198a:	33 82       	std	Z+3, r3	; 0x03
    198c:	22 82       	std	Z+2, r2	; 0x02
    198e:	24 83       	std	Z+4, r18	; 0x04
    1990:	35 83       	std	Z+5, r19	; 0x05
    1992:	46 83       	std	Z+6, r20	; 0x06
    1994:	57 83       	std	Z+7, r21	; 0x07
    1996:	1d c0       	rjmp	.+58     	; 0x19d2 <_fpadd_parts+0x20e>
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	81 83       	std	Z+1, r24	; 0x01
    199c:	33 82       	std	Z+3, r3	; 0x03
    199e:	22 82       	std	Z+2, r2	; 0x02
    19a0:	88 27       	eor	r24, r24
    19a2:	99 27       	eor	r25, r25
    19a4:	dc 01       	movw	r26, r24
    19a6:	82 1b       	sub	r24, r18
    19a8:	93 0b       	sbc	r25, r19
    19aa:	a4 0b       	sbc	r26, r20
    19ac:	b5 0b       	sbc	r27, r21
    19ae:	84 83       	std	Z+4, r24	; 0x04
    19b0:	95 83       	std	Z+5, r25	; 0x05
    19b2:	a6 83       	std	Z+6, r26	; 0x06
    19b4:	b7 83       	std	Z+7, r27	; 0x07
    19b6:	0d c0       	rjmp	.+26     	; 0x19d2 <_fpadd_parts+0x20e>
    19b8:	22 0f       	add	r18, r18
    19ba:	33 1f       	adc	r19, r19
    19bc:	44 1f       	adc	r20, r20
    19be:	55 1f       	adc	r21, r21
    19c0:	24 83       	std	Z+4, r18	; 0x04
    19c2:	35 83       	std	Z+5, r19	; 0x05
    19c4:	46 83       	std	Z+6, r20	; 0x06
    19c6:	57 83       	std	Z+7, r21	; 0x07
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	93 83       	std	Z+3, r25	; 0x03
    19d0:	82 83       	std	Z+2, r24	; 0x02
    19d2:	24 81       	ldd	r18, Z+4	; 0x04
    19d4:	35 81       	ldd	r19, Z+5	; 0x05
    19d6:	46 81       	ldd	r20, Z+6	; 0x06
    19d8:	57 81       	ldd	r21, Z+7	; 0x07
    19da:	da 01       	movw	r26, r20
    19dc:	c9 01       	movw	r24, r18
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	a1 09       	sbc	r26, r1
    19e2:	b1 09       	sbc	r27, r1
    19e4:	8f 5f       	subi	r24, 0xFF	; 255
    19e6:	9f 4f       	sbci	r25, 0xFF	; 255
    19e8:	af 4f       	sbci	r26, 0xFF	; 255
    19ea:	bf 43       	sbci	r27, 0x3F	; 63
    19ec:	28 f3       	brcs	.-54     	; 0x19b8 <_fpadd_parts+0x1f4>
    19ee:	0b c0       	rjmp	.+22     	; 0x1a06 <_fpadd_parts+0x242>
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	33 82       	std	Z+3, r3	; 0x03
    19f4:	22 82       	std	Z+2, r2	; 0x02
    19f6:	ea 0c       	add	r14, r10
    19f8:	fb 1c       	adc	r15, r11
    19fa:	0c 1d       	adc	r16, r12
    19fc:	1d 1d       	adc	r17, r13
    19fe:	e4 82       	std	Z+4, r14	; 0x04
    1a00:	f5 82       	std	Z+5, r15	; 0x05
    1a02:	06 83       	std	Z+6, r16	; 0x06
    1a04:	17 83       	std	Z+7, r17	; 0x07
    1a06:	83 e0       	ldi	r24, 0x03	; 3
    1a08:	80 83       	st	Z, r24
    1a0a:	24 81       	ldd	r18, Z+4	; 0x04
    1a0c:	35 81       	ldd	r19, Z+5	; 0x05
    1a0e:	46 81       	ldd	r20, Z+6	; 0x06
    1a10:	57 81       	ldd	r21, Z+7	; 0x07
    1a12:	57 ff       	sbrs	r21, 7
    1a14:	1a c0       	rjmp	.+52     	; 0x1a4a <_fpadd_parts+0x286>
    1a16:	c9 01       	movw	r24, r18
    1a18:	aa 27       	eor	r26, r26
    1a1a:	97 fd       	sbrc	r25, 7
    1a1c:	a0 95       	com	r26
    1a1e:	ba 2f       	mov	r27, r26
    1a20:	81 70       	andi	r24, 0x01	; 1
    1a22:	90 70       	andi	r25, 0x00	; 0
    1a24:	a0 70       	andi	r26, 0x00	; 0
    1a26:	b0 70       	andi	r27, 0x00	; 0
    1a28:	56 95       	lsr	r21
    1a2a:	47 95       	ror	r20
    1a2c:	37 95       	ror	r19
    1a2e:	27 95       	ror	r18
    1a30:	82 2b       	or	r24, r18
    1a32:	93 2b       	or	r25, r19
    1a34:	a4 2b       	or	r26, r20
    1a36:	b5 2b       	or	r27, r21
    1a38:	84 83       	std	Z+4, r24	; 0x04
    1a3a:	95 83       	std	Z+5, r25	; 0x05
    1a3c:	a6 83       	std	Z+6, r26	; 0x06
    1a3e:	b7 83       	std	Z+7, r27	; 0x07
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	01 96       	adiw	r24, 0x01	; 1
    1a46:	93 83       	std	Z+3, r25	; 0x03
    1a48:	82 83       	std	Z+2, r24	; 0x02
    1a4a:	df 01       	movw	r26, r30
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <_fpadd_parts+0x28c>
    1a4e:	d2 01       	movw	r26, r4
    1a50:	cd 01       	movw	r24, r26
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	e2 e1       	ldi	r30, 0x12	; 18
    1a58:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__>

00001a5c <__subsf3>:
    1a5c:	a0 e2       	ldi	r26, 0x20	; 32
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e4 e3       	ldi	r30, 0x34	; 52
    1a62:	fd e0       	ldi	r31, 0x0D	; 13
    1a64:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__prologue_saves__+0x18>
    1a68:	69 83       	std	Y+1, r22	; 0x01
    1a6a:	7a 83       	std	Y+2, r23	; 0x02
    1a6c:	8b 83       	std	Y+3, r24	; 0x03
    1a6e:	9c 83       	std	Y+4, r25	; 0x04
    1a70:	2d 83       	std	Y+5, r18	; 0x05
    1a72:	3e 83       	std	Y+6, r19	; 0x06
    1a74:	4f 83       	std	Y+7, r20	; 0x07
    1a76:	58 87       	std	Y+8, r21	; 0x08
    1a78:	e9 e0       	ldi	r30, 0x09	; 9
    1a7a:	ee 2e       	mov	r14, r30
    1a7c:	f1 2c       	mov	r15, r1
    1a7e:	ec 0e       	add	r14, r28
    1a80:	fd 1e       	adc	r15, r29
    1a82:	ce 01       	movw	r24, r28
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	b7 01       	movw	r22, r14
    1a88:	0e 94 3f 10 	call	0x207e	; 0x207e <__unpack_f>
    1a8c:	8e 01       	movw	r16, r28
    1a8e:	0f 5e       	subi	r16, 0xEF	; 239
    1a90:	1f 4f       	sbci	r17, 0xFF	; 255
    1a92:	ce 01       	movw	r24, r28
    1a94:	05 96       	adiw	r24, 0x05	; 5
    1a96:	b8 01       	movw	r22, r16
    1a98:	0e 94 3f 10 	call	0x207e	; 0x207e <__unpack_f>
    1a9c:	8a 89       	ldd	r24, Y+18	; 0x12
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
    1aa0:	89 27       	eor	r24, r25
    1aa2:	8a 8b       	std	Y+18, r24	; 0x12
    1aa4:	c7 01       	movw	r24, r14
    1aa6:	b8 01       	movw	r22, r16
    1aa8:	ae 01       	movw	r20, r28
    1aaa:	47 5e       	subi	r20, 0xE7	; 231
    1aac:	5f 4f       	sbci	r21, 0xFF	; 255
    1aae:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <_fpadd_parts>
    1ab2:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__pack_f>
    1ab6:	a0 96       	adiw	r28, 0x20	; 32
    1ab8:	e6 e0       	ldi	r30, 0x06	; 6
    1aba:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__epilogue_restores__+0x18>

00001abe <__addsf3>:
    1abe:	a0 e2       	ldi	r26, 0x20	; 32
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e5 e6       	ldi	r30, 0x65	; 101
    1ac4:	fd e0       	ldi	r31, 0x0D	; 13
    1ac6:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__prologue_saves__+0x18>
    1aca:	69 83       	std	Y+1, r22	; 0x01
    1acc:	7a 83       	std	Y+2, r23	; 0x02
    1ace:	8b 83       	std	Y+3, r24	; 0x03
    1ad0:	9c 83       	std	Y+4, r25	; 0x04
    1ad2:	2d 83       	std	Y+5, r18	; 0x05
    1ad4:	3e 83       	std	Y+6, r19	; 0x06
    1ad6:	4f 83       	std	Y+7, r20	; 0x07
    1ad8:	58 87       	std	Y+8, r21	; 0x08
    1ada:	f9 e0       	ldi	r31, 0x09	; 9
    1adc:	ef 2e       	mov	r14, r31
    1ade:	f1 2c       	mov	r15, r1
    1ae0:	ec 0e       	add	r14, r28
    1ae2:	fd 1e       	adc	r15, r29
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	01 96       	adiw	r24, 0x01	; 1
    1ae8:	b7 01       	movw	r22, r14
    1aea:	0e 94 3f 10 	call	0x207e	; 0x207e <__unpack_f>
    1aee:	8e 01       	movw	r16, r28
    1af0:	0f 5e       	subi	r16, 0xEF	; 239
    1af2:	1f 4f       	sbci	r17, 0xFF	; 255
    1af4:	ce 01       	movw	r24, r28
    1af6:	05 96       	adiw	r24, 0x05	; 5
    1af8:	b8 01       	movw	r22, r16
    1afa:	0e 94 3f 10 	call	0x207e	; 0x207e <__unpack_f>
    1afe:	c7 01       	movw	r24, r14
    1b00:	b8 01       	movw	r22, r16
    1b02:	ae 01       	movw	r20, r28
    1b04:	47 5e       	subi	r20, 0xE7	; 231
    1b06:	5f 4f       	sbci	r21, 0xFF	; 255
    1b08:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <_fpadd_parts>
    1b0c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__pack_f>
    1b10:	a0 96       	adiw	r28, 0x20	; 32
    1b12:	e6 e0       	ldi	r30, 0x06	; 6
    1b14:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__epilogue_restores__+0x18>

00001b18 <__mulsf3>:
    1b18:	a0 e2       	ldi	r26, 0x20	; 32
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e2 e9       	ldi	r30, 0x92	; 146
    1b1e:	fd e0       	ldi	r31, 0x0D	; 13
    1b20:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__>
    1b24:	69 83       	std	Y+1, r22	; 0x01
    1b26:	7a 83       	std	Y+2, r23	; 0x02
    1b28:	8b 83       	std	Y+3, r24	; 0x03
    1b2a:	9c 83       	std	Y+4, r25	; 0x04
    1b2c:	2d 83       	std	Y+5, r18	; 0x05
    1b2e:	3e 83       	std	Y+6, r19	; 0x06
    1b30:	4f 83       	std	Y+7, r20	; 0x07
    1b32:	58 87       	std	Y+8, r21	; 0x08
    1b34:	ce 01       	movw	r24, r28
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	be 01       	movw	r22, r28
    1b3a:	67 5f       	subi	r22, 0xF7	; 247
    1b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3e:	0e 94 3f 10 	call	0x207e	; 0x207e <__unpack_f>
    1b42:	ce 01       	movw	r24, r28
    1b44:	05 96       	adiw	r24, 0x05	; 5
    1b46:	be 01       	movw	r22, r28
    1b48:	6f 5e       	subi	r22, 0xEF	; 239
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	0e 94 3f 10 	call	0x207e	; 0x207e <__unpack_f>
    1b50:	99 85       	ldd	r25, Y+9	; 0x09
    1b52:	92 30       	cpi	r25, 0x02	; 2
    1b54:	88 f0       	brcs	.+34     	; 0x1b78 <__mulsf3+0x60>
    1b56:	89 89       	ldd	r24, Y+17	; 0x11
    1b58:	82 30       	cpi	r24, 0x02	; 2
    1b5a:	c8 f0       	brcs	.+50     	; 0x1b8e <__mulsf3+0x76>
    1b5c:	94 30       	cpi	r25, 0x04	; 4
    1b5e:	19 f4       	brne	.+6      	; 0x1b66 <__mulsf3+0x4e>
    1b60:	82 30       	cpi	r24, 0x02	; 2
    1b62:	51 f4       	brne	.+20     	; 0x1b78 <__mulsf3+0x60>
    1b64:	04 c0       	rjmp	.+8      	; 0x1b6e <__mulsf3+0x56>
    1b66:	84 30       	cpi	r24, 0x04	; 4
    1b68:	29 f4       	brne	.+10     	; 0x1b74 <__mulsf3+0x5c>
    1b6a:	92 30       	cpi	r25, 0x02	; 2
    1b6c:	81 f4       	brne	.+32     	; 0x1b8e <__mulsf3+0x76>
    1b6e:	89 e7       	ldi	r24, 0x79	; 121
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	c6 c0       	rjmp	.+396    	; 0x1d00 <__mulsf3+0x1e8>
    1b74:	92 30       	cpi	r25, 0x02	; 2
    1b76:	49 f4       	brne	.+18     	; 0x1b8a <__mulsf3+0x72>
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b7e:	98 13       	cpse	r25, r24
    1b80:	21 e0       	ldi	r18, 0x01	; 1
    1b82:	2a 87       	std	Y+10, r18	; 0x0a
    1b84:	ce 01       	movw	r24, r28
    1b86:	09 96       	adiw	r24, 0x09	; 9
    1b88:	bb c0       	rjmp	.+374    	; 0x1d00 <__mulsf3+0x1e8>
    1b8a:	82 30       	cpi	r24, 0x02	; 2
    1b8c:	49 f4       	brne	.+18     	; 0x1ba0 <__mulsf3+0x88>
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b92:	8a 89       	ldd	r24, Y+18	; 0x12
    1b94:	98 13       	cpse	r25, r24
    1b96:	21 e0       	ldi	r18, 0x01	; 1
    1b98:	2a 8b       	std	Y+18, r18	; 0x12
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	41 96       	adiw	r24, 0x11	; 17
    1b9e:	b0 c0       	rjmp	.+352    	; 0x1d00 <__mulsf3+0x1e8>
    1ba0:	2d 84       	ldd	r2, Y+13	; 0x0d
    1ba2:	3e 84       	ldd	r3, Y+14	; 0x0e
    1ba4:	4f 84       	ldd	r4, Y+15	; 0x0f
    1ba6:	58 88       	ldd	r5, Y+16	; 0x10
    1ba8:	6d 88       	ldd	r6, Y+21	; 0x15
    1baa:	7e 88       	ldd	r7, Y+22	; 0x16
    1bac:	8f 88       	ldd	r8, Y+23	; 0x17
    1bae:	98 8c       	ldd	r9, Y+24	; 0x18
    1bb0:	ee 24       	eor	r14, r14
    1bb2:	ff 24       	eor	r15, r15
    1bb4:	87 01       	movw	r16, r14
    1bb6:	aa 24       	eor	r10, r10
    1bb8:	bb 24       	eor	r11, r11
    1bba:	65 01       	movw	r12, r10
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	e0 e0       	ldi	r30, 0x00	; 0
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	c1 01       	movw	r24, r2
    1bca:	81 70       	andi	r24, 0x01	; 1
    1bcc:	90 70       	andi	r25, 0x00	; 0
    1bce:	89 2b       	or	r24, r25
    1bd0:	e9 f0       	breq	.+58     	; 0x1c0c <__mulsf3+0xf4>
    1bd2:	e6 0c       	add	r14, r6
    1bd4:	f7 1c       	adc	r15, r7
    1bd6:	08 1d       	adc	r16, r8
    1bd8:	19 1d       	adc	r17, r9
    1bda:	9a 01       	movw	r18, r20
    1bdc:	ab 01       	movw	r20, r22
    1bde:	2a 0d       	add	r18, r10
    1be0:	3b 1d       	adc	r19, r11
    1be2:	4c 1d       	adc	r20, r12
    1be4:	5d 1d       	adc	r21, r13
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a0 e0       	ldi	r26, 0x00	; 0
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e6 14       	cp	r14, r6
    1bf0:	f7 04       	cpc	r15, r7
    1bf2:	08 05       	cpc	r16, r8
    1bf4:	19 05       	cpc	r17, r9
    1bf6:	20 f4       	brcc	.+8      	; 0x1c00 <__mulsf3+0xe8>
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a0 e0       	ldi	r26, 0x00	; 0
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	ba 01       	movw	r22, r20
    1c02:	a9 01       	movw	r20, r18
    1c04:	48 0f       	add	r20, r24
    1c06:	59 1f       	adc	r21, r25
    1c08:	6a 1f       	adc	r22, r26
    1c0a:	7b 1f       	adc	r23, r27
    1c0c:	aa 0c       	add	r10, r10
    1c0e:	bb 1c       	adc	r11, r11
    1c10:	cc 1c       	adc	r12, r12
    1c12:	dd 1c       	adc	r13, r13
    1c14:	97 fe       	sbrs	r9, 7
    1c16:	08 c0       	rjmp	.+16     	; 0x1c28 <__mulsf3+0x110>
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a0 e0       	ldi	r26, 0x00	; 0
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	a8 2a       	or	r10, r24
    1c22:	b9 2a       	or	r11, r25
    1c24:	ca 2a       	or	r12, r26
    1c26:	db 2a       	or	r13, r27
    1c28:	31 96       	adiw	r30, 0x01	; 1
    1c2a:	e0 32       	cpi	r30, 0x20	; 32
    1c2c:	f1 05       	cpc	r31, r1
    1c2e:	49 f0       	breq	.+18     	; 0x1c42 <__mulsf3+0x12a>
    1c30:	66 0c       	add	r6, r6
    1c32:	77 1c       	adc	r7, r7
    1c34:	88 1c       	adc	r8, r8
    1c36:	99 1c       	adc	r9, r9
    1c38:	56 94       	lsr	r5
    1c3a:	47 94       	ror	r4
    1c3c:	37 94       	ror	r3
    1c3e:	27 94       	ror	r2
    1c40:	c3 cf       	rjmp	.-122    	; 0x1bc8 <__mulsf3+0xb0>
    1c42:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c44:	ea 89       	ldd	r30, Y+18	; 0x12
    1c46:	2b 89       	ldd	r18, Y+19	; 0x13
    1c48:	3c 89       	ldd	r19, Y+20	; 0x14
    1c4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c4e:	28 0f       	add	r18, r24
    1c50:	39 1f       	adc	r19, r25
    1c52:	2e 5f       	subi	r18, 0xFE	; 254
    1c54:	3f 4f       	sbci	r19, 0xFF	; 255
    1c56:	17 c0       	rjmp	.+46     	; 0x1c86 <__mulsf3+0x16e>
    1c58:	ca 01       	movw	r24, r20
    1c5a:	81 70       	andi	r24, 0x01	; 1
    1c5c:	90 70       	andi	r25, 0x00	; 0
    1c5e:	89 2b       	or	r24, r25
    1c60:	61 f0       	breq	.+24     	; 0x1c7a <__mulsf3+0x162>
    1c62:	16 95       	lsr	r17
    1c64:	07 95       	ror	r16
    1c66:	f7 94       	ror	r15
    1c68:	e7 94       	ror	r14
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a0 e0       	ldi	r26, 0x00	; 0
    1c70:	b0 e8       	ldi	r27, 0x80	; 128
    1c72:	e8 2a       	or	r14, r24
    1c74:	f9 2a       	or	r15, r25
    1c76:	0a 2b       	or	r16, r26
    1c78:	1b 2b       	or	r17, r27
    1c7a:	76 95       	lsr	r23
    1c7c:	67 95       	ror	r22
    1c7e:	57 95       	ror	r21
    1c80:	47 95       	ror	r20
    1c82:	2f 5f       	subi	r18, 0xFF	; 255
    1c84:	3f 4f       	sbci	r19, 0xFF	; 255
    1c86:	77 fd       	sbrc	r23, 7
    1c88:	e7 cf       	rjmp	.-50     	; 0x1c58 <__mulsf3+0x140>
    1c8a:	0c c0       	rjmp	.+24     	; 0x1ca4 <__mulsf3+0x18c>
    1c8c:	44 0f       	add	r20, r20
    1c8e:	55 1f       	adc	r21, r21
    1c90:	66 1f       	adc	r22, r22
    1c92:	77 1f       	adc	r23, r23
    1c94:	17 fd       	sbrc	r17, 7
    1c96:	41 60       	ori	r20, 0x01	; 1
    1c98:	ee 0c       	add	r14, r14
    1c9a:	ff 1c       	adc	r15, r15
    1c9c:	00 1f       	adc	r16, r16
    1c9e:	11 1f       	adc	r17, r17
    1ca0:	21 50       	subi	r18, 0x01	; 1
    1ca2:	30 40       	sbci	r19, 0x00	; 0
    1ca4:	40 30       	cpi	r20, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	59 07       	cpc	r21, r25
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	69 07       	cpc	r22, r25
    1cae:	90 e4       	ldi	r25, 0x40	; 64
    1cb0:	79 07       	cpc	r23, r25
    1cb2:	60 f3       	brcs	.-40     	; 0x1c8c <__mulsf3+0x174>
    1cb4:	2b 8f       	std	Y+27, r18	; 0x1b
    1cb6:	3c 8f       	std	Y+28, r19	; 0x1c
    1cb8:	db 01       	movw	r26, r22
    1cba:	ca 01       	movw	r24, r20
    1cbc:	8f 77       	andi	r24, 0x7F	; 127
    1cbe:	90 70       	andi	r25, 0x00	; 0
    1cc0:	a0 70       	andi	r26, 0x00	; 0
    1cc2:	b0 70       	andi	r27, 0x00	; 0
    1cc4:	80 34       	cpi	r24, 0x40	; 64
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	a1 05       	cpc	r26, r1
    1cca:	b1 05       	cpc	r27, r1
    1ccc:	61 f4       	brne	.+24     	; 0x1ce6 <__mulsf3+0x1ce>
    1cce:	47 fd       	sbrc	r20, 7
    1cd0:	0a c0       	rjmp	.+20     	; 0x1ce6 <__mulsf3+0x1ce>
    1cd2:	e1 14       	cp	r14, r1
    1cd4:	f1 04       	cpc	r15, r1
    1cd6:	01 05       	cpc	r16, r1
    1cd8:	11 05       	cpc	r17, r1
    1cda:	29 f0       	breq	.+10     	; 0x1ce6 <__mulsf3+0x1ce>
    1cdc:	40 5c       	subi	r20, 0xC0	; 192
    1cde:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce0:	6f 4f       	sbci	r22, 0xFF	; 255
    1ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce4:	40 78       	andi	r20, 0x80	; 128
    1ce6:	1a 8e       	std	Y+26, r1	; 0x1a
    1ce8:	fe 17       	cp	r31, r30
    1cea:	11 f0       	breq	.+4      	; 0x1cf0 <__mulsf3+0x1d8>
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	8a 8f       	std	Y+26, r24	; 0x1a
    1cf0:	4d 8f       	std	Y+29, r20	; 0x1d
    1cf2:	5e 8f       	std	Y+30, r21	; 0x1e
    1cf4:	6f 8f       	std	Y+31, r22	; 0x1f
    1cf6:	78 a3       	std	Y+32, r23	; 0x20
    1cf8:	83 e0       	ldi	r24, 0x03	; 3
    1cfa:	89 8f       	std	Y+25, r24	; 0x19
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	49 96       	adiw	r24, 0x19	; 25
    1d00:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__pack_f>
    1d04:	a0 96       	adiw	r28, 0x20	; 32
    1d06:	e2 e1       	ldi	r30, 0x12	; 18
    1d08:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__>

00001d0c <__gtsf2>:
    1d0c:	a8 e1       	ldi	r26, 0x18	; 24
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	ec e8       	ldi	r30, 0x8C	; 140
    1d12:	fe e0       	ldi	r31, 0x0E	; 14
    1d14:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__prologue_saves__+0x18>
    1d18:	69 83       	std	Y+1, r22	; 0x01
    1d1a:	7a 83       	std	Y+2, r23	; 0x02
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
    1d1e:	9c 83       	std	Y+4, r25	; 0x04
    1d20:	2d 83       	std	Y+5, r18	; 0x05
    1d22:	3e 83       	std	Y+6, r19	; 0x06
    1d24:	4f 83       	std	Y+7, r20	; 0x07
    1d26:	58 87       	std	Y+8, r21	; 0x08
    1d28:	89 e0       	ldi	r24, 0x09	; 9
    1d2a:	e8 2e       	mov	r14, r24
    1d2c:	f1 2c       	mov	r15, r1
    1d2e:	ec 0e       	add	r14, r28
    1d30:	fd 1e       	adc	r15, r29
    1d32:	ce 01       	movw	r24, r28
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	b7 01       	movw	r22, r14
    1d38:	0e 94 3f 10 	call	0x207e	; 0x207e <__unpack_f>
    1d3c:	8e 01       	movw	r16, r28
    1d3e:	0f 5e       	subi	r16, 0xEF	; 239
    1d40:	1f 4f       	sbci	r17, 0xFF	; 255
    1d42:	ce 01       	movw	r24, r28
    1d44:	05 96       	adiw	r24, 0x05	; 5
    1d46:	b8 01       	movw	r22, r16
    1d48:	0e 94 3f 10 	call	0x207e	; 0x207e <__unpack_f>
    1d4c:	89 85       	ldd	r24, Y+9	; 0x09
    1d4e:	82 30       	cpi	r24, 0x02	; 2
    1d50:	40 f0       	brcs	.+16     	; 0x1d62 <__gtsf2+0x56>
    1d52:	89 89       	ldd	r24, Y+17	; 0x11
    1d54:	82 30       	cpi	r24, 0x02	; 2
    1d56:	28 f0       	brcs	.+10     	; 0x1d62 <__gtsf2+0x56>
    1d58:	c7 01       	movw	r24, r14
    1d5a:	b8 01       	movw	r22, r16
    1d5c:	0e 94 b7 10 	call	0x216e	; 0x216e <__fpcmp_parts_f>
    1d60:	01 c0       	rjmp	.+2      	; 0x1d64 <__gtsf2+0x58>
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	68 96       	adiw	r28, 0x18	; 24
    1d66:	e6 e0       	ldi	r30, 0x06	; 6
    1d68:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__epilogue_restores__+0x18>

00001d6c <__gesf2>:
    1d6c:	a8 e1       	ldi	r26, 0x18	; 24
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	ec eb       	ldi	r30, 0xBC	; 188
    1d72:	fe e0       	ldi	r31, 0x0E	; 14
    1d74:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__prologue_saves__+0x18>
    1d78:	69 83       	std	Y+1, r22	; 0x01
    1d7a:	7a 83       	std	Y+2, r23	; 0x02
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
    1d7e:	9c 83       	std	Y+4, r25	; 0x04
    1d80:	2d 83       	std	Y+5, r18	; 0x05
    1d82:	3e 83       	std	Y+6, r19	; 0x06
    1d84:	4f 83       	std	Y+7, r20	; 0x07
    1d86:	58 87       	std	Y+8, r21	; 0x08
    1d88:	89 e0       	ldi	r24, 0x09	; 9
    1d8a:	e8 2e       	mov	r14, r24
    1d8c:	f1 2c       	mov	r15, r1
    1d8e:	ec 0e       	add	r14, r28
    1d90:	fd 1e       	adc	r15, r29
    1d92:	ce 01       	movw	r24, r28
    1d94:	01 96       	adiw	r24, 0x01	; 1
    1d96:	b7 01       	movw	r22, r14
    1d98:	0e 94 3f 10 	call	0x207e	; 0x207e <__unpack_f>
    1d9c:	8e 01       	movw	r16, r28
    1d9e:	0f 5e       	subi	r16, 0xEF	; 239
    1da0:	1f 4f       	sbci	r17, 0xFF	; 255
    1da2:	ce 01       	movw	r24, r28
    1da4:	05 96       	adiw	r24, 0x05	; 5
    1da6:	b8 01       	movw	r22, r16
    1da8:	0e 94 3f 10 	call	0x207e	; 0x207e <__unpack_f>
    1dac:	89 85       	ldd	r24, Y+9	; 0x09
    1dae:	82 30       	cpi	r24, 0x02	; 2
    1db0:	40 f0       	brcs	.+16     	; 0x1dc2 <__gesf2+0x56>
    1db2:	89 89       	ldd	r24, Y+17	; 0x11
    1db4:	82 30       	cpi	r24, 0x02	; 2
    1db6:	28 f0       	brcs	.+10     	; 0x1dc2 <__gesf2+0x56>
    1db8:	c7 01       	movw	r24, r14
    1dba:	b8 01       	movw	r22, r16
    1dbc:	0e 94 b7 10 	call	0x216e	; 0x216e <__fpcmp_parts_f>
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <__gesf2+0x58>
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	68 96       	adiw	r28, 0x18	; 24
    1dc6:	e6 e0       	ldi	r30, 0x06	; 6
    1dc8:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__epilogue_restores__+0x18>

00001dcc <__ltsf2>:
    1dcc:	a8 e1       	ldi	r26, 0x18	; 24
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	ec ee       	ldi	r30, 0xEC	; 236
    1dd2:	fe e0       	ldi	r31, 0x0E	; 14
    1dd4:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__prologue_saves__+0x18>
    1dd8:	69 83       	std	Y+1, r22	; 0x01
    1dda:	7a 83       	std	Y+2, r23	; 0x02
    1ddc:	8b 83       	std	Y+3, r24	; 0x03
    1dde:	9c 83       	std	Y+4, r25	; 0x04
    1de0:	2d 83       	std	Y+5, r18	; 0x05
    1de2:	3e 83       	std	Y+6, r19	; 0x06
    1de4:	4f 83       	std	Y+7, r20	; 0x07
    1de6:	58 87       	std	Y+8, r21	; 0x08
    1de8:	89 e0       	ldi	r24, 0x09	; 9
    1dea:	e8 2e       	mov	r14, r24
    1dec:	f1 2c       	mov	r15, r1
    1dee:	ec 0e       	add	r14, r28
    1df0:	fd 1e       	adc	r15, r29
    1df2:	ce 01       	movw	r24, r28
    1df4:	01 96       	adiw	r24, 0x01	; 1
    1df6:	b7 01       	movw	r22, r14
    1df8:	0e 94 3f 10 	call	0x207e	; 0x207e <__unpack_f>
    1dfc:	8e 01       	movw	r16, r28
    1dfe:	0f 5e       	subi	r16, 0xEF	; 239
    1e00:	1f 4f       	sbci	r17, 0xFF	; 255
    1e02:	ce 01       	movw	r24, r28
    1e04:	05 96       	adiw	r24, 0x05	; 5
    1e06:	b8 01       	movw	r22, r16
    1e08:	0e 94 3f 10 	call	0x207e	; 0x207e <__unpack_f>
    1e0c:	89 85       	ldd	r24, Y+9	; 0x09
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	40 f0       	brcs	.+16     	; 0x1e22 <__ltsf2+0x56>
    1e12:	89 89       	ldd	r24, Y+17	; 0x11
    1e14:	82 30       	cpi	r24, 0x02	; 2
    1e16:	28 f0       	brcs	.+10     	; 0x1e22 <__ltsf2+0x56>
    1e18:	c7 01       	movw	r24, r14
    1e1a:	b8 01       	movw	r22, r16
    1e1c:	0e 94 b7 10 	call	0x216e	; 0x216e <__fpcmp_parts_f>
    1e20:	01 c0       	rjmp	.+2      	; 0x1e24 <__ltsf2+0x58>
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	68 96       	adiw	r28, 0x18	; 24
    1e26:	e6 e0       	ldi	r30, 0x06	; 6
    1e28:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__epilogue_restores__+0x18>

00001e2c <__fixsfsi>:
    1e2c:	ac e0       	ldi	r26, 0x0C	; 12
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	ec e1       	ldi	r30, 0x1C	; 28
    1e32:	ff e0       	ldi	r31, 0x0F	; 15
    1e34:	0c 94 47 11 	jmp	0x228e	; 0x228e <__prologue_saves__+0x20>
    1e38:	69 83       	std	Y+1, r22	; 0x01
    1e3a:	7a 83       	std	Y+2, r23	; 0x02
    1e3c:	8b 83       	std	Y+3, r24	; 0x03
    1e3e:	9c 83       	std	Y+4, r25	; 0x04
    1e40:	ce 01       	movw	r24, r28
    1e42:	01 96       	adiw	r24, 0x01	; 1
    1e44:	be 01       	movw	r22, r28
    1e46:	6b 5f       	subi	r22, 0xFB	; 251
    1e48:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4a:	0e 94 3f 10 	call	0x207e	; 0x207e <__unpack_f>
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	82 30       	cpi	r24, 0x02	; 2
    1e52:	61 f1       	breq	.+88     	; 0x1eac <__fixsfsi+0x80>
    1e54:	82 30       	cpi	r24, 0x02	; 2
    1e56:	50 f1       	brcs	.+84     	; 0x1eac <__fixsfsi+0x80>
    1e58:	84 30       	cpi	r24, 0x04	; 4
    1e5a:	21 f4       	brne	.+8      	; 0x1e64 <__fixsfsi+0x38>
    1e5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5e:	88 23       	and	r24, r24
    1e60:	51 f1       	breq	.+84     	; 0x1eb6 <__fixsfsi+0x8a>
    1e62:	2e c0       	rjmp	.+92     	; 0x1ec0 <__fixsfsi+0x94>
    1e64:	2f 81       	ldd	r18, Y+7	; 0x07
    1e66:	38 85       	ldd	r19, Y+8	; 0x08
    1e68:	37 fd       	sbrc	r19, 7
    1e6a:	20 c0       	rjmp	.+64     	; 0x1eac <__fixsfsi+0x80>
    1e6c:	6e 81       	ldd	r22, Y+6	; 0x06
    1e6e:	2f 31       	cpi	r18, 0x1F	; 31
    1e70:	31 05       	cpc	r19, r1
    1e72:	1c f0       	brlt	.+6      	; 0x1e7a <__fixsfsi+0x4e>
    1e74:	66 23       	and	r22, r22
    1e76:	f9 f0       	breq	.+62     	; 0x1eb6 <__fixsfsi+0x8a>
    1e78:	23 c0       	rjmp	.+70     	; 0x1ec0 <__fixsfsi+0x94>
    1e7a:	8e e1       	ldi	r24, 0x1E	; 30
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	82 1b       	sub	r24, r18
    1e80:	93 0b       	sbc	r25, r19
    1e82:	29 85       	ldd	r18, Y+9	; 0x09
    1e84:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e86:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e88:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e8a:	04 c0       	rjmp	.+8      	; 0x1e94 <__fixsfsi+0x68>
    1e8c:	56 95       	lsr	r21
    1e8e:	47 95       	ror	r20
    1e90:	37 95       	ror	r19
    1e92:	27 95       	ror	r18
    1e94:	8a 95       	dec	r24
    1e96:	d2 f7       	brpl	.-12     	; 0x1e8c <__fixsfsi+0x60>
    1e98:	66 23       	and	r22, r22
    1e9a:	b1 f0       	breq	.+44     	; 0x1ec8 <__fixsfsi+0x9c>
    1e9c:	50 95       	com	r21
    1e9e:	40 95       	com	r20
    1ea0:	30 95       	com	r19
    1ea2:	21 95       	neg	r18
    1ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea6:	4f 4f       	sbci	r20, 0xFF	; 255
    1ea8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eaa:	0e c0       	rjmp	.+28     	; 0x1ec8 <__fixsfsi+0x9c>
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	09 c0       	rjmp	.+18     	; 0x1ec8 <__fixsfsi+0x9c>
    1eb6:	2f ef       	ldi	r18, 0xFF	; 255
    1eb8:	3f ef       	ldi	r19, 0xFF	; 255
    1eba:	4f ef       	ldi	r20, 0xFF	; 255
    1ebc:	5f e7       	ldi	r21, 0x7F	; 127
    1ebe:	04 c0       	rjmp	.+8      	; 0x1ec8 <__fixsfsi+0x9c>
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	50 e8       	ldi	r21, 0x80	; 128
    1ec8:	b9 01       	movw	r22, r18
    1eca:	ca 01       	movw	r24, r20
    1ecc:	2c 96       	adiw	r28, 0x0c	; 12
    1ece:	e2 e0       	ldi	r30, 0x02	; 2
    1ed0:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__epilogue_restores__+0x20>

00001ed4 <__pack_f>:
    1ed4:	df 92       	push	r13
    1ed6:	ef 92       	push	r14
    1ed8:	ff 92       	push	r15
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	fc 01       	movw	r30, r24
    1ee0:	e4 80       	ldd	r14, Z+4	; 0x04
    1ee2:	f5 80       	ldd	r15, Z+5	; 0x05
    1ee4:	06 81       	ldd	r16, Z+6	; 0x06
    1ee6:	17 81       	ldd	r17, Z+7	; 0x07
    1ee8:	d1 80       	ldd	r13, Z+1	; 0x01
    1eea:	80 81       	ld	r24, Z
    1eec:	82 30       	cpi	r24, 0x02	; 2
    1eee:	48 f4       	brcc	.+18     	; 0x1f02 <__pack_f+0x2e>
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	a0 e1       	ldi	r26, 0x10	; 16
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e8 2a       	or	r14, r24
    1efa:	f9 2a       	or	r15, r25
    1efc:	0a 2b       	or	r16, r26
    1efe:	1b 2b       	or	r17, r27
    1f00:	a5 c0       	rjmp	.+330    	; 0x204c <__pack_f+0x178>
    1f02:	84 30       	cpi	r24, 0x04	; 4
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <__pack_f+0x34>
    1f06:	9f c0       	rjmp	.+318    	; 0x2046 <__pack_f+0x172>
    1f08:	82 30       	cpi	r24, 0x02	; 2
    1f0a:	21 f4       	brne	.+8      	; 0x1f14 <__pack_f+0x40>
    1f0c:	ee 24       	eor	r14, r14
    1f0e:	ff 24       	eor	r15, r15
    1f10:	87 01       	movw	r16, r14
    1f12:	05 c0       	rjmp	.+10     	; 0x1f1e <__pack_f+0x4a>
    1f14:	e1 14       	cp	r14, r1
    1f16:	f1 04       	cpc	r15, r1
    1f18:	01 05       	cpc	r16, r1
    1f1a:	11 05       	cpc	r17, r1
    1f1c:	19 f4       	brne	.+6      	; 0x1f24 <__pack_f+0x50>
    1f1e:	e0 e0       	ldi	r30, 0x00	; 0
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	96 c0       	rjmp	.+300    	; 0x2050 <__pack_f+0x17c>
    1f24:	62 81       	ldd	r22, Z+2	; 0x02
    1f26:	73 81       	ldd	r23, Z+3	; 0x03
    1f28:	9f ef       	ldi	r25, 0xFF	; 255
    1f2a:	62 38       	cpi	r22, 0x82	; 130
    1f2c:	79 07       	cpc	r23, r25
    1f2e:	0c f0       	brlt	.+2      	; 0x1f32 <__pack_f+0x5e>
    1f30:	5b c0       	rjmp	.+182    	; 0x1fe8 <__pack_f+0x114>
    1f32:	22 e8       	ldi	r18, 0x82	; 130
    1f34:	3f ef       	ldi	r19, 0xFF	; 255
    1f36:	26 1b       	sub	r18, r22
    1f38:	37 0b       	sbc	r19, r23
    1f3a:	2a 31       	cpi	r18, 0x1A	; 26
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	2c f0       	brlt	.+10     	; 0x1f4a <__pack_f+0x76>
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	50 e0       	ldi	r21, 0x00	; 0
    1f48:	2a c0       	rjmp	.+84     	; 0x1f9e <__pack_f+0xca>
    1f4a:	b8 01       	movw	r22, r16
    1f4c:	a7 01       	movw	r20, r14
    1f4e:	02 2e       	mov	r0, r18
    1f50:	04 c0       	rjmp	.+8      	; 0x1f5a <__pack_f+0x86>
    1f52:	76 95       	lsr	r23
    1f54:	67 95       	ror	r22
    1f56:	57 95       	ror	r21
    1f58:	47 95       	ror	r20
    1f5a:	0a 94       	dec	r0
    1f5c:	d2 f7       	brpl	.-12     	; 0x1f52 <__pack_f+0x7e>
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	a0 e0       	ldi	r26, 0x00	; 0
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	04 c0       	rjmp	.+8      	; 0x1f70 <__pack_f+0x9c>
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	aa 1f       	adc	r26, r26
    1f6e:	bb 1f       	adc	r27, r27
    1f70:	2a 95       	dec	r18
    1f72:	d2 f7       	brpl	.-12     	; 0x1f68 <__pack_f+0x94>
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	a1 09       	sbc	r26, r1
    1f78:	b1 09       	sbc	r27, r1
    1f7a:	8e 21       	and	r24, r14
    1f7c:	9f 21       	and	r25, r15
    1f7e:	a0 23       	and	r26, r16
    1f80:	b1 23       	and	r27, r17
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	a1 05       	cpc	r26, r1
    1f86:	b1 05       	cpc	r27, r1
    1f88:	21 f0       	breq	.+8      	; 0x1f92 <__pack_f+0xbe>
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	a0 e0       	ldi	r26, 0x00	; 0
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	9a 01       	movw	r18, r20
    1f94:	ab 01       	movw	r20, r22
    1f96:	28 2b       	or	r18, r24
    1f98:	39 2b       	or	r19, r25
    1f9a:	4a 2b       	or	r20, r26
    1f9c:	5b 2b       	or	r21, r27
    1f9e:	da 01       	movw	r26, r20
    1fa0:	c9 01       	movw	r24, r18
    1fa2:	8f 77       	andi	r24, 0x7F	; 127
    1fa4:	90 70       	andi	r25, 0x00	; 0
    1fa6:	a0 70       	andi	r26, 0x00	; 0
    1fa8:	b0 70       	andi	r27, 0x00	; 0
    1faa:	80 34       	cpi	r24, 0x40	; 64
    1fac:	91 05       	cpc	r25, r1
    1fae:	a1 05       	cpc	r26, r1
    1fb0:	b1 05       	cpc	r27, r1
    1fb2:	39 f4       	brne	.+14     	; 0x1fc2 <__pack_f+0xee>
    1fb4:	27 ff       	sbrs	r18, 7
    1fb6:	09 c0       	rjmp	.+18     	; 0x1fca <__pack_f+0xf6>
    1fb8:	20 5c       	subi	r18, 0xC0	; 192
    1fba:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbc:	4f 4f       	sbci	r20, 0xFF	; 255
    1fbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc0:	04 c0       	rjmp	.+8      	; 0x1fca <__pack_f+0xf6>
    1fc2:	21 5c       	subi	r18, 0xC1	; 193
    1fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc6:	4f 4f       	sbci	r20, 0xFF	; 255
    1fc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fca:	e0 e0       	ldi	r30, 0x00	; 0
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	20 30       	cpi	r18, 0x00	; 0
    1fd0:	a0 e0       	ldi	r26, 0x00	; 0
    1fd2:	3a 07       	cpc	r19, r26
    1fd4:	a0 e0       	ldi	r26, 0x00	; 0
    1fd6:	4a 07       	cpc	r20, r26
    1fd8:	a0 e4       	ldi	r26, 0x40	; 64
    1fda:	5a 07       	cpc	r21, r26
    1fdc:	10 f0       	brcs	.+4      	; 0x1fe2 <__pack_f+0x10e>
    1fde:	e1 e0       	ldi	r30, 0x01	; 1
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	79 01       	movw	r14, r18
    1fe4:	8a 01       	movw	r16, r20
    1fe6:	27 c0       	rjmp	.+78     	; 0x2036 <__pack_f+0x162>
    1fe8:	60 38       	cpi	r22, 0x80	; 128
    1fea:	71 05       	cpc	r23, r1
    1fec:	64 f5       	brge	.+88     	; 0x2046 <__pack_f+0x172>
    1fee:	fb 01       	movw	r30, r22
    1ff0:	e1 58       	subi	r30, 0x81	; 129
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	d8 01       	movw	r26, r16
    1ff6:	c7 01       	movw	r24, r14
    1ff8:	8f 77       	andi	r24, 0x7F	; 127
    1ffa:	90 70       	andi	r25, 0x00	; 0
    1ffc:	a0 70       	andi	r26, 0x00	; 0
    1ffe:	b0 70       	andi	r27, 0x00	; 0
    2000:	80 34       	cpi	r24, 0x40	; 64
    2002:	91 05       	cpc	r25, r1
    2004:	a1 05       	cpc	r26, r1
    2006:	b1 05       	cpc	r27, r1
    2008:	39 f4       	brne	.+14     	; 0x2018 <__pack_f+0x144>
    200a:	e7 fe       	sbrs	r14, 7
    200c:	0d c0       	rjmp	.+26     	; 0x2028 <__pack_f+0x154>
    200e:	80 e4       	ldi	r24, 0x40	; 64
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	a0 e0       	ldi	r26, 0x00	; 0
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <__pack_f+0x14c>
    2018:	8f e3       	ldi	r24, 0x3F	; 63
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 e0       	ldi	r26, 0x00	; 0
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e8 0e       	add	r14, r24
    2022:	f9 1e       	adc	r15, r25
    2024:	0a 1f       	adc	r16, r26
    2026:	1b 1f       	adc	r17, r27
    2028:	17 ff       	sbrs	r17, 7
    202a:	05 c0       	rjmp	.+10     	; 0x2036 <__pack_f+0x162>
    202c:	16 95       	lsr	r17
    202e:	07 95       	ror	r16
    2030:	f7 94       	ror	r15
    2032:	e7 94       	ror	r14
    2034:	31 96       	adiw	r30, 0x01	; 1
    2036:	87 e0       	ldi	r24, 0x07	; 7
    2038:	16 95       	lsr	r17
    203a:	07 95       	ror	r16
    203c:	f7 94       	ror	r15
    203e:	e7 94       	ror	r14
    2040:	8a 95       	dec	r24
    2042:	d1 f7       	brne	.-12     	; 0x2038 <__pack_f+0x164>
    2044:	05 c0       	rjmp	.+10     	; 0x2050 <__pack_f+0x17c>
    2046:	ee 24       	eor	r14, r14
    2048:	ff 24       	eor	r15, r15
    204a:	87 01       	movw	r16, r14
    204c:	ef ef       	ldi	r30, 0xFF	; 255
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	6e 2f       	mov	r22, r30
    2052:	67 95       	ror	r22
    2054:	66 27       	eor	r22, r22
    2056:	67 95       	ror	r22
    2058:	90 2f       	mov	r25, r16
    205a:	9f 77       	andi	r25, 0x7F	; 127
    205c:	d7 94       	ror	r13
    205e:	dd 24       	eor	r13, r13
    2060:	d7 94       	ror	r13
    2062:	8e 2f       	mov	r24, r30
    2064:	86 95       	lsr	r24
    2066:	49 2f       	mov	r20, r25
    2068:	46 2b       	or	r20, r22
    206a:	58 2f       	mov	r21, r24
    206c:	5d 29       	or	r21, r13
    206e:	b7 01       	movw	r22, r14
    2070:	ca 01       	movw	r24, r20
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	ff 90       	pop	r15
    2078:	ef 90       	pop	r14
    207a:	df 90       	pop	r13
    207c:	08 95       	ret

0000207e <__unpack_f>:
    207e:	fc 01       	movw	r30, r24
    2080:	db 01       	movw	r26, r22
    2082:	40 81       	ld	r20, Z
    2084:	51 81       	ldd	r21, Z+1	; 0x01
    2086:	22 81       	ldd	r18, Z+2	; 0x02
    2088:	62 2f       	mov	r22, r18
    208a:	6f 77       	andi	r22, 0x7F	; 127
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	22 1f       	adc	r18, r18
    2090:	22 27       	eor	r18, r18
    2092:	22 1f       	adc	r18, r18
    2094:	93 81       	ldd	r25, Z+3	; 0x03
    2096:	89 2f       	mov	r24, r25
    2098:	88 0f       	add	r24, r24
    209a:	82 2b       	or	r24, r18
    209c:	28 2f       	mov	r18, r24
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	99 1f       	adc	r25, r25
    20a2:	99 27       	eor	r25, r25
    20a4:	99 1f       	adc	r25, r25
    20a6:	11 96       	adiw	r26, 0x01	; 1
    20a8:	9c 93       	st	X, r25
    20aa:	11 97       	sbiw	r26, 0x01	; 1
    20ac:	21 15       	cp	r18, r1
    20ae:	31 05       	cpc	r19, r1
    20b0:	a9 f5       	brne	.+106    	; 0x211c <__unpack_f+0x9e>
    20b2:	41 15       	cp	r20, r1
    20b4:	51 05       	cpc	r21, r1
    20b6:	61 05       	cpc	r22, r1
    20b8:	71 05       	cpc	r23, r1
    20ba:	11 f4       	brne	.+4      	; 0x20c0 <__unpack_f+0x42>
    20bc:	82 e0       	ldi	r24, 0x02	; 2
    20be:	37 c0       	rjmp	.+110    	; 0x212e <__unpack_f+0xb0>
    20c0:	82 e8       	ldi	r24, 0x82	; 130
    20c2:	9f ef       	ldi	r25, 0xFF	; 255
    20c4:	13 96       	adiw	r26, 0x03	; 3
    20c6:	9c 93       	st	X, r25
    20c8:	8e 93       	st	-X, r24
    20ca:	12 97       	sbiw	r26, 0x02	; 2
    20cc:	9a 01       	movw	r18, r20
    20ce:	ab 01       	movw	r20, r22
    20d0:	67 e0       	ldi	r22, 0x07	; 7
    20d2:	22 0f       	add	r18, r18
    20d4:	33 1f       	adc	r19, r19
    20d6:	44 1f       	adc	r20, r20
    20d8:	55 1f       	adc	r21, r21
    20da:	6a 95       	dec	r22
    20dc:	d1 f7       	brne	.-12     	; 0x20d2 <__unpack_f+0x54>
    20de:	83 e0       	ldi	r24, 0x03	; 3
    20e0:	8c 93       	st	X, r24
    20e2:	0d c0       	rjmp	.+26     	; 0x20fe <__unpack_f+0x80>
    20e4:	22 0f       	add	r18, r18
    20e6:	33 1f       	adc	r19, r19
    20e8:	44 1f       	adc	r20, r20
    20ea:	55 1f       	adc	r21, r21
    20ec:	12 96       	adiw	r26, 0x02	; 2
    20ee:	8d 91       	ld	r24, X+
    20f0:	9c 91       	ld	r25, X
    20f2:	13 97       	sbiw	r26, 0x03	; 3
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	13 96       	adiw	r26, 0x03	; 3
    20f8:	9c 93       	st	X, r25
    20fa:	8e 93       	st	-X, r24
    20fc:	12 97       	sbiw	r26, 0x02	; 2
    20fe:	20 30       	cpi	r18, 0x00	; 0
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	38 07       	cpc	r19, r24
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	48 07       	cpc	r20, r24
    2108:	80 e4       	ldi	r24, 0x40	; 64
    210a:	58 07       	cpc	r21, r24
    210c:	58 f3       	brcs	.-42     	; 0x20e4 <__unpack_f+0x66>
    210e:	14 96       	adiw	r26, 0x04	; 4
    2110:	2d 93       	st	X+, r18
    2112:	3d 93       	st	X+, r19
    2114:	4d 93       	st	X+, r20
    2116:	5c 93       	st	X, r21
    2118:	17 97       	sbiw	r26, 0x07	; 7
    211a:	08 95       	ret
    211c:	2f 3f       	cpi	r18, 0xFF	; 255
    211e:	31 05       	cpc	r19, r1
    2120:	79 f4       	brne	.+30     	; 0x2140 <__unpack_f+0xc2>
    2122:	41 15       	cp	r20, r1
    2124:	51 05       	cpc	r21, r1
    2126:	61 05       	cpc	r22, r1
    2128:	71 05       	cpc	r23, r1
    212a:	19 f4       	brne	.+6      	; 0x2132 <__unpack_f+0xb4>
    212c:	84 e0       	ldi	r24, 0x04	; 4
    212e:	8c 93       	st	X, r24
    2130:	08 95       	ret
    2132:	64 ff       	sbrs	r22, 4
    2134:	03 c0       	rjmp	.+6      	; 0x213c <__unpack_f+0xbe>
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	8c 93       	st	X, r24
    213a:	12 c0       	rjmp	.+36     	; 0x2160 <__unpack_f+0xe2>
    213c:	1c 92       	st	X, r1
    213e:	10 c0       	rjmp	.+32     	; 0x2160 <__unpack_f+0xe2>
    2140:	2f 57       	subi	r18, 0x7F	; 127
    2142:	30 40       	sbci	r19, 0x00	; 0
    2144:	13 96       	adiw	r26, 0x03	; 3
    2146:	3c 93       	st	X, r19
    2148:	2e 93       	st	-X, r18
    214a:	12 97       	sbiw	r26, 0x02	; 2
    214c:	83 e0       	ldi	r24, 0x03	; 3
    214e:	8c 93       	st	X, r24
    2150:	87 e0       	ldi	r24, 0x07	; 7
    2152:	44 0f       	add	r20, r20
    2154:	55 1f       	adc	r21, r21
    2156:	66 1f       	adc	r22, r22
    2158:	77 1f       	adc	r23, r23
    215a:	8a 95       	dec	r24
    215c:	d1 f7       	brne	.-12     	; 0x2152 <__unpack_f+0xd4>
    215e:	70 64       	ori	r23, 0x40	; 64
    2160:	14 96       	adiw	r26, 0x04	; 4
    2162:	4d 93       	st	X+, r20
    2164:	5d 93       	st	X+, r21
    2166:	6d 93       	st	X+, r22
    2168:	7c 93       	st	X, r23
    216a:	17 97       	sbiw	r26, 0x07	; 7
    216c:	08 95       	ret

0000216e <__fpcmp_parts_f>:
    216e:	1f 93       	push	r17
    2170:	dc 01       	movw	r26, r24
    2172:	fb 01       	movw	r30, r22
    2174:	9c 91       	ld	r25, X
    2176:	92 30       	cpi	r25, 0x02	; 2
    2178:	08 f4       	brcc	.+2      	; 0x217c <__fpcmp_parts_f+0xe>
    217a:	47 c0       	rjmp	.+142    	; 0x220a <__fpcmp_parts_f+0x9c>
    217c:	80 81       	ld	r24, Z
    217e:	82 30       	cpi	r24, 0x02	; 2
    2180:	08 f4       	brcc	.+2      	; 0x2184 <__fpcmp_parts_f+0x16>
    2182:	43 c0       	rjmp	.+134    	; 0x220a <__fpcmp_parts_f+0x9c>
    2184:	94 30       	cpi	r25, 0x04	; 4
    2186:	51 f4       	brne	.+20     	; 0x219c <__fpcmp_parts_f+0x2e>
    2188:	11 96       	adiw	r26, 0x01	; 1
    218a:	1c 91       	ld	r17, X
    218c:	84 30       	cpi	r24, 0x04	; 4
    218e:	99 f5       	brne	.+102    	; 0x21f6 <__fpcmp_parts_f+0x88>
    2190:	81 81       	ldd	r24, Z+1	; 0x01
    2192:	68 2f       	mov	r22, r24
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	61 1b       	sub	r22, r17
    2198:	71 09       	sbc	r23, r1
    219a:	3f c0       	rjmp	.+126    	; 0x221a <__fpcmp_parts_f+0xac>
    219c:	84 30       	cpi	r24, 0x04	; 4
    219e:	21 f0       	breq	.+8      	; 0x21a8 <__fpcmp_parts_f+0x3a>
    21a0:	92 30       	cpi	r25, 0x02	; 2
    21a2:	31 f4       	brne	.+12     	; 0x21b0 <__fpcmp_parts_f+0x42>
    21a4:	82 30       	cpi	r24, 0x02	; 2
    21a6:	b9 f1       	breq	.+110    	; 0x2216 <__fpcmp_parts_f+0xa8>
    21a8:	81 81       	ldd	r24, Z+1	; 0x01
    21aa:	88 23       	and	r24, r24
    21ac:	89 f1       	breq	.+98     	; 0x2210 <__fpcmp_parts_f+0xa2>
    21ae:	2d c0       	rjmp	.+90     	; 0x220a <__fpcmp_parts_f+0x9c>
    21b0:	11 96       	adiw	r26, 0x01	; 1
    21b2:	1c 91       	ld	r17, X
    21b4:	11 97       	sbiw	r26, 0x01	; 1
    21b6:	82 30       	cpi	r24, 0x02	; 2
    21b8:	f1 f0       	breq	.+60     	; 0x21f6 <__fpcmp_parts_f+0x88>
    21ba:	81 81       	ldd	r24, Z+1	; 0x01
    21bc:	18 17       	cp	r17, r24
    21be:	d9 f4       	brne	.+54     	; 0x21f6 <__fpcmp_parts_f+0x88>
    21c0:	12 96       	adiw	r26, 0x02	; 2
    21c2:	2d 91       	ld	r18, X+
    21c4:	3c 91       	ld	r19, X
    21c6:	13 97       	sbiw	r26, 0x03	; 3
    21c8:	82 81       	ldd	r24, Z+2	; 0x02
    21ca:	93 81       	ldd	r25, Z+3	; 0x03
    21cc:	82 17       	cp	r24, r18
    21ce:	93 07       	cpc	r25, r19
    21d0:	94 f0       	brlt	.+36     	; 0x21f6 <__fpcmp_parts_f+0x88>
    21d2:	28 17       	cp	r18, r24
    21d4:	39 07       	cpc	r19, r25
    21d6:	bc f0       	brlt	.+46     	; 0x2206 <__fpcmp_parts_f+0x98>
    21d8:	14 96       	adiw	r26, 0x04	; 4
    21da:	8d 91       	ld	r24, X+
    21dc:	9d 91       	ld	r25, X+
    21de:	0d 90       	ld	r0, X+
    21e0:	bc 91       	ld	r27, X
    21e2:	a0 2d       	mov	r26, r0
    21e4:	24 81       	ldd	r18, Z+4	; 0x04
    21e6:	35 81       	ldd	r19, Z+5	; 0x05
    21e8:	46 81       	ldd	r20, Z+6	; 0x06
    21ea:	57 81       	ldd	r21, Z+7	; 0x07
    21ec:	28 17       	cp	r18, r24
    21ee:	39 07       	cpc	r19, r25
    21f0:	4a 07       	cpc	r20, r26
    21f2:	5b 07       	cpc	r21, r27
    21f4:	18 f4       	brcc	.+6      	; 0x21fc <__fpcmp_parts_f+0x8e>
    21f6:	11 23       	and	r17, r17
    21f8:	41 f0       	breq	.+16     	; 0x220a <__fpcmp_parts_f+0x9c>
    21fa:	0a c0       	rjmp	.+20     	; 0x2210 <__fpcmp_parts_f+0xa2>
    21fc:	82 17       	cp	r24, r18
    21fe:	93 07       	cpc	r25, r19
    2200:	a4 07       	cpc	r26, r20
    2202:	b5 07       	cpc	r27, r21
    2204:	40 f4       	brcc	.+16     	; 0x2216 <__fpcmp_parts_f+0xa8>
    2206:	11 23       	and	r17, r17
    2208:	19 f0       	breq	.+6      	; 0x2210 <__fpcmp_parts_f+0xa2>
    220a:	61 e0       	ldi	r22, 0x01	; 1
    220c:	70 e0       	ldi	r23, 0x00	; 0
    220e:	05 c0       	rjmp	.+10     	; 0x221a <__fpcmp_parts_f+0xac>
    2210:	6f ef       	ldi	r22, 0xFF	; 255
    2212:	7f ef       	ldi	r23, 0xFF	; 255
    2214:	02 c0       	rjmp	.+4      	; 0x221a <__fpcmp_parts_f+0xac>
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	cb 01       	movw	r24, r22
    221c:	1f 91       	pop	r17
    221e:	08 95       	ret

00002220 <__udivmodhi4>:
    2220:	aa 1b       	sub	r26, r26
    2222:	bb 1b       	sub	r27, r27
    2224:	51 e1       	ldi	r21, 0x11	; 17
    2226:	07 c0       	rjmp	.+14     	; 0x2236 <__udivmodhi4_ep>

00002228 <__udivmodhi4_loop>:
    2228:	aa 1f       	adc	r26, r26
    222a:	bb 1f       	adc	r27, r27
    222c:	a6 17       	cp	r26, r22
    222e:	b7 07       	cpc	r27, r23
    2230:	10 f0       	brcs	.+4      	; 0x2236 <__udivmodhi4_ep>
    2232:	a6 1b       	sub	r26, r22
    2234:	b7 0b       	sbc	r27, r23

00002236 <__udivmodhi4_ep>:
    2236:	88 1f       	adc	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	5a 95       	dec	r21
    223c:	a9 f7       	brne	.-22     	; 0x2228 <__udivmodhi4_loop>
    223e:	80 95       	com	r24
    2240:	90 95       	com	r25
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	08 95       	ret

00002248 <__divmodhi4>:
    2248:	97 fb       	bst	r25, 7
    224a:	09 2e       	mov	r0, r25
    224c:	07 26       	eor	r0, r23
    224e:	0a d0       	rcall	.+20     	; 0x2264 <__divmodhi4_neg1>
    2250:	77 fd       	sbrc	r23, 7
    2252:	04 d0       	rcall	.+8      	; 0x225c <__divmodhi4_neg2>
    2254:	e5 df       	rcall	.-54     	; 0x2220 <__udivmodhi4>
    2256:	06 d0       	rcall	.+12     	; 0x2264 <__divmodhi4_neg1>
    2258:	00 20       	and	r0, r0
    225a:	1a f4       	brpl	.+6      	; 0x2262 <__divmodhi4_exit>

0000225c <__divmodhi4_neg2>:
    225c:	70 95       	com	r23
    225e:	61 95       	neg	r22
    2260:	7f 4f       	sbci	r23, 0xFF	; 255

00002262 <__divmodhi4_exit>:
    2262:	08 95       	ret

00002264 <__divmodhi4_neg1>:
    2264:	f6 f7       	brtc	.-4      	; 0x2262 <__divmodhi4_exit>
    2266:	90 95       	com	r25
    2268:	81 95       	neg	r24
    226a:	9f 4f       	sbci	r25, 0xFF	; 255
    226c:	08 95       	ret

0000226e <__prologue_saves__>:
    226e:	2f 92       	push	r2
    2270:	3f 92       	push	r3
    2272:	4f 92       	push	r4
    2274:	5f 92       	push	r5
    2276:	6f 92       	push	r6
    2278:	7f 92       	push	r7
    227a:	8f 92       	push	r8
    227c:	9f 92       	push	r9
    227e:	af 92       	push	r10
    2280:	bf 92       	push	r11
    2282:	cf 92       	push	r12
    2284:	df 92       	push	r13
    2286:	ef 92       	push	r14
    2288:	ff 92       	push	r15
    228a:	0f 93       	push	r16
    228c:	1f 93       	push	r17
    228e:	cf 93       	push	r28
    2290:	df 93       	push	r29
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	ca 1b       	sub	r28, r26
    2298:	db 0b       	sbc	r29, r27
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	09 94       	ijmp

000022a6 <__epilogue_restores__>:
    22a6:	2a 88       	ldd	r2, Y+18	; 0x12
    22a8:	39 88       	ldd	r3, Y+17	; 0x11
    22aa:	48 88       	ldd	r4, Y+16	; 0x10
    22ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    22ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    22b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    22b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    22b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    22b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    22b8:	b9 84       	ldd	r11, Y+9	; 0x09
    22ba:	c8 84       	ldd	r12, Y+8	; 0x08
    22bc:	df 80       	ldd	r13, Y+7	; 0x07
    22be:	ee 80       	ldd	r14, Y+6	; 0x06
    22c0:	fd 80       	ldd	r15, Y+5	; 0x05
    22c2:	0c 81       	ldd	r16, Y+4	; 0x04
    22c4:	1b 81       	ldd	r17, Y+3	; 0x03
    22c6:	aa 81       	ldd	r26, Y+2	; 0x02
    22c8:	b9 81       	ldd	r27, Y+1	; 0x01
    22ca:	ce 0f       	add	r28, r30
    22cc:	d1 1d       	adc	r29, r1
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	ed 01       	movw	r28, r26
    22da:	08 95       	ret

000022dc <strlen>:
    22dc:	fc 01       	movw	r30, r24
    22de:	01 90       	ld	r0, Z+
    22e0:	00 20       	and	r0, r0
    22e2:	e9 f7       	brne	.-6      	; 0x22de <strlen+0x2>
    22e4:	80 95       	com	r24
    22e6:	90 95       	com	r25
    22e8:	8e 0f       	add	r24, r30
    22ea:	9f 1f       	adc	r25, r31
    22ec:	08 95       	ret

000022ee <sprintf>:
    22ee:	ae e0       	ldi	r26, 0x0E	; 14
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	ed e7       	ldi	r30, 0x7D	; 125
    22f4:	f1 e1       	ldi	r31, 0x11	; 17
    22f6:	0c 94 45 11 	jmp	0x228a	; 0x228a <__prologue_saves__+0x1c>
    22fa:	0d 89       	ldd	r16, Y+21	; 0x15
    22fc:	1e 89       	ldd	r17, Y+22	; 0x16
    22fe:	86 e0       	ldi	r24, 0x06	; 6
    2300:	8c 83       	std	Y+4, r24	; 0x04
    2302:	1a 83       	std	Y+2, r17	; 0x02
    2304:	09 83       	std	Y+1, r16	; 0x01
    2306:	8f ef       	ldi	r24, 0xFF	; 255
    2308:	9f e7       	ldi	r25, 0x7F	; 127
    230a:	9e 83       	std	Y+6, r25	; 0x06
    230c:	8d 83       	std	Y+5, r24	; 0x05
    230e:	9e 01       	movw	r18, r28
    2310:	27 5e       	subi	r18, 0xE7	; 231
    2312:	3f 4f       	sbci	r19, 0xFF	; 255
    2314:	ce 01       	movw	r24, r28
    2316:	01 96       	adiw	r24, 0x01	; 1
    2318:	6f 89       	ldd	r22, Y+23	; 0x17
    231a:	78 8d       	ldd	r23, Y+24	; 0x18
    231c:	a9 01       	movw	r20, r18
    231e:	0e 94 9b 11 	call	0x2336	; 0x2336 <vfprintf>
    2322:	2f 81       	ldd	r18, Y+7	; 0x07
    2324:	38 85       	ldd	r19, Y+8	; 0x08
    2326:	02 0f       	add	r16, r18
    2328:	13 1f       	adc	r17, r19
    232a:	f8 01       	movw	r30, r16
    232c:	10 82       	st	Z, r1
    232e:	2e 96       	adiw	r28, 0x0e	; 14
    2330:	e4 e0       	ldi	r30, 0x04	; 4
    2332:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__epilogue_restores__+0x1c>

00002336 <vfprintf>:
    2336:	ab e0       	ldi	r26, 0x0B	; 11
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e1 ea       	ldi	r30, 0xA1	; 161
    233c:	f1 e1       	ldi	r31, 0x11	; 17
    233e:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__>
    2342:	3c 01       	movw	r6, r24
    2344:	2b 01       	movw	r4, r22
    2346:	5a 01       	movw	r10, r20
    2348:	fc 01       	movw	r30, r24
    234a:	17 82       	std	Z+7, r1	; 0x07
    234c:	16 82       	std	Z+6, r1	; 0x06
    234e:	83 81       	ldd	r24, Z+3	; 0x03
    2350:	81 fd       	sbrc	r24, 1
    2352:	03 c0       	rjmp	.+6      	; 0x235a <vfprintf+0x24>
    2354:	6f ef       	ldi	r22, 0xFF	; 255
    2356:	7f ef       	ldi	r23, 0xFF	; 255
    2358:	c6 c1       	rjmp	.+908    	; 0x26e6 <vfprintf+0x3b0>
    235a:	9a e0       	ldi	r25, 0x0A	; 10
    235c:	89 2e       	mov	r8, r25
    235e:	1e 01       	movw	r2, r28
    2360:	08 94       	sec
    2362:	21 1c       	adc	r2, r1
    2364:	31 1c       	adc	r3, r1
    2366:	f3 01       	movw	r30, r6
    2368:	23 81       	ldd	r18, Z+3	; 0x03
    236a:	f2 01       	movw	r30, r4
    236c:	23 fd       	sbrc	r18, 3
    236e:	85 91       	lpm	r24, Z+
    2370:	23 ff       	sbrs	r18, 3
    2372:	81 91       	ld	r24, Z+
    2374:	2f 01       	movw	r4, r30
    2376:	88 23       	and	r24, r24
    2378:	09 f4       	brne	.+2      	; 0x237c <vfprintf+0x46>
    237a:	b2 c1       	rjmp	.+868    	; 0x26e0 <vfprintf+0x3aa>
    237c:	85 32       	cpi	r24, 0x25	; 37
    237e:	39 f4       	brne	.+14     	; 0x238e <vfprintf+0x58>
    2380:	23 fd       	sbrc	r18, 3
    2382:	85 91       	lpm	r24, Z+
    2384:	23 ff       	sbrs	r18, 3
    2386:	81 91       	ld	r24, Z+
    2388:	2f 01       	movw	r4, r30
    238a:	85 32       	cpi	r24, 0x25	; 37
    238c:	29 f4       	brne	.+10     	; 0x2398 <vfprintf+0x62>
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	b3 01       	movw	r22, r6
    2392:	0e 94 8e 13 	call	0x271c	; 0x271c <fputc>
    2396:	e7 cf       	rjmp	.-50     	; 0x2366 <vfprintf+0x30>
    2398:	98 2f       	mov	r25, r24
    239a:	ff 24       	eor	r15, r15
    239c:	ee 24       	eor	r14, r14
    239e:	99 24       	eor	r9, r9
    23a0:	ff e1       	ldi	r31, 0x1F	; 31
    23a2:	ff 15       	cp	r31, r15
    23a4:	d0 f0       	brcs	.+52     	; 0x23da <vfprintf+0xa4>
    23a6:	9b 32       	cpi	r25, 0x2B	; 43
    23a8:	69 f0       	breq	.+26     	; 0x23c4 <vfprintf+0x8e>
    23aa:	9c 32       	cpi	r25, 0x2C	; 44
    23ac:	28 f4       	brcc	.+10     	; 0x23b8 <vfprintf+0x82>
    23ae:	90 32       	cpi	r25, 0x20	; 32
    23b0:	59 f0       	breq	.+22     	; 0x23c8 <vfprintf+0x92>
    23b2:	93 32       	cpi	r25, 0x23	; 35
    23b4:	91 f4       	brne	.+36     	; 0x23da <vfprintf+0xa4>
    23b6:	0e c0       	rjmp	.+28     	; 0x23d4 <vfprintf+0x9e>
    23b8:	9d 32       	cpi	r25, 0x2D	; 45
    23ba:	49 f0       	breq	.+18     	; 0x23ce <vfprintf+0x98>
    23bc:	90 33       	cpi	r25, 0x30	; 48
    23be:	69 f4       	brne	.+26     	; 0x23da <vfprintf+0xa4>
    23c0:	41 e0       	ldi	r20, 0x01	; 1
    23c2:	24 c0       	rjmp	.+72     	; 0x240c <vfprintf+0xd6>
    23c4:	52 e0       	ldi	r21, 0x02	; 2
    23c6:	f5 2a       	or	r15, r21
    23c8:	84 e0       	ldi	r24, 0x04	; 4
    23ca:	f8 2a       	or	r15, r24
    23cc:	28 c0       	rjmp	.+80     	; 0x241e <vfprintf+0xe8>
    23ce:	98 e0       	ldi	r25, 0x08	; 8
    23d0:	f9 2a       	or	r15, r25
    23d2:	25 c0       	rjmp	.+74     	; 0x241e <vfprintf+0xe8>
    23d4:	e0 e1       	ldi	r30, 0x10	; 16
    23d6:	fe 2a       	or	r15, r30
    23d8:	22 c0       	rjmp	.+68     	; 0x241e <vfprintf+0xe8>
    23da:	f7 fc       	sbrc	r15, 7
    23dc:	29 c0       	rjmp	.+82     	; 0x2430 <vfprintf+0xfa>
    23de:	89 2f       	mov	r24, r25
    23e0:	80 53       	subi	r24, 0x30	; 48
    23e2:	8a 30       	cpi	r24, 0x0A	; 10
    23e4:	70 f4       	brcc	.+28     	; 0x2402 <vfprintf+0xcc>
    23e6:	f6 fe       	sbrs	r15, 6
    23e8:	05 c0       	rjmp	.+10     	; 0x23f4 <vfprintf+0xbe>
    23ea:	98 9c       	mul	r9, r8
    23ec:	90 2c       	mov	r9, r0
    23ee:	11 24       	eor	r1, r1
    23f0:	98 0e       	add	r9, r24
    23f2:	15 c0       	rjmp	.+42     	; 0x241e <vfprintf+0xe8>
    23f4:	e8 9c       	mul	r14, r8
    23f6:	e0 2c       	mov	r14, r0
    23f8:	11 24       	eor	r1, r1
    23fa:	e8 0e       	add	r14, r24
    23fc:	f0 e2       	ldi	r31, 0x20	; 32
    23fe:	ff 2a       	or	r15, r31
    2400:	0e c0       	rjmp	.+28     	; 0x241e <vfprintf+0xe8>
    2402:	9e 32       	cpi	r25, 0x2E	; 46
    2404:	29 f4       	brne	.+10     	; 0x2410 <vfprintf+0xda>
    2406:	f6 fc       	sbrc	r15, 6
    2408:	6b c1       	rjmp	.+726    	; 0x26e0 <vfprintf+0x3aa>
    240a:	40 e4       	ldi	r20, 0x40	; 64
    240c:	f4 2a       	or	r15, r20
    240e:	07 c0       	rjmp	.+14     	; 0x241e <vfprintf+0xe8>
    2410:	9c 36       	cpi	r25, 0x6C	; 108
    2412:	19 f4       	brne	.+6      	; 0x241a <vfprintf+0xe4>
    2414:	50 e8       	ldi	r21, 0x80	; 128
    2416:	f5 2a       	or	r15, r21
    2418:	02 c0       	rjmp	.+4      	; 0x241e <vfprintf+0xe8>
    241a:	98 36       	cpi	r25, 0x68	; 104
    241c:	49 f4       	brne	.+18     	; 0x2430 <vfprintf+0xfa>
    241e:	f2 01       	movw	r30, r4
    2420:	23 fd       	sbrc	r18, 3
    2422:	95 91       	lpm	r25, Z+
    2424:	23 ff       	sbrs	r18, 3
    2426:	91 91       	ld	r25, Z+
    2428:	2f 01       	movw	r4, r30
    242a:	99 23       	and	r25, r25
    242c:	09 f0       	breq	.+2      	; 0x2430 <vfprintf+0xfa>
    242e:	b8 cf       	rjmp	.-144    	; 0x23a0 <vfprintf+0x6a>
    2430:	89 2f       	mov	r24, r25
    2432:	85 54       	subi	r24, 0x45	; 69
    2434:	83 30       	cpi	r24, 0x03	; 3
    2436:	18 f0       	brcs	.+6      	; 0x243e <vfprintf+0x108>
    2438:	80 52       	subi	r24, 0x20	; 32
    243a:	83 30       	cpi	r24, 0x03	; 3
    243c:	38 f4       	brcc	.+14     	; 0x244c <vfprintf+0x116>
    243e:	44 e0       	ldi	r20, 0x04	; 4
    2440:	50 e0       	ldi	r21, 0x00	; 0
    2442:	a4 0e       	add	r10, r20
    2444:	b5 1e       	adc	r11, r21
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	59 83       	std	Y+1, r21	; 0x01
    244a:	0f c0       	rjmp	.+30     	; 0x246a <vfprintf+0x134>
    244c:	93 36       	cpi	r25, 0x63	; 99
    244e:	31 f0       	breq	.+12     	; 0x245c <vfprintf+0x126>
    2450:	93 37       	cpi	r25, 0x73	; 115
    2452:	79 f0       	breq	.+30     	; 0x2472 <vfprintf+0x13c>
    2454:	93 35       	cpi	r25, 0x53	; 83
    2456:	09 f0       	breq	.+2      	; 0x245a <vfprintf+0x124>
    2458:	56 c0       	rjmp	.+172    	; 0x2506 <vfprintf+0x1d0>
    245a:	20 c0       	rjmp	.+64     	; 0x249c <vfprintf+0x166>
    245c:	f5 01       	movw	r30, r10
    245e:	80 81       	ld	r24, Z
    2460:	89 83       	std	Y+1, r24	; 0x01
    2462:	42 e0       	ldi	r20, 0x02	; 2
    2464:	50 e0       	ldi	r21, 0x00	; 0
    2466:	a4 0e       	add	r10, r20
    2468:	b5 1e       	adc	r11, r21
    246a:	61 01       	movw	r12, r2
    246c:	01 e0       	ldi	r16, 0x01	; 1
    246e:	10 e0       	ldi	r17, 0x00	; 0
    2470:	12 c0       	rjmp	.+36     	; 0x2496 <vfprintf+0x160>
    2472:	f5 01       	movw	r30, r10
    2474:	c0 80       	ld	r12, Z
    2476:	d1 80       	ldd	r13, Z+1	; 0x01
    2478:	f6 fc       	sbrc	r15, 6
    247a:	03 c0       	rjmp	.+6      	; 0x2482 <vfprintf+0x14c>
    247c:	6f ef       	ldi	r22, 0xFF	; 255
    247e:	7f ef       	ldi	r23, 0xFF	; 255
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <vfprintf+0x150>
    2482:	69 2d       	mov	r22, r9
    2484:	70 e0       	ldi	r23, 0x00	; 0
    2486:	42 e0       	ldi	r20, 0x02	; 2
    2488:	50 e0       	ldi	r21, 0x00	; 0
    248a:	a4 0e       	add	r10, r20
    248c:	b5 1e       	adc	r11, r21
    248e:	c6 01       	movw	r24, r12
    2490:	0e 94 83 13 	call	0x2706	; 0x2706 <strnlen>
    2494:	8c 01       	movw	r16, r24
    2496:	5f e7       	ldi	r21, 0x7F	; 127
    2498:	f5 22       	and	r15, r21
    249a:	14 c0       	rjmp	.+40     	; 0x24c4 <vfprintf+0x18e>
    249c:	f5 01       	movw	r30, r10
    249e:	c0 80       	ld	r12, Z
    24a0:	d1 80       	ldd	r13, Z+1	; 0x01
    24a2:	f6 fc       	sbrc	r15, 6
    24a4:	03 c0       	rjmp	.+6      	; 0x24ac <vfprintf+0x176>
    24a6:	6f ef       	ldi	r22, 0xFF	; 255
    24a8:	7f ef       	ldi	r23, 0xFF	; 255
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <vfprintf+0x17a>
    24ac:	69 2d       	mov	r22, r9
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	42 e0       	ldi	r20, 0x02	; 2
    24b2:	50 e0       	ldi	r21, 0x00	; 0
    24b4:	a4 0e       	add	r10, r20
    24b6:	b5 1e       	adc	r11, r21
    24b8:	c6 01       	movw	r24, r12
    24ba:	0e 94 78 13 	call	0x26f0	; 0x26f0 <strnlen_P>
    24be:	8c 01       	movw	r16, r24
    24c0:	50 e8       	ldi	r21, 0x80	; 128
    24c2:	f5 2a       	or	r15, r21
    24c4:	f3 fe       	sbrs	r15, 3
    24c6:	07 c0       	rjmp	.+14     	; 0x24d6 <vfprintf+0x1a0>
    24c8:	1a c0       	rjmp	.+52     	; 0x24fe <vfprintf+0x1c8>
    24ca:	80 e2       	ldi	r24, 0x20	; 32
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	b3 01       	movw	r22, r6
    24d0:	0e 94 8e 13 	call	0x271c	; 0x271c <fputc>
    24d4:	ea 94       	dec	r14
    24d6:	8e 2d       	mov	r24, r14
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	08 17       	cp	r16, r24
    24dc:	19 07       	cpc	r17, r25
    24de:	a8 f3       	brcs	.-22     	; 0x24ca <vfprintf+0x194>
    24e0:	0e c0       	rjmp	.+28     	; 0x24fe <vfprintf+0x1c8>
    24e2:	f6 01       	movw	r30, r12
    24e4:	f7 fc       	sbrc	r15, 7
    24e6:	85 91       	lpm	r24, Z+
    24e8:	f7 fe       	sbrs	r15, 7
    24ea:	81 91       	ld	r24, Z+
    24ec:	6f 01       	movw	r12, r30
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	b3 01       	movw	r22, r6
    24f2:	0e 94 8e 13 	call	0x271c	; 0x271c <fputc>
    24f6:	e1 10       	cpse	r14, r1
    24f8:	ea 94       	dec	r14
    24fa:	01 50       	subi	r16, 0x01	; 1
    24fc:	10 40       	sbci	r17, 0x00	; 0
    24fe:	01 15       	cp	r16, r1
    2500:	11 05       	cpc	r17, r1
    2502:	79 f7       	brne	.-34     	; 0x24e2 <vfprintf+0x1ac>
    2504:	ea c0       	rjmp	.+468    	; 0x26da <vfprintf+0x3a4>
    2506:	94 36       	cpi	r25, 0x64	; 100
    2508:	11 f0       	breq	.+4      	; 0x250e <vfprintf+0x1d8>
    250a:	99 36       	cpi	r25, 0x69	; 105
    250c:	69 f5       	brne	.+90     	; 0x2568 <vfprintf+0x232>
    250e:	f7 fe       	sbrs	r15, 7
    2510:	08 c0       	rjmp	.+16     	; 0x2522 <vfprintf+0x1ec>
    2512:	f5 01       	movw	r30, r10
    2514:	20 81       	ld	r18, Z
    2516:	31 81       	ldd	r19, Z+1	; 0x01
    2518:	42 81       	ldd	r20, Z+2	; 0x02
    251a:	53 81       	ldd	r21, Z+3	; 0x03
    251c:	84 e0       	ldi	r24, 0x04	; 4
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	0a c0       	rjmp	.+20     	; 0x2536 <vfprintf+0x200>
    2522:	f5 01       	movw	r30, r10
    2524:	80 81       	ld	r24, Z
    2526:	91 81       	ldd	r25, Z+1	; 0x01
    2528:	9c 01       	movw	r18, r24
    252a:	44 27       	eor	r20, r20
    252c:	37 fd       	sbrc	r19, 7
    252e:	40 95       	com	r20
    2530:	54 2f       	mov	r21, r20
    2532:	82 e0       	ldi	r24, 0x02	; 2
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	a8 0e       	add	r10, r24
    2538:	b9 1e       	adc	r11, r25
    253a:	9f e6       	ldi	r25, 0x6F	; 111
    253c:	f9 22       	and	r15, r25
    253e:	57 ff       	sbrs	r21, 7
    2540:	09 c0       	rjmp	.+18     	; 0x2554 <vfprintf+0x21e>
    2542:	50 95       	com	r21
    2544:	40 95       	com	r20
    2546:	30 95       	com	r19
    2548:	21 95       	neg	r18
    254a:	3f 4f       	sbci	r19, 0xFF	; 255
    254c:	4f 4f       	sbci	r20, 0xFF	; 255
    254e:	5f 4f       	sbci	r21, 0xFF	; 255
    2550:	e0 e8       	ldi	r30, 0x80	; 128
    2552:	fe 2a       	or	r15, r30
    2554:	ca 01       	movw	r24, r20
    2556:	b9 01       	movw	r22, r18
    2558:	a1 01       	movw	r20, r2
    255a:	2a e0       	ldi	r18, 0x0A	; 10
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	0e 94 ba 13 	call	0x2774	; 0x2774 <__ultoa_invert>
    2562:	d8 2e       	mov	r13, r24
    2564:	d2 18       	sub	r13, r2
    2566:	40 c0       	rjmp	.+128    	; 0x25e8 <vfprintf+0x2b2>
    2568:	95 37       	cpi	r25, 0x75	; 117
    256a:	29 f4       	brne	.+10     	; 0x2576 <vfprintf+0x240>
    256c:	1f 2d       	mov	r17, r15
    256e:	1f 7e       	andi	r17, 0xEF	; 239
    2570:	2a e0       	ldi	r18, 0x0A	; 10
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	1d c0       	rjmp	.+58     	; 0x25b0 <vfprintf+0x27a>
    2576:	1f 2d       	mov	r17, r15
    2578:	19 7f       	andi	r17, 0xF9	; 249
    257a:	9f 36       	cpi	r25, 0x6F	; 111
    257c:	61 f0       	breq	.+24     	; 0x2596 <vfprintf+0x260>
    257e:	90 37       	cpi	r25, 0x70	; 112
    2580:	20 f4       	brcc	.+8      	; 0x258a <vfprintf+0x254>
    2582:	98 35       	cpi	r25, 0x58	; 88
    2584:	09 f0       	breq	.+2      	; 0x2588 <vfprintf+0x252>
    2586:	ac c0       	rjmp	.+344    	; 0x26e0 <vfprintf+0x3aa>
    2588:	0f c0       	rjmp	.+30     	; 0x25a8 <vfprintf+0x272>
    258a:	90 37       	cpi	r25, 0x70	; 112
    258c:	39 f0       	breq	.+14     	; 0x259c <vfprintf+0x266>
    258e:	98 37       	cpi	r25, 0x78	; 120
    2590:	09 f0       	breq	.+2      	; 0x2594 <vfprintf+0x25e>
    2592:	a6 c0       	rjmp	.+332    	; 0x26e0 <vfprintf+0x3aa>
    2594:	04 c0       	rjmp	.+8      	; 0x259e <vfprintf+0x268>
    2596:	28 e0       	ldi	r18, 0x08	; 8
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	0a c0       	rjmp	.+20     	; 0x25b0 <vfprintf+0x27a>
    259c:	10 61       	ori	r17, 0x10	; 16
    259e:	14 fd       	sbrc	r17, 4
    25a0:	14 60       	ori	r17, 0x04	; 4
    25a2:	20 e1       	ldi	r18, 0x10	; 16
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	04 c0       	rjmp	.+8      	; 0x25b0 <vfprintf+0x27a>
    25a8:	14 fd       	sbrc	r17, 4
    25aa:	16 60       	ori	r17, 0x06	; 6
    25ac:	20 e1       	ldi	r18, 0x10	; 16
    25ae:	32 e0       	ldi	r19, 0x02	; 2
    25b0:	17 ff       	sbrs	r17, 7
    25b2:	08 c0       	rjmp	.+16     	; 0x25c4 <vfprintf+0x28e>
    25b4:	f5 01       	movw	r30, r10
    25b6:	60 81       	ld	r22, Z
    25b8:	71 81       	ldd	r23, Z+1	; 0x01
    25ba:	82 81       	ldd	r24, Z+2	; 0x02
    25bc:	93 81       	ldd	r25, Z+3	; 0x03
    25be:	44 e0       	ldi	r20, 0x04	; 4
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	08 c0       	rjmp	.+16     	; 0x25d4 <vfprintf+0x29e>
    25c4:	f5 01       	movw	r30, r10
    25c6:	80 81       	ld	r24, Z
    25c8:	91 81       	ldd	r25, Z+1	; 0x01
    25ca:	bc 01       	movw	r22, r24
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	42 e0       	ldi	r20, 0x02	; 2
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	a4 0e       	add	r10, r20
    25d6:	b5 1e       	adc	r11, r21
    25d8:	a1 01       	movw	r20, r2
    25da:	0e 94 ba 13 	call	0x2774	; 0x2774 <__ultoa_invert>
    25de:	d8 2e       	mov	r13, r24
    25e0:	d2 18       	sub	r13, r2
    25e2:	8f e7       	ldi	r24, 0x7F	; 127
    25e4:	f8 2e       	mov	r15, r24
    25e6:	f1 22       	and	r15, r17
    25e8:	f6 fe       	sbrs	r15, 6
    25ea:	0b c0       	rjmp	.+22     	; 0x2602 <vfprintf+0x2cc>
    25ec:	5e ef       	ldi	r21, 0xFE	; 254
    25ee:	f5 22       	and	r15, r21
    25f0:	d9 14       	cp	r13, r9
    25f2:	38 f4       	brcc	.+14     	; 0x2602 <vfprintf+0x2cc>
    25f4:	f4 fe       	sbrs	r15, 4
    25f6:	07 c0       	rjmp	.+14     	; 0x2606 <vfprintf+0x2d0>
    25f8:	f2 fc       	sbrc	r15, 2
    25fa:	05 c0       	rjmp	.+10     	; 0x2606 <vfprintf+0x2d0>
    25fc:	8f ee       	ldi	r24, 0xEF	; 239
    25fe:	f8 22       	and	r15, r24
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <vfprintf+0x2d0>
    2602:	1d 2d       	mov	r17, r13
    2604:	01 c0       	rjmp	.+2      	; 0x2608 <vfprintf+0x2d2>
    2606:	19 2d       	mov	r17, r9
    2608:	f4 fe       	sbrs	r15, 4
    260a:	0d c0       	rjmp	.+26     	; 0x2626 <vfprintf+0x2f0>
    260c:	fe 01       	movw	r30, r28
    260e:	ed 0d       	add	r30, r13
    2610:	f1 1d       	adc	r31, r1
    2612:	80 81       	ld	r24, Z
    2614:	80 33       	cpi	r24, 0x30	; 48
    2616:	19 f4       	brne	.+6      	; 0x261e <vfprintf+0x2e8>
    2618:	99 ee       	ldi	r25, 0xE9	; 233
    261a:	f9 22       	and	r15, r25
    261c:	08 c0       	rjmp	.+16     	; 0x262e <vfprintf+0x2f8>
    261e:	1f 5f       	subi	r17, 0xFF	; 255
    2620:	f2 fe       	sbrs	r15, 2
    2622:	05 c0       	rjmp	.+10     	; 0x262e <vfprintf+0x2f8>
    2624:	03 c0       	rjmp	.+6      	; 0x262c <vfprintf+0x2f6>
    2626:	8f 2d       	mov	r24, r15
    2628:	86 78       	andi	r24, 0x86	; 134
    262a:	09 f0       	breq	.+2      	; 0x262e <vfprintf+0x2f8>
    262c:	1f 5f       	subi	r17, 0xFF	; 255
    262e:	0f 2d       	mov	r16, r15
    2630:	f3 fc       	sbrc	r15, 3
    2632:	14 c0       	rjmp	.+40     	; 0x265c <vfprintf+0x326>
    2634:	f0 fe       	sbrs	r15, 0
    2636:	0f c0       	rjmp	.+30     	; 0x2656 <vfprintf+0x320>
    2638:	1e 15       	cp	r17, r14
    263a:	10 f0       	brcs	.+4      	; 0x2640 <vfprintf+0x30a>
    263c:	9d 2c       	mov	r9, r13
    263e:	0b c0       	rjmp	.+22     	; 0x2656 <vfprintf+0x320>
    2640:	9d 2c       	mov	r9, r13
    2642:	9e 0c       	add	r9, r14
    2644:	91 1a       	sub	r9, r17
    2646:	1e 2d       	mov	r17, r14
    2648:	06 c0       	rjmp	.+12     	; 0x2656 <vfprintf+0x320>
    264a:	80 e2       	ldi	r24, 0x20	; 32
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	b3 01       	movw	r22, r6
    2650:	0e 94 8e 13 	call	0x271c	; 0x271c <fputc>
    2654:	1f 5f       	subi	r17, 0xFF	; 255
    2656:	1e 15       	cp	r17, r14
    2658:	c0 f3       	brcs	.-16     	; 0x264a <vfprintf+0x314>
    265a:	04 c0       	rjmp	.+8      	; 0x2664 <vfprintf+0x32e>
    265c:	1e 15       	cp	r17, r14
    265e:	10 f4       	brcc	.+4      	; 0x2664 <vfprintf+0x32e>
    2660:	e1 1a       	sub	r14, r17
    2662:	01 c0       	rjmp	.+2      	; 0x2666 <vfprintf+0x330>
    2664:	ee 24       	eor	r14, r14
    2666:	04 ff       	sbrs	r16, 4
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <vfprintf+0x352>
    266a:	80 e3       	ldi	r24, 0x30	; 48
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	b3 01       	movw	r22, r6
    2670:	0e 94 8e 13 	call	0x271c	; 0x271c <fputc>
    2674:	02 ff       	sbrs	r16, 2
    2676:	1d c0       	rjmp	.+58     	; 0x26b2 <vfprintf+0x37c>
    2678:	01 fd       	sbrc	r16, 1
    267a:	03 c0       	rjmp	.+6      	; 0x2682 <vfprintf+0x34c>
    267c:	88 e7       	ldi	r24, 0x78	; 120
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	0e c0       	rjmp	.+28     	; 0x269e <vfprintf+0x368>
    2682:	88 e5       	ldi	r24, 0x58	; 88
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0b c0       	rjmp	.+22     	; 0x269e <vfprintf+0x368>
    2688:	80 2f       	mov	r24, r16
    268a:	86 78       	andi	r24, 0x86	; 134
    268c:	91 f0       	breq	.+36     	; 0x26b2 <vfprintf+0x37c>
    268e:	01 ff       	sbrs	r16, 1
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <vfprintf+0x360>
    2692:	8b e2       	ldi	r24, 0x2B	; 43
    2694:	01 c0       	rjmp	.+2      	; 0x2698 <vfprintf+0x362>
    2696:	80 e2       	ldi	r24, 0x20	; 32
    2698:	f7 fc       	sbrc	r15, 7
    269a:	8d e2       	ldi	r24, 0x2D	; 45
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	b3 01       	movw	r22, r6
    26a0:	0e 94 8e 13 	call	0x271c	; 0x271c <fputc>
    26a4:	06 c0       	rjmp	.+12     	; 0x26b2 <vfprintf+0x37c>
    26a6:	80 e3       	ldi	r24, 0x30	; 48
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	b3 01       	movw	r22, r6
    26ac:	0e 94 8e 13 	call	0x271c	; 0x271c <fputc>
    26b0:	9a 94       	dec	r9
    26b2:	d9 14       	cp	r13, r9
    26b4:	c0 f3       	brcs	.-16     	; 0x26a6 <vfprintf+0x370>
    26b6:	da 94       	dec	r13
    26b8:	f1 01       	movw	r30, r2
    26ba:	ed 0d       	add	r30, r13
    26bc:	f1 1d       	adc	r31, r1
    26be:	80 81       	ld	r24, Z
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	b3 01       	movw	r22, r6
    26c4:	0e 94 8e 13 	call	0x271c	; 0x271c <fputc>
    26c8:	dd 20       	and	r13, r13
    26ca:	a9 f7       	brne	.-22     	; 0x26b6 <vfprintf+0x380>
    26cc:	06 c0       	rjmp	.+12     	; 0x26da <vfprintf+0x3a4>
    26ce:	80 e2       	ldi	r24, 0x20	; 32
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	b3 01       	movw	r22, r6
    26d4:	0e 94 8e 13 	call	0x271c	; 0x271c <fputc>
    26d8:	ea 94       	dec	r14
    26da:	ee 20       	and	r14, r14
    26dc:	c1 f7       	brne	.-16     	; 0x26ce <vfprintf+0x398>
    26de:	43 ce       	rjmp	.-890    	; 0x2366 <vfprintf+0x30>
    26e0:	f3 01       	movw	r30, r6
    26e2:	66 81       	ldd	r22, Z+6	; 0x06
    26e4:	77 81       	ldd	r23, Z+7	; 0x07
    26e6:	cb 01       	movw	r24, r22
    26e8:	2b 96       	adiw	r28, 0x0b	; 11
    26ea:	e2 e1       	ldi	r30, 0x12	; 18
    26ec:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__>

000026f0 <strnlen_P>:
    26f0:	fc 01       	movw	r30, r24
    26f2:	05 90       	lpm	r0, Z+
    26f4:	61 50       	subi	r22, 0x01	; 1
    26f6:	70 40       	sbci	r23, 0x00	; 0
    26f8:	01 10       	cpse	r0, r1
    26fa:	d8 f7       	brcc	.-10     	; 0x26f2 <strnlen_P+0x2>
    26fc:	80 95       	com	r24
    26fe:	90 95       	com	r25
    2700:	8e 0f       	add	r24, r30
    2702:	9f 1f       	adc	r25, r31
    2704:	08 95       	ret

00002706 <strnlen>:
    2706:	fc 01       	movw	r30, r24
    2708:	61 50       	subi	r22, 0x01	; 1
    270a:	70 40       	sbci	r23, 0x00	; 0
    270c:	01 90       	ld	r0, Z+
    270e:	01 10       	cpse	r0, r1
    2710:	d8 f7       	brcc	.-10     	; 0x2708 <strnlen+0x2>
    2712:	80 95       	com	r24
    2714:	90 95       	com	r25
    2716:	8e 0f       	add	r24, r30
    2718:	9f 1f       	adc	r25, r31
    271a:	08 95       	ret

0000271c <fputc>:
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	8c 01       	movw	r16, r24
    2726:	eb 01       	movw	r28, r22
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	81 ff       	sbrs	r24, 1
    272c:	1b c0       	rjmp	.+54     	; 0x2764 <fputc+0x48>
    272e:	82 ff       	sbrs	r24, 2
    2730:	0d c0       	rjmp	.+26     	; 0x274c <fputc+0x30>
    2732:	2e 81       	ldd	r18, Y+6	; 0x06
    2734:	3f 81       	ldd	r19, Y+7	; 0x07
    2736:	8c 81       	ldd	r24, Y+4	; 0x04
    2738:	9d 81       	ldd	r25, Y+5	; 0x05
    273a:	28 17       	cp	r18, r24
    273c:	39 07       	cpc	r19, r25
    273e:	64 f4       	brge	.+24     	; 0x2758 <fputc+0x3c>
    2740:	e8 81       	ld	r30, Y
    2742:	f9 81       	ldd	r31, Y+1	; 0x01
    2744:	01 93       	st	Z+, r16
    2746:	f9 83       	std	Y+1, r31	; 0x01
    2748:	e8 83       	st	Y, r30
    274a:	06 c0       	rjmp	.+12     	; 0x2758 <fputc+0x3c>
    274c:	e8 85       	ldd	r30, Y+8	; 0x08
    274e:	f9 85       	ldd	r31, Y+9	; 0x09
    2750:	80 2f       	mov	r24, r16
    2752:	09 95       	icall
    2754:	89 2b       	or	r24, r25
    2756:	31 f4       	brne	.+12     	; 0x2764 <fputc+0x48>
    2758:	8e 81       	ldd	r24, Y+6	; 0x06
    275a:	9f 81       	ldd	r25, Y+7	; 0x07
    275c:	01 96       	adiw	r24, 0x01	; 1
    275e:	9f 83       	std	Y+7, r25	; 0x07
    2760:	8e 83       	std	Y+6, r24	; 0x06
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <fputc+0x4c>
    2764:	0f ef       	ldi	r16, 0xFF	; 255
    2766:	1f ef       	ldi	r17, 0xFF	; 255
    2768:	c8 01       	movw	r24, r16
    276a:	df 91       	pop	r29
    276c:	cf 91       	pop	r28
    276e:	1f 91       	pop	r17
    2770:	0f 91       	pop	r16
    2772:	08 95       	ret

00002774 <__ultoa_invert>:
    2774:	fa 01       	movw	r30, r20
    2776:	aa 27       	eor	r26, r26
    2778:	28 30       	cpi	r18, 0x08	; 8
    277a:	51 f1       	breq	.+84     	; 0x27d0 <__ultoa_invert+0x5c>
    277c:	20 31       	cpi	r18, 0x10	; 16
    277e:	81 f1       	breq	.+96     	; 0x27e0 <__ultoa_invert+0x6c>
    2780:	e8 94       	clt
    2782:	6f 93       	push	r22
    2784:	6e 7f       	andi	r22, 0xFE	; 254
    2786:	6e 5f       	subi	r22, 0xFE	; 254
    2788:	7f 4f       	sbci	r23, 0xFF	; 255
    278a:	8f 4f       	sbci	r24, 0xFF	; 255
    278c:	9f 4f       	sbci	r25, 0xFF	; 255
    278e:	af 4f       	sbci	r26, 0xFF	; 255
    2790:	b1 e0       	ldi	r27, 0x01	; 1
    2792:	3e d0       	rcall	.+124    	; 0x2810 <__ultoa_invert+0x9c>
    2794:	b4 e0       	ldi	r27, 0x04	; 4
    2796:	3c d0       	rcall	.+120    	; 0x2810 <__ultoa_invert+0x9c>
    2798:	67 0f       	add	r22, r23
    279a:	78 1f       	adc	r23, r24
    279c:	89 1f       	adc	r24, r25
    279e:	9a 1f       	adc	r25, r26
    27a0:	a1 1d       	adc	r26, r1
    27a2:	68 0f       	add	r22, r24
    27a4:	79 1f       	adc	r23, r25
    27a6:	8a 1f       	adc	r24, r26
    27a8:	91 1d       	adc	r25, r1
    27aa:	a1 1d       	adc	r26, r1
    27ac:	6a 0f       	add	r22, r26
    27ae:	71 1d       	adc	r23, r1
    27b0:	81 1d       	adc	r24, r1
    27b2:	91 1d       	adc	r25, r1
    27b4:	a1 1d       	adc	r26, r1
    27b6:	20 d0       	rcall	.+64     	; 0x27f8 <__ultoa_invert+0x84>
    27b8:	09 f4       	brne	.+2      	; 0x27bc <__ultoa_invert+0x48>
    27ba:	68 94       	set
    27bc:	3f 91       	pop	r19
    27be:	2a e0       	ldi	r18, 0x0A	; 10
    27c0:	26 9f       	mul	r18, r22
    27c2:	11 24       	eor	r1, r1
    27c4:	30 19       	sub	r19, r0
    27c6:	30 5d       	subi	r19, 0xD0	; 208
    27c8:	31 93       	st	Z+, r19
    27ca:	de f6       	brtc	.-74     	; 0x2782 <__ultoa_invert+0xe>
    27cc:	cf 01       	movw	r24, r30
    27ce:	08 95       	ret
    27d0:	46 2f       	mov	r20, r22
    27d2:	47 70       	andi	r20, 0x07	; 7
    27d4:	40 5d       	subi	r20, 0xD0	; 208
    27d6:	41 93       	st	Z+, r20
    27d8:	b3 e0       	ldi	r27, 0x03	; 3
    27da:	0f d0       	rcall	.+30     	; 0x27fa <__ultoa_invert+0x86>
    27dc:	c9 f7       	brne	.-14     	; 0x27d0 <__ultoa_invert+0x5c>
    27de:	f6 cf       	rjmp	.-20     	; 0x27cc <__ultoa_invert+0x58>
    27e0:	46 2f       	mov	r20, r22
    27e2:	4f 70       	andi	r20, 0x0F	; 15
    27e4:	40 5d       	subi	r20, 0xD0	; 208
    27e6:	4a 33       	cpi	r20, 0x3A	; 58
    27e8:	18 f0       	brcs	.+6      	; 0x27f0 <__ultoa_invert+0x7c>
    27ea:	49 5d       	subi	r20, 0xD9	; 217
    27ec:	31 fd       	sbrc	r19, 1
    27ee:	40 52       	subi	r20, 0x20	; 32
    27f0:	41 93       	st	Z+, r20
    27f2:	02 d0       	rcall	.+4      	; 0x27f8 <__ultoa_invert+0x84>
    27f4:	a9 f7       	brne	.-22     	; 0x27e0 <__ultoa_invert+0x6c>
    27f6:	ea cf       	rjmp	.-44     	; 0x27cc <__ultoa_invert+0x58>
    27f8:	b4 e0       	ldi	r27, 0x04	; 4
    27fa:	a6 95       	lsr	r26
    27fc:	97 95       	ror	r25
    27fe:	87 95       	ror	r24
    2800:	77 95       	ror	r23
    2802:	67 95       	ror	r22
    2804:	ba 95       	dec	r27
    2806:	c9 f7       	brne	.-14     	; 0x27fa <__ultoa_invert+0x86>
    2808:	00 97       	sbiw	r24, 0x00	; 0
    280a:	61 05       	cpc	r22, r1
    280c:	71 05       	cpc	r23, r1
    280e:	08 95       	ret
    2810:	9b 01       	movw	r18, r22
    2812:	ac 01       	movw	r20, r24
    2814:	0a 2e       	mov	r0, r26
    2816:	06 94       	lsr	r0
    2818:	57 95       	ror	r21
    281a:	47 95       	ror	r20
    281c:	37 95       	ror	r19
    281e:	27 95       	ror	r18
    2820:	ba 95       	dec	r27
    2822:	c9 f7       	brne	.-14     	; 0x2816 <__ultoa_invert+0xa2>
    2824:	62 0f       	add	r22, r18
    2826:	73 1f       	adc	r23, r19
    2828:	84 1f       	adc	r24, r20
    282a:	95 1f       	adc	r25, r21
    282c:	a0 1d       	adc	r26, r0
    282e:	08 95       	ret

00002830 <_exit>:
    2830:	f8 94       	cli

00002832 <__stop_program>:
    2832:	ff cf       	rjmp	.-2      	; 0x2832 <__stop_program>
