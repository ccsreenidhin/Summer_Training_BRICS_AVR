
lcd3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002918  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00002918  0000298c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000029c4  00000000  00000000  000029ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010c4  00000000  00000000  00005370  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001c9  00000000  00000000  000065d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022af  00000000  00000000  0000679d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001267  00000000  00000000  00008a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013c7  00000000  00000000  00009cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b07c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  0000b23c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c9d  00000000  00000000  0000b663  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000c300  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d4 e0       	ldi	r29, 0x04	; 4
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	e8 e1       	ldi	r30, 0x18	; 24
      a8:	f9 e2       	ldi	r31, 0x29	; 41
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
      b0:	ae 37       	cpi	r26, 0x7E	; 126
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>
      b6:	0e 94 98 00 	call	0x130	; 0x130 <main>
      ba:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <read_adc>:

#define ADC_VREF_TYPE 0x00

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	0f 92       	push	r0
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
      cc:	89 83       	std	Y+1, r24	; 0x01
ADMUX=adc_input|ADC_VREF_TYPE;
      ce:	e7 e2       	ldi	r30, 0x27	; 39
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	89 81       	ldd	r24, Y+1	; 0x01
      d4:	80 83       	st	Z, r24
// Start the AD conversion
ADCSRA|=0x40;
      d6:	a6 e2       	ldi	r26, 0x26	; 38
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e6 e2       	ldi	r30, 0x26	; 38
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	80 64       	ori	r24, 0x40	; 64
      e2:	8c 93       	st	X, r24
// Wait for the AD conversion to complete
while ((ADCSRA & 0x10)==0);
      e4:	e6 e2       	ldi	r30, 0x26	; 38
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	88 2f       	mov	r24, r24
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	80 71       	andi	r24, 0x10	; 16
      f0:	90 70       	andi	r25, 0x00	; 0
      f2:	00 97       	sbiw	r24, 0x00	; 0
      f4:	b9 f3       	breq	.-18     	; 0xe4 <read_adc+0x22>
ADCSRA|=0x10;
      f6:	a6 e2       	ldi	r26, 0x26	; 38
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e6 e2       	ldi	r30, 0x26	; 38
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	80 81       	ld	r24, Z
     100:	80 61       	ori	r24, 0x10	; 16
     102:	8c 93       	st	X, r24
return ADCW;
     104:	e4 e2       	ldi	r30, 0x24	; 36
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	80 81       	ld	r24, Z
     10a:	91 81       	ldd	r25, Z+1	; 0x01
}
     10c:	0f 90       	pop	r0
     10e:	cf 91       	pop	r28
     110:	df 91       	pop	r29
     112:	08 95       	ret

00000114 <ADCinit>:




void ADCinit()
{
     114:	df 93       	push	r29
     116:	cf 93       	push	r28
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
ADMUX=0b00000000;
     11c:	e7 e2       	ldi	r30, 0x27	; 39
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	10 82       	st	Z, r1
ADCSRA=0x85;
     122:	e6 e2       	ldi	r30, 0x26	; 38
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	85 e8       	ldi	r24, 0x85	; 133
     128:	80 83       	st	Z, r24
}
     12a:	cf 91       	pop	r28
     12c:	df 91       	pop	r29
     12e:	08 95       	ret

00000130 <main>:
 */

#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>
main() {
     130:	df 93       	push	r29
     132:	cf 93       	push	r28
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	ae 97       	sbiw	r28, 0x2e	; 46
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
     144:	18 8a       	std	Y+16, r1	; 0x10
     146:	1f 86       	std	Y+15, r1	; 0x0f
	char A[30] = "";
     148:	19 8a       	std	Y+17, r1	; 0x11
     14a:	1a 8a       	std	Y+18, r1	; 0x12
     14c:	1b 8a       	std	Y+19, r1	; 0x13
     14e:	1c 8a       	std	Y+20, r1	; 0x14
     150:	8a e1       	ldi	r24, 0x1A	; 26
     152:	fe 01       	movw	r30, r28
     154:	75 96       	adiw	r30, 0x15	; 21
     156:	df 01       	movw	r26, r30
     158:	28 2f       	mov	r18, r24
     15a:	1d 92       	st	X+, r1
     15c:	2a 95       	dec	r18
     15e:	e9 f7       	brne	.-6      	; 0x15a <main+0x2a>
	LCDinit();
     160:	0e 94 98 05 	call	0xb30	; 0xb30 <LCDinit>
	LCDclr();
     164:	0e 94 e6 09 	call	0x13cc	; 0x13cc <LCDclr>
	ADCinit();
     168:	0e 94 8a 00 	call	0x114	; 0x114 <ADCinit>
	while (1) {
		i=read_adc(0);
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 61 00 	call	0xc2	; 0xc2 <read_adc>
     174:	98 8b       	std	Y+16, r25	; 0x10
     176:	8f 87       	std	Y+15, r24	; 0x0f
		LCDGotoXY(0, 0);
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	70 e0       	ldi	r23, 0x00	; 0
     180:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCDGotoXY>
		sprintf(A, "value= %d", i);
     184:	00 d0       	rcall	.+0      	; 0x186 <main+0x56>
     186:	00 d0       	rcall	.+0      	; 0x188 <main+0x58>
     188:	00 d0       	rcall	.+0      	; 0x18a <main+0x5a>
     18a:	ed b7       	in	r30, 0x3d	; 61
     18c:	fe b7       	in	r31, 0x3e	; 62
     18e:	31 96       	adiw	r30, 0x01	; 1
     190:	ce 01       	movw	r24, r28
     192:	41 96       	adiw	r24, 0x11	; 17
     194:	91 83       	std	Z+1, r25	; 0x01
     196:	80 83       	st	Z, r24
     198:	80 e6       	ldi	r24, 0x60	; 96
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	93 83       	std	Z+3, r25	; 0x03
     19e:	82 83       	std	Z+2, r24	; 0x02
     1a0:	8f 85       	ldd	r24, Y+15	; 0x0f
     1a2:	98 89       	ldd	r25, Y+16	; 0x10
     1a4:	95 83       	std	Z+5, r25	; 0x05
     1a6:	84 83       	std	Z+4, r24	; 0x04
     1a8:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <sprintf>
     1ac:	8d b7       	in	r24, 0x3d	; 61
     1ae:	9e b7       	in	r25, 0x3e	; 62
     1b0:	06 96       	adiw	r24, 0x06	; 6
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	9e bf       	out	0x3e, r25	; 62
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	8d bf       	out	0x3d, r24	; 61
		LCDdisplay(A);
     1bc:	ce 01       	movw	r24, r28
     1be:	41 96       	adiw	r24, 0x11	; 17
     1c0:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCDdisplay>
		LCDGotoXY(3, 1);
     1c4:	83 e0       	ldi	r24, 0x03	; 3
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	61 e0       	ldi	r22, 0x01	; 1
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCDGotoXY>
		if(i>500)
     1d0:	8f 85       	ldd	r24, Y+15	; 0x0f
     1d2:	98 89       	ldd	r25, Y+16	; 0x10
     1d4:	a1 e0       	ldi	r26, 0x01	; 1
     1d6:	85 3f       	cpi	r24, 0xF5	; 245
     1d8:	9a 07       	cpc	r25, r26
     1da:	2c f0       	brlt	.+10     	; 0x1e6 <main+0xb6>
		LCDdisplay("BLACK");
     1dc:	8a e6       	ldi	r24, 0x6A	; 106
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCDdisplay>
     1e4:	04 c0       	rjmp	.+8      	; 0x1ee <main+0xbe>
		else
			LCDdisplay("white");
     1e6:	80 e7       	ldi	r24, 0x70	; 112
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCDdisplay>
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	a8 ec       	ldi	r26, 0xC8	; 200
     1f4:	b2 e4       	ldi	r27, 0x42	; 66
     1f6:	8b 87       	std	Y+11, r24	; 0x0b
     1f8:	9c 87       	std	Y+12, r25	; 0x0c
     1fa:	ad 87       	std	Y+13, r26	; 0x0d
     1fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     1fe:	6b 85       	ldd	r22, Y+11	; 0x0b
     200:	7c 85       	ldd	r23, Y+12	; 0x0c
     202:	8d 85       	ldd	r24, Y+13	; 0x0d
     204:	9e 85       	ldd	r25, Y+14	; 0x0e
     206:	20 e0       	ldi	r18, 0x00	; 0
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	4a e7       	ldi	r20, 0x7A	; 122
     20c:	54 e4       	ldi	r21, 0x44	; 68
     20e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     212:	dc 01       	movw	r26, r24
     214:	cb 01       	movw	r24, r22
     216:	8f 83       	std	Y+7, r24	; 0x07
     218:	98 87       	std	Y+8, r25	; 0x08
     21a:	a9 87       	std	Y+9, r26	; 0x09
     21c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     21e:	6f 81       	ldd	r22, Y+7	; 0x07
     220:	78 85       	ldd	r23, Y+8	; 0x08
     222:	89 85       	ldd	r24, Y+9	; 0x09
     224:	9a 85       	ldd	r25, Y+10	; 0x0a
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	40 e8       	ldi	r20, 0x80	; 128
     22c:	5f e3       	ldi	r21, 0x3F	; 63
     22e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
     232:	88 23       	and	r24, r24
     234:	2c f4       	brge	.+10     	; 0x240 <main+0x110>
		__ticks = 1;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	9e 83       	std	Y+6, r25	; 0x06
     23c:	8d 83       	std	Y+5, r24	; 0x05
     23e:	3f c0       	rjmp	.+126    	; 0x2be <main+0x18e>
	else if (__tmp > 65535)
     240:	6f 81       	ldd	r22, Y+7	; 0x07
     242:	78 85       	ldd	r23, Y+8	; 0x08
     244:	89 85       	ldd	r24, Y+9	; 0x09
     246:	9a 85       	ldd	r25, Y+10	; 0x0a
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	3f ef       	ldi	r19, 0xFF	; 255
     24c:	4f e7       	ldi	r20, 0x7F	; 127
     24e:	57 e4       	ldi	r21, 0x47	; 71
     250:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
     254:	18 16       	cp	r1, r24
     256:	4c f5       	brge	.+82     	; 0x2aa <main+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     258:	6b 85       	ldd	r22, Y+11	; 0x0b
     25a:	7c 85       	ldd	r23, Y+12	; 0x0c
     25c:	8d 85       	ldd	r24, Y+13	; 0x0d
     25e:	9e 85       	ldd	r25, Y+14	; 0x0e
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	40 e2       	ldi	r20, 0x20	; 32
     266:	51 e4       	ldi	r21, 0x41	; 65
     268:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     26c:	dc 01       	movw	r26, r24
     26e:	cb 01       	movw	r24, r22
     270:	bc 01       	movw	r22, r24
     272:	cd 01       	movw	r24, r26
     274:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     278:	dc 01       	movw	r26, r24
     27a:	cb 01       	movw	r24, r22
     27c:	9e 83       	std	Y+6, r25	; 0x06
     27e:	8d 83       	std	Y+5, r24	; 0x05
     280:	0f c0       	rjmp	.+30     	; 0x2a0 <main+0x170>
     282:	84 e6       	ldi	r24, 0x64	; 100
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	9c 83       	std	Y+4, r25	; 0x04
     288:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     28a:	8b 81       	ldd	r24, Y+3	; 0x03
     28c:	9c 81       	ldd	r25, Y+4	; 0x04
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <main+0x15e>
     292:	9c 83       	std	Y+4, r25	; 0x04
     294:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     296:	8d 81       	ldd	r24, Y+5	; 0x05
     298:	9e 81       	ldd	r25, Y+6	; 0x06
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	9e 83       	std	Y+6, r25	; 0x06
     29e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2a0:	8d 81       	ldd	r24, Y+5	; 0x05
     2a2:	9e 81       	ldd	r25, Y+6	; 0x06
     2a4:	00 97       	sbiw	r24, 0x00	; 0
     2a6:	69 f7       	brne	.-38     	; 0x282 <main+0x152>
     2a8:	61 cf       	rjmp	.-318    	; 0x16c <main+0x3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2aa:	6f 81       	ldd	r22, Y+7	; 0x07
     2ac:	78 85       	ldd	r23, Y+8	; 0x08
     2ae:	89 85       	ldd	r24, Y+9	; 0x09
     2b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     2b2:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     2b6:	dc 01       	movw	r26, r24
     2b8:	cb 01       	movw	r24, r22
     2ba:	9e 83       	std	Y+6, r25	; 0x06
     2bc:	8d 83       	std	Y+5, r24	; 0x05
     2be:	8d 81       	ldd	r24, Y+5	; 0x05
     2c0:	9e 81       	ldd	r25, Y+6	; 0x06
     2c2:	9a 83       	std	Y+2, r25	; 0x02
     2c4:	89 83       	std	Y+1, r24	; 0x01
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <main+0x19a>
     2ce:	9a 83       	std	Y+2, r25	; 0x02
     2d0:	89 83       	std	Y+1, r24	; 0x01
     2d2:	4c cf       	rjmp	.-360    	; 0x16c <main+0x3c>

000002d4 <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     2d4:	df 93       	push	r29
     2d6:	cf 93       	push	r28
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
     2dc:	e9 97       	sbiw	r28, 0x39	; 57
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	f8 94       	cli
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	cd bf       	out	0x3d, r28	; 61
     2e8:	89 af       	std	Y+57, r24	; 0x39

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     2ea:	e5 e3       	ldi	r30, 0x35	; 53
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	89 ad       	ldd	r24, Y+57	; 0x39
     2f0:	80 7f       	andi	r24, 0xF0	; 240
     2f2:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     2f4:	a5 e3       	ldi	r26, 0x35	; 53
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	e5 e3       	ldi	r30, 0x35	; 53
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	80 81       	ld	r24, Z
     2fe:	81 60       	ori	r24, 0x01	; 1
     300:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     302:	a5 e3       	ldi	r26, 0x35	; 53
     304:	b0 e0       	ldi	r27, 0x00	; 0
     306:	e5 e3       	ldi	r30, 0x35	; 53
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	80 81       	ld	r24, Z
     30c:	84 60       	ori	r24, 0x04	; 4
     30e:	8c 93       	st	X, r24
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	a0 e8       	ldi	r26, 0x80	; 128
     316:	bf e3       	ldi	r27, 0x3F	; 63
     318:	8d ab       	std	Y+53, r24	; 0x35
     31a:	9e ab       	std	Y+54, r25	; 0x36
     31c:	af ab       	std	Y+55, r26	; 0x37
     31e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     320:	6d a9       	ldd	r22, Y+53	; 0x35
     322:	7e a9       	ldd	r23, Y+54	; 0x36
     324:	8f a9       	ldd	r24, Y+55	; 0x37
     326:	98 ad       	ldd	r25, Y+56	; 0x38
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	4a e7       	ldi	r20, 0x7A	; 122
     32e:	54 e4       	ldi	r21, 0x44	; 68
     330:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	89 ab       	std	Y+49, r24	; 0x31
     33a:	9a ab       	std	Y+50, r25	; 0x32
     33c:	ab ab       	std	Y+51, r26	; 0x33
     33e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     340:	69 a9       	ldd	r22, Y+49	; 0x31
     342:	7a a9       	ldd	r23, Y+50	; 0x32
     344:	8b a9       	ldd	r24, Y+51	; 0x33
     346:	9c a9       	ldd	r25, Y+52	; 0x34
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	40 e8       	ldi	r20, 0x80	; 128
     34e:	5f e3       	ldi	r21, 0x3F	; 63
     350:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
     354:	88 23       	and	r24, r24
     356:	2c f4       	brge	.+10     	; 0x362 <LCDsendChar+0x8e>
		__ticks = 1;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	98 ab       	std	Y+48, r25	; 0x30
     35e:	8f a7       	std	Y+47, r24	; 0x2f
     360:	3f c0       	rjmp	.+126    	; 0x3e0 <LCDsendChar+0x10c>
	else if (__tmp > 65535)
     362:	69 a9       	ldd	r22, Y+49	; 0x31
     364:	7a a9       	ldd	r23, Y+50	; 0x32
     366:	8b a9       	ldd	r24, Y+51	; 0x33
     368:	9c a9       	ldd	r25, Y+52	; 0x34
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	3f ef       	ldi	r19, 0xFF	; 255
     36e:	4f e7       	ldi	r20, 0x7F	; 127
     370:	57 e4       	ldi	r21, 0x47	; 71
     372:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
     376:	18 16       	cp	r1, r24
     378:	4c f5       	brge	.+82     	; 0x3cc <LCDsendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     37a:	6d a9       	ldd	r22, Y+53	; 0x35
     37c:	7e a9       	ldd	r23, Y+54	; 0x36
     37e:	8f a9       	ldd	r24, Y+55	; 0x37
     380:	98 ad       	ldd	r25, Y+56	; 0x38
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 e2       	ldi	r20, 0x20	; 32
     388:	51 e4       	ldi	r21, 0x41	; 65
     38a:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     38e:	dc 01       	movw	r26, r24
     390:	cb 01       	movw	r24, r22
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	98 ab       	std	Y+48, r25	; 0x30
     3a0:	8f a7       	std	Y+47, r24	; 0x2f
     3a2:	0f c0       	rjmp	.+30     	; 0x3c2 <LCDsendChar+0xee>
     3a4:	84 e6       	ldi	r24, 0x64	; 100
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	9e a7       	std	Y+46, r25	; 0x2e
     3aa:	8d a7       	std	Y+45, r24	; 0x2d
     3ac:	8d a5       	ldd	r24, Y+45	; 0x2d
     3ae:	9e a5       	ldd	r25, Y+46	; 0x2e
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LCDsendChar+0xdc>
     3b4:	9e a7       	std	Y+46, r25	; 0x2e
     3b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3b8:	8f a5       	ldd	r24, Y+47	; 0x2f
     3ba:	98 a9       	ldd	r25, Y+48	; 0x30
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	98 ab       	std	Y+48, r25	; 0x30
     3c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3c2:	8f a5       	ldd	r24, Y+47	; 0x2f
     3c4:	98 a9       	ldd	r25, Y+48	; 0x30
     3c6:	00 97       	sbiw	r24, 0x00	; 0
     3c8:	69 f7       	brne	.-38     	; 0x3a4 <LCDsendChar+0xd0>
     3ca:	14 c0       	rjmp	.+40     	; 0x3f4 <LCDsendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3cc:	69 a9       	ldd	r22, Y+49	; 0x31
     3ce:	7a a9       	ldd	r23, Y+50	; 0x32
     3d0:	8b a9       	ldd	r24, Y+51	; 0x33
     3d2:	9c a9       	ldd	r25, Y+52	; 0x34
     3d4:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     3d8:	dc 01       	movw	r26, r24
     3da:	cb 01       	movw	r24, r22
     3dc:	98 ab       	std	Y+48, r25	; 0x30
     3de:	8f a7       	std	Y+47, r24	; 0x2f
     3e0:	8f a5       	ldd	r24, Y+47	; 0x2f
     3e2:	98 a9       	ldd	r25, Y+48	; 0x30
     3e4:	9c a7       	std	Y+44, r25	; 0x2c
     3e6:	8b a7       	std	Y+43, r24	; 0x2b
     3e8:	8b a5       	ldd	r24, Y+43	; 0x2b
     3ea:	9c a5       	ldd	r25, Y+44	; 0x2c
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <LCDsendChar+0x118>
     3f0:	9c a7       	std	Y+44, r25	; 0x2c
     3f2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     3f4:	a5 e3       	ldi	r26, 0x35	; 53
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	e5 e3       	ldi	r30, 0x35	; 53
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	8b 7f       	andi	r24, 0xFB	; 251
     400:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     402:	a5 e3       	ldi	r26, 0x35	; 53
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	e5 e3       	ldi	r30, 0x35	; 53
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	8e 7f       	andi	r24, 0xFE	; 254
     40e:	8c 93       	st	X, r24
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	a0 e8       	ldi	r26, 0x80	; 128
     416:	bf e3       	ldi	r27, 0x3F	; 63
     418:	8f a3       	std	Y+39, r24	; 0x27
     41a:	98 a7       	std	Y+40, r25	; 0x28
     41c:	a9 a7       	std	Y+41, r26	; 0x29
     41e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     420:	6f a1       	ldd	r22, Y+39	; 0x27
     422:	78 a5       	ldd	r23, Y+40	; 0x28
     424:	89 a5       	ldd	r24, Y+41	; 0x29
     426:	9a a5       	ldd	r25, Y+42	; 0x2a
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	4a e7       	ldi	r20, 0x7A	; 122
     42e:	54 e4       	ldi	r21, 0x44	; 68
     430:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     434:	dc 01       	movw	r26, r24
     436:	cb 01       	movw	r24, r22
     438:	8b a3       	std	Y+35, r24	; 0x23
     43a:	9c a3       	std	Y+36, r25	; 0x24
     43c:	ad a3       	std	Y+37, r26	; 0x25
     43e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     440:	6b a1       	ldd	r22, Y+35	; 0x23
     442:	7c a1       	ldd	r23, Y+36	; 0x24
     444:	8d a1       	ldd	r24, Y+37	; 0x25
     446:	9e a1       	ldd	r25, Y+38	; 0x26
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	40 e8       	ldi	r20, 0x80	; 128
     44e:	5f e3       	ldi	r21, 0x3F	; 63
     450:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
     454:	88 23       	and	r24, r24
     456:	2c f4       	brge	.+10     	; 0x462 <__stack+0x3>
		__ticks = 1;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	9a a3       	std	Y+34, r25	; 0x22
     45e:	89 a3       	std	Y+33, r24	; 0x21
     460:	3f c0       	rjmp	.+126    	; 0x4e0 <__stack+0x81>
	else if (__tmp > 65535)
     462:	6b a1       	ldd	r22, Y+35	; 0x23
     464:	7c a1       	ldd	r23, Y+36	; 0x24
     466:	8d a1       	ldd	r24, Y+37	; 0x25
     468:	9e a1       	ldd	r25, Y+38	; 0x26
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	3f ef       	ldi	r19, 0xFF	; 255
     46e:	4f e7       	ldi	r20, 0x7F	; 127
     470:	57 e4       	ldi	r21, 0x47	; 71
     472:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
     476:	18 16       	cp	r1, r24
     478:	4c f5       	brge	.+82     	; 0x4cc <__stack+0x6d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     47a:	6f a1       	ldd	r22, Y+39	; 0x27
     47c:	78 a5       	ldd	r23, Y+40	; 0x28
     47e:	89 a5       	ldd	r24, Y+41	; 0x29
     480:	9a a5       	ldd	r25, Y+42	; 0x2a
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	40 e2       	ldi	r20, 0x20	; 32
     488:	51 e4       	ldi	r21, 0x41	; 65
     48a:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	bc 01       	movw	r22, r24
     494:	cd 01       	movw	r24, r26
     496:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     49a:	dc 01       	movw	r26, r24
     49c:	cb 01       	movw	r24, r22
     49e:	9a a3       	std	Y+34, r25	; 0x22
     4a0:	89 a3       	std	Y+33, r24	; 0x21
     4a2:	0f c0       	rjmp	.+30     	; 0x4c2 <__stack+0x63>
     4a4:	84 e6       	ldi	r24, 0x64	; 100
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	98 a3       	std	Y+32, r25	; 0x20
     4aa:	8f 8f       	std	Y+31, r24	; 0x1f
     4ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
     4ae:	98 a1       	ldd	r25, Y+32	; 0x20
     4b0:	01 97       	sbiw	r24, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <__stack+0x51>
     4b4:	98 a3       	std	Y+32, r25	; 0x20
     4b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4b8:	89 a1       	ldd	r24, Y+33	; 0x21
     4ba:	9a a1       	ldd	r25, Y+34	; 0x22
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	9a a3       	std	Y+34, r25	; 0x22
     4c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4c2:	89 a1       	ldd	r24, Y+33	; 0x21
     4c4:	9a a1       	ldd	r25, Y+34	; 0x22
     4c6:	00 97       	sbiw	r24, 0x00	; 0
     4c8:	69 f7       	brne	.-38     	; 0x4a4 <__stack+0x45>
     4ca:	14 c0       	rjmp	.+40     	; 0x4f4 <__stack+0x95>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4cc:	6b a1       	ldd	r22, Y+35	; 0x23
     4ce:	7c a1       	ldd	r23, Y+36	; 0x24
     4d0:	8d a1       	ldd	r24, Y+37	; 0x25
     4d2:	9e a1       	ldd	r25, Y+38	; 0x26
     4d4:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     4d8:	dc 01       	movw	r26, r24
     4da:	cb 01       	movw	r24, r22
     4dc:	9a a3       	std	Y+34, r25	; 0x22
     4de:	89 a3       	std	Y+33, r24	; 0x21
     4e0:	89 a1       	ldd	r24, Y+33	; 0x21
     4e2:	9a a1       	ldd	r25, Y+34	; 0x22
     4e4:	9e 8f       	std	Y+30, r25	; 0x1e
     4e6:	8d 8f       	std	Y+29, r24	; 0x1d
     4e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <__stack+0x8d>
     4f0:	9e 8f       	std	Y+30, r25	; 0x1e
     4f2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     4f4:	e5 e3       	ldi	r30, 0x35	; 53
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	89 ad       	ldd	r24, Y+57	; 0x39
     4fa:	88 2f       	mov	r24, r24
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	82 95       	swap	r24
     500:	92 95       	swap	r25
     502:	90 7f       	andi	r25, 0xF0	; 240
     504:	98 27       	eor	r25, r24
     506:	80 7f       	andi	r24, 0xF0	; 240
     508:	98 27       	eor	r25, r24
     50a:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     50c:	a5 e3       	ldi	r26, 0x35	; 53
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	e5 e3       	ldi	r30, 0x35	; 53
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	81 60       	ori	r24, 0x01	; 1
     518:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     51a:	a5 e3       	ldi	r26, 0x35	; 53
     51c:	b0 e0       	ldi	r27, 0x00	; 0
     51e:	e5 e3       	ldi	r30, 0x35	; 53
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	84 60       	ori	r24, 0x04	; 4
     526:	8c 93       	st	X, r24
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	a0 e8       	ldi	r26, 0x80	; 128
     52e:	bf e3       	ldi	r27, 0x3F	; 63
     530:	89 8f       	std	Y+25, r24	; 0x19
     532:	9a 8f       	std	Y+26, r25	; 0x1a
     534:	ab 8f       	std	Y+27, r26	; 0x1b
     536:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     538:	69 8d       	ldd	r22, Y+25	; 0x19
     53a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     53c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     53e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	4a e7       	ldi	r20, 0x7A	; 122
     546:	54 e4       	ldi	r21, 0x44	; 68
     548:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     54c:	dc 01       	movw	r26, r24
     54e:	cb 01       	movw	r24, r22
     550:	8d 8b       	std	Y+21, r24	; 0x15
     552:	9e 8b       	std	Y+22, r25	; 0x16
     554:	af 8b       	std	Y+23, r26	; 0x17
     556:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     558:	6d 89       	ldd	r22, Y+21	; 0x15
     55a:	7e 89       	ldd	r23, Y+22	; 0x16
     55c:	8f 89       	ldd	r24, Y+23	; 0x17
     55e:	98 8d       	ldd	r25, Y+24	; 0x18
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	40 e8       	ldi	r20, 0x80	; 128
     566:	5f e3       	ldi	r21, 0x3F	; 63
     568:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
     56c:	88 23       	and	r24, r24
     56e:	2c f4       	brge	.+10     	; 0x57a <__stack+0x11b>
		__ticks = 1;
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	9c 8b       	std	Y+20, r25	; 0x14
     576:	8b 8b       	std	Y+19, r24	; 0x13
     578:	3f c0       	rjmp	.+126    	; 0x5f8 <__stack+0x199>
	else if (__tmp > 65535)
     57a:	6d 89       	ldd	r22, Y+21	; 0x15
     57c:	7e 89       	ldd	r23, Y+22	; 0x16
     57e:	8f 89       	ldd	r24, Y+23	; 0x17
     580:	98 8d       	ldd	r25, Y+24	; 0x18
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	3f ef       	ldi	r19, 0xFF	; 255
     586:	4f e7       	ldi	r20, 0x7F	; 127
     588:	57 e4       	ldi	r21, 0x47	; 71
     58a:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
     58e:	18 16       	cp	r1, r24
     590:	4c f5       	brge	.+82     	; 0x5e4 <__stack+0x185>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     592:	69 8d       	ldd	r22, Y+25	; 0x19
     594:	7a 8d       	ldd	r23, Y+26	; 0x1a
     596:	8b 8d       	ldd	r24, Y+27	; 0x1b
     598:	9c 8d       	ldd	r25, Y+28	; 0x1c
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	40 e2       	ldi	r20, 0x20	; 32
     5a0:	51 e4       	ldi	r21, 0x41	; 65
     5a2:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     5a6:	dc 01       	movw	r26, r24
     5a8:	cb 01       	movw	r24, r22
     5aa:	bc 01       	movw	r22, r24
     5ac:	cd 01       	movw	r24, r26
     5ae:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     5b2:	dc 01       	movw	r26, r24
     5b4:	cb 01       	movw	r24, r22
     5b6:	9c 8b       	std	Y+20, r25	; 0x14
     5b8:	8b 8b       	std	Y+19, r24	; 0x13
     5ba:	0f c0       	rjmp	.+30     	; 0x5da <__stack+0x17b>
     5bc:	84 e6       	ldi	r24, 0x64	; 100
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	9a 8b       	std	Y+18, r25	; 0x12
     5c2:	89 8b       	std	Y+17, r24	; 0x11
     5c4:	89 89       	ldd	r24, Y+17	; 0x11
     5c6:	9a 89       	ldd	r25, Y+18	; 0x12
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <__stack+0x169>
     5cc:	9a 8b       	std	Y+18, r25	; 0x12
     5ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5d0:	8b 89       	ldd	r24, Y+19	; 0x13
     5d2:	9c 89       	ldd	r25, Y+20	; 0x14
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	9c 8b       	std	Y+20, r25	; 0x14
     5d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5da:	8b 89       	ldd	r24, Y+19	; 0x13
     5dc:	9c 89       	ldd	r25, Y+20	; 0x14
     5de:	00 97       	sbiw	r24, 0x00	; 0
     5e0:	69 f7       	brne	.-38     	; 0x5bc <__stack+0x15d>
     5e2:	14 c0       	rjmp	.+40     	; 0x60c <__stack+0x1ad>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5e4:	6d 89       	ldd	r22, Y+21	; 0x15
     5e6:	7e 89       	ldd	r23, Y+22	; 0x16
     5e8:	8f 89       	ldd	r24, Y+23	; 0x17
     5ea:	98 8d       	ldd	r25, Y+24	; 0x18
     5ec:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	9c 8b       	std	Y+20, r25	; 0x14
     5f6:	8b 8b       	std	Y+19, r24	; 0x13
     5f8:	8b 89       	ldd	r24, Y+19	; 0x13
     5fa:	9c 89       	ldd	r25, Y+20	; 0x14
     5fc:	98 8b       	std	Y+16, r25	; 0x10
     5fe:	8f 87       	std	Y+15, r24	; 0x0f
     600:	8f 85       	ldd	r24, Y+15	; 0x0f
     602:	98 89       	ldd	r25, Y+16	; 0x10
     604:	01 97       	sbiw	r24, 0x01	; 1
     606:	f1 f7       	brne	.-4      	; 0x604 <__stack+0x1a5>
     608:	98 8b       	std	Y+16, r25	; 0x10
     60a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     60c:	a5 e3       	ldi	r26, 0x35	; 53
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	e5 e3       	ldi	r30, 0x35	; 53
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	8b 7f       	andi	r24, 0xFB	; 251
     618:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     61a:	a5 e3       	ldi	r26, 0x35	; 53
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	e5 e3       	ldi	r30, 0x35	; 53
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	8e 7f       	andi	r24, 0xFE	; 254
     626:	8c 93       	st	X, r24
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	a0 e8       	ldi	r26, 0x80	; 128
     62e:	bf e3       	ldi	r27, 0x3F	; 63
     630:	8b 87       	std	Y+11, r24	; 0x0b
     632:	9c 87       	std	Y+12, r25	; 0x0c
     634:	ad 87       	std	Y+13, r26	; 0x0d
     636:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     638:	6b 85       	ldd	r22, Y+11	; 0x0b
     63a:	7c 85       	ldd	r23, Y+12	; 0x0c
     63c:	8d 85       	ldd	r24, Y+13	; 0x0d
     63e:	9e 85       	ldd	r25, Y+14	; 0x0e
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	4a e7       	ldi	r20, 0x7A	; 122
     646:	54 e4       	ldi	r21, 0x44	; 68
     648:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     64c:	dc 01       	movw	r26, r24
     64e:	cb 01       	movw	r24, r22
     650:	8f 83       	std	Y+7, r24	; 0x07
     652:	98 87       	std	Y+8, r25	; 0x08
     654:	a9 87       	std	Y+9, r26	; 0x09
     656:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     658:	6f 81       	ldd	r22, Y+7	; 0x07
     65a:	78 85       	ldd	r23, Y+8	; 0x08
     65c:	89 85       	ldd	r24, Y+9	; 0x09
     65e:	9a 85       	ldd	r25, Y+10	; 0x0a
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	40 e8       	ldi	r20, 0x80	; 128
     666:	5f e3       	ldi	r21, 0x3F	; 63
     668:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
     66c:	88 23       	and	r24, r24
     66e:	2c f4       	brge	.+10     	; 0x67a <__stack+0x21b>
		__ticks = 1;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	9e 83       	std	Y+6, r25	; 0x06
     676:	8d 83       	std	Y+5, r24	; 0x05
     678:	3f c0       	rjmp	.+126    	; 0x6f8 <__stack+0x299>
	else if (__tmp > 65535)
     67a:	6f 81       	ldd	r22, Y+7	; 0x07
     67c:	78 85       	ldd	r23, Y+8	; 0x08
     67e:	89 85       	ldd	r24, Y+9	; 0x09
     680:	9a 85       	ldd	r25, Y+10	; 0x0a
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	3f ef       	ldi	r19, 0xFF	; 255
     686:	4f e7       	ldi	r20, 0x7F	; 127
     688:	57 e4       	ldi	r21, 0x47	; 71
     68a:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
     68e:	18 16       	cp	r1, r24
     690:	4c f5       	brge	.+82     	; 0x6e4 <__stack+0x285>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     692:	6b 85       	ldd	r22, Y+11	; 0x0b
     694:	7c 85       	ldd	r23, Y+12	; 0x0c
     696:	8d 85       	ldd	r24, Y+13	; 0x0d
     698:	9e 85       	ldd	r25, Y+14	; 0x0e
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	40 e2       	ldi	r20, 0x20	; 32
     6a0:	51 e4       	ldi	r21, 0x41	; 65
     6a2:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	bc 01       	movw	r22, r24
     6ac:	cd 01       	movw	r24, r26
     6ae:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	9e 83       	std	Y+6, r25	; 0x06
     6b8:	8d 83       	std	Y+5, r24	; 0x05
     6ba:	0f c0       	rjmp	.+30     	; 0x6da <__stack+0x27b>
     6bc:	84 e6       	ldi	r24, 0x64	; 100
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	9c 83       	std	Y+4, r25	; 0x04
     6c2:	8b 83       	std	Y+3, r24	; 0x03
     6c4:	8b 81       	ldd	r24, Y+3	; 0x03
     6c6:	9c 81       	ldd	r25, Y+4	; 0x04
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <__stack+0x269>
     6cc:	9c 83       	std	Y+4, r25	; 0x04
     6ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d0:	8d 81       	ldd	r24, Y+5	; 0x05
     6d2:	9e 81       	ldd	r25, Y+6	; 0x06
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	9e 83       	std	Y+6, r25	; 0x06
     6d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6da:	8d 81       	ldd	r24, Y+5	; 0x05
     6dc:	9e 81       	ldd	r25, Y+6	; 0x06
     6de:	00 97       	sbiw	r24, 0x00	; 0
     6e0:	69 f7       	brne	.-38     	; 0x6bc <__stack+0x25d>
     6e2:	14 c0       	rjmp	.+40     	; 0x70c <__stack+0x2ad>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6e4:	6f 81       	ldd	r22, Y+7	; 0x07
     6e6:	78 85       	ldd	r23, Y+8	; 0x08
     6e8:	89 85       	ldd	r24, Y+9	; 0x09
     6ea:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ec:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     6f0:	dc 01       	movw	r26, r24
     6f2:	cb 01       	movw	r24, r22
     6f4:	9e 83       	std	Y+6, r25	; 0x06
     6f6:	8d 83       	std	Y+5, r24	; 0x05
     6f8:	8d 81       	ldd	r24, Y+5	; 0x05
     6fa:	9e 81       	ldd	r25, Y+6	; 0x06
     6fc:	9a 83       	std	Y+2, r25	; 0x02
     6fe:	89 83       	std	Y+1, r24	; 0x01
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	9a 81       	ldd	r25, Y+2	; 0x02
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <__stack+0x2a5>
     708:	9a 83       	std	Y+2, r25	; 0x02
     70a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     70c:	e9 96       	adiw	r28, 0x39	; 57
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	cf 91       	pop	r28
     71a:	df 91       	pop	r29
     71c:	08 95       	ret

0000071e <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     71e:	df 93       	push	r29
     720:	cf 93       	push	r28
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	e9 97       	sbiw	r28, 0x39	; 57
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	89 af       	std	Y+57, r24	; 0x39
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     734:	e5 e3       	ldi	r30, 0x35	; 53
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	89 ad       	ldd	r24, Y+57	; 0x39
     73a:	80 7f       	andi	r24, 0xF0	; 240
     73c:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     73e:	a5 e3       	ldi	r26, 0x35	; 53
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	e5 e3       	ldi	r30, 0x35	; 53
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	80 81       	ld	r24, Z
     748:	84 60       	ori	r24, 0x04	; 4
     74a:	8c 93       	st	X, r24
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	a0 e8       	ldi	r26, 0x80	; 128
     752:	bf e3       	ldi	r27, 0x3F	; 63
     754:	8d ab       	std	Y+53, r24	; 0x35
     756:	9e ab       	std	Y+54, r25	; 0x36
     758:	af ab       	std	Y+55, r26	; 0x37
     75a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     75c:	6d a9       	ldd	r22, Y+53	; 0x35
     75e:	7e a9       	ldd	r23, Y+54	; 0x36
     760:	8f a9       	ldd	r24, Y+55	; 0x37
     762:	98 ad       	ldd	r25, Y+56	; 0x38
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	4a e7       	ldi	r20, 0x7A	; 122
     76a:	54 e4       	ldi	r21, 0x44	; 68
     76c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     770:	dc 01       	movw	r26, r24
     772:	cb 01       	movw	r24, r22
     774:	89 ab       	std	Y+49, r24	; 0x31
     776:	9a ab       	std	Y+50, r25	; 0x32
     778:	ab ab       	std	Y+51, r26	; 0x33
     77a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     77c:	69 a9       	ldd	r22, Y+49	; 0x31
     77e:	7a a9       	ldd	r23, Y+50	; 0x32
     780:	8b a9       	ldd	r24, Y+51	; 0x33
     782:	9c a9       	ldd	r25, Y+52	; 0x34
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e8       	ldi	r20, 0x80	; 128
     78a:	5f e3       	ldi	r21, 0x3F	; 63
     78c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
     790:	88 23       	and	r24, r24
     792:	2c f4       	brge	.+10     	; 0x79e <LCDsendCommand+0x80>
		__ticks = 1;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	98 ab       	std	Y+48, r25	; 0x30
     79a:	8f a7       	std	Y+47, r24	; 0x2f
     79c:	3f c0       	rjmp	.+126    	; 0x81c <LCDsendCommand+0xfe>
	else if (__tmp > 65535)
     79e:	69 a9       	ldd	r22, Y+49	; 0x31
     7a0:	7a a9       	ldd	r23, Y+50	; 0x32
     7a2:	8b a9       	ldd	r24, Y+51	; 0x33
     7a4:	9c a9       	ldd	r25, Y+52	; 0x34
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	3f ef       	ldi	r19, 0xFF	; 255
     7aa:	4f e7       	ldi	r20, 0x7F	; 127
     7ac:	57 e4       	ldi	r21, 0x47	; 71
     7ae:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
     7b2:	18 16       	cp	r1, r24
     7b4:	4c f5       	brge	.+82     	; 0x808 <LCDsendCommand+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7b6:	6d a9       	ldd	r22, Y+53	; 0x35
     7b8:	7e a9       	ldd	r23, Y+54	; 0x36
     7ba:	8f a9       	ldd	r24, Y+55	; 0x37
     7bc:	98 ad       	ldd	r25, Y+56	; 0x38
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e2       	ldi	r20, 0x20	; 32
     7c4:	51 e4       	ldi	r21, 0x41	; 65
     7c6:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     7ca:	dc 01       	movw	r26, r24
     7cc:	cb 01       	movw	r24, r22
     7ce:	bc 01       	movw	r22, r24
     7d0:	cd 01       	movw	r24, r26
     7d2:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     7d6:	dc 01       	movw	r26, r24
     7d8:	cb 01       	movw	r24, r22
     7da:	98 ab       	std	Y+48, r25	; 0x30
     7dc:	8f a7       	std	Y+47, r24	; 0x2f
     7de:	0f c0       	rjmp	.+30     	; 0x7fe <LCDsendCommand+0xe0>
     7e0:	84 e6       	ldi	r24, 0x64	; 100
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	9e a7       	std	Y+46, r25	; 0x2e
     7e6:	8d a7       	std	Y+45, r24	; 0x2d
     7e8:	8d a5       	ldd	r24, Y+45	; 0x2d
     7ea:	9e a5       	ldd	r25, Y+46	; 0x2e
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <LCDsendCommand+0xce>
     7f0:	9e a7       	std	Y+46, r25	; 0x2e
     7f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7f4:	8f a5       	ldd	r24, Y+47	; 0x2f
     7f6:	98 a9       	ldd	r25, Y+48	; 0x30
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	98 ab       	std	Y+48, r25	; 0x30
     7fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7fe:	8f a5       	ldd	r24, Y+47	; 0x2f
     800:	98 a9       	ldd	r25, Y+48	; 0x30
     802:	00 97       	sbiw	r24, 0x00	; 0
     804:	69 f7       	brne	.-38     	; 0x7e0 <LCDsendCommand+0xc2>
     806:	14 c0       	rjmp	.+40     	; 0x830 <LCDsendCommand+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     808:	69 a9       	ldd	r22, Y+49	; 0x31
     80a:	7a a9       	ldd	r23, Y+50	; 0x32
     80c:	8b a9       	ldd	r24, Y+51	; 0x33
     80e:	9c a9       	ldd	r25, Y+52	; 0x34
     810:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     814:	dc 01       	movw	r26, r24
     816:	cb 01       	movw	r24, r22
     818:	98 ab       	std	Y+48, r25	; 0x30
     81a:	8f a7       	std	Y+47, r24	; 0x2f
     81c:	8f a5       	ldd	r24, Y+47	; 0x2f
     81e:	98 a9       	ldd	r25, Y+48	; 0x30
     820:	9c a7       	std	Y+44, r25	; 0x2c
     822:	8b a7       	std	Y+43, r24	; 0x2b
     824:	8b a5       	ldd	r24, Y+43	; 0x2b
     826:	9c a5       	ldd	r25, Y+44	; 0x2c
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <LCDsendCommand+0x10a>
     82c:	9c a7       	std	Y+44, r25	; 0x2c
     82e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     830:	a5 e3       	ldi	r26, 0x35	; 53
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	e5 e3       	ldi	r30, 0x35	; 53
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	8b 7f       	andi	r24, 0xFB	; 251
     83c:	8c 93       	st	X, r24
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	a0 e8       	ldi	r26, 0x80	; 128
     844:	bf e3       	ldi	r27, 0x3F	; 63
     846:	8f a3       	std	Y+39, r24	; 0x27
     848:	98 a7       	std	Y+40, r25	; 0x28
     84a:	a9 a7       	std	Y+41, r26	; 0x29
     84c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     84e:	6f a1       	ldd	r22, Y+39	; 0x27
     850:	78 a5       	ldd	r23, Y+40	; 0x28
     852:	89 a5       	ldd	r24, Y+41	; 0x29
     854:	9a a5       	ldd	r25, Y+42	; 0x2a
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	4a e7       	ldi	r20, 0x7A	; 122
     85c:	54 e4       	ldi	r21, 0x44	; 68
     85e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     862:	dc 01       	movw	r26, r24
     864:	cb 01       	movw	r24, r22
     866:	8b a3       	std	Y+35, r24	; 0x23
     868:	9c a3       	std	Y+36, r25	; 0x24
     86a:	ad a3       	std	Y+37, r26	; 0x25
     86c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     86e:	6b a1       	ldd	r22, Y+35	; 0x23
     870:	7c a1       	ldd	r23, Y+36	; 0x24
     872:	8d a1       	ldd	r24, Y+37	; 0x25
     874:	9e a1       	ldd	r25, Y+38	; 0x26
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e8       	ldi	r20, 0x80	; 128
     87c:	5f e3       	ldi	r21, 0x3F	; 63
     87e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
     882:	88 23       	and	r24, r24
     884:	2c f4       	brge	.+10     	; 0x890 <LCDsendCommand+0x172>
		__ticks = 1;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	9a a3       	std	Y+34, r25	; 0x22
     88c:	89 a3       	std	Y+33, r24	; 0x21
     88e:	3f c0       	rjmp	.+126    	; 0x90e <LCDsendCommand+0x1f0>
	else if (__tmp > 65535)
     890:	6b a1       	ldd	r22, Y+35	; 0x23
     892:	7c a1       	ldd	r23, Y+36	; 0x24
     894:	8d a1       	ldd	r24, Y+37	; 0x25
     896:	9e a1       	ldd	r25, Y+38	; 0x26
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f e7       	ldi	r20, 0x7F	; 127
     89e:	57 e4       	ldi	r21, 0x47	; 71
     8a0:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
     8a4:	18 16       	cp	r1, r24
     8a6:	4c f5       	brge	.+82     	; 0x8fa <LCDsendCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a8:	6f a1       	ldd	r22, Y+39	; 0x27
     8aa:	78 a5       	ldd	r23, Y+40	; 0x28
     8ac:	89 a5       	ldd	r24, Y+41	; 0x29
     8ae:	9a a5       	ldd	r25, Y+42	; 0x2a
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 e2       	ldi	r20, 0x20	; 32
     8b6:	51 e4       	ldi	r21, 0x41	; 65
     8b8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	bc 01       	movw	r22, r24
     8c2:	cd 01       	movw	r24, r26
     8c4:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     8c8:	dc 01       	movw	r26, r24
     8ca:	cb 01       	movw	r24, r22
     8cc:	9a a3       	std	Y+34, r25	; 0x22
     8ce:	89 a3       	std	Y+33, r24	; 0x21
     8d0:	0f c0       	rjmp	.+30     	; 0x8f0 <LCDsendCommand+0x1d2>
     8d2:	84 e6       	ldi	r24, 0x64	; 100
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	98 a3       	std	Y+32, r25	; 0x20
     8d8:	8f 8f       	std	Y+31, r24	; 0x1f
     8da:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8dc:	98 a1       	ldd	r25, Y+32	; 0x20
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <LCDsendCommand+0x1c0>
     8e2:	98 a3       	std	Y+32, r25	; 0x20
     8e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	9a a3       	std	Y+34, r25	; 0x22
     8ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f0:	89 a1       	ldd	r24, Y+33	; 0x21
     8f2:	9a a1       	ldd	r25, Y+34	; 0x22
     8f4:	00 97       	sbiw	r24, 0x00	; 0
     8f6:	69 f7       	brne	.-38     	; 0x8d2 <LCDsendCommand+0x1b4>
     8f8:	14 c0       	rjmp	.+40     	; 0x922 <LCDsendCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8fa:	6b a1       	ldd	r22, Y+35	; 0x23
     8fc:	7c a1       	ldd	r23, Y+36	; 0x24
     8fe:	8d a1       	ldd	r24, Y+37	; 0x25
     900:	9e a1       	ldd	r25, Y+38	; 0x26
     902:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     906:	dc 01       	movw	r26, r24
     908:	cb 01       	movw	r24, r22
     90a:	9a a3       	std	Y+34, r25	; 0x22
     90c:	89 a3       	std	Y+33, r24	; 0x21
     90e:	89 a1       	ldd	r24, Y+33	; 0x21
     910:	9a a1       	ldd	r25, Y+34	; 0x22
     912:	9e 8f       	std	Y+30, r25	; 0x1e
     914:	8d 8f       	std	Y+29, r24	; 0x1d
     916:	8d 8d       	ldd	r24, Y+29	; 0x1d
     918:	9e 8d       	ldd	r25, Y+30	; 0x1e
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	f1 f7       	brne	.-4      	; 0x91a <LCDsendCommand+0x1fc>
     91e:	9e 8f       	std	Y+30, r25	; 0x1e
     920:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     922:	e5 e3       	ldi	r30, 0x35	; 53
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	89 ad       	ldd	r24, Y+57	; 0x39
     928:	88 2f       	mov	r24, r24
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	82 95       	swap	r24
     92e:	92 95       	swap	r25
     930:	90 7f       	andi	r25, 0xF0	; 240
     932:	98 27       	eor	r25, r24
     934:	80 7f       	andi	r24, 0xF0	; 240
     936:	98 27       	eor	r25, r24
     938:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     93a:	a5 e3       	ldi	r26, 0x35	; 53
     93c:	b0 e0       	ldi	r27, 0x00	; 0
     93e:	e5 e3       	ldi	r30, 0x35	; 53
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	84 60       	ori	r24, 0x04	; 4
     946:	8c 93       	st	X, r24
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e8       	ldi	r26, 0x80	; 128
     94e:	bf e3       	ldi	r27, 0x3F	; 63
     950:	89 8f       	std	Y+25, r24	; 0x19
     952:	9a 8f       	std	Y+26, r25	; 0x1a
     954:	ab 8f       	std	Y+27, r26	; 0x1b
     956:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     958:	69 8d       	ldd	r22, Y+25	; 0x19
     95a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     95c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     95e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	4a e7       	ldi	r20, 0x7A	; 122
     966:	54 e4       	ldi	r21, 0x44	; 68
     968:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     96c:	dc 01       	movw	r26, r24
     96e:	cb 01       	movw	r24, r22
     970:	8d 8b       	std	Y+21, r24	; 0x15
     972:	9e 8b       	std	Y+22, r25	; 0x16
     974:	af 8b       	std	Y+23, r26	; 0x17
     976:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     978:	6d 89       	ldd	r22, Y+21	; 0x15
     97a:	7e 89       	ldd	r23, Y+22	; 0x16
     97c:	8f 89       	ldd	r24, Y+23	; 0x17
     97e:	98 8d       	ldd	r25, Y+24	; 0x18
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e8       	ldi	r20, 0x80	; 128
     986:	5f e3       	ldi	r21, 0x3F	; 63
     988:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
     98c:	88 23       	and	r24, r24
     98e:	2c f4       	brge	.+10     	; 0x99a <LCDsendCommand+0x27c>
		__ticks = 1;
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	9c 8b       	std	Y+20, r25	; 0x14
     996:	8b 8b       	std	Y+19, r24	; 0x13
     998:	3f c0       	rjmp	.+126    	; 0xa18 <LCDsendCommand+0x2fa>
	else if (__tmp > 65535)
     99a:	6d 89       	ldd	r22, Y+21	; 0x15
     99c:	7e 89       	ldd	r23, Y+22	; 0x16
     99e:	8f 89       	ldd	r24, Y+23	; 0x17
     9a0:	98 8d       	ldd	r25, Y+24	; 0x18
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	4f e7       	ldi	r20, 0x7F	; 127
     9a8:	57 e4       	ldi	r21, 0x47	; 71
     9aa:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
     9ae:	18 16       	cp	r1, r24
     9b0:	4c f5       	brge	.+82     	; 0xa04 <LCDsendCommand+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9b2:	69 8d       	ldd	r22, Y+25	; 0x19
     9b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	40 e2       	ldi	r20, 0x20	; 32
     9c0:	51 e4       	ldi	r21, 0x41	; 65
     9c2:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     9c6:	dc 01       	movw	r26, r24
     9c8:	cb 01       	movw	r24, r22
     9ca:	bc 01       	movw	r22, r24
     9cc:	cd 01       	movw	r24, r26
     9ce:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     9d2:	dc 01       	movw	r26, r24
     9d4:	cb 01       	movw	r24, r22
     9d6:	9c 8b       	std	Y+20, r25	; 0x14
     9d8:	8b 8b       	std	Y+19, r24	; 0x13
     9da:	0f c0       	rjmp	.+30     	; 0x9fa <LCDsendCommand+0x2dc>
     9dc:	84 e6       	ldi	r24, 0x64	; 100
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	9a 8b       	std	Y+18, r25	; 0x12
     9e2:	89 8b       	std	Y+17, r24	; 0x11
     9e4:	89 89       	ldd	r24, Y+17	; 0x11
     9e6:	9a 89       	ldd	r25, Y+18	; 0x12
     9e8:	01 97       	sbiw	r24, 0x01	; 1
     9ea:	f1 f7       	brne	.-4      	; 0x9e8 <LCDsendCommand+0x2ca>
     9ec:	9a 8b       	std	Y+18, r25	; 0x12
     9ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9f0:	8b 89       	ldd	r24, Y+19	; 0x13
     9f2:	9c 89       	ldd	r25, Y+20	; 0x14
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	9c 8b       	std	Y+20, r25	; 0x14
     9f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9fa:	8b 89       	ldd	r24, Y+19	; 0x13
     9fc:	9c 89       	ldd	r25, Y+20	; 0x14
     9fe:	00 97       	sbiw	r24, 0x00	; 0
     a00:	69 f7       	brne	.-38     	; 0x9dc <LCDsendCommand+0x2be>
     a02:	14 c0       	rjmp	.+40     	; 0xa2c <LCDsendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a04:	6d 89       	ldd	r22, Y+21	; 0x15
     a06:	7e 89       	ldd	r23, Y+22	; 0x16
     a08:	8f 89       	ldd	r24, Y+23	; 0x17
     a0a:	98 8d       	ldd	r25, Y+24	; 0x18
     a0c:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     a10:	dc 01       	movw	r26, r24
     a12:	cb 01       	movw	r24, r22
     a14:	9c 8b       	std	Y+20, r25	; 0x14
     a16:	8b 8b       	std	Y+19, r24	; 0x13
     a18:	8b 89       	ldd	r24, Y+19	; 0x13
     a1a:	9c 89       	ldd	r25, Y+20	; 0x14
     a1c:	98 8b       	std	Y+16, r25	; 0x10
     a1e:	8f 87       	std	Y+15, r24	; 0x0f
     a20:	8f 85       	ldd	r24, Y+15	; 0x0f
     a22:	98 89       	ldd	r25, Y+16	; 0x10
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <LCDsendCommand+0x306>
     a28:	98 8b       	std	Y+16, r25	; 0x10
     a2a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     a2c:	a5 e3       	ldi	r26, 0x35	; 53
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	e5 e3       	ldi	r30, 0x35	; 53
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	8b 7f       	andi	r24, 0xFB	; 251
     a38:	8c 93       	st	X, r24
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e8       	ldi	r26, 0x80	; 128
     a40:	bf e3       	ldi	r27, 0x3F	; 63
     a42:	8b 87       	std	Y+11, r24	; 0x0b
     a44:	9c 87       	std	Y+12, r25	; 0x0c
     a46:	ad 87       	std	Y+13, r26	; 0x0d
     a48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
     a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
     a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a50:	9e 85       	ldd	r25, Y+14	; 0x0e
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	4a e7       	ldi	r20, 0x7A	; 122
     a58:	54 e4       	ldi	r21, 0x44	; 68
     a5a:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     a5e:	dc 01       	movw	r26, r24
     a60:	cb 01       	movw	r24, r22
     a62:	8f 83       	std	Y+7, r24	; 0x07
     a64:	98 87       	std	Y+8, r25	; 0x08
     a66:	a9 87       	std	Y+9, r26	; 0x09
     a68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a6a:	6f 81       	ldd	r22, Y+7	; 0x07
     a6c:	78 85       	ldd	r23, Y+8	; 0x08
     a6e:	89 85       	ldd	r24, Y+9	; 0x09
     a70:	9a 85       	ldd	r25, Y+10	; 0x0a
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e8       	ldi	r20, 0x80	; 128
     a78:	5f e3       	ldi	r21, 0x3F	; 63
     a7a:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
     a7e:	88 23       	and	r24, r24
     a80:	2c f4       	brge	.+10     	; 0xa8c <LCDsendCommand+0x36e>
		__ticks = 1;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	9e 83       	std	Y+6, r25	; 0x06
     a88:	8d 83       	std	Y+5, r24	; 0x05
     a8a:	3f c0       	rjmp	.+126    	; 0xb0a <LCDsendCommand+0x3ec>
	else if (__tmp > 65535)
     a8c:	6f 81       	ldd	r22, Y+7	; 0x07
     a8e:	78 85       	ldd	r23, Y+8	; 0x08
     a90:	89 85       	ldd	r24, Y+9	; 0x09
     a92:	9a 85       	ldd	r25, Y+10	; 0x0a
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	3f ef       	ldi	r19, 0xFF	; 255
     a98:	4f e7       	ldi	r20, 0x7F	; 127
     a9a:	57 e4       	ldi	r21, 0x47	; 71
     a9c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
     aa0:	18 16       	cp	r1, r24
     aa2:	4c f5       	brge	.+82     	; 0xaf6 <LCDsendCommand+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
     aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
     aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
     aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	40 e2       	ldi	r20, 0x20	; 32
     ab2:	51 e4       	ldi	r21, 0x41	; 65
     ab4:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     ab8:	dc 01       	movw	r26, r24
     aba:	cb 01       	movw	r24, r22
     abc:	bc 01       	movw	r22, r24
     abe:	cd 01       	movw	r24, r26
     ac0:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	9e 83       	std	Y+6, r25	; 0x06
     aca:	8d 83       	std	Y+5, r24	; 0x05
     acc:	0f c0       	rjmp	.+30     	; 0xaec <LCDsendCommand+0x3ce>
     ace:	84 e6       	ldi	r24, 0x64	; 100
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	9c 83       	std	Y+4, r25	; 0x04
     ad4:	8b 83       	std	Y+3, r24	; 0x03
     ad6:	8b 81       	ldd	r24, Y+3	; 0x03
     ad8:	9c 81       	ldd	r25, Y+4	; 0x04
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <LCDsendCommand+0x3bc>
     ade:	9c 83       	std	Y+4, r25	; 0x04
     ae0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ae2:	8d 81       	ldd	r24, Y+5	; 0x05
     ae4:	9e 81       	ldd	r25, Y+6	; 0x06
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	9e 83       	std	Y+6, r25	; 0x06
     aea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aec:	8d 81       	ldd	r24, Y+5	; 0x05
     aee:	9e 81       	ldd	r25, Y+6	; 0x06
     af0:	00 97       	sbiw	r24, 0x00	; 0
     af2:	69 f7       	brne	.-38     	; 0xace <LCDsendCommand+0x3b0>
     af4:	14 c0       	rjmp	.+40     	; 0xb1e <LCDsendCommand+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     af6:	6f 81       	ldd	r22, Y+7	; 0x07
     af8:	78 85       	ldd	r23, Y+8	; 0x08
     afa:	89 85       	ldd	r24, Y+9	; 0x09
     afc:	9a 85       	ldd	r25, Y+10	; 0x0a
     afe:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     b02:	dc 01       	movw	r26, r24
     b04:	cb 01       	movw	r24, r22
     b06:	9e 83       	std	Y+6, r25	; 0x06
     b08:	8d 83       	std	Y+5, r24	; 0x05
     b0a:	8d 81       	ldd	r24, Y+5	; 0x05
     b0c:	9e 81       	ldd	r25, Y+6	; 0x06
     b0e:	9a 83       	std	Y+2, r25	; 0x02
     b10:	89 83       	std	Y+1, r24	; 0x01
     b12:	89 81       	ldd	r24, Y+1	; 0x01
     b14:	9a 81       	ldd	r25, Y+2	; 0x02
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	f1 f7       	brne	.-4      	; 0xb16 <LCDsendCommand+0x3f8>
     b1a:	9a 83       	std	Y+2, r25	; 0x02
     b1c:	89 83       	std	Y+1, r24	; 0x01
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     b1e:	e9 96       	adiw	r28, 0x39	; 57
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	cf 91       	pop	r28
     b2c:	df 91       	pop	r29
     b2e:	08 95       	ret

00000b30 <LCDinit>:
void LCDinit(void)//Initializes LCD
{
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	df 93       	push	r29
     b36:	cf 93       	push	r28
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	c4 56       	subi	r28, 0x64	; 100
     b3e:	d0 40       	sbci	r29, 0x00	; 0
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	fe 01       	movw	r30, r28
     b4c:	e1 5a       	subi	r30, 0xA1	; 161
     b4e:	ff 4f       	sbci	r31, 0xFF	; 255
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	a0 e7       	ldi	r26, 0x70	; 112
     b56:	b1 e4       	ldi	r27, 0x41	; 65
     b58:	80 83       	st	Z, r24
     b5a:	91 83       	std	Z+1, r25	; 0x01
     b5c:	a2 83       	std	Z+2, r26	; 0x02
     b5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b60:	8e 01       	movw	r16, r28
     b62:	05 5a       	subi	r16, 0xA5	; 165
     b64:	1f 4f       	sbci	r17, 0xFF	; 255
     b66:	fe 01       	movw	r30, r28
     b68:	e1 5a       	subi	r30, 0xA1	; 161
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	60 81       	ld	r22, Z
     b6e:	71 81       	ldd	r23, Z+1	; 0x01
     b70:	82 81       	ldd	r24, Z+2	; 0x02
     b72:	93 81       	ldd	r25, Z+3	; 0x03
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	4a e7       	ldi	r20, 0x7A	; 122
     b7a:	54 e4       	ldi	r21, 0x44	; 68
     b7c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     b80:	dc 01       	movw	r26, r24
     b82:	cb 01       	movw	r24, r22
     b84:	f8 01       	movw	r30, r16
     b86:	80 83       	st	Z, r24
     b88:	91 83       	std	Z+1, r25	; 0x01
     b8a:	a2 83       	std	Z+2, r26	; 0x02
     b8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b8e:	fe 01       	movw	r30, r28
     b90:	e5 5a       	subi	r30, 0xA5	; 165
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	60 81       	ld	r22, Z
     b96:	71 81       	ldd	r23, Z+1	; 0x01
     b98:	82 81       	ldd	r24, Z+2	; 0x02
     b9a:	93 81       	ldd	r25, Z+3	; 0x03
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	40 e8       	ldi	r20, 0x80	; 128
     ba2:	5f e3       	ldi	r21, 0x3F	; 63
     ba4:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
     ba8:	88 23       	and	r24, r24
     baa:	44 f4       	brge	.+16     	; 0xbbc <LCDinit+0x8c>
		__ticks = 1;
     bac:	fe 01       	movw	r30, r28
     bae:	e7 5a       	subi	r30, 0xA7	; 167
     bb0:	ff 4f       	sbci	r31, 0xFF	; 255
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	91 83       	std	Z+1, r25	; 0x01
     bb8:	80 83       	st	Z, r24
     bba:	64 c0       	rjmp	.+200    	; 0xc84 <LCDinit+0x154>
	else if (__tmp > 65535)
     bbc:	fe 01       	movw	r30, r28
     bbe:	e5 5a       	subi	r30, 0xA5	; 165
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	60 81       	ld	r22, Z
     bc4:	71 81       	ldd	r23, Z+1	; 0x01
     bc6:	82 81       	ldd	r24, Z+2	; 0x02
     bc8:	93 81       	ldd	r25, Z+3	; 0x03
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	3f ef       	ldi	r19, 0xFF	; 255
     bce:	4f e7       	ldi	r20, 0x7F	; 127
     bd0:	57 e4       	ldi	r21, 0x47	; 71
     bd2:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
     bd6:	18 16       	cp	r1, r24
     bd8:	0c f0       	brlt	.+2      	; 0xbdc <LCDinit+0xac>
     bda:	43 c0       	rjmp	.+134    	; 0xc62 <LCDinit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bdc:	fe 01       	movw	r30, r28
     bde:	e1 5a       	subi	r30, 0xA1	; 161
     be0:	ff 4f       	sbci	r31, 0xFF	; 255
     be2:	60 81       	ld	r22, Z
     be4:	71 81       	ldd	r23, Z+1	; 0x01
     be6:	82 81       	ldd	r24, Z+2	; 0x02
     be8:	93 81       	ldd	r25, Z+3	; 0x03
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e2       	ldi	r20, 0x20	; 32
     bf0:	51 e4       	ldi	r21, 0x41	; 65
     bf2:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     bf6:	dc 01       	movw	r26, r24
     bf8:	cb 01       	movw	r24, r22
     bfa:	8e 01       	movw	r16, r28
     bfc:	07 5a       	subi	r16, 0xA7	; 167
     bfe:	1f 4f       	sbci	r17, 0xFF	; 255
     c00:	bc 01       	movw	r22, r24
     c02:	cd 01       	movw	r24, r26
     c04:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	f8 01       	movw	r30, r16
     c0e:	91 83       	std	Z+1, r25	; 0x01
     c10:	80 83       	st	Z, r24
     c12:	1f c0       	rjmp	.+62     	; 0xc52 <LCDinit+0x122>
     c14:	fe 01       	movw	r30, r28
     c16:	e9 5a       	subi	r30, 0xA9	; 169
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	84 e6       	ldi	r24, 0x64	; 100
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	91 83       	std	Z+1, r25	; 0x01
     c20:	80 83       	st	Z, r24
     c22:	fe 01       	movw	r30, r28
     c24:	e9 5a       	subi	r30, 0xA9	; 169
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	80 81       	ld	r24, Z
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <LCDinit+0xfc>
     c30:	fe 01       	movw	r30, r28
     c32:	e9 5a       	subi	r30, 0xA9	; 169
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	91 83       	std	Z+1, r25	; 0x01
     c38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3a:	de 01       	movw	r26, r28
     c3c:	a7 5a       	subi	r26, 0xA7	; 167
     c3e:	bf 4f       	sbci	r27, 0xFF	; 255
     c40:	fe 01       	movw	r30, r28
     c42:	e7 5a       	subi	r30, 0xA7	; 167
     c44:	ff 4f       	sbci	r31, 0xFF	; 255
     c46:	80 81       	ld	r24, Z
     c48:	91 81       	ldd	r25, Z+1	; 0x01
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	11 96       	adiw	r26, 0x01	; 1
     c4e:	9c 93       	st	X, r25
     c50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c52:	fe 01       	movw	r30, r28
     c54:	e7 5a       	subi	r30, 0xA7	; 167
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	80 81       	ld	r24, Z
     c5a:	91 81       	ldd	r25, Z+1	; 0x01
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	d1 f6       	brne	.-76     	; 0xc14 <LCDinit+0xe4>
     c60:	27 c0       	rjmp	.+78     	; 0xcb0 <LCDinit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c62:	8e 01       	movw	r16, r28
     c64:	07 5a       	subi	r16, 0xA7	; 167
     c66:	1f 4f       	sbci	r17, 0xFF	; 255
     c68:	fe 01       	movw	r30, r28
     c6a:	e5 5a       	subi	r30, 0xA5	; 165
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	60 81       	ld	r22, Z
     c70:	71 81       	ldd	r23, Z+1	; 0x01
     c72:	82 81       	ldd	r24, Z+2	; 0x02
     c74:	93 81       	ldd	r25, Z+3	; 0x03
     c76:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	f8 01       	movw	r30, r16
     c80:	91 83       	std	Z+1, r25	; 0x01
     c82:	80 83       	st	Z, r24
     c84:	de 01       	movw	r26, r28
     c86:	ab 5a       	subi	r26, 0xAB	; 171
     c88:	bf 4f       	sbci	r27, 0xFF	; 255
     c8a:	fe 01       	movw	r30, r28
     c8c:	e7 5a       	subi	r30, 0xA7	; 167
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	8d 93       	st	X+, r24
     c96:	9c 93       	st	X, r25
     c98:	fe 01       	movw	r30, r28
     c9a:	eb 5a       	subi	r30, 0xAB	; 171
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	80 81       	ld	r24, Z
     ca0:	91 81       	ldd	r25, Z+1	; 0x01
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <LCDinit+0x172>
     ca6:	fe 01       	movw	r30, r28
     ca8:	eb 5a       	subi	r30, 0xAB	; 171
     caa:	ff 4f       	sbci	r31, 0xFF	; 255
     cac:	91 83       	std	Z+1, r25	; 0x01
     cae:	80 83       	st	Z, r24
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     cb0:	e5 e3       	ldi	r30, 0x35	; 53
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	10 82       	st	Z, r1
	LCP=0x00;
     cb6:	e5 e3       	ldi	r30, 0x35	; 53
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	10 82       	st	Z, r1
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     cbc:	a4 e3       	ldi	r26, 0x34	; 52
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e4 e3       	ldi	r30, 0x34	; 52
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	80 6f       	ori	r24, 0xF0	; 240
     cc8:	8c 93       	st	X, r24
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     cca:	a4 e3       	ldi	r26, 0x34	; 52
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e4 e3       	ldi	r30, 0x34	; 52
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	87 60       	ori	r24, 0x07	; 7
     cd6:	8c 93       	st	X, r24
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     cd8:	e5 e3       	ldi	r30, 0x35	; 53
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 e3       	ldi	r24, 0x30	; 48
     cde:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ce0:	a5 e3       	ldi	r26, 0x35	; 53
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e5 e3       	ldi	r30, 0x35	; 53
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	84 60       	ori	r24, 0x04	; 4
     cec:	8c 93       	st	X, r24
     cee:	fe 01       	movw	r30, r28
     cf0:	ef 5a       	subi	r30, 0xAF	; 175
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a0 e8       	ldi	r26, 0x80	; 128
     cfa:	bf e3       	ldi	r27, 0x3F	; 63
     cfc:	80 83       	st	Z, r24
     cfe:	91 83       	std	Z+1, r25	; 0x01
     d00:	a2 83       	std	Z+2, r26	; 0x02
     d02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d04:	8e 01       	movw	r16, r28
     d06:	03 5b       	subi	r16, 0xB3	; 179
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
     d0a:	fe 01       	movw	r30, r28
     d0c:	ef 5a       	subi	r30, 0xAF	; 175
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	60 81       	ld	r22, Z
     d12:	71 81       	ldd	r23, Z+1	; 0x01
     d14:	82 81       	ldd	r24, Z+2	; 0x02
     d16:	93 81       	ldd	r25, Z+3	; 0x03
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	4a e7       	ldi	r20, 0x7A	; 122
     d1e:	54 e4       	ldi	r21, 0x44	; 68
     d20:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	f8 01       	movw	r30, r16
     d2a:	80 83       	st	Z, r24
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	a2 83       	std	Z+2, r26	; 0x02
     d30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d32:	fe 01       	movw	r30, r28
     d34:	e3 5b       	subi	r30, 0xB3	; 179
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	60 81       	ld	r22, Z
     d3a:	71 81       	ldd	r23, Z+1	; 0x01
     d3c:	82 81       	ldd	r24, Z+2	; 0x02
     d3e:	93 81       	ldd	r25, Z+3	; 0x03
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e8       	ldi	r20, 0x80	; 128
     d46:	5f e3       	ldi	r21, 0x3F	; 63
     d48:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
     d4c:	88 23       	and	r24, r24
     d4e:	44 f4       	brge	.+16     	; 0xd60 <LCDinit+0x230>
		__ticks = 1;
     d50:	fe 01       	movw	r30, r28
     d52:	e5 5b       	subi	r30, 0xB5	; 181
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	80 83       	st	Z, r24
     d5e:	64 c0       	rjmp	.+200    	; 0xe28 <LCDinit+0x2f8>
	else if (__tmp > 65535)
     d60:	fe 01       	movw	r30, r28
     d62:	e3 5b       	subi	r30, 0xB3	; 179
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	93 81       	ldd	r25, Z+3	; 0x03
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	3f ef       	ldi	r19, 0xFF	; 255
     d72:	4f e7       	ldi	r20, 0x7F	; 127
     d74:	57 e4       	ldi	r21, 0x47	; 71
     d76:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
     d7a:	18 16       	cp	r1, r24
     d7c:	0c f0       	brlt	.+2      	; 0xd80 <LCDinit+0x250>
     d7e:	43 c0       	rjmp	.+134    	; 0xe06 <LCDinit+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d80:	fe 01       	movw	r30, r28
     d82:	ef 5a       	subi	r30, 0xAF	; 175
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	60 81       	ld	r22, Z
     d88:	71 81       	ldd	r23, Z+1	; 0x01
     d8a:	82 81       	ldd	r24, Z+2	; 0x02
     d8c:	93 81       	ldd	r25, Z+3	; 0x03
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	40 e2       	ldi	r20, 0x20	; 32
     d94:	51 e4       	ldi	r21, 0x41	; 65
     d96:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	8e 01       	movw	r16, r28
     da0:	05 5b       	subi	r16, 0xB5	; 181
     da2:	1f 4f       	sbci	r17, 0xFF	; 255
     da4:	bc 01       	movw	r22, r24
     da6:	cd 01       	movw	r24, r26
     da8:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	f8 01       	movw	r30, r16
     db2:	91 83       	std	Z+1, r25	; 0x01
     db4:	80 83       	st	Z, r24
     db6:	1f c0       	rjmp	.+62     	; 0xdf6 <LCDinit+0x2c6>
     db8:	fe 01       	movw	r30, r28
     dba:	e7 5b       	subi	r30, 0xB7	; 183
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	84 e6       	ldi	r24, 0x64	; 100
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	80 83       	st	Z, r24
     dc6:	fe 01       	movw	r30, r28
     dc8:	e7 5b       	subi	r30, 0xB7	; 183
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	80 81       	ld	r24, Z
     dce:	91 81       	ldd	r25, Z+1	; 0x01
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <LCDinit+0x2a0>
     dd4:	fe 01       	movw	r30, r28
     dd6:	e7 5b       	subi	r30, 0xB7	; 183
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dde:	de 01       	movw	r26, r28
     de0:	a5 5b       	subi	r26, 0xB5	; 181
     de2:	bf 4f       	sbci	r27, 0xFF	; 255
     de4:	fe 01       	movw	r30, r28
     de6:	e5 5b       	subi	r30, 0xB5	; 181
     de8:	ff 4f       	sbci	r31, 0xFF	; 255
     dea:	80 81       	ld	r24, Z
     dec:	91 81       	ldd	r25, Z+1	; 0x01
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	11 96       	adiw	r26, 0x01	; 1
     df2:	9c 93       	st	X, r25
     df4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	fe 01       	movw	r30, r28
     df8:	e5 5b       	subi	r30, 0xB5	; 181
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	d1 f6       	brne	.-76     	; 0xdb8 <LCDinit+0x288>
     e04:	27 c0       	rjmp	.+78     	; 0xe54 <LCDinit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e06:	8e 01       	movw	r16, r28
     e08:	05 5b       	subi	r16, 0xB5	; 181
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	fe 01       	movw	r30, r28
     e0e:	e3 5b       	subi	r30, 0xB3	; 179
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	60 81       	ld	r22, Z
     e14:	71 81       	ldd	r23, Z+1	; 0x01
     e16:	82 81       	ldd	r24, Z+2	; 0x02
     e18:	93 81       	ldd	r25, Z+3	; 0x03
     e1a:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	f8 01       	movw	r30, r16
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	80 83       	st	Z, r24
     e28:	de 01       	movw	r26, r28
     e2a:	a9 5b       	subi	r26, 0xB9	; 185
     e2c:	bf 4f       	sbci	r27, 0xFF	; 255
     e2e:	fe 01       	movw	r30, r28
     e30:	e5 5b       	subi	r30, 0xB5	; 181
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	8d 93       	st	X+, r24
     e3a:	9c 93       	st	X, r25
     e3c:	fe 01       	movw	r30, r28
     e3e:	e9 5b       	subi	r30, 0xB9	; 185
     e40:	ff 4f       	sbci	r31, 0xFF	; 255
     e42:	80 81       	ld	r24, Z
     e44:	91 81       	ldd	r25, Z+1	; 0x01
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <LCDinit+0x316>
     e4a:	fe 01       	movw	r30, r28
     e4c:	e9 5b       	subi	r30, 0xB9	; 185
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	80 83       	st	Z, r24
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e54:	a5 e3       	ldi	r26, 0x35	; 53
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e5 e3       	ldi	r30, 0x35	; 53
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	8b 7f       	andi	r24, 0xFB	; 251
     e60:	8c 93       	st	X, r24
     e62:	fe 01       	movw	r30, r28
     e64:	ed 5b       	subi	r30, 0xBD	; 189
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	a0 e8       	ldi	r26, 0x80	; 128
     e6e:	bf e3       	ldi	r27, 0x3F	; 63
     e70:	80 83       	st	Z, r24
     e72:	91 83       	std	Z+1, r25	; 0x01
     e74:	a2 83       	std	Z+2, r26	; 0x02
     e76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e78:	8e 01       	movw	r16, r28
     e7a:	01 5c       	subi	r16, 0xC1	; 193
     e7c:	1f 4f       	sbci	r17, 0xFF	; 255
     e7e:	fe 01       	movw	r30, r28
     e80:	ed 5b       	subi	r30, 0xBD	; 189
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	60 81       	ld	r22, Z
     e86:	71 81       	ldd	r23, Z+1	; 0x01
     e88:	82 81       	ldd	r24, Z+2	; 0x02
     e8a:	93 81       	ldd	r25, Z+3	; 0x03
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	4a e7       	ldi	r20, 0x7A	; 122
     e92:	54 e4       	ldi	r21, 0x44	; 68
     e94:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	f8 01       	movw	r30, r16
     e9e:	80 83       	st	Z, r24
     ea0:	91 83       	std	Z+1, r25	; 0x01
     ea2:	a2 83       	std	Z+2, r26	; 0x02
     ea4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ea6:	fe 01       	movw	r30, r28
     ea8:	ff 96       	adiw	r30, 0x3f	; 63
     eaa:	60 81       	ld	r22, Z
     eac:	71 81       	ldd	r23, Z+1	; 0x01
     eae:	82 81       	ldd	r24, Z+2	; 0x02
     eb0:	93 81       	ldd	r25, Z+3	; 0x03
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e8       	ldi	r20, 0x80	; 128
     eb8:	5f e3       	ldi	r21, 0x3F	; 63
     eba:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
     ebe:	88 23       	and	r24, r24
     ec0:	2c f4       	brge	.+10     	; 0xecc <LCDinit+0x39c>
		__ticks = 1;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	9e af       	std	Y+62, r25	; 0x3e
     ec8:	8d af       	std	Y+61, r24	; 0x3d
     eca:	46 c0       	rjmp	.+140    	; 0xf58 <LCDinit+0x428>
	else if (__tmp > 65535)
     ecc:	fe 01       	movw	r30, r28
     ece:	ff 96       	adiw	r30, 0x3f	; 63
     ed0:	60 81       	ld	r22, Z
     ed2:	71 81       	ldd	r23, Z+1	; 0x01
     ed4:	82 81       	ldd	r24, Z+2	; 0x02
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	3f ef       	ldi	r19, 0xFF	; 255
     edc:	4f e7       	ldi	r20, 0x7F	; 127
     ede:	57 e4       	ldi	r21, 0x47	; 71
     ee0:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
     ee4:	18 16       	cp	r1, r24
     ee6:	64 f5       	brge	.+88     	; 0xf40 <LCDinit+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee8:	fe 01       	movw	r30, r28
     eea:	ed 5b       	subi	r30, 0xBD	; 189
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	60 81       	ld	r22, Z
     ef0:	71 81       	ldd	r23, Z+1	; 0x01
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e2       	ldi	r20, 0x20	; 32
     efc:	51 e4       	ldi	r21, 0x41	; 65
     efe:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	bc 01       	movw	r22, r24
     f08:	cd 01       	movw	r24, r26
     f0a:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	9e af       	std	Y+62, r25	; 0x3e
     f14:	8d af       	std	Y+61, r24	; 0x3d
     f16:	0f c0       	rjmp	.+30     	; 0xf36 <LCDinit+0x406>
     f18:	84 e6       	ldi	r24, 0x64	; 100
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9c af       	std	Y+60, r25	; 0x3c
     f1e:	8b af       	std	Y+59, r24	; 0x3b
     f20:	8b ad       	ldd	r24, Y+59	; 0x3b
     f22:	9c ad       	ldd	r25, Y+60	; 0x3c
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	f1 f7       	brne	.-4      	; 0xf24 <LCDinit+0x3f4>
     f28:	9c af       	std	Y+60, r25	; 0x3c
     f2a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2c:	8d ad       	ldd	r24, Y+61	; 0x3d
     f2e:	9e ad       	ldd	r25, Y+62	; 0x3e
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	9e af       	std	Y+62, r25	; 0x3e
     f34:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f36:	8d ad       	ldd	r24, Y+61	; 0x3d
     f38:	9e ad       	ldd	r25, Y+62	; 0x3e
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	69 f7       	brne	.-38     	; 0xf18 <LCDinit+0x3e8>
     f3e:	16 c0       	rjmp	.+44     	; 0xf6c <LCDinit+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f40:	fe 01       	movw	r30, r28
     f42:	ff 96       	adiw	r30, 0x3f	; 63
     f44:	60 81       	ld	r22, Z
     f46:	71 81       	ldd	r23, Z+1	; 0x01
     f48:	82 81       	ldd	r24, Z+2	; 0x02
     f4a:	93 81       	ldd	r25, Z+3	; 0x03
     f4c:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	9e af       	std	Y+62, r25	; 0x3e
     f56:	8d af       	std	Y+61, r24	; 0x3d
     f58:	8d ad       	ldd	r24, Y+61	; 0x3d
     f5a:	9e ad       	ldd	r25, Y+62	; 0x3e
     f5c:	9a af       	std	Y+58, r25	; 0x3a
     f5e:	89 af       	std	Y+57, r24	; 0x39
     f60:	89 ad       	ldd	r24, Y+57	; 0x39
     f62:	9a ad       	ldd	r25, Y+58	; 0x3a
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <LCDinit+0x434>
     f68:	9a af       	std	Y+58, r25	; 0x3a
     f6a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     f6c:	e5 e3       	ldi	r30, 0x35	; 53
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 e3       	ldi	r24, 0x30	; 48
     f72:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     f74:	a5 e3       	ldi	r26, 0x35	; 53
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e5 e3       	ldi	r30, 0x35	; 53
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	84 60       	ori	r24, 0x04	; 4
     f80:	8c 93       	st	X, r24
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	a0 e8       	ldi	r26, 0x80	; 128
     f88:	bf e3       	ldi	r27, 0x3F	; 63
     f8a:	8d ab       	std	Y+53, r24	; 0x35
     f8c:	9e ab       	std	Y+54, r25	; 0x36
     f8e:	af ab       	std	Y+55, r26	; 0x37
     f90:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f92:	6d a9       	ldd	r22, Y+53	; 0x35
     f94:	7e a9       	ldd	r23, Y+54	; 0x36
     f96:	8f a9       	ldd	r24, Y+55	; 0x37
     f98:	98 ad       	ldd	r25, Y+56	; 0x38
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	4a e7       	ldi	r20, 0x7A	; 122
     fa0:	54 e4       	ldi	r21, 0x44	; 68
     fa2:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	89 ab       	std	Y+49, r24	; 0x31
     fac:	9a ab       	std	Y+50, r25	; 0x32
     fae:	ab ab       	std	Y+51, r26	; 0x33
     fb0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fb2:	69 a9       	ldd	r22, Y+49	; 0x31
     fb4:	7a a9       	ldd	r23, Y+50	; 0x32
     fb6:	8b a9       	ldd	r24, Y+51	; 0x33
     fb8:	9c a9       	ldd	r25, Y+52	; 0x34
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e8       	ldi	r20, 0x80	; 128
     fc0:	5f e3       	ldi	r21, 0x3F	; 63
     fc2:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
     fc6:	88 23       	and	r24, r24
     fc8:	2c f4       	brge	.+10     	; 0xfd4 <LCDinit+0x4a4>
		__ticks = 1;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	98 ab       	std	Y+48, r25	; 0x30
     fd0:	8f a7       	std	Y+47, r24	; 0x2f
     fd2:	3f c0       	rjmp	.+126    	; 0x1052 <LCDinit+0x522>
	else if (__tmp > 65535)
     fd4:	69 a9       	ldd	r22, Y+49	; 0x31
     fd6:	7a a9       	ldd	r23, Y+50	; 0x32
     fd8:	8b a9       	ldd	r24, Y+51	; 0x33
     fda:	9c a9       	ldd	r25, Y+52	; 0x34
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	3f ef       	ldi	r19, 0xFF	; 255
     fe0:	4f e7       	ldi	r20, 0x7F	; 127
     fe2:	57 e4       	ldi	r21, 0x47	; 71
     fe4:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
     fe8:	18 16       	cp	r1, r24
     fea:	4c f5       	brge	.+82     	; 0x103e <LCDinit+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fec:	6d a9       	ldd	r22, Y+53	; 0x35
     fee:	7e a9       	ldd	r23, Y+54	; 0x36
     ff0:	8f a9       	ldd	r24, Y+55	; 0x37
     ff2:	98 ad       	ldd	r25, Y+56	; 0x38
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e2       	ldi	r20, 0x20	; 32
     ffa:	51 e4       	ldi	r21, 0x41	; 65
     ffc:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	bc 01       	movw	r22, r24
    1006:	cd 01       	movw	r24, r26
    1008:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	98 ab       	std	Y+48, r25	; 0x30
    1012:	8f a7       	std	Y+47, r24	; 0x2f
    1014:	0f c0       	rjmp	.+30     	; 0x1034 <LCDinit+0x504>
    1016:	84 e6       	ldi	r24, 0x64	; 100
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	9e a7       	std	Y+46, r25	; 0x2e
    101c:	8d a7       	std	Y+45, r24	; 0x2d
    101e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1020:	9e a5       	ldd	r25, Y+46	; 0x2e
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	f1 f7       	brne	.-4      	; 0x1022 <LCDinit+0x4f2>
    1026:	9e a7       	std	Y+46, r25	; 0x2e
    1028:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    102a:	8f a5       	ldd	r24, Y+47	; 0x2f
    102c:	98 a9       	ldd	r25, Y+48	; 0x30
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	98 ab       	std	Y+48, r25	; 0x30
    1032:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1034:	8f a5       	ldd	r24, Y+47	; 0x2f
    1036:	98 a9       	ldd	r25, Y+48	; 0x30
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	69 f7       	brne	.-38     	; 0x1016 <LCDinit+0x4e6>
    103c:	14 c0       	rjmp	.+40     	; 0x1066 <LCDinit+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103e:	69 a9       	ldd	r22, Y+49	; 0x31
    1040:	7a a9       	ldd	r23, Y+50	; 0x32
    1042:	8b a9       	ldd	r24, Y+51	; 0x33
    1044:	9c a9       	ldd	r25, Y+52	; 0x34
    1046:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	98 ab       	std	Y+48, r25	; 0x30
    1050:	8f a7       	std	Y+47, r24	; 0x2f
    1052:	8f a5       	ldd	r24, Y+47	; 0x2f
    1054:	98 a9       	ldd	r25, Y+48	; 0x30
    1056:	9c a7       	std	Y+44, r25	; 0x2c
    1058:	8b a7       	std	Y+43, r24	; 0x2b
    105a:	8b a5       	ldd	r24, Y+43	; 0x2b
    105c:	9c a5       	ldd	r25, Y+44	; 0x2c
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <LCDinit+0x52e>
    1062:	9c a7       	std	Y+44, r25	; 0x2c
    1064:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1066:	a5 e3       	ldi	r26, 0x35	; 53
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e5 e3       	ldi	r30, 0x35	; 53
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8b 7f       	andi	r24, 0xFB	; 251
    1072:	8c 93       	st	X, r24
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	a0 e8       	ldi	r26, 0x80	; 128
    107a:	bf e3       	ldi	r27, 0x3F	; 63
    107c:	8f a3       	std	Y+39, r24	; 0x27
    107e:	98 a7       	std	Y+40, r25	; 0x28
    1080:	a9 a7       	std	Y+41, r26	; 0x29
    1082:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1084:	6f a1       	ldd	r22, Y+39	; 0x27
    1086:	78 a5       	ldd	r23, Y+40	; 0x28
    1088:	89 a5       	ldd	r24, Y+41	; 0x29
    108a:	9a a5       	ldd	r25, Y+42	; 0x2a
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	4a e7       	ldi	r20, 0x7A	; 122
    1092:	54 e4       	ldi	r21, 0x44	; 68
    1094:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	8b a3       	std	Y+35, r24	; 0x23
    109e:	9c a3       	std	Y+36, r25	; 0x24
    10a0:	ad a3       	std	Y+37, r26	; 0x25
    10a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10a4:	6b a1       	ldd	r22, Y+35	; 0x23
    10a6:	7c a1       	ldd	r23, Y+36	; 0x24
    10a8:	8d a1       	ldd	r24, Y+37	; 0x25
    10aa:	9e a1       	ldd	r25, Y+38	; 0x26
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e8       	ldi	r20, 0x80	; 128
    10b2:	5f e3       	ldi	r21, 0x3F	; 63
    10b4:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
    10b8:	88 23       	and	r24, r24
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <LCDinit+0x596>
		__ticks = 1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	9a a3       	std	Y+34, r25	; 0x22
    10c2:	89 a3       	std	Y+33, r24	; 0x21
    10c4:	3f c0       	rjmp	.+126    	; 0x1144 <LCDinit+0x614>
	else if (__tmp > 65535)
    10c6:	6b a1       	ldd	r22, Y+35	; 0x23
    10c8:	7c a1       	ldd	r23, Y+36	; 0x24
    10ca:	8d a1       	ldd	r24, Y+37	; 0x25
    10cc:	9e a1       	ldd	r25, Y+38	; 0x26
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    10d2:	4f e7       	ldi	r20, 0x7F	; 127
    10d4:	57 e4       	ldi	r21, 0x47	; 71
    10d6:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
    10da:	18 16       	cp	r1, r24
    10dc:	4c f5       	brge	.+82     	; 0x1130 <LCDinit+0x600>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10de:	6f a1       	ldd	r22, Y+39	; 0x27
    10e0:	78 a5       	ldd	r23, Y+40	; 0x28
    10e2:	89 a5       	ldd	r24, Y+41	; 0x29
    10e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e2       	ldi	r20, 0x20	; 32
    10ec:	51 e4       	ldi	r21, 0x41	; 65
    10ee:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	9a a3       	std	Y+34, r25	; 0x22
    1104:	89 a3       	std	Y+33, r24	; 0x21
    1106:	0f c0       	rjmp	.+30     	; 0x1126 <LCDinit+0x5f6>
    1108:	84 e6       	ldi	r24, 0x64	; 100
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	98 a3       	std	Y+32, r25	; 0x20
    110e:	8f 8f       	std	Y+31, r24	; 0x1f
    1110:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1112:	98 a1       	ldd	r25, Y+32	; 0x20
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <LCDinit+0x5e4>
    1118:	98 a3       	std	Y+32, r25	; 0x20
    111a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111c:	89 a1       	ldd	r24, Y+33	; 0x21
    111e:	9a a1       	ldd	r25, Y+34	; 0x22
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	9a a3       	std	Y+34, r25	; 0x22
    1124:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1126:	89 a1       	ldd	r24, Y+33	; 0x21
    1128:	9a a1       	ldd	r25, Y+34	; 0x22
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	69 f7       	brne	.-38     	; 0x1108 <LCDinit+0x5d8>
    112e:	14 c0       	rjmp	.+40     	; 0x1158 <LCDinit+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1130:	6b a1       	ldd	r22, Y+35	; 0x23
    1132:	7c a1       	ldd	r23, Y+36	; 0x24
    1134:	8d a1       	ldd	r24, Y+37	; 0x25
    1136:	9e a1       	ldd	r25, Y+38	; 0x26
    1138:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	9a a3       	std	Y+34, r25	; 0x22
    1142:	89 a3       	std	Y+33, r24	; 0x21
    1144:	89 a1       	ldd	r24, Y+33	; 0x21
    1146:	9a a1       	ldd	r25, Y+34	; 0x22
    1148:	9e 8f       	std	Y+30, r25	; 0x1e
    114a:	8d 8f       	std	Y+29, r24	; 0x1d
    114c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    114e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <LCDinit+0x620>
    1154:	9e 8f       	std	Y+30, r25	; 0x1e
    1156:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1158:	e5 e3       	ldi	r30, 0x35	; 53
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 e2       	ldi	r24, 0x20	; 32
    115e:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1160:	a5 e3       	ldi	r26, 0x35	; 53
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e5 e3       	ldi	r30, 0x35	; 53
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	84 60       	ori	r24, 0x04	; 4
    116c:	8c 93       	st	X, r24
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	a0 e8       	ldi	r26, 0x80	; 128
    1174:	bf e3       	ldi	r27, 0x3F	; 63
    1176:	89 8f       	std	Y+25, r24	; 0x19
    1178:	9a 8f       	std	Y+26, r25	; 0x1a
    117a:	ab 8f       	std	Y+27, r26	; 0x1b
    117c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    117e:	69 8d       	ldd	r22, Y+25	; 0x19
    1180:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	4a e7       	ldi	r20, 0x7A	; 122
    118c:	54 e4       	ldi	r21, 0x44	; 68
    118e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	8d 8b       	std	Y+21, r24	; 0x15
    1198:	9e 8b       	std	Y+22, r25	; 0x16
    119a:	af 8b       	std	Y+23, r26	; 0x17
    119c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    119e:	6d 89       	ldd	r22, Y+21	; 0x15
    11a0:	7e 89       	ldd	r23, Y+22	; 0x16
    11a2:	8f 89       	ldd	r24, Y+23	; 0x17
    11a4:	98 8d       	ldd	r25, Y+24	; 0x18
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	40 e8       	ldi	r20, 0x80	; 128
    11ac:	5f e3       	ldi	r21, 0x3F	; 63
    11ae:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
    11b2:	88 23       	and	r24, r24
    11b4:	2c f4       	brge	.+10     	; 0x11c0 <LCDinit+0x690>
		__ticks = 1;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	9c 8b       	std	Y+20, r25	; 0x14
    11bc:	8b 8b       	std	Y+19, r24	; 0x13
    11be:	3f c0       	rjmp	.+126    	; 0x123e <LCDinit+0x70e>
	else if (__tmp > 65535)
    11c0:	6d 89       	ldd	r22, Y+21	; 0x15
    11c2:	7e 89       	ldd	r23, Y+22	; 0x16
    11c4:	8f 89       	ldd	r24, Y+23	; 0x17
    11c6:	98 8d       	ldd	r25, Y+24	; 0x18
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	3f ef       	ldi	r19, 0xFF	; 255
    11cc:	4f e7       	ldi	r20, 0x7F	; 127
    11ce:	57 e4       	ldi	r21, 0x47	; 71
    11d0:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
    11d4:	18 16       	cp	r1, r24
    11d6:	4c f5       	brge	.+82     	; 0x122a <LCDinit+0x6fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d8:	69 8d       	ldd	r22, Y+25	; 0x19
    11da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e2       	ldi	r20, 0x20	; 32
    11e6:	51 e4       	ldi	r21, 0x41	; 65
    11e8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	bc 01       	movw	r22, r24
    11f2:	cd 01       	movw	r24, r26
    11f4:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	9c 8b       	std	Y+20, r25	; 0x14
    11fe:	8b 8b       	std	Y+19, r24	; 0x13
    1200:	0f c0       	rjmp	.+30     	; 0x1220 <LCDinit+0x6f0>
    1202:	84 e6       	ldi	r24, 0x64	; 100
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	9a 8b       	std	Y+18, r25	; 0x12
    1208:	89 8b       	std	Y+17, r24	; 0x11
    120a:	89 89       	ldd	r24, Y+17	; 0x11
    120c:	9a 89       	ldd	r25, Y+18	; 0x12
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <LCDinit+0x6de>
    1212:	9a 8b       	std	Y+18, r25	; 0x12
    1214:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1216:	8b 89       	ldd	r24, Y+19	; 0x13
    1218:	9c 89       	ldd	r25, Y+20	; 0x14
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	9c 8b       	std	Y+20, r25	; 0x14
    121e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1220:	8b 89       	ldd	r24, Y+19	; 0x13
    1222:	9c 89       	ldd	r25, Y+20	; 0x14
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	69 f7       	brne	.-38     	; 0x1202 <LCDinit+0x6d2>
    1228:	14 c0       	rjmp	.+40     	; 0x1252 <LCDinit+0x722>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    122a:	6d 89       	ldd	r22, Y+21	; 0x15
    122c:	7e 89       	ldd	r23, Y+22	; 0x16
    122e:	8f 89       	ldd	r24, Y+23	; 0x17
    1230:	98 8d       	ldd	r25, Y+24	; 0x18
    1232:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	9c 8b       	std	Y+20, r25	; 0x14
    123c:	8b 8b       	std	Y+19, r24	; 0x13
    123e:	8b 89       	ldd	r24, Y+19	; 0x13
    1240:	9c 89       	ldd	r25, Y+20	; 0x14
    1242:	98 8b       	std	Y+16, r25	; 0x10
    1244:	8f 87       	std	Y+15, r24	; 0x0f
    1246:	8f 85       	ldd	r24, Y+15	; 0x0f
    1248:	98 89       	ldd	r25, Y+16	; 0x10
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	f1 f7       	brne	.-4      	; 0x124a <LCDinit+0x71a>
    124e:	98 8b       	std	Y+16, r25	; 0x10
    1250:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1252:	a5 e3       	ldi	r26, 0x35	; 53
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e5 e3       	ldi	r30, 0x35	; 53
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8b 7f       	andi	r24, 0xFB	; 251
    125e:	8c 93       	st	X, r24
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a0 e8       	ldi	r26, 0x80	; 128
    1266:	bf e3       	ldi	r27, 0x3F	; 63
    1268:	8b 87       	std	Y+11, r24	; 0x0b
    126a:	9c 87       	std	Y+12, r25	; 0x0c
    126c:	ad 87       	std	Y+13, r26	; 0x0d
    126e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1270:	6b 85       	ldd	r22, Y+11	; 0x0b
    1272:	7c 85       	ldd	r23, Y+12	; 0x0c
    1274:	8d 85       	ldd	r24, Y+13	; 0x0d
    1276:	9e 85       	ldd	r25, Y+14	; 0x0e
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	4a e7       	ldi	r20, 0x7A	; 122
    127e:	54 e4       	ldi	r21, 0x44	; 68
    1280:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	8f 83       	std	Y+7, r24	; 0x07
    128a:	98 87       	std	Y+8, r25	; 0x08
    128c:	a9 87       	std	Y+9, r26	; 0x09
    128e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1290:	6f 81       	ldd	r22, Y+7	; 0x07
    1292:	78 85       	ldd	r23, Y+8	; 0x08
    1294:	89 85       	ldd	r24, Y+9	; 0x09
    1296:	9a 85       	ldd	r25, Y+10	; 0x0a
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e8       	ldi	r20, 0x80	; 128
    129e:	5f e3       	ldi	r21, 0x3F	; 63
    12a0:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__ltsf2>
    12a4:	88 23       	and	r24, r24
    12a6:	2c f4       	brge	.+10     	; 0x12b2 <LCDinit+0x782>
		__ticks = 1;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	3f c0       	rjmp	.+126    	; 0x1330 <LCDinit+0x800>
	else if (__tmp > 65535)
    12b2:	6f 81       	ldd	r22, Y+7	; 0x07
    12b4:	78 85       	ldd	r23, Y+8	; 0x08
    12b6:	89 85       	ldd	r24, Y+9	; 0x09
    12b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	3f ef       	ldi	r19, 0xFF	; 255
    12be:	4f e7       	ldi	r20, 0x7F	; 127
    12c0:	57 e4       	ldi	r21, 0x47	; 71
    12c2:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__gtsf2>
    12c6:	18 16       	cp	r1, r24
    12c8:	4c f5       	brge	.+82     	; 0x131c <LCDinit+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    12cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e2       	ldi	r20, 0x20	; 32
    12d8:	51 e4       	ldi	r21, 0x41	; 65
    12da:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__mulsf3>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	0f c0       	rjmp	.+30     	; 0x1312 <LCDinit+0x7e2>
    12f4:	84 e6       	ldi	r24, 0x64	; 100
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9c 83       	std	Y+4, r25	; 0x04
    12fa:	8b 83       	std	Y+3, r24	; 0x03
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <LCDinit+0x7d0>
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
    130a:	9e 81       	ldd	r25, Y+6	; 0x06
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	69 f7       	brne	.-38     	; 0x12f4 <LCDinit+0x7c4>
    131a:	14 c0       	rjmp	.+40     	; 0x1344 <LCDinit+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131c:	6f 81       	ldd	r22, Y+7	; 0x07
    131e:	78 85       	ldd	r23, Y+8	; 0x08
    1320:	89 85       	ldd	r24, Y+9	; 0x09
    1322:	9a 85       	ldd	r25, Y+10	; 0x0a
    1324:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9e 83       	std	Y+6, r25	; 0x06
    132e:	8d 83       	std	Y+5, r24	; 0x05
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	9a 83       	std	Y+2, r25	; 0x02
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <LCDinit+0x80c>
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1344:	88 e2       	ldi	r24, 0x28	; 40
    1346:	0e 94 8f 03 	call	0x71e	; 0x71e <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    134a:	8c e0       	ldi	r24, 0x0C	; 12
    134c:	0e 94 8f 03 	call	0x71e	; 0x71e <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
    1350:	fe 01       	movw	r30, r28
    1352:	ec 59       	subi	r30, 0x9C	; 156
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	10 82       	st	Z, r1
    1358:	fe 01       	movw	r30, r28
    135a:	ed 59       	subi	r30, 0x9D	; 157
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	10 82       	st	Z, r1
    1360:	23 c0       	rjmp	.+70     	; 0x13a8 <LCDinit+0x878>
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1362:	fe 01       	movw	r30, r28
    1364:	ec 59       	subi	r30, 0x9C	; 156
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	80 81       	ld	r24, Z
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	9c 01       	movw	r18, r24
    1370:	2c 5a       	subi	r18, 0xAC	; 172
    1372:	3f 4f       	sbci	r19, 0xFF	; 255
    1374:	fe 01       	movw	r30, r28
    1376:	ed 59       	subi	r30, 0x9D	; 157
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	40 81       	ld	r20, Z
    137c:	de 01       	movw	r26, r28
    137e:	ad 59       	subi	r26, 0x9D	; 157
    1380:	bf 4f       	sbci	r27, 0xFF	; 255
    1382:	fe 01       	movw	r30, r28
    1384:	ed 59       	subi	r30, 0x9D	; 157
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	80 81       	ld	r24, Z
    138a:	8f 5f       	subi	r24, 0xFF	; 255
    138c:	8c 93       	st	X, r24
    138e:	c9 01       	movw	r24, r18
    1390:	64 2f       	mov	r22, r20
    1392:	0e 94 aa 0a 	call	0x1554	; 0x1554 <LCDdefinechar>
		ch=ch+8;
    1396:	de 01       	movw	r26, r28
    1398:	ac 59       	subi	r26, 0x9C	; 156
    139a:	bf 4f       	sbci	r27, 0xFF	; 255
    139c:	fe 01       	movw	r30, r28
    139e:	ec 59       	subi	r30, 0x9C	; 156
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	80 81       	ld	r24, Z
    13a4:	88 5f       	subi	r24, 0xF8	; 248
    13a6:	8c 93       	st	X, r24
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    13a8:	fe 01       	movw	r30, r28
    13aa:	ec 59       	subi	r30, 0x9C	; 156
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	80 81       	ld	r24, Z
    13b0:	80 34       	cpi	r24, 0x40	; 64
    13b2:	b8 f2       	brcs	.-82     	; 0x1362 <LCDinit+0x832>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    13b4:	cc 59       	subi	r28, 0x9C	; 156
    13b6:	df 4f       	sbci	r29, 0xFF	; 255
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	08 95       	ret

000013cc <LCDclr>:
void LCDclr(void)				//Clears LCD
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_CLR);
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	0e 94 8f 03 	call	0x71e	; 0x71e <LCDsendCommand>
}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_HOME);
    13e8:	82 e0       	ldi	r24, 0x02	; 2
    13ea:	0e 94 8f 03 	call	0x71e	; 0x71e <LCDsendCommand>
}
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <LCDstring+0x6>
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <LCDstring+0x8>
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	9a 83       	std	Y+2, r25	; 0x02
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	6b 83       	std	Y+3, r22	; 0x03
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	a1 f0       	breq	.+40     	; 0x1436 <LCDstring+0x42>

	// print data
	for(i=0; i<nBytes; i++)
    140e:	1c 82       	std	Y+4, r1	; 0x04
    1410:	0e c0       	rjmp	.+28     	; 0x142e <LCDstring+0x3a>
	{
		LCDsendChar(data[i]);
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	fc 01       	movw	r30, r24
    141e:	e2 0f       	add	r30, r18
    1420:	f3 1f       	adc	r31, r19
    1422:	80 81       	ld	r24, Z
    1424:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	9f 5f       	subi	r25, 0xFF	; 255
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	9c 81       	ldd	r25, Y+4	; 0x04
    1432:	98 17       	cp	r25, r24
    1434:	70 f3       	brcs	.-36     	; 0x1412 <LCDstring+0x1e>
	{
		LCDsendChar(data[i]);
	}
}
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	00 d0       	rcall	.+0      	; 0x144a <LCDGotoXY+0x6>
    144a:	00 d0       	rcall	.+0      	; 0x144c <LCDGotoXY+0x8>
    144c:	0f 92       	push	r0
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	6a 83       	std	Y+2, r22	; 0x02
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3d 83       	std	Y+5, r19	; 0x05
    145e:	2c 83       	std	Y+4, r18	; 0x04
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	9d 81       	ldd	r25, Y+5	; 0x05
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	91 05       	cpc	r25, r1
    1468:	c1 f0       	breq	.+48     	; 0x149a <LCDGotoXY+0x56>
    146a:	2c 81       	ldd	r18, Y+4	; 0x04
    146c:	3d 81       	ldd	r19, Y+5	; 0x05
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	2c f4       	brge	.+10     	; 0x147e <LCDGotoXY+0x3a>
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	61 f0       	breq	.+24     	; 0x1494 <LCDGotoXY+0x50>
    147c:	1d c0       	rjmp	.+58     	; 0x14b8 <LCDGotoXY+0x74>
    147e:	2c 81       	ldd	r18, Y+4	; 0x04
    1480:	3d 81       	ldd	r19, Y+5	; 0x05
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	71 f0       	breq	.+28     	; 0x14a4 <LCDGotoXY+0x60>
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	9d 81       	ldd	r25, Y+5	; 0x05
    148c:	83 30       	cpi	r24, 0x03	; 3
    148e:	91 05       	cpc	r25, r1
    1490:	71 f0       	breq	.+28     	; 0x14ae <LCDGotoXY+0x6a>
    1492:	12 c0       	rjmp	.+36     	; 0x14b8 <LCDGotoXY+0x74>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
    1494:	99 81       	ldd	r25, Y+1	; 0x01
    1496:	9b 83       	std	Y+3, r25	; 0x03
    1498:	11 c0       	rjmp	.+34     	; 0x14bc <LCDGotoXY+0x78>
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	28 2f       	mov	r18, r24
    149e:	20 5c       	subi	r18, 0xC0	; 192
    14a0:	2b 83       	std	Y+3, r18	; 0x03
    14a2:	0c c0       	rjmp	.+24     	; 0x14bc <LCDGotoXY+0x78>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	38 2f       	mov	r19, r24
    14a8:	3c 5e       	subi	r19, 0xEC	; 236
    14aa:	3b 83       	std	Y+3, r19	; 0x03
    14ac:	07 c0       	rjmp	.+14     	; 0x14bc <LCDGotoXY+0x78>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	98 2f       	mov	r25, r24
    14b2:	9c 5a       	subi	r25, 0xAC	; 172
    14b4:	9b 83       	std	Y+3, r25	; 0x03
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <LCDGotoXY+0x78>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
    14b8:	29 81       	ldd	r18, Y+1	; 0x01
    14ba:	2b 83       	std	Y+3, r18	; 0x03
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	80 68       	ori	r24, 0x80	; 128
    14c0:	0e 94 8f 03 	call	0x71e	; 0x71e <LCDsendCommand>
	
}
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	2b 97       	sbiw	r28, 0x0b	; 11
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	99 87       	std	Y+9, r25	; 0x09
    14ea:	88 87       	std	Y+8, r24	; 0x08
    14ec:	6a 87       	std	Y+10, r22	; 0x0a
    14ee:	4b 87       	std	Y+11, r20	; 0x0b
	uint8_t i;
	LCDGotoXY(x,y);
    14f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    14f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f4:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    14f8:	1f 82       	std	Y+7, r1	; 0x07
    14fa:	13 c0       	rjmp	.+38     	; 0x1522 <CopyStringtoLCD+0x4e>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    14fc:	8f 81       	ldd	r24, Y+7	; 0x07
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	88 85       	ldd	r24, Y+8	; 0x08
    1504:	99 85       	ldd	r25, Y+9	; 0x09
    1506:	82 0f       	add	r24, r18
    1508:	93 1f       	adc	r25, r19
    150a:	9e 83       	std	Y+6, r25	; 0x06
    150c:	8d 83       	std	Y+5, r24	; 0x05
    150e:	ed 81       	ldd	r30, Y+5	; 0x05
    1510:	fe 81       	ldd	r31, Y+6	; 0x06
    1512:	84 91       	lpm	r24, Z+
    1514:	8c 83       	std	Y+4, r24	; 0x04
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    151c:	8f 81       	ldd	r24, Y+7	; 0x07
    151e:	8f 5f       	subi	r24, 0xFF	; 255
    1520:	8f 83       	std	Y+7, r24	; 0x07
    1522:	8f 81       	ldd	r24, Y+7	; 0x07
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	88 85       	ldd	r24, Y+8	; 0x08
    152a:	99 85       	ldd	r25, Y+9	; 0x09
    152c:	82 0f       	add	r24, r18
    152e:	93 1f       	adc	r25, r19
    1530:	9b 83       	std	Y+3, r25	; 0x03
    1532:	8a 83       	std	Y+2, r24	; 0x02
    1534:	ea 81       	ldd	r30, Y+2	; 0x02
    1536:	fb 81       	ldd	r31, Y+3	; 0x03
    1538:	84 91       	lpm	r24, Z+
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	88 23       	and	r24, r24
    1540:	e9 f6       	brne	.-70     	; 0x14fc <CopyStringtoLCD+0x28>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1542:	2b 96       	adiw	r28, 0x0b	; 11
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	2a 97       	sbiw	r28, 0x0a	; 10
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	99 87       	std	Y+9, r25	; 0x09
    156a:	88 87       	std	Y+8, r24	; 0x08
    156c:	6a 87       	std	Y+10, r22	; 0x0a
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    156e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	80 64       	ori	r24, 0x40	; 64
    1582:	8f 83       	std	Y+7, r24	; 0x07
	for (i=0; i<8; i++){
    1584:	1d 82       	std	Y+5, r1	; 0x05
    1586:	1c 82       	std	Y+4, r1	; 0x04
    1588:	1d c0       	rjmp	.+58     	; 0x15c4 <LCDdefinechar+0x70>
		pcc=pgm_read_byte(&pc[i]);
    158a:	28 85       	ldd	r18, Y+8	; 0x08
    158c:	39 85       	ldd	r19, Y+9	; 0x09
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	9d 81       	ldd	r25, Y+5	; 0x05
    1592:	82 0f       	add	r24, r18
    1594:	93 1f       	adc	r25, r19
    1596:	9b 83       	std	Y+3, r25	; 0x03
    1598:	8a 83       	std	Y+2, r24	; 0x02
    159a:	ea 81       	ldd	r30, Y+2	; 0x02
    159c:	fb 81       	ldd	r31, Y+3	; 0x03
    159e:	84 91       	lpm	r24, Z+
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	8e 83       	std	Y+6, r24	; 0x06
		LCDsendCommand(a++);
    15a6:	9f 81       	ldd	r25, Y+7	; 0x07
    15a8:	8f 81       	ldd	r24, Y+7	; 0x07
    15aa:	8f 5f       	subi	r24, 0xFF	; 255
    15ac:	8f 83       	std	Y+7, r24	; 0x07
    15ae:	89 2f       	mov	r24, r25
    15b0:	0e 94 8f 03 	call	0x71e	; 0x71e <LCDsendCommand>
		LCDsendChar(pcc);
    15b4:	8e 81       	ldd	r24, Y+6	; 0x06
    15b6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	9d 83       	std	Y+5, r25	; 0x05
    15c2:	8c 83       	std	Y+4, r24	; 0x04
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	88 30       	cpi	r24, 0x08	; 8
    15ca:	91 05       	cpc	r25, r1
    15cc:	f0 f2       	brcs	.-68     	; 0x158a <LCDdefinechar+0x36>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    15ce:	2a 96       	adiw	r28, 0x0a	; 10
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <LCDshiftLeft>:

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <LCDshiftLeft+0x6>
    15e6:	0f 92       	push	r0
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    15ee:	1a 82       	std	Y+2, r1	; 0x02
    15f0:	19 82       	std	Y+1, r1	; 0x01
    15f2:	08 c0       	rjmp	.+16     	; 0x1604 <LCDshiftLeft+0x24>
	{
		LCDsendCommand(0x1E);
    15f4:	8e e1       	ldi	r24, 0x1E	; 30
    15f6:	0e 94 8f 03 	call	0x71e	; 0x71e <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	9a 81       	ldd	r25, Y+2	; 0x02
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	9a 83       	std	Y+2, r25	; 0x02
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	9a 81       	ldd	r25, Y+2	; 0x02
    160e:	82 17       	cp	r24, r18
    1610:	93 07       	cpc	r25, r19
    1612:	84 f3       	brlt	.-32     	; 0x15f4 <LCDshiftLeft+0x14>
	{
		LCDsendCommand(0x1E);
	}
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	00 d0       	rcall	.+0      	; 0x1626 <LCDshiftRight+0x6>
    1626:	0f 92       	push	r0
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    162e:	1a 82       	std	Y+2, r1	; 0x02
    1630:	19 82       	std	Y+1, r1	; 0x01
    1632:	08 c0       	rjmp	.+16     	; 0x1644 <LCDshiftRight+0x24>
	{
		LCDsendCommand(0x18);
    1634:	88 e1       	ldi	r24, 0x18	; 24
    1636:	0e 94 8f 03 	call	0x71e	; 0x71e <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	9a 83       	std	Y+2, r25	; 0x02
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	82 17       	cp	r24, r18
    1650:	93 07       	cpc	r25, r19
    1652:	84 f3       	brlt	.-32     	; 0x1634 <LCDshiftRight+0x14>
	{
		LCDsendCommand(0x18);
	}
}
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0E);
    1668:	8e e0       	ldi	r24, 0x0E	; 14
    166a:	0e 94 8f 03 	call	0x71e	; 0x71e <LCDsendCommand>
}
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0F);
    167c:	8f e0       	ldi	r24, 0x0F	; 15
    167e:	0e 94 8f 03 	call	0x71e	; 0x71e <LCDsendCommand>
}
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    1690:	8c e0       	ldi	r24, 0x0C	; 12
    1692:	0e 94 8f 03 	call	0x71e	; 0x71e <LCDsendCommand>
}
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <LCDblank>:
void LCDblank(void)		//blanks LCD
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x08);
    16a4:	88 e0       	ldi	r24, 0x08	; 8
    16a6:	0e 94 8f 03 	call	0x71e	; 0x71e <LCDsendCommand>
}
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    16b8:	8c e0       	ldi	r24, 0x0C	; 12
    16ba:	0e 94 8f 03 	call	0x71e	; 0x71e <LCDsendCommand>
}
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <LCDcursorLeft+0x6>
    16ca:	0f 92       	push	r0
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    16d2:	1a 82       	std	Y+2, r1	; 0x02
    16d4:	19 82       	std	Y+1, r1	; 0x01
    16d6:	08 c0       	rjmp	.+16     	; 0x16e8 <LCDcursorLeft+0x24>
	{
		LCDsendCommand(0x10);
    16d8:	80 e1       	ldi	r24, 0x10	; 16
    16da:	0e 94 8f 03 	call	0x71e	; 0x71e <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	9a 83       	std	Y+2, r25	; 0x02
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	82 17       	cp	r24, r18
    16f4:	93 07       	cpc	r25, r19
    16f6:	84 f3       	brlt	.-32     	; 0x16d8 <LCDcursorLeft+0x14>
	{
		LCDsendCommand(0x10);
	}
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	00 d0       	rcall	.+0      	; 0x170a <LCDcursorRight+0x6>
    170a:	0f 92       	push	r0
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	8b 83       	std	Y+3, r24	; 0x03
	for (i=0;i<n;i++)
    1712:	1a 82       	std	Y+2, r1	; 0x02
    1714:	19 82       	std	Y+1, r1	; 0x01
    1716:	08 c0       	rjmp	.+16     	; 0x1728 <LCDcursorRight+0x24>
	{
		LCDsendCommand(0x14);
    1718:	84 e1       	ldi	r24, 0x14	; 20
    171a:	0e 94 8f 03 	call	0x71e	; 0x71e <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	01 96       	adiw	r24, 0x01	; 1
    1724:	9a 83       	std	Y+2, r25	; 0x02
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	9a 81       	ldd	r25, Y+2	; 0x02
    1732:	82 17       	cp	r24, r18
    1734:	93 07       	cpc	r25, r19
    1736:	84 f3       	brlt	.-32     	; 0x1718 <LCDcursorRight+0x14>
	{
		LCDsendCommand(0x14);
	}
}
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	27 97       	sbiw	r28, 0x07	; 7
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	8d 83       	std	Y+5, r24	; 0x05
    175a:	6e 83       	std	Y+6, r22	; 0x06
    175c:	4f 83       	std	Y+7, r20	; 0x07
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	48 2f       	mov	r20, r24
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	8f 81       	ldd	r24, Y+7	; 0x07
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	c9 01       	movw	r24, r18
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	82 0f       	add	r24, r18
    1772:	93 1f       	adc	r25, r19
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	9a 01       	movw	r18, r20
    177a:	28 9f       	mul	r18, r24
    177c:	a0 01       	movw	r20, r0
    177e:	29 9f       	mul	r18, r25
    1780:	50 0d       	add	r21, r0
    1782:	38 9f       	mul	r19, r24
    1784:	50 0d       	add	r21, r0
    1786:	11 24       	eor	r1, r1
    1788:	8e 81       	ldd	r24, Y+6	; 0x06
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	ca 01       	movw	r24, r20
    1790:	b9 01       	movw	r22, r18
    1792:	0e 94 96 11 	call	0x232c	; 0x232c <__divmodhi4>
    1796:	cb 01       	movw	r24, r22
    1798:	9b 83       	std	Y+3, r25	; 0x03
    179a:	8a 83       	std	Y+2, r24	; 0x02
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    179c:	1c 82       	std	Y+4, r1	; 0x04
    179e:	35 c0       	rjmp	.+106    	; 0x180a <LCDprogressBar+0xc6>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	c9 01       	movw	r24, r18
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	82 0f       	add	r24, r18
    17ae:	93 1f       	adc	r25, r19
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	9c 01       	movw	r18, r24
    17b6:	2b 5f       	subi	r18, 0xFB	; 251
    17b8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	9b 81       	ldd	r25, Y+3	; 0x03
    17be:	82 17       	cp	r24, r18
    17c0:	93 07       	cpc	r25, r19
    17c2:	d8 f4       	brcc	.+54     	; 0x17fa <LCDprogressBar+0xb6>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    17c4:	8c 81       	ldd	r24, Y+4	; 0x04
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	c9 01       	movw	r24, r18
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	82 0f       	add	r24, r18
    17d2:	93 1f       	adc	r25, r19
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	9c 01       	movw	r18, r24
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	9b 81       	ldd	r25, Y+3	; 0x03
    17de:	82 17       	cp	r24, r18
    17e0:	93 07       	cpc	r25, r19
    17e2:	10 f4       	brcc	.+4      	; 0x17e8 <LCDprogressBar+0xa4>
			{
				// this is an empty block
				// use space character?
				c = 0;
    17e4:	19 82       	std	Y+1, r1	; 0x01
    17e6:	0b c0       	rjmp	.+22     	; 0x17fe <LCDprogressBar+0xba>
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	9b 81       	ldd	r25, Y+3	; 0x03
    17ec:	26 e0       	ldi	r18, 0x06	; 6
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	b9 01       	movw	r22, r18
    17f2:	0e 94 82 11 	call	0x2304	; 0x2304 <__udivmodhi4>
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <LCDprogressBar+0xba>
			}
		}
		else
		{
			// this is a full block
			c = 5;
    17fa:	85 e0       	ldi	r24, 0x05	; 5
    17fc:	89 83       	std	Y+1, r24	; 0x01
		}
		
		// write character to display
		LCDsendChar(c);
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	8f 5f       	subi	r24, 0xFF	; 255
    1808:	8c 83       	std	Y+4, r24	; 0x04
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	8f 81       	ldd	r24, Y+7	; 0x07
    180e:	98 17       	cp	r25, r24
    1810:	38 f2       	brcs	.-114    	; 0x17a0 <LCDprogressBar+0x5c>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1812:	27 96       	adiw	r28, 0x07	; 7
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <LCDdisplay>:

void LCDdisplay(char a[])
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <LCDdisplay+0x6>
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	89 83       	std	Y+1, r24	; 0x01
	LCDstring(a,strlen(a));
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	9a 81       	ldd	r25, Y+2	; 0x02
    1836:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <strlen>
    183a:	28 2f       	mov	r18, r24
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	9a 81       	ldd	r25, Y+2	; 0x02
    1840:	62 2f       	mov	r22, r18
    1842:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCDstring>
}
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <__fixunssfsi>:
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	7b 01       	movw	r14, r22
    185a:	8c 01       	movw	r16, r24
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	5f e4       	ldi	r21, 0x4F	; 79
    1864:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__gesf2>
    1868:	88 23       	and	r24, r24
    186a:	8c f0       	brlt	.+34     	; 0x188e <__fixunssfsi+0x3e>
    186c:	c8 01       	movw	r24, r16
    186e:	b7 01       	movw	r22, r14
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	5f e4       	ldi	r21, 0x4F	; 79
    1878:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__subsf3>
    187c:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__fixsfsi>
    1880:	9b 01       	movw	r18, r22
    1882:	ac 01       	movw	r20, r24
    1884:	20 50       	subi	r18, 0x00	; 0
    1886:	30 40       	sbci	r19, 0x00	; 0
    1888:	40 40       	sbci	r20, 0x00	; 0
    188a:	50 48       	sbci	r21, 0x80	; 128
    188c:	06 c0       	rjmp	.+12     	; 0x189a <__fixunssfsi+0x4a>
    188e:	c8 01       	movw	r24, r16
    1890:	b7 01       	movw	r22, r14
    1892:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__fixsfsi>
    1896:	9b 01       	movw	r18, r22
    1898:	ac 01       	movw	r20, r24
    189a:	b9 01       	movw	r22, r18
    189c:	ca 01       	movw	r24, r20
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	08 95       	ret

000018a8 <_fpadd_parts>:
    18a8:	a0 e0       	ldi	r26, 0x00	; 0
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	ea e5       	ldi	r30, 0x5A	; 90
    18ae:	fc e0       	ldi	r31, 0x0C	; 12
    18b0:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__prologue_saves__>
    18b4:	dc 01       	movw	r26, r24
    18b6:	2b 01       	movw	r4, r22
    18b8:	fa 01       	movw	r30, r20
    18ba:	9c 91       	ld	r25, X
    18bc:	92 30       	cpi	r25, 0x02	; 2
    18be:	08 f4       	brcc	.+2      	; 0x18c2 <_fpadd_parts+0x1a>
    18c0:	39 c1       	rjmp	.+626    	; 0x1b34 <_fpadd_parts+0x28c>
    18c2:	eb 01       	movw	r28, r22
    18c4:	88 81       	ld	r24, Y
    18c6:	82 30       	cpi	r24, 0x02	; 2
    18c8:	08 f4       	brcc	.+2      	; 0x18cc <_fpadd_parts+0x24>
    18ca:	33 c1       	rjmp	.+614    	; 0x1b32 <_fpadd_parts+0x28a>
    18cc:	94 30       	cpi	r25, 0x04	; 4
    18ce:	69 f4       	brne	.+26     	; 0x18ea <_fpadd_parts+0x42>
    18d0:	84 30       	cpi	r24, 0x04	; 4
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <_fpadd_parts+0x2e>
    18d4:	2f c1       	rjmp	.+606    	; 0x1b34 <_fpadd_parts+0x28c>
    18d6:	11 96       	adiw	r26, 0x01	; 1
    18d8:	9c 91       	ld	r25, X
    18da:	11 97       	sbiw	r26, 0x01	; 1
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	98 17       	cp	r25, r24
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <_fpadd_parts+0x3c>
    18e2:	28 c1       	rjmp	.+592    	; 0x1b34 <_fpadd_parts+0x28c>
    18e4:	a6 e7       	ldi	r26, 0x76	; 118
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	25 c1       	rjmp	.+586    	; 0x1b34 <_fpadd_parts+0x28c>
    18ea:	84 30       	cpi	r24, 0x04	; 4
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <_fpadd_parts+0x48>
    18ee:	21 c1       	rjmp	.+578    	; 0x1b32 <_fpadd_parts+0x28a>
    18f0:	82 30       	cpi	r24, 0x02	; 2
    18f2:	a9 f4       	brne	.+42     	; 0x191e <_fpadd_parts+0x76>
    18f4:	92 30       	cpi	r25, 0x02	; 2
    18f6:	09 f0       	breq	.+2      	; 0x18fa <_fpadd_parts+0x52>
    18f8:	1d c1       	rjmp	.+570    	; 0x1b34 <_fpadd_parts+0x28c>
    18fa:	9a 01       	movw	r18, r20
    18fc:	ad 01       	movw	r20, r26
    18fe:	88 e0       	ldi	r24, 0x08	; 8
    1900:	ea 01       	movw	r28, r20
    1902:	09 90       	ld	r0, Y+
    1904:	ae 01       	movw	r20, r28
    1906:	e9 01       	movw	r28, r18
    1908:	09 92       	st	Y+, r0
    190a:	9e 01       	movw	r18, r28
    190c:	81 50       	subi	r24, 0x01	; 1
    190e:	c1 f7       	brne	.-16     	; 0x1900 <_fpadd_parts+0x58>
    1910:	e2 01       	movw	r28, r4
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	11 96       	adiw	r26, 0x01	; 1
    1916:	9c 91       	ld	r25, X
    1918:	89 23       	and	r24, r25
    191a:	81 83       	std	Z+1, r24	; 0x01
    191c:	08 c1       	rjmp	.+528    	; 0x1b2e <_fpadd_parts+0x286>
    191e:	92 30       	cpi	r25, 0x02	; 2
    1920:	09 f4       	brne	.+2      	; 0x1924 <_fpadd_parts+0x7c>
    1922:	07 c1       	rjmp	.+526    	; 0x1b32 <_fpadd_parts+0x28a>
    1924:	12 96       	adiw	r26, 0x02	; 2
    1926:	2d 90       	ld	r2, X+
    1928:	3c 90       	ld	r3, X
    192a:	13 97       	sbiw	r26, 0x03	; 3
    192c:	eb 01       	movw	r28, r22
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	9b 81       	ldd	r25, Y+3	; 0x03
    1932:	14 96       	adiw	r26, 0x04	; 4
    1934:	ad 90       	ld	r10, X+
    1936:	bd 90       	ld	r11, X+
    1938:	cd 90       	ld	r12, X+
    193a:	dc 90       	ld	r13, X
    193c:	17 97       	sbiw	r26, 0x07	; 7
    193e:	ec 80       	ldd	r14, Y+4	; 0x04
    1940:	fd 80       	ldd	r15, Y+5	; 0x05
    1942:	0e 81       	ldd	r16, Y+6	; 0x06
    1944:	1f 81       	ldd	r17, Y+7	; 0x07
    1946:	91 01       	movw	r18, r2
    1948:	28 1b       	sub	r18, r24
    194a:	39 0b       	sbc	r19, r25
    194c:	b9 01       	movw	r22, r18
    194e:	37 ff       	sbrs	r19, 7
    1950:	04 c0       	rjmp	.+8      	; 0x195a <_fpadd_parts+0xb2>
    1952:	66 27       	eor	r22, r22
    1954:	77 27       	eor	r23, r23
    1956:	62 1b       	sub	r22, r18
    1958:	73 0b       	sbc	r23, r19
    195a:	60 32       	cpi	r22, 0x20	; 32
    195c:	71 05       	cpc	r23, r1
    195e:	0c f0       	brlt	.+2      	; 0x1962 <_fpadd_parts+0xba>
    1960:	61 c0       	rjmp	.+194    	; 0x1a24 <_fpadd_parts+0x17c>
    1962:	12 16       	cp	r1, r18
    1964:	13 06       	cpc	r1, r19
    1966:	6c f5       	brge	.+90     	; 0x19c2 <_fpadd_parts+0x11a>
    1968:	37 01       	movw	r6, r14
    196a:	48 01       	movw	r8, r16
    196c:	06 2e       	mov	r0, r22
    196e:	04 c0       	rjmp	.+8      	; 0x1978 <_fpadd_parts+0xd0>
    1970:	96 94       	lsr	r9
    1972:	87 94       	ror	r8
    1974:	77 94       	ror	r7
    1976:	67 94       	ror	r6
    1978:	0a 94       	dec	r0
    197a:	d2 f7       	brpl	.-12     	; 0x1970 <_fpadd_parts+0xc8>
    197c:	21 e0       	ldi	r18, 0x01	; 1
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	50 e0       	ldi	r21, 0x00	; 0
    1984:	04 c0       	rjmp	.+8      	; 0x198e <_fpadd_parts+0xe6>
    1986:	22 0f       	add	r18, r18
    1988:	33 1f       	adc	r19, r19
    198a:	44 1f       	adc	r20, r20
    198c:	55 1f       	adc	r21, r21
    198e:	6a 95       	dec	r22
    1990:	d2 f7       	brpl	.-12     	; 0x1986 <_fpadd_parts+0xde>
    1992:	21 50       	subi	r18, 0x01	; 1
    1994:	30 40       	sbci	r19, 0x00	; 0
    1996:	40 40       	sbci	r20, 0x00	; 0
    1998:	50 40       	sbci	r21, 0x00	; 0
    199a:	2e 21       	and	r18, r14
    199c:	3f 21       	and	r19, r15
    199e:	40 23       	and	r20, r16
    19a0:	51 23       	and	r21, r17
    19a2:	21 15       	cp	r18, r1
    19a4:	31 05       	cpc	r19, r1
    19a6:	41 05       	cpc	r20, r1
    19a8:	51 05       	cpc	r21, r1
    19aa:	21 f0       	breq	.+8      	; 0x19b4 <_fpadd_parts+0x10c>
    19ac:	21 e0       	ldi	r18, 0x01	; 1
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	79 01       	movw	r14, r18
    19b6:	8a 01       	movw	r16, r20
    19b8:	e6 28       	or	r14, r6
    19ba:	f7 28       	or	r15, r7
    19bc:	08 29       	or	r16, r8
    19be:	19 29       	or	r17, r9
    19c0:	3c c0       	rjmp	.+120    	; 0x1a3a <_fpadd_parts+0x192>
    19c2:	23 2b       	or	r18, r19
    19c4:	d1 f1       	breq	.+116    	; 0x1a3a <_fpadd_parts+0x192>
    19c6:	26 0e       	add	r2, r22
    19c8:	37 1e       	adc	r3, r23
    19ca:	35 01       	movw	r6, r10
    19cc:	46 01       	movw	r8, r12
    19ce:	06 2e       	mov	r0, r22
    19d0:	04 c0       	rjmp	.+8      	; 0x19da <_fpadd_parts+0x132>
    19d2:	96 94       	lsr	r9
    19d4:	87 94       	ror	r8
    19d6:	77 94       	ror	r7
    19d8:	67 94       	ror	r6
    19da:	0a 94       	dec	r0
    19dc:	d2 f7       	brpl	.-12     	; 0x19d2 <_fpadd_parts+0x12a>
    19de:	21 e0       	ldi	r18, 0x01	; 1
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e0       	ldi	r20, 0x00	; 0
    19e4:	50 e0       	ldi	r21, 0x00	; 0
    19e6:	04 c0       	rjmp	.+8      	; 0x19f0 <_fpadd_parts+0x148>
    19e8:	22 0f       	add	r18, r18
    19ea:	33 1f       	adc	r19, r19
    19ec:	44 1f       	adc	r20, r20
    19ee:	55 1f       	adc	r21, r21
    19f0:	6a 95       	dec	r22
    19f2:	d2 f7       	brpl	.-12     	; 0x19e8 <_fpadd_parts+0x140>
    19f4:	21 50       	subi	r18, 0x01	; 1
    19f6:	30 40       	sbci	r19, 0x00	; 0
    19f8:	40 40       	sbci	r20, 0x00	; 0
    19fa:	50 40       	sbci	r21, 0x00	; 0
    19fc:	2a 21       	and	r18, r10
    19fe:	3b 21       	and	r19, r11
    1a00:	4c 21       	and	r20, r12
    1a02:	5d 21       	and	r21, r13
    1a04:	21 15       	cp	r18, r1
    1a06:	31 05       	cpc	r19, r1
    1a08:	41 05       	cpc	r20, r1
    1a0a:	51 05       	cpc	r21, r1
    1a0c:	21 f0       	breq	.+8      	; 0x1a16 <_fpadd_parts+0x16e>
    1a0e:	21 e0       	ldi	r18, 0x01	; 1
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e0       	ldi	r20, 0x00	; 0
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	59 01       	movw	r10, r18
    1a18:	6a 01       	movw	r12, r20
    1a1a:	a6 28       	or	r10, r6
    1a1c:	b7 28       	or	r11, r7
    1a1e:	c8 28       	or	r12, r8
    1a20:	d9 28       	or	r13, r9
    1a22:	0b c0       	rjmp	.+22     	; 0x1a3a <_fpadd_parts+0x192>
    1a24:	82 15       	cp	r24, r2
    1a26:	93 05       	cpc	r25, r3
    1a28:	2c f0       	brlt	.+10     	; 0x1a34 <_fpadd_parts+0x18c>
    1a2a:	1c 01       	movw	r2, r24
    1a2c:	aa 24       	eor	r10, r10
    1a2e:	bb 24       	eor	r11, r11
    1a30:	65 01       	movw	r12, r10
    1a32:	03 c0       	rjmp	.+6      	; 0x1a3a <_fpadd_parts+0x192>
    1a34:	ee 24       	eor	r14, r14
    1a36:	ff 24       	eor	r15, r15
    1a38:	87 01       	movw	r16, r14
    1a3a:	11 96       	adiw	r26, 0x01	; 1
    1a3c:	9c 91       	ld	r25, X
    1a3e:	d2 01       	movw	r26, r4
    1a40:	11 96       	adiw	r26, 0x01	; 1
    1a42:	8c 91       	ld	r24, X
    1a44:	98 17       	cp	r25, r24
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <_fpadd_parts+0x1a2>
    1a48:	45 c0       	rjmp	.+138    	; 0x1ad4 <_fpadd_parts+0x22c>
    1a4a:	99 23       	and	r25, r25
    1a4c:	39 f0       	breq	.+14     	; 0x1a5c <_fpadd_parts+0x1b4>
    1a4e:	a8 01       	movw	r20, r16
    1a50:	97 01       	movw	r18, r14
    1a52:	2a 19       	sub	r18, r10
    1a54:	3b 09       	sbc	r19, r11
    1a56:	4c 09       	sbc	r20, r12
    1a58:	5d 09       	sbc	r21, r13
    1a5a:	06 c0       	rjmp	.+12     	; 0x1a68 <_fpadd_parts+0x1c0>
    1a5c:	a6 01       	movw	r20, r12
    1a5e:	95 01       	movw	r18, r10
    1a60:	2e 19       	sub	r18, r14
    1a62:	3f 09       	sbc	r19, r15
    1a64:	40 0b       	sbc	r20, r16
    1a66:	51 0b       	sbc	r21, r17
    1a68:	57 fd       	sbrc	r21, 7
    1a6a:	08 c0       	rjmp	.+16     	; 0x1a7c <_fpadd_parts+0x1d4>
    1a6c:	11 82       	std	Z+1, r1	; 0x01
    1a6e:	33 82       	std	Z+3, r3	; 0x03
    1a70:	22 82       	std	Z+2, r2	; 0x02
    1a72:	24 83       	std	Z+4, r18	; 0x04
    1a74:	35 83       	std	Z+5, r19	; 0x05
    1a76:	46 83       	std	Z+6, r20	; 0x06
    1a78:	57 83       	std	Z+7, r21	; 0x07
    1a7a:	1d c0       	rjmp	.+58     	; 0x1ab6 <_fpadd_parts+0x20e>
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	81 83       	std	Z+1, r24	; 0x01
    1a80:	33 82       	std	Z+3, r3	; 0x03
    1a82:	22 82       	std	Z+2, r2	; 0x02
    1a84:	88 27       	eor	r24, r24
    1a86:	99 27       	eor	r25, r25
    1a88:	dc 01       	movw	r26, r24
    1a8a:	82 1b       	sub	r24, r18
    1a8c:	93 0b       	sbc	r25, r19
    1a8e:	a4 0b       	sbc	r26, r20
    1a90:	b5 0b       	sbc	r27, r21
    1a92:	84 83       	std	Z+4, r24	; 0x04
    1a94:	95 83       	std	Z+5, r25	; 0x05
    1a96:	a6 83       	std	Z+6, r26	; 0x06
    1a98:	b7 83       	std	Z+7, r27	; 0x07
    1a9a:	0d c0       	rjmp	.+26     	; 0x1ab6 <_fpadd_parts+0x20e>
    1a9c:	22 0f       	add	r18, r18
    1a9e:	33 1f       	adc	r19, r19
    1aa0:	44 1f       	adc	r20, r20
    1aa2:	55 1f       	adc	r21, r21
    1aa4:	24 83       	std	Z+4, r18	; 0x04
    1aa6:	35 83       	std	Z+5, r19	; 0x05
    1aa8:	46 83       	std	Z+6, r20	; 0x06
    1aaa:	57 83       	std	Z+7, r21	; 0x07
    1aac:	82 81       	ldd	r24, Z+2	; 0x02
    1aae:	93 81       	ldd	r25, Z+3	; 0x03
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	93 83       	std	Z+3, r25	; 0x03
    1ab4:	82 83       	std	Z+2, r24	; 0x02
    1ab6:	24 81       	ldd	r18, Z+4	; 0x04
    1ab8:	35 81       	ldd	r19, Z+5	; 0x05
    1aba:	46 81       	ldd	r20, Z+6	; 0x06
    1abc:	57 81       	ldd	r21, Z+7	; 0x07
    1abe:	da 01       	movw	r26, r20
    1ac0:	c9 01       	movw	r24, r18
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	a1 09       	sbc	r26, r1
    1ac6:	b1 09       	sbc	r27, r1
    1ac8:	8f 5f       	subi	r24, 0xFF	; 255
    1aca:	9f 4f       	sbci	r25, 0xFF	; 255
    1acc:	af 4f       	sbci	r26, 0xFF	; 255
    1ace:	bf 43       	sbci	r27, 0x3F	; 63
    1ad0:	28 f3       	brcs	.-54     	; 0x1a9c <_fpadd_parts+0x1f4>
    1ad2:	0b c0       	rjmp	.+22     	; 0x1aea <_fpadd_parts+0x242>
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	33 82       	std	Z+3, r3	; 0x03
    1ad8:	22 82       	std	Z+2, r2	; 0x02
    1ada:	ea 0c       	add	r14, r10
    1adc:	fb 1c       	adc	r15, r11
    1ade:	0c 1d       	adc	r16, r12
    1ae0:	1d 1d       	adc	r17, r13
    1ae2:	e4 82       	std	Z+4, r14	; 0x04
    1ae4:	f5 82       	std	Z+5, r15	; 0x05
    1ae6:	06 83       	std	Z+6, r16	; 0x06
    1ae8:	17 83       	std	Z+7, r17	; 0x07
    1aea:	83 e0       	ldi	r24, 0x03	; 3
    1aec:	80 83       	st	Z, r24
    1aee:	24 81       	ldd	r18, Z+4	; 0x04
    1af0:	35 81       	ldd	r19, Z+5	; 0x05
    1af2:	46 81       	ldd	r20, Z+6	; 0x06
    1af4:	57 81       	ldd	r21, Z+7	; 0x07
    1af6:	57 ff       	sbrs	r21, 7
    1af8:	1a c0       	rjmp	.+52     	; 0x1b2e <_fpadd_parts+0x286>
    1afa:	c9 01       	movw	r24, r18
    1afc:	aa 27       	eor	r26, r26
    1afe:	97 fd       	sbrc	r25, 7
    1b00:	a0 95       	com	r26
    1b02:	ba 2f       	mov	r27, r26
    1b04:	81 70       	andi	r24, 0x01	; 1
    1b06:	90 70       	andi	r25, 0x00	; 0
    1b08:	a0 70       	andi	r26, 0x00	; 0
    1b0a:	b0 70       	andi	r27, 0x00	; 0
    1b0c:	56 95       	lsr	r21
    1b0e:	47 95       	ror	r20
    1b10:	37 95       	ror	r19
    1b12:	27 95       	ror	r18
    1b14:	82 2b       	or	r24, r18
    1b16:	93 2b       	or	r25, r19
    1b18:	a4 2b       	or	r26, r20
    1b1a:	b5 2b       	or	r27, r21
    1b1c:	84 83       	std	Z+4, r24	; 0x04
    1b1e:	95 83       	std	Z+5, r25	; 0x05
    1b20:	a6 83       	std	Z+6, r26	; 0x06
    1b22:	b7 83       	std	Z+7, r27	; 0x07
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	01 96       	adiw	r24, 0x01	; 1
    1b2a:	93 83       	std	Z+3, r25	; 0x03
    1b2c:	82 83       	std	Z+2, r24	; 0x02
    1b2e:	df 01       	movw	r26, r30
    1b30:	01 c0       	rjmp	.+2      	; 0x1b34 <_fpadd_parts+0x28c>
    1b32:	d2 01       	movw	r26, r4
    1b34:	cd 01       	movw	r24, r26
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	e2 e1       	ldi	r30, 0x12	; 18
    1b3c:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__epilogue_restores__>

00001b40 <__subsf3>:
    1b40:	a0 e2       	ldi	r26, 0x20	; 32
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e6 ea       	ldi	r30, 0xA6	; 166
    1b46:	fd e0       	ldi	r31, 0x0D	; 13
    1b48:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__prologue_saves__+0x18>
    1b4c:	69 83       	std	Y+1, r22	; 0x01
    1b4e:	7a 83       	std	Y+2, r23	; 0x02
    1b50:	8b 83       	std	Y+3, r24	; 0x03
    1b52:	9c 83       	std	Y+4, r25	; 0x04
    1b54:	2d 83       	std	Y+5, r18	; 0x05
    1b56:	3e 83       	std	Y+6, r19	; 0x06
    1b58:	4f 83       	std	Y+7, r20	; 0x07
    1b5a:	58 87       	std	Y+8, r21	; 0x08
    1b5c:	e9 e0       	ldi	r30, 0x09	; 9
    1b5e:	ee 2e       	mov	r14, r30
    1b60:	f1 2c       	mov	r15, r1
    1b62:	ec 0e       	add	r14, r28
    1b64:	fd 1e       	adc	r15, r29
    1b66:	ce 01       	movw	r24, r28
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	b7 01       	movw	r22, r14
    1b6c:	0e 94 b1 10 	call	0x2162	; 0x2162 <__unpack_f>
    1b70:	8e 01       	movw	r16, r28
    1b72:	0f 5e       	subi	r16, 0xEF	; 239
    1b74:	1f 4f       	sbci	r17, 0xFF	; 255
    1b76:	ce 01       	movw	r24, r28
    1b78:	05 96       	adiw	r24, 0x05	; 5
    1b7a:	b8 01       	movw	r22, r16
    1b7c:	0e 94 b1 10 	call	0x2162	; 0x2162 <__unpack_f>
    1b80:	8a 89       	ldd	r24, Y+18	; 0x12
    1b82:	91 e0       	ldi	r25, 0x01	; 1
    1b84:	89 27       	eor	r24, r25
    1b86:	8a 8b       	std	Y+18, r24	; 0x12
    1b88:	c7 01       	movw	r24, r14
    1b8a:	b8 01       	movw	r22, r16
    1b8c:	ae 01       	movw	r20, r28
    1b8e:	47 5e       	subi	r20, 0xE7	; 231
    1b90:	5f 4f       	sbci	r21, 0xFF	; 255
    1b92:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_fpadd_parts>
    1b96:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__pack_f>
    1b9a:	a0 96       	adiw	r28, 0x20	; 32
    1b9c:	e6 e0       	ldi	r30, 0x06	; 6
    1b9e:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__epilogue_restores__+0x18>

00001ba2 <__addsf3>:
    1ba2:	a0 e2       	ldi	r26, 0x20	; 32
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e7 ed       	ldi	r30, 0xD7	; 215
    1ba8:	fd e0       	ldi	r31, 0x0D	; 13
    1baa:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__prologue_saves__+0x18>
    1bae:	69 83       	std	Y+1, r22	; 0x01
    1bb0:	7a 83       	std	Y+2, r23	; 0x02
    1bb2:	8b 83       	std	Y+3, r24	; 0x03
    1bb4:	9c 83       	std	Y+4, r25	; 0x04
    1bb6:	2d 83       	std	Y+5, r18	; 0x05
    1bb8:	3e 83       	std	Y+6, r19	; 0x06
    1bba:	4f 83       	std	Y+7, r20	; 0x07
    1bbc:	58 87       	std	Y+8, r21	; 0x08
    1bbe:	f9 e0       	ldi	r31, 0x09	; 9
    1bc0:	ef 2e       	mov	r14, r31
    1bc2:	f1 2c       	mov	r15, r1
    1bc4:	ec 0e       	add	r14, r28
    1bc6:	fd 1e       	adc	r15, r29
    1bc8:	ce 01       	movw	r24, r28
    1bca:	01 96       	adiw	r24, 0x01	; 1
    1bcc:	b7 01       	movw	r22, r14
    1bce:	0e 94 b1 10 	call	0x2162	; 0x2162 <__unpack_f>
    1bd2:	8e 01       	movw	r16, r28
    1bd4:	0f 5e       	subi	r16, 0xEF	; 239
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd8:	ce 01       	movw	r24, r28
    1bda:	05 96       	adiw	r24, 0x05	; 5
    1bdc:	b8 01       	movw	r22, r16
    1bde:	0e 94 b1 10 	call	0x2162	; 0x2162 <__unpack_f>
    1be2:	c7 01       	movw	r24, r14
    1be4:	b8 01       	movw	r22, r16
    1be6:	ae 01       	movw	r20, r28
    1be8:	47 5e       	subi	r20, 0xE7	; 231
    1bea:	5f 4f       	sbci	r21, 0xFF	; 255
    1bec:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_fpadd_parts>
    1bf0:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__pack_f>
    1bf4:	a0 96       	adiw	r28, 0x20	; 32
    1bf6:	e6 e0       	ldi	r30, 0x06	; 6
    1bf8:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__epilogue_restores__+0x18>

00001bfc <__mulsf3>:
    1bfc:	a0 e2       	ldi	r26, 0x20	; 32
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e4 e0       	ldi	r30, 0x04	; 4
    1c02:	fe e0       	ldi	r31, 0x0E	; 14
    1c04:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__prologue_saves__>
    1c08:	69 83       	std	Y+1, r22	; 0x01
    1c0a:	7a 83       	std	Y+2, r23	; 0x02
    1c0c:	8b 83       	std	Y+3, r24	; 0x03
    1c0e:	9c 83       	std	Y+4, r25	; 0x04
    1c10:	2d 83       	std	Y+5, r18	; 0x05
    1c12:	3e 83       	std	Y+6, r19	; 0x06
    1c14:	4f 83       	std	Y+7, r20	; 0x07
    1c16:	58 87       	std	Y+8, r21	; 0x08
    1c18:	ce 01       	movw	r24, r28
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	be 01       	movw	r22, r28
    1c1e:	67 5f       	subi	r22, 0xF7	; 247
    1c20:	7f 4f       	sbci	r23, 0xFF	; 255
    1c22:	0e 94 b1 10 	call	0x2162	; 0x2162 <__unpack_f>
    1c26:	ce 01       	movw	r24, r28
    1c28:	05 96       	adiw	r24, 0x05	; 5
    1c2a:	be 01       	movw	r22, r28
    1c2c:	6f 5e       	subi	r22, 0xEF	; 239
    1c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c30:	0e 94 b1 10 	call	0x2162	; 0x2162 <__unpack_f>
    1c34:	99 85       	ldd	r25, Y+9	; 0x09
    1c36:	92 30       	cpi	r25, 0x02	; 2
    1c38:	88 f0       	brcs	.+34     	; 0x1c5c <__mulsf3+0x60>
    1c3a:	89 89       	ldd	r24, Y+17	; 0x11
    1c3c:	82 30       	cpi	r24, 0x02	; 2
    1c3e:	c8 f0       	brcs	.+50     	; 0x1c72 <__mulsf3+0x76>
    1c40:	94 30       	cpi	r25, 0x04	; 4
    1c42:	19 f4       	brne	.+6      	; 0x1c4a <__mulsf3+0x4e>
    1c44:	82 30       	cpi	r24, 0x02	; 2
    1c46:	51 f4       	brne	.+20     	; 0x1c5c <__mulsf3+0x60>
    1c48:	04 c0       	rjmp	.+8      	; 0x1c52 <__mulsf3+0x56>
    1c4a:	84 30       	cpi	r24, 0x04	; 4
    1c4c:	29 f4       	brne	.+10     	; 0x1c58 <__mulsf3+0x5c>
    1c4e:	92 30       	cpi	r25, 0x02	; 2
    1c50:	81 f4       	brne	.+32     	; 0x1c72 <__mulsf3+0x76>
    1c52:	86 e7       	ldi	r24, 0x76	; 118
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	c6 c0       	rjmp	.+396    	; 0x1de4 <__mulsf3+0x1e8>
    1c58:	92 30       	cpi	r25, 0x02	; 2
    1c5a:	49 f4       	brne	.+18     	; 0x1c6e <__mulsf3+0x72>
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c60:	8a 89       	ldd	r24, Y+18	; 0x12
    1c62:	98 13       	cpse	r25, r24
    1c64:	21 e0       	ldi	r18, 0x01	; 1
    1c66:	2a 87       	std	Y+10, r18	; 0x0a
    1c68:	ce 01       	movw	r24, r28
    1c6a:	09 96       	adiw	r24, 0x09	; 9
    1c6c:	bb c0       	rjmp	.+374    	; 0x1de4 <__mulsf3+0x1e8>
    1c6e:	82 30       	cpi	r24, 0x02	; 2
    1c70:	49 f4       	brne	.+18     	; 0x1c84 <__mulsf3+0x88>
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c76:	8a 89       	ldd	r24, Y+18	; 0x12
    1c78:	98 13       	cpse	r25, r24
    1c7a:	21 e0       	ldi	r18, 0x01	; 1
    1c7c:	2a 8b       	std	Y+18, r18	; 0x12
    1c7e:	ce 01       	movw	r24, r28
    1c80:	41 96       	adiw	r24, 0x11	; 17
    1c82:	b0 c0       	rjmp	.+352    	; 0x1de4 <__mulsf3+0x1e8>
    1c84:	2d 84       	ldd	r2, Y+13	; 0x0d
    1c86:	3e 84       	ldd	r3, Y+14	; 0x0e
    1c88:	4f 84       	ldd	r4, Y+15	; 0x0f
    1c8a:	58 88       	ldd	r5, Y+16	; 0x10
    1c8c:	6d 88       	ldd	r6, Y+21	; 0x15
    1c8e:	7e 88       	ldd	r7, Y+22	; 0x16
    1c90:	8f 88       	ldd	r8, Y+23	; 0x17
    1c92:	98 8c       	ldd	r9, Y+24	; 0x18
    1c94:	ee 24       	eor	r14, r14
    1c96:	ff 24       	eor	r15, r15
    1c98:	87 01       	movw	r16, r14
    1c9a:	aa 24       	eor	r10, r10
    1c9c:	bb 24       	eor	r11, r11
    1c9e:	65 01       	movw	r12, r10
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	50 e0       	ldi	r21, 0x00	; 0
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	e0 e0       	ldi	r30, 0x00	; 0
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	c1 01       	movw	r24, r2
    1cae:	81 70       	andi	r24, 0x01	; 1
    1cb0:	90 70       	andi	r25, 0x00	; 0
    1cb2:	89 2b       	or	r24, r25
    1cb4:	e9 f0       	breq	.+58     	; 0x1cf0 <__mulsf3+0xf4>
    1cb6:	e6 0c       	add	r14, r6
    1cb8:	f7 1c       	adc	r15, r7
    1cba:	08 1d       	adc	r16, r8
    1cbc:	19 1d       	adc	r17, r9
    1cbe:	9a 01       	movw	r18, r20
    1cc0:	ab 01       	movw	r20, r22
    1cc2:	2a 0d       	add	r18, r10
    1cc4:	3b 1d       	adc	r19, r11
    1cc6:	4c 1d       	adc	r20, r12
    1cc8:	5d 1d       	adc	r21, r13
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	a0 e0       	ldi	r26, 0x00	; 0
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e6 14       	cp	r14, r6
    1cd4:	f7 04       	cpc	r15, r7
    1cd6:	08 05       	cpc	r16, r8
    1cd8:	19 05       	cpc	r17, r9
    1cda:	20 f4       	brcc	.+8      	; 0x1ce4 <__mulsf3+0xe8>
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	a0 e0       	ldi	r26, 0x00	; 0
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	ba 01       	movw	r22, r20
    1ce6:	a9 01       	movw	r20, r18
    1ce8:	48 0f       	add	r20, r24
    1cea:	59 1f       	adc	r21, r25
    1cec:	6a 1f       	adc	r22, r26
    1cee:	7b 1f       	adc	r23, r27
    1cf0:	aa 0c       	add	r10, r10
    1cf2:	bb 1c       	adc	r11, r11
    1cf4:	cc 1c       	adc	r12, r12
    1cf6:	dd 1c       	adc	r13, r13
    1cf8:	97 fe       	sbrs	r9, 7
    1cfa:	08 c0       	rjmp	.+16     	; 0x1d0c <__mulsf3+0x110>
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	a0 e0       	ldi	r26, 0x00	; 0
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	a8 2a       	or	r10, r24
    1d06:	b9 2a       	or	r11, r25
    1d08:	ca 2a       	or	r12, r26
    1d0a:	db 2a       	or	r13, r27
    1d0c:	31 96       	adiw	r30, 0x01	; 1
    1d0e:	e0 32       	cpi	r30, 0x20	; 32
    1d10:	f1 05       	cpc	r31, r1
    1d12:	49 f0       	breq	.+18     	; 0x1d26 <__mulsf3+0x12a>
    1d14:	66 0c       	add	r6, r6
    1d16:	77 1c       	adc	r7, r7
    1d18:	88 1c       	adc	r8, r8
    1d1a:	99 1c       	adc	r9, r9
    1d1c:	56 94       	lsr	r5
    1d1e:	47 94       	ror	r4
    1d20:	37 94       	ror	r3
    1d22:	27 94       	ror	r2
    1d24:	c3 cf       	rjmp	.-122    	; 0x1cac <__mulsf3+0xb0>
    1d26:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d28:	ea 89       	ldd	r30, Y+18	; 0x12
    1d2a:	2b 89       	ldd	r18, Y+19	; 0x13
    1d2c:	3c 89       	ldd	r19, Y+20	; 0x14
    1d2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d30:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d32:	28 0f       	add	r18, r24
    1d34:	39 1f       	adc	r19, r25
    1d36:	2e 5f       	subi	r18, 0xFE	; 254
    1d38:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3a:	17 c0       	rjmp	.+46     	; 0x1d6a <__mulsf3+0x16e>
    1d3c:	ca 01       	movw	r24, r20
    1d3e:	81 70       	andi	r24, 0x01	; 1
    1d40:	90 70       	andi	r25, 0x00	; 0
    1d42:	89 2b       	or	r24, r25
    1d44:	61 f0       	breq	.+24     	; 0x1d5e <__mulsf3+0x162>
    1d46:	16 95       	lsr	r17
    1d48:	07 95       	ror	r16
    1d4a:	f7 94       	ror	r15
    1d4c:	e7 94       	ror	r14
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a0 e0       	ldi	r26, 0x00	; 0
    1d54:	b0 e8       	ldi	r27, 0x80	; 128
    1d56:	e8 2a       	or	r14, r24
    1d58:	f9 2a       	or	r15, r25
    1d5a:	0a 2b       	or	r16, r26
    1d5c:	1b 2b       	or	r17, r27
    1d5e:	76 95       	lsr	r23
    1d60:	67 95       	ror	r22
    1d62:	57 95       	ror	r21
    1d64:	47 95       	ror	r20
    1d66:	2f 5f       	subi	r18, 0xFF	; 255
    1d68:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6a:	77 fd       	sbrc	r23, 7
    1d6c:	e7 cf       	rjmp	.-50     	; 0x1d3c <__mulsf3+0x140>
    1d6e:	0c c0       	rjmp	.+24     	; 0x1d88 <__mulsf3+0x18c>
    1d70:	44 0f       	add	r20, r20
    1d72:	55 1f       	adc	r21, r21
    1d74:	66 1f       	adc	r22, r22
    1d76:	77 1f       	adc	r23, r23
    1d78:	17 fd       	sbrc	r17, 7
    1d7a:	41 60       	ori	r20, 0x01	; 1
    1d7c:	ee 0c       	add	r14, r14
    1d7e:	ff 1c       	adc	r15, r15
    1d80:	00 1f       	adc	r16, r16
    1d82:	11 1f       	adc	r17, r17
    1d84:	21 50       	subi	r18, 0x01	; 1
    1d86:	30 40       	sbci	r19, 0x00	; 0
    1d88:	40 30       	cpi	r20, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	59 07       	cpc	r21, r25
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	69 07       	cpc	r22, r25
    1d92:	90 e4       	ldi	r25, 0x40	; 64
    1d94:	79 07       	cpc	r23, r25
    1d96:	60 f3       	brcs	.-40     	; 0x1d70 <__mulsf3+0x174>
    1d98:	2b 8f       	std	Y+27, r18	; 0x1b
    1d9a:	3c 8f       	std	Y+28, r19	; 0x1c
    1d9c:	db 01       	movw	r26, r22
    1d9e:	ca 01       	movw	r24, r20
    1da0:	8f 77       	andi	r24, 0x7F	; 127
    1da2:	90 70       	andi	r25, 0x00	; 0
    1da4:	a0 70       	andi	r26, 0x00	; 0
    1da6:	b0 70       	andi	r27, 0x00	; 0
    1da8:	80 34       	cpi	r24, 0x40	; 64
    1daa:	91 05       	cpc	r25, r1
    1dac:	a1 05       	cpc	r26, r1
    1dae:	b1 05       	cpc	r27, r1
    1db0:	61 f4       	brne	.+24     	; 0x1dca <__mulsf3+0x1ce>
    1db2:	47 fd       	sbrc	r20, 7
    1db4:	0a c0       	rjmp	.+20     	; 0x1dca <__mulsf3+0x1ce>
    1db6:	e1 14       	cp	r14, r1
    1db8:	f1 04       	cpc	r15, r1
    1dba:	01 05       	cpc	r16, r1
    1dbc:	11 05       	cpc	r17, r1
    1dbe:	29 f0       	breq	.+10     	; 0x1dca <__mulsf3+0x1ce>
    1dc0:	40 5c       	subi	r20, 0xC0	; 192
    1dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc4:	6f 4f       	sbci	r22, 0xFF	; 255
    1dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc8:	40 78       	andi	r20, 0x80	; 128
    1dca:	1a 8e       	std	Y+26, r1	; 0x1a
    1dcc:	fe 17       	cp	r31, r30
    1dce:	11 f0       	breq	.+4      	; 0x1dd4 <__mulsf3+0x1d8>
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	8a 8f       	std	Y+26, r24	; 0x1a
    1dd4:	4d 8f       	std	Y+29, r20	; 0x1d
    1dd6:	5e 8f       	std	Y+30, r21	; 0x1e
    1dd8:	6f 8f       	std	Y+31, r22	; 0x1f
    1dda:	78 a3       	std	Y+32, r23	; 0x20
    1ddc:	83 e0       	ldi	r24, 0x03	; 3
    1dde:	89 8f       	std	Y+25, r24	; 0x19
    1de0:	ce 01       	movw	r24, r28
    1de2:	49 96       	adiw	r24, 0x19	; 25
    1de4:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__pack_f>
    1de8:	a0 96       	adiw	r28, 0x20	; 32
    1dea:	e2 e1       	ldi	r30, 0x12	; 18
    1dec:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__epilogue_restores__>

00001df0 <__gtsf2>:
    1df0:	a8 e1       	ldi	r26, 0x18	; 24
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	ee ef       	ldi	r30, 0xFE	; 254
    1df6:	fe e0       	ldi	r31, 0x0E	; 14
    1df8:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__prologue_saves__+0x18>
    1dfc:	69 83       	std	Y+1, r22	; 0x01
    1dfe:	7a 83       	std	Y+2, r23	; 0x02
    1e00:	8b 83       	std	Y+3, r24	; 0x03
    1e02:	9c 83       	std	Y+4, r25	; 0x04
    1e04:	2d 83       	std	Y+5, r18	; 0x05
    1e06:	3e 83       	std	Y+6, r19	; 0x06
    1e08:	4f 83       	std	Y+7, r20	; 0x07
    1e0a:	58 87       	std	Y+8, r21	; 0x08
    1e0c:	89 e0       	ldi	r24, 0x09	; 9
    1e0e:	e8 2e       	mov	r14, r24
    1e10:	f1 2c       	mov	r15, r1
    1e12:	ec 0e       	add	r14, r28
    1e14:	fd 1e       	adc	r15, r29
    1e16:	ce 01       	movw	r24, r28
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	b7 01       	movw	r22, r14
    1e1c:	0e 94 b1 10 	call	0x2162	; 0x2162 <__unpack_f>
    1e20:	8e 01       	movw	r16, r28
    1e22:	0f 5e       	subi	r16, 0xEF	; 239
    1e24:	1f 4f       	sbci	r17, 0xFF	; 255
    1e26:	ce 01       	movw	r24, r28
    1e28:	05 96       	adiw	r24, 0x05	; 5
    1e2a:	b8 01       	movw	r22, r16
    1e2c:	0e 94 b1 10 	call	0x2162	; 0x2162 <__unpack_f>
    1e30:	89 85       	ldd	r24, Y+9	; 0x09
    1e32:	82 30       	cpi	r24, 0x02	; 2
    1e34:	40 f0       	brcs	.+16     	; 0x1e46 <__gtsf2+0x56>
    1e36:	89 89       	ldd	r24, Y+17	; 0x11
    1e38:	82 30       	cpi	r24, 0x02	; 2
    1e3a:	28 f0       	brcs	.+10     	; 0x1e46 <__gtsf2+0x56>
    1e3c:	c7 01       	movw	r24, r14
    1e3e:	b8 01       	movw	r22, r16
    1e40:	0e 94 29 11 	call	0x2252	; 0x2252 <__fpcmp_parts_f>
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <__gtsf2+0x58>
    1e46:	8f ef       	ldi	r24, 0xFF	; 255
    1e48:	68 96       	adiw	r28, 0x18	; 24
    1e4a:	e6 e0       	ldi	r30, 0x06	; 6
    1e4c:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__epilogue_restores__+0x18>

00001e50 <__gesf2>:
    1e50:	a8 e1       	ldi	r26, 0x18	; 24
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	ee e2       	ldi	r30, 0x2E	; 46
    1e56:	ff e0       	ldi	r31, 0x0F	; 15
    1e58:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__prologue_saves__+0x18>
    1e5c:	69 83       	std	Y+1, r22	; 0x01
    1e5e:	7a 83       	std	Y+2, r23	; 0x02
    1e60:	8b 83       	std	Y+3, r24	; 0x03
    1e62:	9c 83       	std	Y+4, r25	; 0x04
    1e64:	2d 83       	std	Y+5, r18	; 0x05
    1e66:	3e 83       	std	Y+6, r19	; 0x06
    1e68:	4f 83       	std	Y+7, r20	; 0x07
    1e6a:	58 87       	std	Y+8, r21	; 0x08
    1e6c:	89 e0       	ldi	r24, 0x09	; 9
    1e6e:	e8 2e       	mov	r14, r24
    1e70:	f1 2c       	mov	r15, r1
    1e72:	ec 0e       	add	r14, r28
    1e74:	fd 1e       	adc	r15, r29
    1e76:	ce 01       	movw	r24, r28
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	b7 01       	movw	r22, r14
    1e7c:	0e 94 b1 10 	call	0x2162	; 0x2162 <__unpack_f>
    1e80:	8e 01       	movw	r16, r28
    1e82:	0f 5e       	subi	r16, 0xEF	; 239
    1e84:	1f 4f       	sbci	r17, 0xFF	; 255
    1e86:	ce 01       	movw	r24, r28
    1e88:	05 96       	adiw	r24, 0x05	; 5
    1e8a:	b8 01       	movw	r22, r16
    1e8c:	0e 94 b1 10 	call	0x2162	; 0x2162 <__unpack_f>
    1e90:	89 85       	ldd	r24, Y+9	; 0x09
    1e92:	82 30       	cpi	r24, 0x02	; 2
    1e94:	40 f0       	brcs	.+16     	; 0x1ea6 <__gesf2+0x56>
    1e96:	89 89       	ldd	r24, Y+17	; 0x11
    1e98:	82 30       	cpi	r24, 0x02	; 2
    1e9a:	28 f0       	brcs	.+10     	; 0x1ea6 <__gesf2+0x56>
    1e9c:	c7 01       	movw	r24, r14
    1e9e:	b8 01       	movw	r22, r16
    1ea0:	0e 94 29 11 	call	0x2252	; 0x2252 <__fpcmp_parts_f>
    1ea4:	01 c0       	rjmp	.+2      	; 0x1ea8 <__gesf2+0x58>
    1ea6:	8f ef       	ldi	r24, 0xFF	; 255
    1ea8:	68 96       	adiw	r28, 0x18	; 24
    1eaa:	e6 e0       	ldi	r30, 0x06	; 6
    1eac:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__epilogue_restores__+0x18>

00001eb0 <__ltsf2>:
    1eb0:	a8 e1       	ldi	r26, 0x18	; 24
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	ee e5       	ldi	r30, 0x5E	; 94
    1eb6:	ff e0       	ldi	r31, 0x0F	; 15
    1eb8:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__prologue_saves__+0x18>
    1ebc:	69 83       	std	Y+1, r22	; 0x01
    1ebe:	7a 83       	std	Y+2, r23	; 0x02
    1ec0:	8b 83       	std	Y+3, r24	; 0x03
    1ec2:	9c 83       	std	Y+4, r25	; 0x04
    1ec4:	2d 83       	std	Y+5, r18	; 0x05
    1ec6:	3e 83       	std	Y+6, r19	; 0x06
    1ec8:	4f 83       	std	Y+7, r20	; 0x07
    1eca:	58 87       	std	Y+8, r21	; 0x08
    1ecc:	89 e0       	ldi	r24, 0x09	; 9
    1ece:	e8 2e       	mov	r14, r24
    1ed0:	f1 2c       	mov	r15, r1
    1ed2:	ec 0e       	add	r14, r28
    1ed4:	fd 1e       	adc	r15, r29
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	01 96       	adiw	r24, 0x01	; 1
    1eda:	b7 01       	movw	r22, r14
    1edc:	0e 94 b1 10 	call	0x2162	; 0x2162 <__unpack_f>
    1ee0:	8e 01       	movw	r16, r28
    1ee2:	0f 5e       	subi	r16, 0xEF	; 239
    1ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	05 96       	adiw	r24, 0x05	; 5
    1eea:	b8 01       	movw	r22, r16
    1eec:	0e 94 b1 10 	call	0x2162	; 0x2162 <__unpack_f>
    1ef0:	89 85       	ldd	r24, Y+9	; 0x09
    1ef2:	82 30       	cpi	r24, 0x02	; 2
    1ef4:	40 f0       	brcs	.+16     	; 0x1f06 <__ltsf2+0x56>
    1ef6:	89 89       	ldd	r24, Y+17	; 0x11
    1ef8:	82 30       	cpi	r24, 0x02	; 2
    1efa:	28 f0       	brcs	.+10     	; 0x1f06 <__ltsf2+0x56>
    1efc:	c7 01       	movw	r24, r14
    1efe:	b8 01       	movw	r22, r16
    1f00:	0e 94 29 11 	call	0x2252	; 0x2252 <__fpcmp_parts_f>
    1f04:	01 c0       	rjmp	.+2      	; 0x1f08 <__ltsf2+0x58>
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	68 96       	adiw	r28, 0x18	; 24
    1f0a:	e6 e0       	ldi	r30, 0x06	; 6
    1f0c:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__epilogue_restores__+0x18>

00001f10 <__fixsfsi>:
    1f10:	ac e0       	ldi	r26, 0x0C	; 12
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	ee e8       	ldi	r30, 0x8E	; 142
    1f16:	ff e0       	ldi	r31, 0x0F	; 15
    1f18:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__prologue_saves__+0x20>
    1f1c:	69 83       	std	Y+1, r22	; 0x01
    1f1e:	7a 83       	std	Y+2, r23	; 0x02
    1f20:	8b 83       	std	Y+3, r24	; 0x03
    1f22:	9c 83       	std	Y+4, r25	; 0x04
    1f24:	ce 01       	movw	r24, r28
    1f26:	01 96       	adiw	r24, 0x01	; 1
    1f28:	be 01       	movw	r22, r28
    1f2a:	6b 5f       	subi	r22, 0xFB	; 251
    1f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2e:	0e 94 b1 10 	call	0x2162	; 0x2162 <__unpack_f>
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	82 30       	cpi	r24, 0x02	; 2
    1f36:	61 f1       	breq	.+88     	; 0x1f90 <__fixsfsi+0x80>
    1f38:	82 30       	cpi	r24, 0x02	; 2
    1f3a:	50 f1       	brcs	.+84     	; 0x1f90 <__fixsfsi+0x80>
    1f3c:	84 30       	cpi	r24, 0x04	; 4
    1f3e:	21 f4       	brne	.+8      	; 0x1f48 <__fixsfsi+0x38>
    1f40:	8e 81       	ldd	r24, Y+6	; 0x06
    1f42:	88 23       	and	r24, r24
    1f44:	51 f1       	breq	.+84     	; 0x1f9a <__fixsfsi+0x8a>
    1f46:	2e c0       	rjmp	.+92     	; 0x1fa4 <__fixsfsi+0x94>
    1f48:	2f 81       	ldd	r18, Y+7	; 0x07
    1f4a:	38 85       	ldd	r19, Y+8	; 0x08
    1f4c:	37 fd       	sbrc	r19, 7
    1f4e:	20 c0       	rjmp	.+64     	; 0x1f90 <__fixsfsi+0x80>
    1f50:	6e 81       	ldd	r22, Y+6	; 0x06
    1f52:	2f 31       	cpi	r18, 0x1F	; 31
    1f54:	31 05       	cpc	r19, r1
    1f56:	1c f0       	brlt	.+6      	; 0x1f5e <__fixsfsi+0x4e>
    1f58:	66 23       	and	r22, r22
    1f5a:	f9 f0       	breq	.+62     	; 0x1f9a <__fixsfsi+0x8a>
    1f5c:	23 c0       	rjmp	.+70     	; 0x1fa4 <__fixsfsi+0x94>
    1f5e:	8e e1       	ldi	r24, 0x1E	; 30
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	82 1b       	sub	r24, r18
    1f64:	93 0b       	sbc	r25, r19
    1f66:	29 85       	ldd	r18, Y+9	; 0x09
    1f68:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f6a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f6c:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f6e:	04 c0       	rjmp	.+8      	; 0x1f78 <__fixsfsi+0x68>
    1f70:	56 95       	lsr	r21
    1f72:	47 95       	ror	r20
    1f74:	37 95       	ror	r19
    1f76:	27 95       	ror	r18
    1f78:	8a 95       	dec	r24
    1f7a:	d2 f7       	brpl	.-12     	; 0x1f70 <__fixsfsi+0x60>
    1f7c:	66 23       	and	r22, r22
    1f7e:	b1 f0       	breq	.+44     	; 0x1fac <__fixsfsi+0x9c>
    1f80:	50 95       	com	r21
    1f82:	40 95       	com	r20
    1f84:	30 95       	com	r19
    1f86:	21 95       	neg	r18
    1f88:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8a:	4f 4f       	sbci	r20, 0xFF	; 255
    1f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8e:	0e c0       	rjmp	.+28     	; 0x1fac <__fixsfsi+0x9c>
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	09 c0       	rjmp	.+18     	; 0x1fac <__fixsfsi+0x9c>
    1f9a:	2f ef       	ldi	r18, 0xFF	; 255
    1f9c:	3f ef       	ldi	r19, 0xFF	; 255
    1f9e:	4f ef       	ldi	r20, 0xFF	; 255
    1fa0:	5f e7       	ldi	r21, 0x7F	; 127
    1fa2:	04 c0       	rjmp	.+8      	; 0x1fac <__fixsfsi+0x9c>
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	50 e8       	ldi	r21, 0x80	; 128
    1fac:	b9 01       	movw	r22, r18
    1fae:	ca 01       	movw	r24, r20
    1fb0:	2c 96       	adiw	r28, 0x0c	; 12
    1fb2:	e2 e0       	ldi	r30, 0x02	; 2
    1fb4:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__epilogue_restores__+0x20>

00001fb8 <__pack_f>:
    1fb8:	df 92       	push	r13
    1fba:	ef 92       	push	r14
    1fbc:	ff 92       	push	r15
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	e4 80       	ldd	r14, Z+4	; 0x04
    1fc6:	f5 80       	ldd	r15, Z+5	; 0x05
    1fc8:	06 81       	ldd	r16, Z+6	; 0x06
    1fca:	17 81       	ldd	r17, Z+7	; 0x07
    1fcc:	d1 80       	ldd	r13, Z+1	; 0x01
    1fce:	80 81       	ld	r24, Z
    1fd0:	82 30       	cpi	r24, 0x02	; 2
    1fd2:	48 f4       	brcc	.+18     	; 0x1fe6 <__pack_f+0x2e>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e1       	ldi	r26, 0x10	; 16
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e8 2a       	or	r14, r24
    1fde:	f9 2a       	or	r15, r25
    1fe0:	0a 2b       	or	r16, r26
    1fe2:	1b 2b       	or	r17, r27
    1fe4:	a5 c0       	rjmp	.+330    	; 0x2130 <__pack_f+0x178>
    1fe6:	84 30       	cpi	r24, 0x04	; 4
    1fe8:	09 f4       	brne	.+2      	; 0x1fec <__pack_f+0x34>
    1fea:	9f c0       	rjmp	.+318    	; 0x212a <__pack_f+0x172>
    1fec:	82 30       	cpi	r24, 0x02	; 2
    1fee:	21 f4       	brne	.+8      	; 0x1ff8 <__pack_f+0x40>
    1ff0:	ee 24       	eor	r14, r14
    1ff2:	ff 24       	eor	r15, r15
    1ff4:	87 01       	movw	r16, r14
    1ff6:	05 c0       	rjmp	.+10     	; 0x2002 <__pack_f+0x4a>
    1ff8:	e1 14       	cp	r14, r1
    1ffa:	f1 04       	cpc	r15, r1
    1ffc:	01 05       	cpc	r16, r1
    1ffe:	11 05       	cpc	r17, r1
    2000:	19 f4       	brne	.+6      	; 0x2008 <__pack_f+0x50>
    2002:	e0 e0       	ldi	r30, 0x00	; 0
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	96 c0       	rjmp	.+300    	; 0x2134 <__pack_f+0x17c>
    2008:	62 81       	ldd	r22, Z+2	; 0x02
    200a:	73 81       	ldd	r23, Z+3	; 0x03
    200c:	9f ef       	ldi	r25, 0xFF	; 255
    200e:	62 38       	cpi	r22, 0x82	; 130
    2010:	79 07       	cpc	r23, r25
    2012:	0c f0       	brlt	.+2      	; 0x2016 <__pack_f+0x5e>
    2014:	5b c0       	rjmp	.+182    	; 0x20cc <__pack_f+0x114>
    2016:	22 e8       	ldi	r18, 0x82	; 130
    2018:	3f ef       	ldi	r19, 0xFF	; 255
    201a:	26 1b       	sub	r18, r22
    201c:	37 0b       	sbc	r19, r23
    201e:	2a 31       	cpi	r18, 0x1A	; 26
    2020:	31 05       	cpc	r19, r1
    2022:	2c f0       	brlt	.+10     	; 0x202e <__pack_f+0x76>
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	2a c0       	rjmp	.+84     	; 0x2082 <__pack_f+0xca>
    202e:	b8 01       	movw	r22, r16
    2030:	a7 01       	movw	r20, r14
    2032:	02 2e       	mov	r0, r18
    2034:	04 c0       	rjmp	.+8      	; 0x203e <__pack_f+0x86>
    2036:	76 95       	lsr	r23
    2038:	67 95       	ror	r22
    203a:	57 95       	ror	r21
    203c:	47 95       	ror	r20
    203e:	0a 94       	dec	r0
    2040:	d2 f7       	brpl	.-12     	; 0x2036 <__pack_f+0x7e>
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a0 e0       	ldi	r26, 0x00	; 0
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	04 c0       	rjmp	.+8      	; 0x2054 <__pack_f+0x9c>
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	aa 1f       	adc	r26, r26
    2052:	bb 1f       	adc	r27, r27
    2054:	2a 95       	dec	r18
    2056:	d2 f7       	brpl	.-12     	; 0x204c <__pack_f+0x94>
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	a1 09       	sbc	r26, r1
    205c:	b1 09       	sbc	r27, r1
    205e:	8e 21       	and	r24, r14
    2060:	9f 21       	and	r25, r15
    2062:	a0 23       	and	r26, r16
    2064:	b1 23       	and	r27, r17
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	a1 05       	cpc	r26, r1
    206a:	b1 05       	cpc	r27, r1
    206c:	21 f0       	breq	.+8      	; 0x2076 <__pack_f+0xbe>
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a0 e0       	ldi	r26, 0x00	; 0
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	9a 01       	movw	r18, r20
    2078:	ab 01       	movw	r20, r22
    207a:	28 2b       	or	r18, r24
    207c:	39 2b       	or	r19, r25
    207e:	4a 2b       	or	r20, r26
    2080:	5b 2b       	or	r21, r27
    2082:	da 01       	movw	r26, r20
    2084:	c9 01       	movw	r24, r18
    2086:	8f 77       	andi	r24, 0x7F	; 127
    2088:	90 70       	andi	r25, 0x00	; 0
    208a:	a0 70       	andi	r26, 0x00	; 0
    208c:	b0 70       	andi	r27, 0x00	; 0
    208e:	80 34       	cpi	r24, 0x40	; 64
    2090:	91 05       	cpc	r25, r1
    2092:	a1 05       	cpc	r26, r1
    2094:	b1 05       	cpc	r27, r1
    2096:	39 f4       	brne	.+14     	; 0x20a6 <__pack_f+0xee>
    2098:	27 ff       	sbrs	r18, 7
    209a:	09 c0       	rjmp	.+18     	; 0x20ae <__pack_f+0xf6>
    209c:	20 5c       	subi	r18, 0xC0	; 192
    209e:	3f 4f       	sbci	r19, 0xFF	; 255
    20a0:	4f 4f       	sbci	r20, 0xFF	; 255
    20a2:	5f 4f       	sbci	r21, 0xFF	; 255
    20a4:	04 c0       	rjmp	.+8      	; 0x20ae <__pack_f+0xf6>
    20a6:	21 5c       	subi	r18, 0xC1	; 193
    20a8:	3f 4f       	sbci	r19, 0xFF	; 255
    20aa:	4f 4f       	sbci	r20, 0xFF	; 255
    20ac:	5f 4f       	sbci	r21, 0xFF	; 255
    20ae:	e0 e0       	ldi	r30, 0x00	; 0
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	20 30       	cpi	r18, 0x00	; 0
    20b4:	a0 e0       	ldi	r26, 0x00	; 0
    20b6:	3a 07       	cpc	r19, r26
    20b8:	a0 e0       	ldi	r26, 0x00	; 0
    20ba:	4a 07       	cpc	r20, r26
    20bc:	a0 e4       	ldi	r26, 0x40	; 64
    20be:	5a 07       	cpc	r21, r26
    20c0:	10 f0       	brcs	.+4      	; 0x20c6 <__pack_f+0x10e>
    20c2:	e1 e0       	ldi	r30, 0x01	; 1
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	79 01       	movw	r14, r18
    20c8:	8a 01       	movw	r16, r20
    20ca:	27 c0       	rjmp	.+78     	; 0x211a <__pack_f+0x162>
    20cc:	60 38       	cpi	r22, 0x80	; 128
    20ce:	71 05       	cpc	r23, r1
    20d0:	64 f5       	brge	.+88     	; 0x212a <__pack_f+0x172>
    20d2:	fb 01       	movw	r30, r22
    20d4:	e1 58       	subi	r30, 0x81	; 129
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	d8 01       	movw	r26, r16
    20da:	c7 01       	movw	r24, r14
    20dc:	8f 77       	andi	r24, 0x7F	; 127
    20de:	90 70       	andi	r25, 0x00	; 0
    20e0:	a0 70       	andi	r26, 0x00	; 0
    20e2:	b0 70       	andi	r27, 0x00	; 0
    20e4:	80 34       	cpi	r24, 0x40	; 64
    20e6:	91 05       	cpc	r25, r1
    20e8:	a1 05       	cpc	r26, r1
    20ea:	b1 05       	cpc	r27, r1
    20ec:	39 f4       	brne	.+14     	; 0x20fc <__pack_f+0x144>
    20ee:	e7 fe       	sbrs	r14, 7
    20f0:	0d c0       	rjmp	.+26     	; 0x210c <__pack_f+0x154>
    20f2:	80 e4       	ldi	r24, 0x40	; 64
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	a0 e0       	ldi	r26, 0x00	; 0
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	04 c0       	rjmp	.+8      	; 0x2104 <__pack_f+0x14c>
    20fc:	8f e3       	ldi	r24, 0x3F	; 63
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a0 e0       	ldi	r26, 0x00	; 0
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e8 0e       	add	r14, r24
    2106:	f9 1e       	adc	r15, r25
    2108:	0a 1f       	adc	r16, r26
    210a:	1b 1f       	adc	r17, r27
    210c:	17 ff       	sbrs	r17, 7
    210e:	05 c0       	rjmp	.+10     	; 0x211a <__pack_f+0x162>
    2110:	16 95       	lsr	r17
    2112:	07 95       	ror	r16
    2114:	f7 94       	ror	r15
    2116:	e7 94       	ror	r14
    2118:	31 96       	adiw	r30, 0x01	; 1
    211a:	87 e0       	ldi	r24, 0x07	; 7
    211c:	16 95       	lsr	r17
    211e:	07 95       	ror	r16
    2120:	f7 94       	ror	r15
    2122:	e7 94       	ror	r14
    2124:	8a 95       	dec	r24
    2126:	d1 f7       	brne	.-12     	; 0x211c <__pack_f+0x164>
    2128:	05 c0       	rjmp	.+10     	; 0x2134 <__pack_f+0x17c>
    212a:	ee 24       	eor	r14, r14
    212c:	ff 24       	eor	r15, r15
    212e:	87 01       	movw	r16, r14
    2130:	ef ef       	ldi	r30, 0xFF	; 255
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	6e 2f       	mov	r22, r30
    2136:	67 95       	ror	r22
    2138:	66 27       	eor	r22, r22
    213a:	67 95       	ror	r22
    213c:	90 2f       	mov	r25, r16
    213e:	9f 77       	andi	r25, 0x7F	; 127
    2140:	d7 94       	ror	r13
    2142:	dd 24       	eor	r13, r13
    2144:	d7 94       	ror	r13
    2146:	8e 2f       	mov	r24, r30
    2148:	86 95       	lsr	r24
    214a:	49 2f       	mov	r20, r25
    214c:	46 2b       	or	r20, r22
    214e:	58 2f       	mov	r21, r24
    2150:	5d 29       	or	r21, r13
    2152:	b7 01       	movw	r22, r14
    2154:	ca 01       	movw	r24, r20
    2156:	1f 91       	pop	r17
    2158:	0f 91       	pop	r16
    215a:	ff 90       	pop	r15
    215c:	ef 90       	pop	r14
    215e:	df 90       	pop	r13
    2160:	08 95       	ret

00002162 <__unpack_f>:
    2162:	fc 01       	movw	r30, r24
    2164:	db 01       	movw	r26, r22
    2166:	40 81       	ld	r20, Z
    2168:	51 81       	ldd	r21, Z+1	; 0x01
    216a:	22 81       	ldd	r18, Z+2	; 0x02
    216c:	62 2f       	mov	r22, r18
    216e:	6f 77       	andi	r22, 0x7F	; 127
    2170:	70 e0       	ldi	r23, 0x00	; 0
    2172:	22 1f       	adc	r18, r18
    2174:	22 27       	eor	r18, r18
    2176:	22 1f       	adc	r18, r18
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	89 2f       	mov	r24, r25
    217c:	88 0f       	add	r24, r24
    217e:	82 2b       	or	r24, r18
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	99 1f       	adc	r25, r25
    2186:	99 27       	eor	r25, r25
    2188:	99 1f       	adc	r25, r25
    218a:	11 96       	adiw	r26, 0x01	; 1
    218c:	9c 93       	st	X, r25
    218e:	11 97       	sbiw	r26, 0x01	; 1
    2190:	21 15       	cp	r18, r1
    2192:	31 05       	cpc	r19, r1
    2194:	a9 f5       	brne	.+106    	; 0x2200 <__unpack_f+0x9e>
    2196:	41 15       	cp	r20, r1
    2198:	51 05       	cpc	r21, r1
    219a:	61 05       	cpc	r22, r1
    219c:	71 05       	cpc	r23, r1
    219e:	11 f4       	brne	.+4      	; 0x21a4 <__unpack_f+0x42>
    21a0:	82 e0       	ldi	r24, 0x02	; 2
    21a2:	37 c0       	rjmp	.+110    	; 0x2212 <__unpack_f+0xb0>
    21a4:	82 e8       	ldi	r24, 0x82	; 130
    21a6:	9f ef       	ldi	r25, 0xFF	; 255
    21a8:	13 96       	adiw	r26, 0x03	; 3
    21aa:	9c 93       	st	X, r25
    21ac:	8e 93       	st	-X, r24
    21ae:	12 97       	sbiw	r26, 0x02	; 2
    21b0:	9a 01       	movw	r18, r20
    21b2:	ab 01       	movw	r20, r22
    21b4:	67 e0       	ldi	r22, 0x07	; 7
    21b6:	22 0f       	add	r18, r18
    21b8:	33 1f       	adc	r19, r19
    21ba:	44 1f       	adc	r20, r20
    21bc:	55 1f       	adc	r21, r21
    21be:	6a 95       	dec	r22
    21c0:	d1 f7       	brne	.-12     	; 0x21b6 <__unpack_f+0x54>
    21c2:	83 e0       	ldi	r24, 0x03	; 3
    21c4:	8c 93       	st	X, r24
    21c6:	0d c0       	rjmp	.+26     	; 0x21e2 <__unpack_f+0x80>
    21c8:	22 0f       	add	r18, r18
    21ca:	33 1f       	adc	r19, r19
    21cc:	44 1f       	adc	r20, r20
    21ce:	55 1f       	adc	r21, r21
    21d0:	12 96       	adiw	r26, 0x02	; 2
    21d2:	8d 91       	ld	r24, X+
    21d4:	9c 91       	ld	r25, X
    21d6:	13 97       	sbiw	r26, 0x03	; 3
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	13 96       	adiw	r26, 0x03	; 3
    21dc:	9c 93       	st	X, r25
    21de:	8e 93       	st	-X, r24
    21e0:	12 97       	sbiw	r26, 0x02	; 2
    21e2:	20 30       	cpi	r18, 0x00	; 0
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	38 07       	cpc	r19, r24
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	48 07       	cpc	r20, r24
    21ec:	80 e4       	ldi	r24, 0x40	; 64
    21ee:	58 07       	cpc	r21, r24
    21f0:	58 f3       	brcs	.-42     	; 0x21c8 <__unpack_f+0x66>
    21f2:	14 96       	adiw	r26, 0x04	; 4
    21f4:	2d 93       	st	X+, r18
    21f6:	3d 93       	st	X+, r19
    21f8:	4d 93       	st	X+, r20
    21fa:	5c 93       	st	X, r21
    21fc:	17 97       	sbiw	r26, 0x07	; 7
    21fe:	08 95       	ret
    2200:	2f 3f       	cpi	r18, 0xFF	; 255
    2202:	31 05       	cpc	r19, r1
    2204:	79 f4       	brne	.+30     	; 0x2224 <__unpack_f+0xc2>
    2206:	41 15       	cp	r20, r1
    2208:	51 05       	cpc	r21, r1
    220a:	61 05       	cpc	r22, r1
    220c:	71 05       	cpc	r23, r1
    220e:	19 f4       	brne	.+6      	; 0x2216 <__unpack_f+0xb4>
    2210:	84 e0       	ldi	r24, 0x04	; 4
    2212:	8c 93       	st	X, r24
    2214:	08 95       	ret
    2216:	64 ff       	sbrs	r22, 4
    2218:	03 c0       	rjmp	.+6      	; 0x2220 <__unpack_f+0xbe>
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	8c 93       	st	X, r24
    221e:	12 c0       	rjmp	.+36     	; 0x2244 <__unpack_f+0xe2>
    2220:	1c 92       	st	X, r1
    2222:	10 c0       	rjmp	.+32     	; 0x2244 <__unpack_f+0xe2>
    2224:	2f 57       	subi	r18, 0x7F	; 127
    2226:	30 40       	sbci	r19, 0x00	; 0
    2228:	13 96       	adiw	r26, 0x03	; 3
    222a:	3c 93       	st	X, r19
    222c:	2e 93       	st	-X, r18
    222e:	12 97       	sbiw	r26, 0x02	; 2
    2230:	83 e0       	ldi	r24, 0x03	; 3
    2232:	8c 93       	st	X, r24
    2234:	87 e0       	ldi	r24, 0x07	; 7
    2236:	44 0f       	add	r20, r20
    2238:	55 1f       	adc	r21, r21
    223a:	66 1f       	adc	r22, r22
    223c:	77 1f       	adc	r23, r23
    223e:	8a 95       	dec	r24
    2240:	d1 f7       	brne	.-12     	; 0x2236 <__unpack_f+0xd4>
    2242:	70 64       	ori	r23, 0x40	; 64
    2244:	14 96       	adiw	r26, 0x04	; 4
    2246:	4d 93       	st	X+, r20
    2248:	5d 93       	st	X+, r21
    224a:	6d 93       	st	X+, r22
    224c:	7c 93       	st	X, r23
    224e:	17 97       	sbiw	r26, 0x07	; 7
    2250:	08 95       	ret

00002252 <__fpcmp_parts_f>:
    2252:	1f 93       	push	r17
    2254:	dc 01       	movw	r26, r24
    2256:	fb 01       	movw	r30, r22
    2258:	9c 91       	ld	r25, X
    225a:	92 30       	cpi	r25, 0x02	; 2
    225c:	08 f4       	brcc	.+2      	; 0x2260 <__fpcmp_parts_f+0xe>
    225e:	47 c0       	rjmp	.+142    	; 0x22ee <__fpcmp_parts_f+0x9c>
    2260:	80 81       	ld	r24, Z
    2262:	82 30       	cpi	r24, 0x02	; 2
    2264:	08 f4       	brcc	.+2      	; 0x2268 <__fpcmp_parts_f+0x16>
    2266:	43 c0       	rjmp	.+134    	; 0x22ee <__fpcmp_parts_f+0x9c>
    2268:	94 30       	cpi	r25, 0x04	; 4
    226a:	51 f4       	brne	.+20     	; 0x2280 <__fpcmp_parts_f+0x2e>
    226c:	11 96       	adiw	r26, 0x01	; 1
    226e:	1c 91       	ld	r17, X
    2270:	84 30       	cpi	r24, 0x04	; 4
    2272:	99 f5       	brne	.+102    	; 0x22da <__fpcmp_parts_f+0x88>
    2274:	81 81       	ldd	r24, Z+1	; 0x01
    2276:	68 2f       	mov	r22, r24
    2278:	70 e0       	ldi	r23, 0x00	; 0
    227a:	61 1b       	sub	r22, r17
    227c:	71 09       	sbc	r23, r1
    227e:	3f c0       	rjmp	.+126    	; 0x22fe <__fpcmp_parts_f+0xac>
    2280:	84 30       	cpi	r24, 0x04	; 4
    2282:	21 f0       	breq	.+8      	; 0x228c <__fpcmp_parts_f+0x3a>
    2284:	92 30       	cpi	r25, 0x02	; 2
    2286:	31 f4       	brne	.+12     	; 0x2294 <__fpcmp_parts_f+0x42>
    2288:	82 30       	cpi	r24, 0x02	; 2
    228a:	b9 f1       	breq	.+110    	; 0x22fa <__fpcmp_parts_f+0xa8>
    228c:	81 81       	ldd	r24, Z+1	; 0x01
    228e:	88 23       	and	r24, r24
    2290:	89 f1       	breq	.+98     	; 0x22f4 <__fpcmp_parts_f+0xa2>
    2292:	2d c0       	rjmp	.+90     	; 0x22ee <__fpcmp_parts_f+0x9c>
    2294:	11 96       	adiw	r26, 0x01	; 1
    2296:	1c 91       	ld	r17, X
    2298:	11 97       	sbiw	r26, 0x01	; 1
    229a:	82 30       	cpi	r24, 0x02	; 2
    229c:	f1 f0       	breq	.+60     	; 0x22da <__fpcmp_parts_f+0x88>
    229e:	81 81       	ldd	r24, Z+1	; 0x01
    22a0:	18 17       	cp	r17, r24
    22a2:	d9 f4       	brne	.+54     	; 0x22da <__fpcmp_parts_f+0x88>
    22a4:	12 96       	adiw	r26, 0x02	; 2
    22a6:	2d 91       	ld	r18, X+
    22a8:	3c 91       	ld	r19, X
    22aa:	13 97       	sbiw	r26, 0x03	; 3
    22ac:	82 81       	ldd	r24, Z+2	; 0x02
    22ae:	93 81       	ldd	r25, Z+3	; 0x03
    22b0:	82 17       	cp	r24, r18
    22b2:	93 07       	cpc	r25, r19
    22b4:	94 f0       	brlt	.+36     	; 0x22da <__fpcmp_parts_f+0x88>
    22b6:	28 17       	cp	r18, r24
    22b8:	39 07       	cpc	r19, r25
    22ba:	bc f0       	brlt	.+46     	; 0x22ea <__fpcmp_parts_f+0x98>
    22bc:	14 96       	adiw	r26, 0x04	; 4
    22be:	8d 91       	ld	r24, X+
    22c0:	9d 91       	ld	r25, X+
    22c2:	0d 90       	ld	r0, X+
    22c4:	bc 91       	ld	r27, X
    22c6:	a0 2d       	mov	r26, r0
    22c8:	24 81       	ldd	r18, Z+4	; 0x04
    22ca:	35 81       	ldd	r19, Z+5	; 0x05
    22cc:	46 81       	ldd	r20, Z+6	; 0x06
    22ce:	57 81       	ldd	r21, Z+7	; 0x07
    22d0:	28 17       	cp	r18, r24
    22d2:	39 07       	cpc	r19, r25
    22d4:	4a 07       	cpc	r20, r26
    22d6:	5b 07       	cpc	r21, r27
    22d8:	18 f4       	brcc	.+6      	; 0x22e0 <__fpcmp_parts_f+0x8e>
    22da:	11 23       	and	r17, r17
    22dc:	41 f0       	breq	.+16     	; 0x22ee <__fpcmp_parts_f+0x9c>
    22de:	0a c0       	rjmp	.+20     	; 0x22f4 <__fpcmp_parts_f+0xa2>
    22e0:	82 17       	cp	r24, r18
    22e2:	93 07       	cpc	r25, r19
    22e4:	a4 07       	cpc	r26, r20
    22e6:	b5 07       	cpc	r27, r21
    22e8:	40 f4       	brcc	.+16     	; 0x22fa <__fpcmp_parts_f+0xa8>
    22ea:	11 23       	and	r17, r17
    22ec:	19 f0       	breq	.+6      	; 0x22f4 <__fpcmp_parts_f+0xa2>
    22ee:	61 e0       	ldi	r22, 0x01	; 1
    22f0:	70 e0       	ldi	r23, 0x00	; 0
    22f2:	05 c0       	rjmp	.+10     	; 0x22fe <__fpcmp_parts_f+0xac>
    22f4:	6f ef       	ldi	r22, 0xFF	; 255
    22f6:	7f ef       	ldi	r23, 0xFF	; 255
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <__fpcmp_parts_f+0xac>
    22fa:	60 e0       	ldi	r22, 0x00	; 0
    22fc:	70 e0       	ldi	r23, 0x00	; 0
    22fe:	cb 01       	movw	r24, r22
    2300:	1f 91       	pop	r17
    2302:	08 95       	ret

00002304 <__udivmodhi4>:
    2304:	aa 1b       	sub	r26, r26
    2306:	bb 1b       	sub	r27, r27
    2308:	51 e1       	ldi	r21, 0x11	; 17
    230a:	07 c0       	rjmp	.+14     	; 0x231a <__udivmodhi4_ep>

0000230c <__udivmodhi4_loop>:
    230c:	aa 1f       	adc	r26, r26
    230e:	bb 1f       	adc	r27, r27
    2310:	a6 17       	cp	r26, r22
    2312:	b7 07       	cpc	r27, r23
    2314:	10 f0       	brcs	.+4      	; 0x231a <__udivmodhi4_ep>
    2316:	a6 1b       	sub	r26, r22
    2318:	b7 0b       	sbc	r27, r23

0000231a <__udivmodhi4_ep>:
    231a:	88 1f       	adc	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	5a 95       	dec	r21
    2320:	a9 f7       	brne	.-22     	; 0x230c <__udivmodhi4_loop>
    2322:	80 95       	com	r24
    2324:	90 95       	com	r25
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	08 95       	ret

0000232c <__divmodhi4>:
    232c:	97 fb       	bst	r25, 7
    232e:	09 2e       	mov	r0, r25
    2330:	07 26       	eor	r0, r23
    2332:	0a d0       	rcall	.+20     	; 0x2348 <__divmodhi4_neg1>
    2334:	77 fd       	sbrc	r23, 7
    2336:	04 d0       	rcall	.+8      	; 0x2340 <__divmodhi4_neg2>
    2338:	e5 df       	rcall	.-54     	; 0x2304 <__udivmodhi4>
    233a:	06 d0       	rcall	.+12     	; 0x2348 <__divmodhi4_neg1>
    233c:	00 20       	and	r0, r0
    233e:	1a f4       	brpl	.+6      	; 0x2346 <__divmodhi4_exit>

00002340 <__divmodhi4_neg2>:
    2340:	70 95       	com	r23
    2342:	61 95       	neg	r22
    2344:	7f 4f       	sbci	r23, 0xFF	; 255

00002346 <__divmodhi4_exit>:
    2346:	08 95       	ret

00002348 <__divmodhi4_neg1>:
    2348:	f6 f7       	brtc	.-4      	; 0x2346 <__divmodhi4_exit>
    234a:	90 95       	com	r25
    234c:	81 95       	neg	r24
    234e:	9f 4f       	sbci	r25, 0xFF	; 255
    2350:	08 95       	ret

00002352 <__prologue_saves__>:
    2352:	2f 92       	push	r2
    2354:	3f 92       	push	r3
    2356:	4f 92       	push	r4
    2358:	5f 92       	push	r5
    235a:	6f 92       	push	r6
    235c:	7f 92       	push	r7
    235e:	8f 92       	push	r8
    2360:	9f 92       	push	r9
    2362:	af 92       	push	r10
    2364:	bf 92       	push	r11
    2366:	cf 92       	push	r12
    2368:	df 92       	push	r13
    236a:	ef 92       	push	r14
    236c:	ff 92       	push	r15
    236e:	0f 93       	push	r16
    2370:	1f 93       	push	r17
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	ca 1b       	sub	r28, r26
    237c:	db 0b       	sbc	r29, r27
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
    2388:	09 94       	ijmp

0000238a <__epilogue_restores__>:
    238a:	2a 88       	ldd	r2, Y+18	; 0x12
    238c:	39 88       	ldd	r3, Y+17	; 0x11
    238e:	48 88       	ldd	r4, Y+16	; 0x10
    2390:	5f 84       	ldd	r5, Y+15	; 0x0f
    2392:	6e 84       	ldd	r6, Y+14	; 0x0e
    2394:	7d 84       	ldd	r7, Y+13	; 0x0d
    2396:	8c 84       	ldd	r8, Y+12	; 0x0c
    2398:	9b 84       	ldd	r9, Y+11	; 0x0b
    239a:	aa 84       	ldd	r10, Y+10	; 0x0a
    239c:	b9 84       	ldd	r11, Y+9	; 0x09
    239e:	c8 84       	ldd	r12, Y+8	; 0x08
    23a0:	df 80       	ldd	r13, Y+7	; 0x07
    23a2:	ee 80       	ldd	r14, Y+6	; 0x06
    23a4:	fd 80       	ldd	r15, Y+5	; 0x05
    23a6:	0c 81       	ldd	r16, Y+4	; 0x04
    23a8:	1b 81       	ldd	r17, Y+3	; 0x03
    23aa:	aa 81       	ldd	r26, Y+2	; 0x02
    23ac:	b9 81       	ldd	r27, Y+1	; 0x01
    23ae:	ce 0f       	add	r28, r30
    23b0:	d1 1d       	adc	r29, r1
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	ed 01       	movw	r28, r26
    23be:	08 95       	ret

000023c0 <strlen>:
    23c0:	fc 01       	movw	r30, r24
    23c2:	01 90       	ld	r0, Z+
    23c4:	00 20       	and	r0, r0
    23c6:	e9 f7       	brne	.-6      	; 0x23c2 <strlen+0x2>
    23c8:	80 95       	com	r24
    23ca:	90 95       	com	r25
    23cc:	8e 0f       	add	r24, r30
    23ce:	9f 1f       	adc	r25, r31
    23d0:	08 95       	ret

000023d2 <sprintf>:
    23d2:	ae e0       	ldi	r26, 0x0E	; 14
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	ef ee       	ldi	r30, 0xEF	; 239
    23d8:	f1 e1       	ldi	r31, 0x11	; 17
    23da:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__prologue_saves__+0x1c>
    23de:	0d 89       	ldd	r16, Y+21	; 0x15
    23e0:	1e 89       	ldd	r17, Y+22	; 0x16
    23e2:	86 e0       	ldi	r24, 0x06	; 6
    23e4:	8c 83       	std	Y+4, r24	; 0x04
    23e6:	1a 83       	std	Y+2, r17	; 0x02
    23e8:	09 83       	std	Y+1, r16	; 0x01
    23ea:	8f ef       	ldi	r24, 0xFF	; 255
    23ec:	9f e7       	ldi	r25, 0x7F	; 127
    23ee:	9e 83       	std	Y+6, r25	; 0x06
    23f0:	8d 83       	std	Y+5, r24	; 0x05
    23f2:	9e 01       	movw	r18, r28
    23f4:	27 5e       	subi	r18, 0xE7	; 231
    23f6:	3f 4f       	sbci	r19, 0xFF	; 255
    23f8:	ce 01       	movw	r24, r28
    23fa:	01 96       	adiw	r24, 0x01	; 1
    23fc:	6f 89       	ldd	r22, Y+23	; 0x17
    23fe:	78 8d       	ldd	r23, Y+24	; 0x18
    2400:	a9 01       	movw	r20, r18
    2402:	0e 94 0d 12 	call	0x241a	; 0x241a <vfprintf>
    2406:	2f 81       	ldd	r18, Y+7	; 0x07
    2408:	38 85       	ldd	r19, Y+8	; 0x08
    240a:	02 0f       	add	r16, r18
    240c:	13 1f       	adc	r17, r19
    240e:	f8 01       	movw	r30, r16
    2410:	10 82       	st	Z, r1
    2412:	2e 96       	adiw	r28, 0x0e	; 14
    2414:	e4 e0       	ldi	r30, 0x04	; 4
    2416:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <__epilogue_restores__+0x1c>

0000241a <vfprintf>:
    241a:	ab e0       	ldi	r26, 0x0B	; 11
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e3 e1       	ldi	r30, 0x13	; 19
    2420:	f2 e1       	ldi	r31, 0x12	; 18
    2422:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__prologue_saves__>
    2426:	3c 01       	movw	r6, r24
    2428:	2b 01       	movw	r4, r22
    242a:	5a 01       	movw	r10, r20
    242c:	fc 01       	movw	r30, r24
    242e:	17 82       	std	Z+7, r1	; 0x07
    2430:	16 82       	std	Z+6, r1	; 0x06
    2432:	83 81       	ldd	r24, Z+3	; 0x03
    2434:	81 fd       	sbrc	r24, 1
    2436:	03 c0       	rjmp	.+6      	; 0x243e <vfprintf+0x24>
    2438:	6f ef       	ldi	r22, 0xFF	; 255
    243a:	7f ef       	ldi	r23, 0xFF	; 255
    243c:	c6 c1       	rjmp	.+908    	; 0x27ca <vfprintf+0x3b0>
    243e:	9a e0       	ldi	r25, 0x0A	; 10
    2440:	89 2e       	mov	r8, r25
    2442:	1e 01       	movw	r2, r28
    2444:	08 94       	sec
    2446:	21 1c       	adc	r2, r1
    2448:	31 1c       	adc	r3, r1
    244a:	f3 01       	movw	r30, r6
    244c:	23 81       	ldd	r18, Z+3	; 0x03
    244e:	f2 01       	movw	r30, r4
    2450:	23 fd       	sbrc	r18, 3
    2452:	85 91       	lpm	r24, Z+
    2454:	23 ff       	sbrs	r18, 3
    2456:	81 91       	ld	r24, Z+
    2458:	2f 01       	movw	r4, r30
    245a:	88 23       	and	r24, r24
    245c:	09 f4       	brne	.+2      	; 0x2460 <vfprintf+0x46>
    245e:	b2 c1       	rjmp	.+868    	; 0x27c4 <vfprintf+0x3aa>
    2460:	85 32       	cpi	r24, 0x25	; 37
    2462:	39 f4       	brne	.+14     	; 0x2472 <vfprintf+0x58>
    2464:	23 fd       	sbrc	r18, 3
    2466:	85 91       	lpm	r24, Z+
    2468:	23 ff       	sbrs	r18, 3
    246a:	81 91       	ld	r24, Z+
    246c:	2f 01       	movw	r4, r30
    246e:	85 32       	cpi	r24, 0x25	; 37
    2470:	29 f4       	brne	.+10     	; 0x247c <vfprintf+0x62>
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	b3 01       	movw	r22, r6
    2476:	0e 94 00 14 	call	0x2800	; 0x2800 <fputc>
    247a:	e7 cf       	rjmp	.-50     	; 0x244a <vfprintf+0x30>
    247c:	98 2f       	mov	r25, r24
    247e:	ff 24       	eor	r15, r15
    2480:	ee 24       	eor	r14, r14
    2482:	99 24       	eor	r9, r9
    2484:	ff e1       	ldi	r31, 0x1F	; 31
    2486:	ff 15       	cp	r31, r15
    2488:	d0 f0       	brcs	.+52     	; 0x24be <vfprintf+0xa4>
    248a:	9b 32       	cpi	r25, 0x2B	; 43
    248c:	69 f0       	breq	.+26     	; 0x24a8 <vfprintf+0x8e>
    248e:	9c 32       	cpi	r25, 0x2C	; 44
    2490:	28 f4       	brcc	.+10     	; 0x249c <vfprintf+0x82>
    2492:	90 32       	cpi	r25, 0x20	; 32
    2494:	59 f0       	breq	.+22     	; 0x24ac <vfprintf+0x92>
    2496:	93 32       	cpi	r25, 0x23	; 35
    2498:	91 f4       	brne	.+36     	; 0x24be <vfprintf+0xa4>
    249a:	0e c0       	rjmp	.+28     	; 0x24b8 <vfprintf+0x9e>
    249c:	9d 32       	cpi	r25, 0x2D	; 45
    249e:	49 f0       	breq	.+18     	; 0x24b2 <vfprintf+0x98>
    24a0:	90 33       	cpi	r25, 0x30	; 48
    24a2:	69 f4       	brne	.+26     	; 0x24be <vfprintf+0xa4>
    24a4:	41 e0       	ldi	r20, 0x01	; 1
    24a6:	24 c0       	rjmp	.+72     	; 0x24f0 <vfprintf+0xd6>
    24a8:	52 e0       	ldi	r21, 0x02	; 2
    24aa:	f5 2a       	or	r15, r21
    24ac:	84 e0       	ldi	r24, 0x04	; 4
    24ae:	f8 2a       	or	r15, r24
    24b0:	28 c0       	rjmp	.+80     	; 0x2502 <vfprintf+0xe8>
    24b2:	98 e0       	ldi	r25, 0x08	; 8
    24b4:	f9 2a       	or	r15, r25
    24b6:	25 c0       	rjmp	.+74     	; 0x2502 <vfprintf+0xe8>
    24b8:	e0 e1       	ldi	r30, 0x10	; 16
    24ba:	fe 2a       	or	r15, r30
    24bc:	22 c0       	rjmp	.+68     	; 0x2502 <vfprintf+0xe8>
    24be:	f7 fc       	sbrc	r15, 7
    24c0:	29 c0       	rjmp	.+82     	; 0x2514 <vfprintf+0xfa>
    24c2:	89 2f       	mov	r24, r25
    24c4:	80 53       	subi	r24, 0x30	; 48
    24c6:	8a 30       	cpi	r24, 0x0A	; 10
    24c8:	70 f4       	brcc	.+28     	; 0x24e6 <vfprintf+0xcc>
    24ca:	f6 fe       	sbrs	r15, 6
    24cc:	05 c0       	rjmp	.+10     	; 0x24d8 <vfprintf+0xbe>
    24ce:	98 9c       	mul	r9, r8
    24d0:	90 2c       	mov	r9, r0
    24d2:	11 24       	eor	r1, r1
    24d4:	98 0e       	add	r9, r24
    24d6:	15 c0       	rjmp	.+42     	; 0x2502 <vfprintf+0xe8>
    24d8:	e8 9c       	mul	r14, r8
    24da:	e0 2c       	mov	r14, r0
    24dc:	11 24       	eor	r1, r1
    24de:	e8 0e       	add	r14, r24
    24e0:	f0 e2       	ldi	r31, 0x20	; 32
    24e2:	ff 2a       	or	r15, r31
    24e4:	0e c0       	rjmp	.+28     	; 0x2502 <vfprintf+0xe8>
    24e6:	9e 32       	cpi	r25, 0x2E	; 46
    24e8:	29 f4       	brne	.+10     	; 0x24f4 <vfprintf+0xda>
    24ea:	f6 fc       	sbrc	r15, 6
    24ec:	6b c1       	rjmp	.+726    	; 0x27c4 <vfprintf+0x3aa>
    24ee:	40 e4       	ldi	r20, 0x40	; 64
    24f0:	f4 2a       	or	r15, r20
    24f2:	07 c0       	rjmp	.+14     	; 0x2502 <vfprintf+0xe8>
    24f4:	9c 36       	cpi	r25, 0x6C	; 108
    24f6:	19 f4       	brne	.+6      	; 0x24fe <vfprintf+0xe4>
    24f8:	50 e8       	ldi	r21, 0x80	; 128
    24fa:	f5 2a       	or	r15, r21
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <vfprintf+0xe8>
    24fe:	98 36       	cpi	r25, 0x68	; 104
    2500:	49 f4       	brne	.+18     	; 0x2514 <vfprintf+0xfa>
    2502:	f2 01       	movw	r30, r4
    2504:	23 fd       	sbrc	r18, 3
    2506:	95 91       	lpm	r25, Z+
    2508:	23 ff       	sbrs	r18, 3
    250a:	91 91       	ld	r25, Z+
    250c:	2f 01       	movw	r4, r30
    250e:	99 23       	and	r25, r25
    2510:	09 f0       	breq	.+2      	; 0x2514 <vfprintf+0xfa>
    2512:	b8 cf       	rjmp	.-144    	; 0x2484 <vfprintf+0x6a>
    2514:	89 2f       	mov	r24, r25
    2516:	85 54       	subi	r24, 0x45	; 69
    2518:	83 30       	cpi	r24, 0x03	; 3
    251a:	18 f0       	brcs	.+6      	; 0x2522 <vfprintf+0x108>
    251c:	80 52       	subi	r24, 0x20	; 32
    251e:	83 30       	cpi	r24, 0x03	; 3
    2520:	38 f4       	brcc	.+14     	; 0x2530 <vfprintf+0x116>
    2522:	44 e0       	ldi	r20, 0x04	; 4
    2524:	50 e0       	ldi	r21, 0x00	; 0
    2526:	a4 0e       	add	r10, r20
    2528:	b5 1e       	adc	r11, r21
    252a:	5f e3       	ldi	r21, 0x3F	; 63
    252c:	59 83       	std	Y+1, r21	; 0x01
    252e:	0f c0       	rjmp	.+30     	; 0x254e <vfprintf+0x134>
    2530:	93 36       	cpi	r25, 0x63	; 99
    2532:	31 f0       	breq	.+12     	; 0x2540 <vfprintf+0x126>
    2534:	93 37       	cpi	r25, 0x73	; 115
    2536:	79 f0       	breq	.+30     	; 0x2556 <vfprintf+0x13c>
    2538:	93 35       	cpi	r25, 0x53	; 83
    253a:	09 f0       	breq	.+2      	; 0x253e <vfprintf+0x124>
    253c:	56 c0       	rjmp	.+172    	; 0x25ea <vfprintf+0x1d0>
    253e:	20 c0       	rjmp	.+64     	; 0x2580 <vfprintf+0x166>
    2540:	f5 01       	movw	r30, r10
    2542:	80 81       	ld	r24, Z
    2544:	89 83       	std	Y+1, r24	; 0x01
    2546:	42 e0       	ldi	r20, 0x02	; 2
    2548:	50 e0       	ldi	r21, 0x00	; 0
    254a:	a4 0e       	add	r10, r20
    254c:	b5 1e       	adc	r11, r21
    254e:	61 01       	movw	r12, r2
    2550:	01 e0       	ldi	r16, 0x01	; 1
    2552:	10 e0       	ldi	r17, 0x00	; 0
    2554:	12 c0       	rjmp	.+36     	; 0x257a <vfprintf+0x160>
    2556:	f5 01       	movw	r30, r10
    2558:	c0 80       	ld	r12, Z
    255a:	d1 80       	ldd	r13, Z+1	; 0x01
    255c:	f6 fc       	sbrc	r15, 6
    255e:	03 c0       	rjmp	.+6      	; 0x2566 <vfprintf+0x14c>
    2560:	6f ef       	ldi	r22, 0xFF	; 255
    2562:	7f ef       	ldi	r23, 0xFF	; 255
    2564:	02 c0       	rjmp	.+4      	; 0x256a <vfprintf+0x150>
    2566:	69 2d       	mov	r22, r9
    2568:	70 e0       	ldi	r23, 0x00	; 0
    256a:	42 e0       	ldi	r20, 0x02	; 2
    256c:	50 e0       	ldi	r21, 0x00	; 0
    256e:	a4 0e       	add	r10, r20
    2570:	b5 1e       	adc	r11, r21
    2572:	c6 01       	movw	r24, r12
    2574:	0e 94 f5 13 	call	0x27ea	; 0x27ea <strnlen>
    2578:	8c 01       	movw	r16, r24
    257a:	5f e7       	ldi	r21, 0x7F	; 127
    257c:	f5 22       	and	r15, r21
    257e:	14 c0       	rjmp	.+40     	; 0x25a8 <vfprintf+0x18e>
    2580:	f5 01       	movw	r30, r10
    2582:	c0 80       	ld	r12, Z
    2584:	d1 80       	ldd	r13, Z+1	; 0x01
    2586:	f6 fc       	sbrc	r15, 6
    2588:	03 c0       	rjmp	.+6      	; 0x2590 <vfprintf+0x176>
    258a:	6f ef       	ldi	r22, 0xFF	; 255
    258c:	7f ef       	ldi	r23, 0xFF	; 255
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <vfprintf+0x17a>
    2590:	69 2d       	mov	r22, r9
    2592:	70 e0       	ldi	r23, 0x00	; 0
    2594:	42 e0       	ldi	r20, 0x02	; 2
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	a4 0e       	add	r10, r20
    259a:	b5 1e       	adc	r11, r21
    259c:	c6 01       	movw	r24, r12
    259e:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <strnlen_P>
    25a2:	8c 01       	movw	r16, r24
    25a4:	50 e8       	ldi	r21, 0x80	; 128
    25a6:	f5 2a       	or	r15, r21
    25a8:	f3 fe       	sbrs	r15, 3
    25aa:	07 c0       	rjmp	.+14     	; 0x25ba <vfprintf+0x1a0>
    25ac:	1a c0       	rjmp	.+52     	; 0x25e2 <vfprintf+0x1c8>
    25ae:	80 e2       	ldi	r24, 0x20	; 32
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	b3 01       	movw	r22, r6
    25b4:	0e 94 00 14 	call	0x2800	; 0x2800 <fputc>
    25b8:	ea 94       	dec	r14
    25ba:	8e 2d       	mov	r24, r14
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	08 17       	cp	r16, r24
    25c0:	19 07       	cpc	r17, r25
    25c2:	a8 f3       	brcs	.-22     	; 0x25ae <vfprintf+0x194>
    25c4:	0e c0       	rjmp	.+28     	; 0x25e2 <vfprintf+0x1c8>
    25c6:	f6 01       	movw	r30, r12
    25c8:	f7 fc       	sbrc	r15, 7
    25ca:	85 91       	lpm	r24, Z+
    25cc:	f7 fe       	sbrs	r15, 7
    25ce:	81 91       	ld	r24, Z+
    25d0:	6f 01       	movw	r12, r30
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	b3 01       	movw	r22, r6
    25d6:	0e 94 00 14 	call	0x2800	; 0x2800 <fputc>
    25da:	e1 10       	cpse	r14, r1
    25dc:	ea 94       	dec	r14
    25de:	01 50       	subi	r16, 0x01	; 1
    25e0:	10 40       	sbci	r17, 0x00	; 0
    25e2:	01 15       	cp	r16, r1
    25e4:	11 05       	cpc	r17, r1
    25e6:	79 f7       	brne	.-34     	; 0x25c6 <vfprintf+0x1ac>
    25e8:	ea c0       	rjmp	.+468    	; 0x27be <vfprintf+0x3a4>
    25ea:	94 36       	cpi	r25, 0x64	; 100
    25ec:	11 f0       	breq	.+4      	; 0x25f2 <vfprintf+0x1d8>
    25ee:	99 36       	cpi	r25, 0x69	; 105
    25f0:	69 f5       	brne	.+90     	; 0x264c <vfprintf+0x232>
    25f2:	f7 fe       	sbrs	r15, 7
    25f4:	08 c0       	rjmp	.+16     	; 0x2606 <vfprintf+0x1ec>
    25f6:	f5 01       	movw	r30, r10
    25f8:	20 81       	ld	r18, Z
    25fa:	31 81       	ldd	r19, Z+1	; 0x01
    25fc:	42 81       	ldd	r20, Z+2	; 0x02
    25fe:	53 81       	ldd	r21, Z+3	; 0x03
    2600:	84 e0       	ldi	r24, 0x04	; 4
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	0a c0       	rjmp	.+20     	; 0x261a <vfprintf+0x200>
    2606:	f5 01       	movw	r30, r10
    2608:	80 81       	ld	r24, Z
    260a:	91 81       	ldd	r25, Z+1	; 0x01
    260c:	9c 01       	movw	r18, r24
    260e:	44 27       	eor	r20, r20
    2610:	37 fd       	sbrc	r19, 7
    2612:	40 95       	com	r20
    2614:	54 2f       	mov	r21, r20
    2616:	82 e0       	ldi	r24, 0x02	; 2
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a8 0e       	add	r10, r24
    261c:	b9 1e       	adc	r11, r25
    261e:	9f e6       	ldi	r25, 0x6F	; 111
    2620:	f9 22       	and	r15, r25
    2622:	57 ff       	sbrs	r21, 7
    2624:	09 c0       	rjmp	.+18     	; 0x2638 <vfprintf+0x21e>
    2626:	50 95       	com	r21
    2628:	40 95       	com	r20
    262a:	30 95       	com	r19
    262c:	21 95       	neg	r18
    262e:	3f 4f       	sbci	r19, 0xFF	; 255
    2630:	4f 4f       	sbci	r20, 0xFF	; 255
    2632:	5f 4f       	sbci	r21, 0xFF	; 255
    2634:	e0 e8       	ldi	r30, 0x80	; 128
    2636:	fe 2a       	or	r15, r30
    2638:	ca 01       	movw	r24, r20
    263a:	b9 01       	movw	r22, r18
    263c:	a1 01       	movw	r20, r2
    263e:	2a e0       	ldi	r18, 0x0A	; 10
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	0e 94 2c 14 	call	0x2858	; 0x2858 <__ultoa_invert>
    2646:	d8 2e       	mov	r13, r24
    2648:	d2 18       	sub	r13, r2
    264a:	40 c0       	rjmp	.+128    	; 0x26cc <vfprintf+0x2b2>
    264c:	95 37       	cpi	r25, 0x75	; 117
    264e:	29 f4       	brne	.+10     	; 0x265a <vfprintf+0x240>
    2650:	1f 2d       	mov	r17, r15
    2652:	1f 7e       	andi	r17, 0xEF	; 239
    2654:	2a e0       	ldi	r18, 0x0A	; 10
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	1d c0       	rjmp	.+58     	; 0x2694 <vfprintf+0x27a>
    265a:	1f 2d       	mov	r17, r15
    265c:	19 7f       	andi	r17, 0xF9	; 249
    265e:	9f 36       	cpi	r25, 0x6F	; 111
    2660:	61 f0       	breq	.+24     	; 0x267a <vfprintf+0x260>
    2662:	90 37       	cpi	r25, 0x70	; 112
    2664:	20 f4       	brcc	.+8      	; 0x266e <vfprintf+0x254>
    2666:	98 35       	cpi	r25, 0x58	; 88
    2668:	09 f0       	breq	.+2      	; 0x266c <vfprintf+0x252>
    266a:	ac c0       	rjmp	.+344    	; 0x27c4 <vfprintf+0x3aa>
    266c:	0f c0       	rjmp	.+30     	; 0x268c <vfprintf+0x272>
    266e:	90 37       	cpi	r25, 0x70	; 112
    2670:	39 f0       	breq	.+14     	; 0x2680 <vfprintf+0x266>
    2672:	98 37       	cpi	r25, 0x78	; 120
    2674:	09 f0       	breq	.+2      	; 0x2678 <vfprintf+0x25e>
    2676:	a6 c0       	rjmp	.+332    	; 0x27c4 <vfprintf+0x3aa>
    2678:	04 c0       	rjmp	.+8      	; 0x2682 <vfprintf+0x268>
    267a:	28 e0       	ldi	r18, 0x08	; 8
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	0a c0       	rjmp	.+20     	; 0x2694 <vfprintf+0x27a>
    2680:	10 61       	ori	r17, 0x10	; 16
    2682:	14 fd       	sbrc	r17, 4
    2684:	14 60       	ori	r17, 0x04	; 4
    2686:	20 e1       	ldi	r18, 0x10	; 16
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	04 c0       	rjmp	.+8      	; 0x2694 <vfprintf+0x27a>
    268c:	14 fd       	sbrc	r17, 4
    268e:	16 60       	ori	r17, 0x06	; 6
    2690:	20 e1       	ldi	r18, 0x10	; 16
    2692:	32 e0       	ldi	r19, 0x02	; 2
    2694:	17 ff       	sbrs	r17, 7
    2696:	08 c0       	rjmp	.+16     	; 0x26a8 <vfprintf+0x28e>
    2698:	f5 01       	movw	r30, r10
    269a:	60 81       	ld	r22, Z
    269c:	71 81       	ldd	r23, Z+1	; 0x01
    269e:	82 81       	ldd	r24, Z+2	; 0x02
    26a0:	93 81       	ldd	r25, Z+3	; 0x03
    26a2:	44 e0       	ldi	r20, 0x04	; 4
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	08 c0       	rjmp	.+16     	; 0x26b8 <vfprintf+0x29e>
    26a8:	f5 01       	movw	r30, r10
    26aa:	80 81       	ld	r24, Z
    26ac:	91 81       	ldd	r25, Z+1	; 0x01
    26ae:	bc 01       	movw	r22, r24
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	42 e0       	ldi	r20, 0x02	; 2
    26b6:	50 e0       	ldi	r21, 0x00	; 0
    26b8:	a4 0e       	add	r10, r20
    26ba:	b5 1e       	adc	r11, r21
    26bc:	a1 01       	movw	r20, r2
    26be:	0e 94 2c 14 	call	0x2858	; 0x2858 <__ultoa_invert>
    26c2:	d8 2e       	mov	r13, r24
    26c4:	d2 18       	sub	r13, r2
    26c6:	8f e7       	ldi	r24, 0x7F	; 127
    26c8:	f8 2e       	mov	r15, r24
    26ca:	f1 22       	and	r15, r17
    26cc:	f6 fe       	sbrs	r15, 6
    26ce:	0b c0       	rjmp	.+22     	; 0x26e6 <vfprintf+0x2cc>
    26d0:	5e ef       	ldi	r21, 0xFE	; 254
    26d2:	f5 22       	and	r15, r21
    26d4:	d9 14       	cp	r13, r9
    26d6:	38 f4       	brcc	.+14     	; 0x26e6 <vfprintf+0x2cc>
    26d8:	f4 fe       	sbrs	r15, 4
    26da:	07 c0       	rjmp	.+14     	; 0x26ea <vfprintf+0x2d0>
    26dc:	f2 fc       	sbrc	r15, 2
    26de:	05 c0       	rjmp	.+10     	; 0x26ea <vfprintf+0x2d0>
    26e0:	8f ee       	ldi	r24, 0xEF	; 239
    26e2:	f8 22       	and	r15, r24
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <vfprintf+0x2d0>
    26e6:	1d 2d       	mov	r17, r13
    26e8:	01 c0       	rjmp	.+2      	; 0x26ec <vfprintf+0x2d2>
    26ea:	19 2d       	mov	r17, r9
    26ec:	f4 fe       	sbrs	r15, 4
    26ee:	0d c0       	rjmp	.+26     	; 0x270a <vfprintf+0x2f0>
    26f0:	fe 01       	movw	r30, r28
    26f2:	ed 0d       	add	r30, r13
    26f4:	f1 1d       	adc	r31, r1
    26f6:	80 81       	ld	r24, Z
    26f8:	80 33       	cpi	r24, 0x30	; 48
    26fa:	19 f4       	brne	.+6      	; 0x2702 <vfprintf+0x2e8>
    26fc:	99 ee       	ldi	r25, 0xE9	; 233
    26fe:	f9 22       	and	r15, r25
    2700:	08 c0       	rjmp	.+16     	; 0x2712 <vfprintf+0x2f8>
    2702:	1f 5f       	subi	r17, 0xFF	; 255
    2704:	f2 fe       	sbrs	r15, 2
    2706:	05 c0       	rjmp	.+10     	; 0x2712 <vfprintf+0x2f8>
    2708:	03 c0       	rjmp	.+6      	; 0x2710 <vfprintf+0x2f6>
    270a:	8f 2d       	mov	r24, r15
    270c:	86 78       	andi	r24, 0x86	; 134
    270e:	09 f0       	breq	.+2      	; 0x2712 <vfprintf+0x2f8>
    2710:	1f 5f       	subi	r17, 0xFF	; 255
    2712:	0f 2d       	mov	r16, r15
    2714:	f3 fc       	sbrc	r15, 3
    2716:	14 c0       	rjmp	.+40     	; 0x2740 <vfprintf+0x326>
    2718:	f0 fe       	sbrs	r15, 0
    271a:	0f c0       	rjmp	.+30     	; 0x273a <vfprintf+0x320>
    271c:	1e 15       	cp	r17, r14
    271e:	10 f0       	brcs	.+4      	; 0x2724 <vfprintf+0x30a>
    2720:	9d 2c       	mov	r9, r13
    2722:	0b c0       	rjmp	.+22     	; 0x273a <vfprintf+0x320>
    2724:	9d 2c       	mov	r9, r13
    2726:	9e 0c       	add	r9, r14
    2728:	91 1a       	sub	r9, r17
    272a:	1e 2d       	mov	r17, r14
    272c:	06 c0       	rjmp	.+12     	; 0x273a <vfprintf+0x320>
    272e:	80 e2       	ldi	r24, 0x20	; 32
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	b3 01       	movw	r22, r6
    2734:	0e 94 00 14 	call	0x2800	; 0x2800 <fputc>
    2738:	1f 5f       	subi	r17, 0xFF	; 255
    273a:	1e 15       	cp	r17, r14
    273c:	c0 f3       	brcs	.-16     	; 0x272e <vfprintf+0x314>
    273e:	04 c0       	rjmp	.+8      	; 0x2748 <vfprintf+0x32e>
    2740:	1e 15       	cp	r17, r14
    2742:	10 f4       	brcc	.+4      	; 0x2748 <vfprintf+0x32e>
    2744:	e1 1a       	sub	r14, r17
    2746:	01 c0       	rjmp	.+2      	; 0x274a <vfprintf+0x330>
    2748:	ee 24       	eor	r14, r14
    274a:	04 ff       	sbrs	r16, 4
    274c:	0f c0       	rjmp	.+30     	; 0x276c <vfprintf+0x352>
    274e:	80 e3       	ldi	r24, 0x30	; 48
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	b3 01       	movw	r22, r6
    2754:	0e 94 00 14 	call	0x2800	; 0x2800 <fputc>
    2758:	02 ff       	sbrs	r16, 2
    275a:	1d c0       	rjmp	.+58     	; 0x2796 <vfprintf+0x37c>
    275c:	01 fd       	sbrc	r16, 1
    275e:	03 c0       	rjmp	.+6      	; 0x2766 <vfprintf+0x34c>
    2760:	88 e7       	ldi	r24, 0x78	; 120
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	0e c0       	rjmp	.+28     	; 0x2782 <vfprintf+0x368>
    2766:	88 e5       	ldi	r24, 0x58	; 88
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	0b c0       	rjmp	.+22     	; 0x2782 <vfprintf+0x368>
    276c:	80 2f       	mov	r24, r16
    276e:	86 78       	andi	r24, 0x86	; 134
    2770:	91 f0       	breq	.+36     	; 0x2796 <vfprintf+0x37c>
    2772:	01 ff       	sbrs	r16, 1
    2774:	02 c0       	rjmp	.+4      	; 0x277a <vfprintf+0x360>
    2776:	8b e2       	ldi	r24, 0x2B	; 43
    2778:	01 c0       	rjmp	.+2      	; 0x277c <vfprintf+0x362>
    277a:	80 e2       	ldi	r24, 0x20	; 32
    277c:	f7 fc       	sbrc	r15, 7
    277e:	8d e2       	ldi	r24, 0x2D	; 45
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	b3 01       	movw	r22, r6
    2784:	0e 94 00 14 	call	0x2800	; 0x2800 <fputc>
    2788:	06 c0       	rjmp	.+12     	; 0x2796 <vfprintf+0x37c>
    278a:	80 e3       	ldi	r24, 0x30	; 48
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	b3 01       	movw	r22, r6
    2790:	0e 94 00 14 	call	0x2800	; 0x2800 <fputc>
    2794:	9a 94       	dec	r9
    2796:	d9 14       	cp	r13, r9
    2798:	c0 f3       	brcs	.-16     	; 0x278a <vfprintf+0x370>
    279a:	da 94       	dec	r13
    279c:	f1 01       	movw	r30, r2
    279e:	ed 0d       	add	r30, r13
    27a0:	f1 1d       	adc	r31, r1
    27a2:	80 81       	ld	r24, Z
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	b3 01       	movw	r22, r6
    27a8:	0e 94 00 14 	call	0x2800	; 0x2800 <fputc>
    27ac:	dd 20       	and	r13, r13
    27ae:	a9 f7       	brne	.-22     	; 0x279a <vfprintf+0x380>
    27b0:	06 c0       	rjmp	.+12     	; 0x27be <vfprintf+0x3a4>
    27b2:	80 e2       	ldi	r24, 0x20	; 32
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	b3 01       	movw	r22, r6
    27b8:	0e 94 00 14 	call	0x2800	; 0x2800 <fputc>
    27bc:	ea 94       	dec	r14
    27be:	ee 20       	and	r14, r14
    27c0:	c1 f7       	brne	.-16     	; 0x27b2 <vfprintf+0x398>
    27c2:	43 ce       	rjmp	.-890    	; 0x244a <vfprintf+0x30>
    27c4:	f3 01       	movw	r30, r6
    27c6:	66 81       	ldd	r22, Z+6	; 0x06
    27c8:	77 81       	ldd	r23, Z+7	; 0x07
    27ca:	cb 01       	movw	r24, r22
    27cc:	2b 96       	adiw	r28, 0x0b	; 11
    27ce:	e2 e1       	ldi	r30, 0x12	; 18
    27d0:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__epilogue_restores__>

000027d4 <strnlen_P>:
    27d4:	fc 01       	movw	r30, r24
    27d6:	05 90       	lpm	r0, Z+
    27d8:	61 50       	subi	r22, 0x01	; 1
    27da:	70 40       	sbci	r23, 0x00	; 0
    27dc:	01 10       	cpse	r0, r1
    27de:	d8 f7       	brcc	.-10     	; 0x27d6 <strnlen_P+0x2>
    27e0:	80 95       	com	r24
    27e2:	90 95       	com	r25
    27e4:	8e 0f       	add	r24, r30
    27e6:	9f 1f       	adc	r25, r31
    27e8:	08 95       	ret

000027ea <strnlen>:
    27ea:	fc 01       	movw	r30, r24
    27ec:	61 50       	subi	r22, 0x01	; 1
    27ee:	70 40       	sbci	r23, 0x00	; 0
    27f0:	01 90       	ld	r0, Z+
    27f2:	01 10       	cpse	r0, r1
    27f4:	d8 f7       	brcc	.-10     	; 0x27ec <strnlen+0x2>
    27f6:	80 95       	com	r24
    27f8:	90 95       	com	r25
    27fa:	8e 0f       	add	r24, r30
    27fc:	9f 1f       	adc	r25, r31
    27fe:	08 95       	ret

00002800 <fputc>:
    2800:	0f 93       	push	r16
    2802:	1f 93       	push	r17
    2804:	cf 93       	push	r28
    2806:	df 93       	push	r29
    2808:	8c 01       	movw	r16, r24
    280a:	eb 01       	movw	r28, r22
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	81 ff       	sbrs	r24, 1
    2810:	1b c0       	rjmp	.+54     	; 0x2848 <fputc+0x48>
    2812:	82 ff       	sbrs	r24, 2
    2814:	0d c0       	rjmp	.+26     	; 0x2830 <fputc+0x30>
    2816:	2e 81       	ldd	r18, Y+6	; 0x06
    2818:	3f 81       	ldd	r19, Y+7	; 0x07
    281a:	8c 81       	ldd	r24, Y+4	; 0x04
    281c:	9d 81       	ldd	r25, Y+5	; 0x05
    281e:	28 17       	cp	r18, r24
    2820:	39 07       	cpc	r19, r25
    2822:	64 f4       	brge	.+24     	; 0x283c <fputc+0x3c>
    2824:	e8 81       	ld	r30, Y
    2826:	f9 81       	ldd	r31, Y+1	; 0x01
    2828:	01 93       	st	Z+, r16
    282a:	f9 83       	std	Y+1, r31	; 0x01
    282c:	e8 83       	st	Y, r30
    282e:	06 c0       	rjmp	.+12     	; 0x283c <fputc+0x3c>
    2830:	e8 85       	ldd	r30, Y+8	; 0x08
    2832:	f9 85       	ldd	r31, Y+9	; 0x09
    2834:	80 2f       	mov	r24, r16
    2836:	09 95       	icall
    2838:	89 2b       	or	r24, r25
    283a:	31 f4       	brne	.+12     	; 0x2848 <fputc+0x48>
    283c:	8e 81       	ldd	r24, Y+6	; 0x06
    283e:	9f 81       	ldd	r25, Y+7	; 0x07
    2840:	01 96       	adiw	r24, 0x01	; 1
    2842:	9f 83       	std	Y+7, r25	; 0x07
    2844:	8e 83       	std	Y+6, r24	; 0x06
    2846:	02 c0       	rjmp	.+4      	; 0x284c <fputc+0x4c>
    2848:	0f ef       	ldi	r16, 0xFF	; 255
    284a:	1f ef       	ldi	r17, 0xFF	; 255
    284c:	c8 01       	movw	r24, r16
    284e:	df 91       	pop	r29
    2850:	cf 91       	pop	r28
    2852:	1f 91       	pop	r17
    2854:	0f 91       	pop	r16
    2856:	08 95       	ret

00002858 <__ultoa_invert>:
    2858:	fa 01       	movw	r30, r20
    285a:	aa 27       	eor	r26, r26
    285c:	28 30       	cpi	r18, 0x08	; 8
    285e:	51 f1       	breq	.+84     	; 0x28b4 <__ultoa_invert+0x5c>
    2860:	20 31       	cpi	r18, 0x10	; 16
    2862:	81 f1       	breq	.+96     	; 0x28c4 <__ultoa_invert+0x6c>
    2864:	e8 94       	clt
    2866:	6f 93       	push	r22
    2868:	6e 7f       	andi	r22, 0xFE	; 254
    286a:	6e 5f       	subi	r22, 0xFE	; 254
    286c:	7f 4f       	sbci	r23, 0xFF	; 255
    286e:	8f 4f       	sbci	r24, 0xFF	; 255
    2870:	9f 4f       	sbci	r25, 0xFF	; 255
    2872:	af 4f       	sbci	r26, 0xFF	; 255
    2874:	b1 e0       	ldi	r27, 0x01	; 1
    2876:	3e d0       	rcall	.+124    	; 0x28f4 <__ultoa_invert+0x9c>
    2878:	b4 e0       	ldi	r27, 0x04	; 4
    287a:	3c d0       	rcall	.+120    	; 0x28f4 <__ultoa_invert+0x9c>
    287c:	67 0f       	add	r22, r23
    287e:	78 1f       	adc	r23, r24
    2880:	89 1f       	adc	r24, r25
    2882:	9a 1f       	adc	r25, r26
    2884:	a1 1d       	adc	r26, r1
    2886:	68 0f       	add	r22, r24
    2888:	79 1f       	adc	r23, r25
    288a:	8a 1f       	adc	r24, r26
    288c:	91 1d       	adc	r25, r1
    288e:	a1 1d       	adc	r26, r1
    2890:	6a 0f       	add	r22, r26
    2892:	71 1d       	adc	r23, r1
    2894:	81 1d       	adc	r24, r1
    2896:	91 1d       	adc	r25, r1
    2898:	a1 1d       	adc	r26, r1
    289a:	20 d0       	rcall	.+64     	; 0x28dc <__ultoa_invert+0x84>
    289c:	09 f4       	brne	.+2      	; 0x28a0 <__ultoa_invert+0x48>
    289e:	68 94       	set
    28a0:	3f 91       	pop	r19
    28a2:	2a e0       	ldi	r18, 0x0A	; 10
    28a4:	26 9f       	mul	r18, r22
    28a6:	11 24       	eor	r1, r1
    28a8:	30 19       	sub	r19, r0
    28aa:	30 5d       	subi	r19, 0xD0	; 208
    28ac:	31 93       	st	Z+, r19
    28ae:	de f6       	brtc	.-74     	; 0x2866 <__ultoa_invert+0xe>
    28b0:	cf 01       	movw	r24, r30
    28b2:	08 95       	ret
    28b4:	46 2f       	mov	r20, r22
    28b6:	47 70       	andi	r20, 0x07	; 7
    28b8:	40 5d       	subi	r20, 0xD0	; 208
    28ba:	41 93       	st	Z+, r20
    28bc:	b3 e0       	ldi	r27, 0x03	; 3
    28be:	0f d0       	rcall	.+30     	; 0x28de <__ultoa_invert+0x86>
    28c0:	c9 f7       	brne	.-14     	; 0x28b4 <__ultoa_invert+0x5c>
    28c2:	f6 cf       	rjmp	.-20     	; 0x28b0 <__ultoa_invert+0x58>
    28c4:	46 2f       	mov	r20, r22
    28c6:	4f 70       	andi	r20, 0x0F	; 15
    28c8:	40 5d       	subi	r20, 0xD0	; 208
    28ca:	4a 33       	cpi	r20, 0x3A	; 58
    28cc:	18 f0       	brcs	.+6      	; 0x28d4 <__ultoa_invert+0x7c>
    28ce:	49 5d       	subi	r20, 0xD9	; 217
    28d0:	31 fd       	sbrc	r19, 1
    28d2:	40 52       	subi	r20, 0x20	; 32
    28d4:	41 93       	st	Z+, r20
    28d6:	02 d0       	rcall	.+4      	; 0x28dc <__ultoa_invert+0x84>
    28d8:	a9 f7       	brne	.-22     	; 0x28c4 <__ultoa_invert+0x6c>
    28da:	ea cf       	rjmp	.-44     	; 0x28b0 <__ultoa_invert+0x58>
    28dc:	b4 e0       	ldi	r27, 0x04	; 4
    28de:	a6 95       	lsr	r26
    28e0:	97 95       	ror	r25
    28e2:	87 95       	ror	r24
    28e4:	77 95       	ror	r23
    28e6:	67 95       	ror	r22
    28e8:	ba 95       	dec	r27
    28ea:	c9 f7       	brne	.-14     	; 0x28de <__ultoa_invert+0x86>
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	61 05       	cpc	r22, r1
    28f0:	71 05       	cpc	r23, r1
    28f2:	08 95       	ret
    28f4:	9b 01       	movw	r18, r22
    28f6:	ac 01       	movw	r20, r24
    28f8:	0a 2e       	mov	r0, r26
    28fa:	06 94       	lsr	r0
    28fc:	57 95       	ror	r21
    28fe:	47 95       	ror	r20
    2900:	37 95       	ror	r19
    2902:	27 95       	ror	r18
    2904:	ba 95       	dec	r27
    2906:	c9 f7       	brne	.-14     	; 0x28fa <__ultoa_invert+0xa2>
    2908:	62 0f       	add	r22, r18
    290a:	73 1f       	adc	r23, r19
    290c:	84 1f       	adc	r24, r20
    290e:	95 1f       	adc	r25, r21
    2910:	a0 1d       	adc	r26, r0
    2912:	08 95       	ret

00002914 <_exit>:
    2914:	f8 94       	cli

00002916 <__stop_program>:
    2916:	ff cf       	rjmp	.-2      	; 0x2916 <__stop_program>
